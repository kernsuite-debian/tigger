Description: End of line chars
 This characters appear when switching from Window system
 to a Linux system
 .
 tigger (1.6.0-1kern1) focal; urgency=medium
 .
   [ Athanaseus Javas Ramaila ]
   * New upstream release 1.6.0
   * Build for focal
Author: KERN packaging <packaging@kernsuite.info>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-08-24

--- tigger-1.6.0.orig/.dockerignore
+++ tigger-1.6.0/.dockerignore
@@ -1,9 +1,9 @@
-.git/
-.gitignore
-.idea/
-.vagrant/
-.venv2/
-*.egg-info/
-Dockerfile
-Jenkinsfile.sh
-
+.git/
+.gitignore
+.idea/
+.vagrant/
+.venv2/
+*.egg-info/
+Dockerfile
+Jenkinsfile.sh
+
--- tigger-1.6.0.orig/.github/workflows/installation.yml
+++ tigger-1.6.0/.github/workflows/installation.yml
@@ -1,71 +1,71 @@
-name: Tigger Ubuntu CI
-
-on:
-  push:
-    branches: [ master ]
-  pull_request:
-    branches: [ master ]
-
-jobs:
-  build-2004:
-    runs-on: ubuntu-20.04
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up runner VM
-      run: |
-        sudo apt update
-        sudo apt install xvfb
-    - name: Install Python dependencies
-      run: |
-        pip3 install --upgrade testresources mypy setuptools wheel pip
-        pip3 install flake8 pytest
-    - name: Installation script
-      run: |
-        ./install_tigger_ubuntu.sh
-    - name: Check installer log file
-      run: |
-        cat tigger_installer.log
-    - name: Check installer error log file
-      run: |
-        cat tigger_installer.err
-    - name: Lint with flake8
-      run: |
-        # stop the build if there are Python syntax errors or undefined names
-        flake8 . --count --select=E9,F63,F7,F82,F821 --show-source --statistics
-        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
-        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
-    - name: Test Tigger loads
-      run: |
-        xvfb-run -a $HOME/.local/bin/tigger & sleep 10
-        killall tigger
-  build-1804:
-    runs-on: ubuntu-18.04
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up runner VM
-      run: |
-        sudo apt update
-        sudo apt install xvfb
-    - name: Install Python dependencies
-      run: |
-        pip3 install --upgrade testresources mypy setuptools wheel pip
-        pip3 install flake8 pytest
-    - name: Installation script
-      run: |
-        ./install_tigger_ubuntu.sh
-    - name: Check installer log file
-      run: |
-        cat tigger_installer.log
-    - name: Check installer error log file
-      run: |
-        cat tigger_installer.err
-    - name: Lint with flake8
-      run: |
-        # stop the build if there are Python syntax errors or undefined names
-        flake8 . --count --select=E9,F63,F7,F82,F821 --show-source --statistics
-        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
-        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
-    - name: Test Tigger loads
-      run: |
-        xvfb-run -a $HOME/.local/bin/tigger & sleep 10
-        killall tigger
+name: Tigger Ubuntu CI
+
+on:
+  push:
+    branches: [ master ]
+  pull_request:
+    branches: [ master ]
+
+jobs:
+  build-2004:
+    runs-on: ubuntu-20.04
+    steps:
+    - uses: actions/checkout@v2
+    - name: Set up runner VM
+      run: |
+        sudo apt update
+        sudo apt install xvfb
+    - name: Install Python dependencies
+      run: |
+        pip3 install --upgrade testresources mypy setuptools wheel pip
+        pip3 install flake8 pytest
+    - name: Installation script
+      run: |
+        ./install_tigger_ubuntu.sh
+    - name: Check installer log file
+      run: |
+        cat tigger_installer.log
+    - name: Check installer error log file
+      run: |
+        cat tigger_installer.err
+    - name: Lint with flake8
+      run: |
+        # stop the build if there are Python syntax errors or undefined names
+        flake8 . --count --select=E9,F63,F7,F82,F821 --show-source --statistics
+        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
+        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
+    - name: Test Tigger loads
+      run: |
+        xvfb-run -a $HOME/.local/bin/tigger & sleep 10
+        killall tigger
+  build-1804:
+    runs-on: ubuntu-18.04
+    steps:
+    - uses: actions/checkout@v2
+    - name: Set up runner VM
+      run: |
+        sudo apt update
+        sudo apt install xvfb
+    - name: Install Python dependencies
+      run: |
+        pip3 install --upgrade testresources mypy setuptools wheel pip
+        pip3 install flake8 pytest
+    - name: Installation script
+      run: |
+        ./install_tigger_ubuntu.sh
+    - name: Check installer log file
+      run: |
+        cat tigger_installer.log
+    - name: Check installer error log file
+      run: |
+        cat tigger_installer.err
+    - name: Lint with flake8
+      run: |
+        # stop the build if there are Python syntax errors or undefined names
+        flake8 . --count --select=E9,F63,F7,F82,F821 --show-source --statistics
+        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
+        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
+    - name: Test Tigger loads
+      run: |
+        xvfb-run -a $HOME/.local/bin/tigger & sleep 10
+        killall tigger
--- tigger-1.6.0.orig/.github/workflows/publish.yml
+++ tigger-1.6.0/.github/workflows/publish.yml
@@ -1,28 +1,28 @@
-name: Deploy Python Package
-
-on:
-  release:
-    types: [created]
-
-jobs:
-  deploy:
-
-    runs-on: ubuntu-latest
-
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up Python
-      uses: actions/setup-python@v1
-      with:
-        python-version: '3.x'
-    - name: Install dependencies
-      run: |
-        python -m pip install --upgrade pip
-        pip install setuptools wheel twine
-    - name: Build and publish
-      env:
-        TWINE_USERNAME: __token__
-        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
-      run: |
-        python setup.py sdist bdist_wheel
-        twine upload dist/*
+name: Deploy Python Package
+
+on:
+  release:
+    types: [created]
+
+jobs:
+  deploy:
+
+    runs-on: ubuntu-latest
+
+    steps:
+    - uses: actions/checkout@v2
+    - name: Set up Python
+      uses: actions/setup-python@v1
+      with:
+        python-version: '3.x'
+    - name: Install dependencies
+      run: |
+        python -m pip install --upgrade pip
+        pip install setuptools wheel twine
+    - name: Build and publish
+      env:
+        TWINE_USERNAME: __token__
+        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
+      run: |
+        python setup.py sdist bdist_wheel
+        twine upload dist/*
--- tigger-1.6.0.orig/CHANGELOG.rst
+++ tigger-1.6.0/CHANGELOG.rst
@@ -1,67 +1,67 @@
-================
-Tigger Changelog
-================
-
-1.6.0
-=====
-
-* Version bump in preparation for release
-* Dependent on latest PyQt-Qwt from GitHub
-* Updates to tigger-lsm API calls
-* Fixes bug with window size and dockable widgets
-* Added Ubuntu LTS installation script for 18.04, 20.04 and 21.04
-* Added Tigger application launcher with icon
-* Various bug fixes
-* Various code tidying
-
-1.5.0 beta
-==========
-
-* Ported from PyQt4 and Qwt 5, to PyQt 5 and Qwt 6
-* Now depends on Tigger-LSM v1.7.0
-* Dependent on OS installed PyQt 5 and Qwt 6 related packages
-* Supports Ubuntu 20.04 LTS
-* Support for High DPI displays and scaling
-* Anti-aliasing rendering
-* New dark mode theme
-* New customisable GUI interface
-* Custom QDockWidget (with Qt bug workaround)
-* Dockable, tabbed and floating windows
-* Exported PNG's now calculate maximum image resolution based on free memory resources
-* New option to limit exported PNG images to 4K resolution
-* Various bug fixes
-
-1.3.9
-=====
-
-Changes since 1.3.8:
- 
-* Improve freq0 parsing logic (#84)
-* Install vext.pyqt4 if in virtualenv (#86)
-* Use KERN-2 in Dockerfile
-* Define f0 outside the "if" block #87
-
-1.3.8
-=====
-
-changes since 1.3.7:
- * hack around problem with pkg_resources package bug
-
-
-1.3.5
-=====
-
- * Provide MS list to tigger-convert --app-to-int operation (#69)
- * Tigger incompatible with pyfits>=3.4 (#71)
- * It's given the correct name (install_requires) so that it will actually have an
-   effect on the package manager.
- * PyQt4 is removed from install_requires, since it is not a PyPA-installable package.
-   Instead, a check is added to fail setup if it is not already installed.
- * Added missing scipy and pyfits dependencies.
-
-1.3.3
-=====
-
- * renamed package to astro-tigger to resolve name conflict on pypi
-
-
+================
+Tigger Changelog
+================
+
+1.6.0
+=====
+
+* Version bump in preparation for release
+* Dependent on latest PyQt-Qwt from GitHub
+* Updates to tigger-lsm API calls
+* Fixes bug with window size and dockable widgets
+* Added Ubuntu LTS installation script for 18.04, 20.04 and 21.04
+* Added Tigger application launcher with icon
+* Various bug fixes
+* Various code tidying
+
+1.5.0 beta
+==========
+
+* Ported from PyQt4 and Qwt 5, to PyQt 5 and Qwt 6
+* Now depends on Tigger-LSM v1.7.0
+* Dependent on OS installed PyQt 5 and Qwt 6 related packages
+* Supports Ubuntu 20.04 LTS
+* Support for High DPI displays and scaling
+* Anti-aliasing rendering
+* New dark mode theme
+* New customisable GUI interface
+* Custom QDockWidget (with Qt bug workaround)
+* Dockable, tabbed and floating windows
+* Exported PNG's now calculate maximum image resolution based on free memory resources
+* New option to limit exported PNG images to 4K resolution
+* Various bug fixes
+
+1.3.9
+=====
+
+Changes since 1.3.8:
+ 
+* Improve freq0 parsing logic (#84)
+* Install vext.pyqt4 if in virtualenv (#86)
+* Use KERN-2 in Dockerfile
+* Define f0 outside the "if" block #87
+
+1.3.8
+=====
+
+changes since 1.3.7:
+ * hack around problem with pkg_resources package bug
+
+
+1.3.5
+=====
+
+ * Provide MS list to tigger-convert --app-to-int operation (#69)
+ * Tigger incompatible with pyfits>=3.4 (#71)
+ * It's given the correct name (install_requires) so that it will actually have an
+   effect on the package manager.
+ * PyQt4 is removed from install_requires, since it is not a PyPA-installable package.
+   Instead, a check is added to fail setup if it is not already installed.
+ * Added missing scipy and pyfits dependencies.
+
+1.3.3
+=====
+
+ * renamed package to astro-tigger to resolve name conflict on pypi
+
+
--- tigger-1.6.0.orig/Dockerfile
+++ tigger-1.6.0/Dockerfile
@@ -1,34 +1,34 @@
-FROM kernsuite/base:7
-
-RUN docker-apt-install xvfb python3-pip
-
-ADD . /tmp/tigger
-
-WORKDIR /tmp/tigger
-
-RUN apt update && ./install_tigger_ubuntu.sh -ns -dai
-# basic test to open the gui in a virtual buffer for a few seconds to see if it loads up successfully
-# if fits and catalog loads successfully and no exceptions are raised in timeout number of seconds then we deem 
-# the integration test successful
-ENV Xtimeout=10s
-RUN echo "\n\n*******************************\n Integration Test \n*******************************\n"; \
-    echo "Starting X11 Virtual Frame Buffer and waiting for ${Xtimeout} for Tigger to load and run\n\n" && \
-    xvfb-run --server-args='-screen 0 1024x768x24' \
-    timeout ${Xtimeout} \
-    $(which python3) -u \
-    /root/.local/bin/tigger /tmp/tigger/test-files/cat.gaul /tmp/tigger/test-files/star_model_image.fits > /tmp/tigger.log 2>&1; \
-    (test $? -eq 124 && \
-     cat /tmp/tigger.log && \
-     cat /tmp/tigger.log | grep "Welcome to Tigger" > /dev/null && \
-     cat /tmp/tigger.log | grep "Please wait a second while the GUI starts up" > /dev/null && \
-     cat /tmp/tigger.log | grep "Loaded 17 sources from 'Gaul' file /tmp/tigger/test-files/cat.gaul" > /dev/null && \
-     cat /tmp/tigger.log | grep "Loaded FITS image /tmp/tigger/test-files/star_model_image.fits" > /dev/null && \
-     cat /tmp/tigger.log | grep -v "Exception" > /dev/null && \
-     cat /tmp/tigger.log | grep -v "Error" > /dev/null && \
-     cat /tmp/tigger.log | grep -v "Problem" > /dev/null && \
-     cat /tmp/tigger.log | grep -v "Bug" > /dev/null && \
-     cat /tmp/tigger.log | grep -v "bug" > /dev/null && \
-     echo "\n\nOutput looks ok as far as we can tell" &&\
-     echo "\n\n*******************************\n Integration Test Passed \n*******************************"\
-    ) || (echo "\n\n*******************************\n Integration Test Failed \n*******************************" && exit 1)
-ENTRYPOINT .local/bin/tigger
+FROM kernsuite/base:7
+
+RUN docker-apt-install xvfb python3-pip
+
+ADD . /tmp/tigger
+
+WORKDIR /tmp/tigger
+
+RUN apt update && ./install_tigger_ubuntu.sh -ns -dai
+# basic test to open the gui in a virtual buffer for a few seconds to see if it loads up successfully
+# if fits and catalog loads successfully and no exceptions are raised in timeout number of seconds then we deem 
+# the integration test successful
+ENV Xtimeout=10s
+RUN echo "\n\n*******************************\n Integration Test \n*******************************\n"; \
+    echo "Starting X11 Virtual Frame Buffer and waiting for ${Xtimeout} for Tigger to load and run\n\n" && \
+    xvfb-run --server-args='-screen 0 1024x768x24' \
+    timeout ${Xtimeout} \
+    $(which python3) -u \
+    /root/.local/bin/tigger /tmp/tigger/test-files/cat.gaul /tmp/tigger/test-files/star_model_image.fits > /tmp/tigger.log 2>&1; \
+    (test $? -eq 124 && \
+     cat /tmp/tigger.log && \
+     cat /tmp/tigger.log | grep "Welcome to Tigger" > /dev/null && \
+     cat /tmp/tigger.log | grep "Please wait a second while the GUI starts up" > /dev/null && \
+     cat /tmp/tigger.log | grep "Loaded 17 sources from 'Gaul' file /tmp/tigger/test-files/cat.gaul" > /dev/null && \
+     cat /tmp/tigger.log | grep "Loaded FITS image /tmp/tigger/test-files/star_model_image.fits" > /dev/null && \
+     cat /tmp/tigger.log | grep -v "Exception" > /dev/null && \
+     cat /tmp/tigger.log | grep -v "Error" > /dev/null && \
+     cat /tmp/tigger.log | grep -v "Problem" > /dev/null && \
+     cat /tmp/tigger.log | grep -v "Bug" > /dev/null && \
+     cat /tmp/tigger.log | grep -v "bug" > /dev/null && \
+     echo "\n\nOutput looks ok as far as we can tell" &&\
+     echo "\n\n*******************************\n Integration Test Passed \n*******************************"\
+    ) || (echo "\n\n*******************************\n Integration Test Failed \n*******************************" && exit 1)
+ENTRYPOINT .local/bin/tigger
--- tigger-1.6.0.orig/Jenkinsfile.sh
+++ tigger-1.6.0/Jenkinsfile.sh
@@ -1,7 +1,7 @@
-set -e
-set -u
-WORKSPACE_ROOT="$WORKSPACE/$BUILD_NUMBER"
-
-# build and test
-docker build -f ${WORKSPACE_ROOT}/projects/tigger/Dockerfile -t tigger:${BUILD_NUMBER} ${WORKSPACE_ROOT}/projects/tigger/
-
+set -e
+set -u
+WORKSPACE_ROOT="$WORKSPACE/$BUILD_NUMBER"
+
+# build and test
+docker build -f ${WORKSPACE_ROOT}/projects/tigger/Dockerfile -t tigger:${BUILD_NUMBER} ${WORKSPACE_ROOT}/projects/tigger/
+
--- tigger-1.6.0.orig/Makefile
+++ tigger-1.6.0/Makefile
@@ -1,14 +1,14 @@
-DOCKER_REPO=radioastro/tigger:1.6.0
-
-.PHONY: build clean
-
-all: build
-
-build:
-	docker build -t ${DOCKER_REPO} .
-
-clean:
-	docker rmi ${DOCKER_REPO}
-
-upload: build
-	docker push ${DOCKER_REPO}
+DOCKER_REPO=radioastro/tigger:1.6.0
+
+.PHONY: build clean
+
+all: build
+
+build:
+	docker build -t ${DOCKER_REPO} .
+
+clean:
+	docker rmi ${DOCKER_REPO}
+
+upload: build
+	docker push ${DOCKER_REPO}
--- tigger-1.6.0.orig/README.rst
+++ tigger-1.6.0/README.rst
@@ -1,81 +1,81 @@
-======
-Tigger
-======
-
-.. image:: https://user-images.githubusercontent.com/7116312/113705452-5ac51d00-96d5-11eb-8087-5d2a8ccad99a.png
-
-Installing Tigger
-=================
-
-Ubuntu package
---------------
-
-Enable the KERN repository <https://kernsuite.info> and install the ``tigger`` package.
-
-From source with Ubuntu LTS
----------------------------
-
-Python dependencies
-^^^^^^^^^^^^^^^^^^^
-
-* Tigger-LSM v1.7.0 - if you are not installing Tigger via the KERN repository or using the ``install_tigger_ubuntu.sh`` script provided, please go here <https://github.com/ska-sa/tigger-lsm> and install this first.
-
-Automatically installed Python dependencies:
-
-* numpy
-* scipy
-* astlib
-* astropy
-* configparser
-
-System dependencies
-^^^^^^^^^^^^^^^^^^^
-
-* PyQt 5.14.1 (or 5.15.2)
-* Qwt 6.1.4 (or 6.1.5)
-* PyQt-Qwt 1.9.0 (or greater)
-
-These are already present in most Linux distributions. Please note that, this package **does not** use the version of PyQt 5 that is installable from PyPI. Tigger also uses a version of PyQt-Qwt from GitHub.
-
-Install on Ubuntu LTS with the installation script
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Download the Tigger repository::
-
-    git clone https://github.com/ska-sa/tigger.git
-
-The installation script works on Ubuntu 18.04, 20.04 and 21.04.
-
-Run the installation script and enter ``sudo`` password when prompted::
-
-    ./install_tigger_ubuntu.sh
-
-Manual installation from source
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-After the Tigger repository has been downloaded with ``git clone https://github.com/ska-sa/tigger.git``, please run the following::
-
-    sudo apt -y install python3-pyqt5.qtsvg python3-pyqt5.qtopengl libqwt-qt5-6
-    sudo dpkg -i debian_pkgs/ubuntu_20_04_deb_pkg/python3-pyqt5.qwt_2.00.00-1build1_amd64.deb
-    python3 setup.py install --user
-
-Please note that the above commands are for installing on Ubuntu 20.04, Debian packages for 18.04 and 21.04 are located in the ``ubuntu_18_04_deb_pkg`` and ``ubuntu_21_04_deb_pkg`` directories respectively.
-
-Running Tigger
-==============
-
-Run the installed ``tigger`` binary, or search for ``tigger`` from Ubuntu's 'Show Applications' icon in the dock (after logging off and on again).
-
-Questions or problems
-=====================
-
-Open an issue on github
-
-https://github.com/ska-sa/tigger
-
-
-Travis
-======
-
-.. image:: https://travis-ci.org/ska-sa/tigger.svg?branch=master
-    :target: https://travis-ci.org/ska-sa/tigger
+======
+Tigger
+======
+
+.. image:: https://user-images.githubusercontent.com/7116312/113705452-5ac51d00-96d5-11eb-8087-5d2a8ccad99a.png
+
+Installing Tigger
+=================
+
+Ubuntu package
+--------------
+
+Enable the KERN repository <https://kernsuite.info> and install the ``tigger`` package.
+
+From source with Ubuntu LTS
+---------------------------
+
+Python dependencies
+^^^^^^^^^^^^^^^^^^^
+
+* Tigger-LSM v1.7.0 - if you are not installing Tigger via the KERN repository or using the ``install_tigger_ubuntu.sh`` script provided, please go here <https://github.com/ska-sa/tigger-lsm> and install this first.
+
+Automatically installed Python dependencies:
+
+* numpy
+* scipy
+* astlib
+* astropy
+* configparser
+
+System dependencies
+^^^^^^^^^^^^^^^^^^^
+
+* PyQt 5.14.1 (or 5.15.2)
+* Qwt 6.1.4 (or 6.1.5)
+* PyQt-Qwt 1.9.0 (or greater)
+
+These are already present in most Linux distributions. Please note that, this package **does not** use the version of PyQt 5 that is installable from PyPI. Tigger also uses a version of PyQt-Qwt from GitHub.
+
+Install on Ubuntu LTS with the installation script
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Download the Tigger repository::
+
+    git clone https://github.com/ska-sa/tigger.git
+
+The installation script works on Ubuntu 18.04, 20.04 and 21.04.
+
+Run the installation script and enter ``sudo`` password when prompted::
+
+    ./install_tigger_ubuntu.sh
+
+Manual installation from source
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+After the Tigger repository has been downloaded with ``git clone https://github.com/ska-sa/tigger.git``, please run the following::
+
+    sudo apt -y install python3-pyqt5.qtsvg python3-pyqt5.qtopengl libqwt-qt5-6
+    sudo dpkg -i debian_pkgs/ubuntu_20_04_deb_pkg/python3-pyqt5.qwt_2.00.00-1build1_amd64.deb
+    python3 setup.py install --user
+
+Please note that the above commands are for installing on Ubuntu 20.04, Debian packages for 18.04 and 21.04 are located in the ``ubuntu_18_04_deb_pkg`` and ``ubuntu_21_04_deb_pkg`` directories respectively.
+
+Running Tigger
+==============
+
+Run the installed ``tigger`` binary, or search for ``tigger`` from Ubuntu's 'Show Applications' icon in the dock (after logging off and on again).
+
+Questions or problems
+=====================
+
+Open an issue on github
+
+https://github.com/ska-sa/tigger
+
+
+Travis
+======
+
+.. image:: https://travis-ci.org/ska-sa/tigger.svg?branch=master
+    :target: https://travis-ci.org/ska-sa/tigger
--- tigger-1.6.0.orig/TigGUI/AboutDialog.py
+++ tigger-1.6.0/TigGUI/AboutDialog.py
@@ -1,100 +1,100 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from PyQt5.Qt import QWidget, QHBoxLayout, QLabel, QDialog, QVBoxLayout, \
-    QPushButton, Qt, QSize, QSizePolicy, QSpacerItem
-from PyQt5.QtWidgets import *
-
-from TigGUI import release_string
-from TigGUI.init import pixmaps
-
-
-class AboutDialog(QDialog):
-    def __init__(self, parent=None, name=None, modal=0, fl=None):
-        if fl is None:
-            fl = Qt.Dialog | Qt.WindowTitleHint
-        QDialog.__init__(self, parent, Qt.Dialog | Qt.WindowTitleHint)
-        self.setModal(modal)
-
-        image0 = pixmaps.tigger_logo.pm()
-
-        # self.setSizeGripEnabled(0)
-        LayoutWidget = QWidget(self)
-        LayoutWidget.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.MinimumExpanding)
-
-        lo_top = QVBoxLayout(LayoutWidget)
-
-        lo_title = QHBoxLayout(None)
-
-        self.title_icon = QLabel(LayoutWidget)
-        self.title_icon.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
-        self.title_icon.setPixmap(image0)
-        self.title_icon.setAlignment(Qt.AlignCenter)
-        lo_title.addWidget(self.title_icon)
-
-        self.title_label = QLabel(LayoutWidget)
-        self.title_label.setWordWrap(True)
-        lo_title.addWidget(self.title_label)
-        lo_top.addLayout(lo_title)
-
-        lo_logos = QHBoxLayout(None)
-        lo_top.addLayout(lo_logos)
-        # for logo in ("astron",):
-        #   icon = QLabel(LayoutWidget)
-        #   icon.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Fixed)
-        #   icon.setPixmap(getattr(pixmaps,logo+"_logo").pm())
-        #   icon.setAlignment(Qt.AlignCenter)
-        #   lo_logos.addWidget(icon)
-
-        lo_mainbtn = QHBoxLayout(None)
-        lo_mainbtn.addItem(QSpacerItem(20, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))
-        lo_top.addLayout(lo_mainbtn)
-
-        self.btn_ok = QPushButton(LayoutWidget)
-        self.btn_ok.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
-        self.btn_ok.setMinimumSize(QSize(60, 0))
-        self.btn_ok.setAutoDefault(1)
-        self.btn_ok.setDefault(1)
-        lo_mainbtn.addWidget(self.btn_ok)
-        lo_mainbtn.addItem(QSpacerItem(20, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))
-
-        self.languageChange()
-
-        LayoutWidget.adjustSize()
-
-        # LayoutWidget.resize(QSize(489,330).expandedTo(LayoutWidget.minimumSizeHint()))
-        # self.resize(QSize(489,330).expandedTo(self.minimumSizeHint()))
-        # self.clearWState(Qt.WState_Polished)
-
-        self.btn_ok.clicked.connect(self.accept)
-
-    def languageChange(self):
-        self.setWindowTitle(self.__tr("About Tigger"))
-        self.title_label.setText(self.__tr( \
-            """<h3>Tigger %s</h3>
-            <p>\u00a92010-2021 Oleg Smirnov & Rhodes University & SKA SA<br>
-            <br>Please direct feedback and bug reports at https://github.com/ska-sa/tigger</p>
-            """ % (release_string) \
-            ))
-
-        self.btn_ok.setText(self.__tr("&OK"))
-
-    def __tr(self, s, c=None):
-        return QApplication.translate("About", s, c)
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from PyQt5.Qt import QWidget, QHBoxLayout, QLabel, QDialog, QVBoxLayout, \
+    QPushButton, Qt, QSize, QSizePolicy, QSpacerItem
+from PyQt5.QtWidgets import *
+
+from TigGUI import release_string
+from TigGUI.init import pixmaps
+
+
+class AboutDialog(QDialog):
+    def __init__(self, parent=None, name=None, modal=0, fl=None):
+        if fl is None:
+            fl = Qt.Dialog | Qt.WindowTitleHint
+        QDialog.__init__(self, parent, Qt.Dialog | Qt.WindowTitleHint)
+        self.setModal(modal)
+
+        image0 = pixmaps.tigger_logo.pm()
+
+        # self.setSizeGripEnabled(0)
+        LayoutWidget = QWidget(self)
+        LayoutWidget.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.MinimumExpanding)
+
+        lo_top = QVBoxLayout(LayoutWidget)
+
+        lo_title = QHBoxLayout(None)
+
+        self.title_icon = QLabel(LayoutWidget)
+        self.title_icon.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
+        self.title_icon.setPixmap(image0)
+        self.title_icon.setAlignment(Qt.AlignCenter)
+        lo_title.addWidget(self.title_icon)
+
+        self.title_label = QLabel(LayoutWidget)
+        self.title_label.setWordWrap(True)
+        lo_title.addWidget(self.title_label)
+        lo_top.addLayout(lo_title)
+
+        lo_logos = QHBoxLayout(None)
+        lo_top.addLayout(lo_logos)
+        # for logo in ("astron",):
+        #   icon = QLabel(LayoutWidget)
+        #   icon.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Fixed)
+        #   icon.setPixmap(getattr(pixmaps,logo+"_logo").pm())
+        #   icon.setAlignment(Qt.AlignCenter)
+        #   lo_logos.addWidget(icon)
+
+        lo_mainbtn = QHBoxLayout(None)
+        lo_mainbtn.addItem(QSpacerItem(20, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))
+        lo_top.addLayout(lo_mainbtn)
+
+        self.btn_ok = QPushButton(LayoutWidget)
+        self.btn_ok.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
+        self.btn_ok.setMinimumSize(QSize(60, 0))
+        self.btn_ok.setAutoDefault(1)
+        self.btn_ok.setDefault(1)
+        lo_mainbtn.addWidget(self.btn_ok)
+        lo_mainbtn.addItem(QSpacerItem(20, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))
+
+        self.languageChange()
+
+        LayoutWidget.adjustSize()
+
+        # LayoutWidget.resize(QSize(489,330).expandedTo(LayoutWidget.minimumSizeHint()))
+        # self.resize(QSize(489,330).expandedTo(self.minimumSizeHint()))
+        # self.clearWState(Qt.WState_Polished)
+
+        self.btn_ok.clicked.connect(self.accept)
+
+    def languageChange(self):
+        self.setWindowTitle(self.__tr("About Tigger"))
+        self.title_label.setText(self.__tr( \
+            """<h3>Tigger %s</h3>
+            <p>\u00a92010-2021 Oleg Smirnov & Rhodes University & SKA SA<br>
+            <br>Please direct feedback and bug reports at https://github.com/ska-sa/tigger</p>
+            """ % (release_string) \
+            ))
+
+        self.btn_ok.setText(self.__tr("&OK"))
+
+    def __tr(self, s, c=None):
+        return QApplication.translate("About", s, c)
--- tigger-1.6.0.orig/TigGUI/Images/ColormapTables/Karma.py
+++ tigger-1.6.0/TigGUI/Images/ColormapTables/Karma.py
@@ -1,2277 +1,2277 @@
-Background = [
-    [0.00000, 0.00000, 0.00000], [0.01587, 0.01587, 0.01587], [0.03174,
-    0.03174, 0.03174], [0.04761, 0.04761, 0.04761], [0.06348, 0.06348,
-    0.06348], [0.07935, 0.07935, 0.07935], [0.09522, 0.09522, 0.09522],
-    [0.11109, 0.11109, 0.11109], [0.12696, 0.12696, 0.12696], [0.14283,
-    0.14283, 0.14283], [0.15870, 0.15870, 0.15870], [0.17457, 0.17457,
-    0.17457], [0.19044, 0.19044, 0.19044], [0.20631, 0.20631, 0.20631],
-    [0.22218, 0.22218, 0.22218], [0.23805, 0.23805, 0.23805], [0.25392,
-    0.25392, 0.25392], [0.26979, 0.26979, 0.26979], [0.28566, 0.28566,
-    0.28566], [0.30153, 0.30153, 0.30153], [0.31740, 0.31740, 0.31740],
-    [0.33327, 0.33327, 0.33327], [0.34914, 0.34914, 0.34914], [0.36501,
-    0.36501, 0.36501], [0.38088, 0.38088, 0.38088], [0.39675, 0.39675,
-    0.39675], [0.41262, 0.41262, 0.41262], [0.42849, 0.42849, 0.42849],
-    [0.44436, 0.44436, 0.44436], [0.46023, 0.46023, 0.46023], [0.47610,
-    0.47610, 0.47610], [0.49197, 0.49197, 0.49197], [0.50784, 0.50784,
-    0.50784], [0.52371, 0.52371, 0.52371], [0.53958, 0.53958, 0.53958],
-    [0.55545, 0.55545, 0.55545], [0.57132, 0.57132, 0.57132], [0.58719,
-    0.58719, 0.58719], [0.60306, 0.60306, 0.60306], [0.61893, 0.61893,
-    0.61893], [0.63480, 0.63480, 0.63480], [0.65067, 0.65067, 0.65067],
-    [0.66654, 0.66654, 0.66654], [0.68241, 0.68241, 0.68241], [0.69828,
-    0.69828, 0.69828], [0.71415, 0.71415, 0.71415], [0.73002, 0.73002,
-    0.73002], [0.74589, 0.74589, 0.74589], [0.76176, 0.76176, 0.76176],
-    [0.77763, 0.77763, 0.77763], [0.79350, 0.79350, 0.79350], [0.80937,
-    0.80937, 0.80937], [0.82524, 0.82524, 0.82524], [0.84111, 0.84111,
-    0.84111], [0.85698, 0.85698, 0.85698], [0.87285, 0.87285, 0.87285],
-    [0.88872, 0.88872, 0.88872], [0.90459, 0.90459, 0.90459], [0.92046,
-    0.92046, 0.92046], [0.93633, 0.93633, 0.93633], [0.95220, 0.95220,
-    0.95220], [0.96807, 0.96807, 0.96807], [0.98394, 0.98394, 0.98394],
-    [0.99981, 0.99981, 0.99981], [0.00000, 0.00000, 0.99981], [0.00000,
-    0.01587, 0.98394], [0.00000, 0.03174, 0.96807], [0.00000, 0.04761,
-    0.95220], [0.00000, 0.06348, 0.93633], [0.00000, 0.07935, 0.92046],
-    [0.00000, 0.09522, 0.90459], [0.00000, 0.11109, 0.88872], [0.00000,
-    0.12696, 0.87285], [0.00000, 0.14283, 0.85698], [0.00000, 0.15870,
-    0.84111], [0.00000, 0.17457, 0.82524], [0.00000, 0.19044, 0.80937],
-    [0.00000, 0.20631, 0.79350], [0.00000, 0.22218, 0.77763], [0.00000,
-    0.23805, 0.76176], [0.00000, 0.25392, 0.74589], [0.00000, 0.26979,
-    0.73002], [0.00000, 0.28566, 0.71415], [0.00000, 0.30153, 0.69828],
-    [0.00000, 0.31740, 0.68241], [0.00000, 0.33327, 0.66654], [0.00000,
-    0.34914, 0.65067], [0.00000, 0.36501, 0.63480], [0.00000, 0.38088,
-    0.61893], [0.00000, 0.39675, 0.60306], [0.00000, 0.41262, 0.58719],
-    [0.00000, 0.42849, 0.57132], [0.00000, 0.44436, 0.55545], [0.00000,
-    0.46023, 0.53958], [0.00000, 0.47610, 0.52371], [0.00000, 0.49197,
-    0.50784], [0.00000, 0.50784, 0.49197], [0.00000, 0.52371, 0.47610],
-    [0.00000, 0.53958, 0.46023], [0.00000, 0.55545, 0.44436], [0.00000,
-    0.57132, 0.42849], [0.00000, 0.58719, 0.41262], [0.00000, 0.60306,
-    0.39675], [0.00000, 0.61893, 0.38088], [0.00000, 0.63480, 0.36501],
-    [0.00000, 0.65067, 0.34914], [0.00000, 0.66654, 0.33327], [0.00000,
-    0.68241, 0.31740], [0.00000, 0.69828, 0.30153], [0.00000, 0.71415,
-    0.28566], [0.00000, 0.73002, 0.26979], [0.00000, 0.74589, 0.25392],
-    [0.00000, 0.76176, 0.23805], [0.00000, 0.77763, 0.22218], [0.00000,
-    0.79350, 0.20631], [0.00000, 0.80937, 0.19044], [0.00000, 0.82524,
-    0.17457], [0.00000, 0.84111, 0.15870], [0.00000, 0.85698, 0.14283],
-    [0.00000, 0.87285, 0.12696], [0.00000, 0.88872, 0.11109], [0.00000,
-    0.90459, 0.09522], [0.00000, 0.92046, 0.07935], [0.00000, 0.93633,
-    0.06348], [0.00000, 0.95220, 0.04761], [0.00000, 0.96807, 0.03174],
-    [0.00000, 0.98394, 0.01587], [0.00000, 0.99981, 0.00000], [0.00000,
-    1.00000, 0.00000], [0.01587, 1.00000, 0.00000], [0.03174, 1.00000,
-    0.00000], [0.04761, 1.00000, 0.00000], [0.06348, 1.00000, 0.00000],
-    [0.07935, 1.00000, 0.00000], [0.09522, 1.00000, 0.00000], [0.11109,
-    1.00000, 0.00000], [0.12696, 1.00000, 0.00000], [0.14283, 1.00000,
-    0.00000], [0.15870, 1.00000, 0.00000], [0.17457, 1.00000, 0.00000],
-    [0.19044, 1.00000, 0.00000], [0.20631, 1.00000, 0.00000], [0.22218,
-    1.00000, 0.00000], [0.23805, 1.00000, 0.00000], [0.25392, 1.00000,
-    0.00000], [0.26979, 1.00000, 0.00000], [0.28566, 1.00000, 0.00000],
-    [0.30153, 1.00000, 0.00000], [0.31740, 1.00000, 0.00000], [0.33327,
-    1.00000, 0.00000], [0.34914, 1.00000, 0.00000], [0.36501, 1.00000,
-    0.00000], [0.38088, 1.00000, 0.00000], [0.39675, 1.00000, 0.00000],
-    [0.41262, 1.00000, 0.00000], [0.42849, 1.00000, 0.00000], [0.44436,
-    1.00000, 0.00000], [0.46023, 1.00000, 0.00000], [0.47610, 1.00000,
-    0.00000], [0.49197, 1.00000, 0.00000], [0.50784, 1.00000, 0.00000],
-    [0.52371, 1.00000, 0.00000], [0.53958, 1.00000, 0.00000], [0.55545,
-    1.00000, 0.00000], [0.57132, 1.00000, 0.00000], [0.58719, 1.00000,
-    0.00000], [0.60306, 1.00000, 0.00000], [0.61893, 1.00000, 0.00000],
-    [0.63480, 1.00000, 0.00000], [0.65067, 1.00000, 0.00000], [0.66654,
-    1.00000, 0.00000], [0.68241, 1.00000, 0.00000], [0.69828, 1.00000,
-    0.00000], [0.71415, 1.00000, 0.00000], [0.73002, 1.00000, 0.00000],
-    [0.74589, 1.00000, 0.00000], [0.76176, 1.00000, 0.00000], [0.77763,
-    1.00000, 0.00000], [0.79350, 1.00000, 0.00000], [0.80937, 1.00000,
-    0.00000], [0.82524, 1.00000, 0.00000], [0.84111, 1.00000, 0.00000],
-    [0.85698, 1.00000, 0.00000], [0.87285, 1.00000, 0.00000], [0.88872,
-    1.00000, 0.00000], [0.90459, 1.00000, 0.00000], [0.92046, 1.00000,
-    0.00000], [0.93633, 1.00000, 0.00000], [0.95220, 1.00000, 0.00000],
-    [0.96807, 1.00000, 0.00000], [0.98394, 1.00000, 0.00000], [0.99981,
-    1.00000, 0.00000], [1.00000, 0.99981, 0.00000], [1.00000, 0.98394,
-    0.00000], [1.00000, 0.96807, 0.00000], [1.00000, 0.95220, 0.00000],
-    [1.00000, 0.93633, 0.00000], [1.00000, 0.92046, 0.00000], [1.00000,
-    0.90459, 0.00000], [1.00000, 0.88872, 0.00000], [1.00000, 0.87285,
-    0.00000], [1.00000, 0.85698, 0.00000], [1.00000, 0.84111, 0.00000],
-    [1.00000, 0.82524, 0.00000], [1.00000, 0.80937, 0.00000], [1.00000,
-    0.79350, 0.00000], [1.00000, 0.77763, 0.00000], [1.00000, 0.76176,
-    0.00000], [1.00000, 0.74589, 0.00000], [1.00000, 0.73002, 0.00000],
-    [1.00000, 0.71415, 0.00000], [1.00000, 0.69828, 0.00000], [1.00000,
-    0.68241, 0.00000], [1.00000, 0.66654, 0.00000], [1.00000, 0.65067,
-    0.00000], [1.00000, 0.63480, 0.00000], [1.00000, 0.61893, 0.00000],
-    [1.00000, 0.60306, 0.00000], [1.00000, 0.58719, 0.00000], [1.00000,
-    0.57132, 0.00000], [1.00000, 0.55545, 0.00000], [1.00000, 0.53958,
-    0.00000], [1.00000, 0.52371, 0.00000], [1.00000, 0.50784, 0.00000],
-    [1.00000, 0.49197, 0.00000], [1.00000, 0.47610, 0.00000], [1.00000,
-    0.46023, 0.00000], [1.00000, 0.44436, 0.00000], [1.00000, 0.42849,
-    0.00000], [1.00000, 0.41262, 0.00000], [1.00000, 0.39675, 0.00000],
-    [1.00000, 0.38088, 0.00000], [1.00000, 0.36501, 0.00000], [1.00000,
-    0.34914, 0.00000], [1.00000, 0.33327, 0.00000], [1.00000, 0.31740,
-    0.00000], [1.00000, 0.30153, 0.00000], [1.00000, 0.28566, 0.00000],
-    [1.00000, 0.26979, 0.00000], [1.00000, 0.25392, 0.00000], [1.00000,
-    0.23805, 0.00000], [1.00000, 0.22218, 0.00000], [1.00000, 0.20631,
-    0.00000], [1.00000, 0.19044, 0.00000], [1.00000, 0.17457, 0.00000],
-    [1.00000, 0.15870, 0.00000], [1.00000, 0.14283, 0.00000], [1.00000,
-    0.12696, 0.00000], [1.00000, 0.11109, 0.00000], [1.00000, 0.09522,
-    0.00000], [1.00000, 0.07935, 0.00000], [1.00000, 0.06348, 0.00000],
-    [1.00000, 0.04761, 0.00000], [1.00000, 0.03174, 0.00000], [1.00000,
-    0.01587, 0.00000], [1.00000, 0.00000, 0.00000], ]
-
-Heat = [
-    [0.00000, 0.00000, 0.00000], [0.01176, 0.00392, 0.00000], [0.02353,
-    0.00784, 0.00000], [0.03529, 0.01176, 0.00000], [0.04706, 0.01569,
-    0.00000], [0.05882, 0.01961, 0.00000], [0.07059, 0.02353, 0.00000],
-    [0.08235, 0.02745, 0.00000], [0.09412, 0.03137, 0.00000], [0.10588,
-    0.03529, 0.00000], [0.11765, 0.03922, 0.00000], [0.12941, 0.04314,
-    0.00000], [0.14118, 0.04706, 0.00000], [0.15294, 0.05098, 0.00000],
-    [0.16471, 0.05490, 0.00000], [0.17647, 0.05882, 0.00000], [0.18824,
-    0.06275, 0.00000], [0.20000, 0.06667, 0.00000], [0.21176, 0.07059,
-    0.00000], [0.22353, 0.07451, 0.00000], [0.23529, 0.07843, 0.00000],
-    [0.24706, 0.08235, 0.00000], [0.25882, 0.08627, 0.00000], [0.27059,
-    0.09020, 0.00000], [0.28235, 0.09412, 0.00000], [0.29412, 0.09804,
-    0.00000], [0.30588, 0.10196, 0.00000], [0.31765, 0.10588, 0.00000],
-    [0.32941, 0.10980, 0.00000], [0.34118, 0.11373, 0.00000], [0.35294,
-    0.11765, 0.00000], [0.36471, 0.12157, 0.00000], [0.37647, 0.12549,
-    0.00000], [0.38824, 0.12941, 0.00000], [0.40000, 0.13333, 0.00000],
-    [0.41176, 0.13725, 0.00000], [0.42353, 0.14118, 0.00000], [0.43529,
-    0.14510, 0.00000], [0.44706, 0.14902, 0.00000], [0.45882, 0.15294,
-    0.00000], [0.47059, 0.15686, 0.00000], [0.48235, 0.16078, 0.00000],
-    [0.49412, 0.16471, 0.00000], [0.50588, 0.16863, 0.00000], [0.51765,
-    0.17255, 0.00000], [0.52941, 0.17647, 0.00000], [0.54118, 0.18039,
-    0.00000], [0.55294, 0.18431, 0.00000], [0.56471, 0.18824, 0.00000],
-    [0.57647, 0.19216, 0.00000], [0.58824, 0.19608, 0.00000], [0.60000,
-    0.20000, 0.00000], [0.61176, 0.20392, 0.00000], [0.62353, 0.20784,
-    0.00000], [0.63529, 0.21176, 0.00000], [0.64706, 0.21569, 0.00000],
-    [0.65882, 0.21961, 0.00000], [0.67059, 0.22353, 0.00000], [0.68235,
-    0.22745, 0.00000], [0.69412, 0.23137, 0.00000], [0.70588, 0.23529,
-    0.00000], [0.71765, 0.23922, 0.00000], [0.72941, 0.24314, 0.00000],
-    [0.74118, 0.24706, 0.00000], [0.75294, 0.25098, 0.00000], [0.76471,
-    0.25490, 0.00000], [0.77647, 0.25882, 0.00000], [0.78824, 0.26275,
-    0.00000], [0.80000, 0.26667, 0.00000], [0.81176, 0.27059, 0.00000],
-    [0.82353, 0.27451, 0.00000], [0.83529, 0.27843, 0.00000], [0.84706,
-    0.28235, 0.00000], [0.85882, 0.28627, 0.00000], [0.87059, 0.29020,
-    0.00000], [0.88235, 0.29412, 0.00000], [0.89412, 0.29804, 0.00000],
-    [0.90588, 0.30196, 0.00000], [0.91765, 0.30588, 0.00000], [0.92941,
-    0.30980, 0.00000], [0.94118, 0.31373, 0.00000], [0.95294, 0.31765,
-    0.00000], [0.96471, 0.32157, 0.00000], [0.97647, 0.32549, 0.00000],
-    [0.98824, 0.32941, 0.00000], [1.00000, 0.33333, 0.00000], [1.00000,
-    0.33725, 0.00000], [1.00000, 0.34118, 0.00000], [1.00000, 0.34510,
-    0.00000], [1.00000, 0.34902, 0.00000], [1.00000, 0.35294, 0.00000],
-    [1.00000, 0.35686, 0.00000], [1.00000, 0.36078, 0.00000], [1.00000,
-    0.36471, 0.00000], [1.00000, 0.36863, 0.00000], [1.00000, 0.37255,
-    0.00000], [1.00000, 0.37647, 0.00000], [1.00000, 0.38039, 0.00000],
-    [1.00000, 0.38431, 0.00000], [1.00000, 0.38824, 0.00000], [1.00000,
-    0.39216, 0.00000], [1.00000, 0.39608, 0.00000], [1.00000, 0.40000,
-    0.00000], [1.00000, 0.40392, 0.00000], [1.00000, 0.40784, 0.00000],
-    [1.00000, 0.41176, 0.00000], [1.00000, 0.41569, 0.00000], [1.00000,
-    0.41961, 0.00000], [1.00000, 0.42353, 0.00000], [1.00000, 0.42745,
-    0.00000], [1.00000, 0.43137, 0.00000], [1.00000, 0.43529, 0.00000],
-    [1.00000, 0.43922, 0.00000], [1.00000, 0.44314, 0.00000], [1.00000,
-    0.44706, 0.00000], [1.00000, 0.45098, 0.00000], [1.00000, 0.45490,
-    0.00000], [1.00000, 0.45882, 0.00000], [1.00000, 0.46275, 0.00000],
-    [1.00000, 0.46667, 0.00000], [1.00000, 0.47059, 0.00000], [1.00000,
-    0.47451, 0.00000], [1.00000, 0.47843, 0.00000], [1.00000, 0.48235,
-    0.00000], [1.00000, 0.48627, 0.00000], [1.00000, 0.49020, 0.00000],
-    [1.00000, 0.49412, 0.00000], [1.00000, 0.49804, 0.00000], [1.00000,
-    0.50196, 0.00000], [1.00000, 0.50588, 0.00000], [1.00000, 0.50980,
-    0.00000], [1.00000, 0.51373, 0.00000], [1.00000, 0.51765, 0.00000],
-    [1.00000, 0.52157, 0.00000], [1.00000, 0.52549, 0.00000], [1.00000,
-    0.52941, 0.00000], [1.00000, 0.53333, 0.00000], [1.00000, 0.53725,
-    0.00000], [1.00000, 0.54118, 0.00000], [1.00000, 0.54510, 0.00000],
-    [1.00000, 0.54902, 0.00000], [1.00000, 0.55294, 0.00000], [1.00000,
-    0.55686, 0.00000], [1.00000, 0.56078, 0.00000], [1.00000, 0.56471,
-    0.00000], [1.00000, 0.56863, 0.00000], [1.00000, 0.57255, 0.00000],
-    [1.00000, 0.57647, 0.00000], [1.00000, 0.58039, 0.00000], [1.00000,
-    0.58431, 0.00000], [1.00000, 0.58824, 0.00000], [1.00000, 0.59216,
-    0.00000], [1.00000, 0.59608, 0.00000], [1.00000, 0.60000, 0.00000],
-    [1.00000, 0.60392, 0.00000], [1.00000, 0.60784, 0.00000], [1.00000,
-    0.61176, 0.00000], [1.00000, 0.61569, 0.00000], [1.00000, 0.61961,
-    0.00000], [1.00000, 0.62353, 0.00000], [1.00000, 0.62745, 0.00000],
-    [1.00000, 0.63137, 0.00000], [1.00000, 0.63529, 0.00000], [1.00000,
-    0.63922, 0.00000], [1.00000, 0.64314, 0.00000], [1.00000, 0.64706,
-    0.00000], [1.00000, 0.65098, 0.01176], [1.00000, 0.65490, 0.02353],
-    [1.00000, 0.65882, 0.03529], [1.00000, 0.66275, 0.04706], [1.00000,
-    0.66667, 0.05882], [1.00000, 0.67059, 0.07059], [1.00000, 0.67451,
-    0.08235], [1.00000, 0.67843, 0.09412], [1.00000, 0.68235, 0.10588],
-    [1.00000, 0.68627, 0.11765], [1.00000, 0.69020, 0.12941], [1.00000,
-    0.69412, 0.14118], [1.00000, 0.69804, 0.15294], [1.00000, 0.70196,
-    0.16471], [1.00000, 0.70588, 0.17647], [1.00000, 0.70980, 0.18824],
-    [1.00000, 0.71373, 0.20000], [1.00000, 0.71765, 0.21176], [1.00000,
-    0.72157, 0.22353], [1.00000, 0.72549, 0.23529], [1.00000, 0.72941,
-    0.24706], [1.00000, 0.73333, 0.25882], [1.00000, 0.73725, 0.27059],
-    [1.00000, 0.74118, 0.28235], [1.00000, 0.74510, 0.29412], [1.00000,
-    0.74902, 0.30588], [1.00000, 0.75294, 0.31765], [1.00000, 0.75686,
-    0.32941], [1.00000, 0.76078, 0.34118], [1.00000, 0.76471, 0.35294],
-    [1.00000, 0.76863, 0.36471], [1.00000, 0.77255, 0.37647], [1.00000,
-    0.77647, 0.38824], [1.00000, 0.78039, 0.40000], [1.00000, 0.78431,
-    0.41176], [1.00000, 0.78824, 0.42353], [1.00000, 0.79216, 0.43529],
-    [1.00000, 0.79608, 0.44706], [1.00000, 0.80000, 0.45882], [1.00000,
-    0.80392, 0.47059], [1.00000, 0.80784, 0.48235], [1.00000, 0.81176,
-    0.49412], [1.00000, 0.81569, 0.50588], [1.00000, 0.81961, 0.51765],
-    [1.00000, 0.82353, 0.52941], [1.00000, 0.82745, 0.54118], [1.00000,
-    0.83137, 0.55294], [1.00000, 0.83529, 0.56471], [1.00000, 0.83922,
-    0.57647], [1.00000, 0.84314, 0.58824], [1.00000, 0.84706, 0.60000],
-    [1.00000, 0.85098, 0.61176], [1.00000, 0.85490, 0.62353], [1.00000,
-    0.85882, 0.63529], [1.00000, 0.86275, 0.64706], [1.00000, 0.86667,
-    0.65882], [1.00000, 0.87059, 0.67059], [1.00000, 0.87451, 0.68235],
-    [1.00000, 0.87843, 0.69412], [1.00000, 0.88235, 0.70588], [1.00000,
-    0.88627, 0.71765], [1.00000, 0.89020, 0.72941], [1.00000, 0.89412,
-    0.74118], [1.00000, 0.89804, 0.75294], [1.00000, 0.90196, 0.76471],
-    [1.00000, 0.90588, 0.77647], [1.00000, 0.90980, 0.78824], [1.00000,
-    0.91373, 0.80000], [1.00000, 0.91765, 0.81176], [1.00000, 0.92157,
-    0.82353], [1.00000, 0.92549, 0.83529], [1.00000, 0.92941, 0.84706],
-    [1.00000, 0.93333, 0.85882], [1.00000, 0.93725, 0.87059], [1.00000,
-    0.94118, 0.88235], [1.00000, 0.94510, 0.89412], [1.00000, 0.94902,
-    0.90588], [1.00000, 0.95294, 0.91765], [1.00000, 0.95686, 0.92941],
-    [1.00000, 0.96078, 0.94118], [1.00000, 0.96471, 0.95294], [1.00000,
-    0.96863, 0.96471], [1.00000, 0.97255, 0.97647], [1.00000, 0.97647,
-    0.98824], [1.00000, 0.98039, 1.00000], [1.00000, 0.98431, 1.00000],
-    [1.00000, 0.98824, 1.00000], [1.00000, 0.99216, 1.00000], [1.00000,
-    0.99608, 1.00000], [1.00000, 1.00000, 1.00000], ]
-
-Isophot = [
-    [0.00000, 0.00000, 0.00000], [0.00000, 0.00000, 0.00000], [0.00000,
-    0.00000, 0.00000], [0.00000, 0.00000, 0.00000], [0.00000, 0.00000,
-    0.00000], [0.00000, 0.00000, 0.03922], [0.00000, 0.00000, 0.07843],
-    [0.00000, 0.00000, 0.11765], [0.00000, 0.00000, 0.15686], [0.00000,
-    0.00000, 0.19608], [0.00000, 0.00000, 0.23529], [0.00000, 0.00000,
-    0.27843], [0.00000, 0.00000, 0.31765], [0.00000, 0.00000, 0.35686],
-    [0.00000, 0.00000, 0.39608], [0.00000, 0.00000, 0.43529], [0.00000,
-    0.00000, 0.47451], [0.00000, 0.00000, 0.51765], [0.00000, 0.00000,
-    0.55686], [0.00000, 0.00000, 0.59608], [0.00000, 0.00000, 0.63529],
-    [0.00000, 0.00000, 0.67451], [0.00000, 0.00000, 0.71765], [1.00000,
-    1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000,
-    1.00000], [0.00000, 0.00000, 0.87843], [0.00000, 0.00000, 0.91765],
-    [0.00000, 0.00000, 0.95686], [0.00000, 0.00000, 1.00000], [0.00000,
-    0.03137, 1.00000], [0.00000, 0.06275, 1.00000], [0.00000, 0.09412,
-    1.00000], [0.00000, 0.12549, 1.00000], [0.00000, 0.15686, 1.00000],
-    [0.00000, 0.18824, 1.00000], [0.00000, 0.21961, 1.00000], [0.00000,
-    0.25490, 1.00000], [0.00000, 0.28627, 1.00000], [0.00000, 0.31765,
-    1.00000], [0.00000, 0.34902, 1.00000], [0.00000, 0.38039, 1.00000],
-    [0.00000, 0.41176, 1.00000], [0.00000, 0.44314, 1.00000], [0.00000,
-    0.47843, 1.00000], [0.00000, 0.49804, 1.00000], [0.00000, 0.51765,
-    1.00000], [0.00000, 0.53725, 1.00000], [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [0.00000,
-    0.61961, 1.00000], [0.00000, 0.63922, 1.00000], [0.00000, 0.65882,
-    1.00000], [0.00000, 0.67843, 1.00000], [0.00000, 0.70196, 1.00000],
-    [0.00000, 0.72157, 1.00000], [0.00000, 0.74118, 1.00000], [0.00000,
-    0.76078, 1.00000], [0.00000, 0.78431, 1.00000], [0.00000, 0.79608,
-    1.00000], [0.00000, 0.81176, 1.00000], [0.00000, 0.82353, 1.00000],
-    [0.00000, 0.83922, 1.00000], [0.00000, 0.85490, 1.00000], [0.00000,
-    0.86667, 1.00000], [0.00000, 0.88235, 1.00000], [0.00000, 0.89412,
-    1.00000], [0.00000, 0.90980, 1.00000], [0.00000, 0.92549, 1.00000],
-    [0.00000, 0.93725, 1.00000], [0.00000, 0.95294, 1.00000], [0.00000,
-    0.96863, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000,
-    1.00000], [1.00000, 1.00000, 1.00000], [0.00000, 1.00000, 0.96078],
-    [0.00000, 1.00000, 0.94118], [0.00000, 1.00000, 0.92157], [0.00000,
-    1.00000, 0.90196], [0.00000, 1.00000, 0.88235], [0.00000, 1.00000,
-    0.86275], [0.00000, 1.00000, 0.84314], [0.00000, 1.00000, 0.82353],
-    [0.00000, 1.00000, 0.80392], [0.00000, 1.00000, 0.78431], [0.00000,
-    1.00000, 0.76471], [0.00000, 1.00000, 0.74510], [0.00000, 1.00000,
-    0.72549], [0.00000, 1.00000, 0.70588], [0.00000, 1.00000, 0.65490],
-    [0.00000, 1.00000, 0.60784], [0.00000, 1.00000, 0.56078], [0.00000,
-    1.00000, 0.51373], [0.00000, 1.00000, 0.46667], [0.00000, 1.00000,
-    0.41961], [0.00000, 1.00000, 0.37255], [0.00000, 1.00000, 0.32549],
-    [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000,
-    1.00000, 1.00000], [0.00000, 1.00000, 0.13725], [0.00000, 1.00000,
-    0.09020], [0.00000, 1.00000, 0.04314], [0.00000, 1.00000, 0.00000],
-    [0.04706, 1.00000, 0.00000], [0.09412, 1.00000, 0.00000], [0.14118,
-    1.00000, 0.00000], [0.18824, 1.00000, 0.00000], [0.23529, 1.00000,
-    0.00000], [0.28235, 1.00000, 0.00000], [0.32941, 1.00000, 0.00000],
-    [0.37647, 1.00000, 0.00000], [0.42353, 1.00000, 0.00000], [0.47059,
-    1.00000, 0.00000], [0.51765, 1.00000, 0.00000], [0.56471, 1.00000,
-    0.00000], [0.61176, 1.00000, 0.00000], [0.65882, 1.00000, 0.00000],
-    [0.70588, 1.00000, 0.00000], [0.72549, 1.00000, 0.00000], [0.74510,
-    1.00000, 0.00000], [0.76471, 1.00000, 0.00000], [1.00000, 1.00000,
-    1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000],
-    [0.84314, 1.00000, 0.00000], [0.86275, 1.00000, 0.00000], [0.88235,
-    1.00000, 0.00000], [0.90196, 1.00000, 0.00000], [0.92157, 1.00000,
-    0.00000], [0.94118, 1.00000, 0.00000], [0.96078, 1.00000, 0.00000],
-    [0.98039, 1.00000, 0.00000], [1.00000, 1.00000, 0.00000], [0.99608,
-    0.98039, 0.00000], [0.99608, 0.96078, 0.00000], [0.99608, 0.94118,
-    0.00000], [0.99608, 0.92549, 0.00000], [0.99216, 0.90588, 0.00000],
-    [0.99216, 0.88627, 0.00000], [0.99216, 0.87059, 0.00000], [0.99216,
-    0.85098, 0.00000], [0.98824, 0.83137, 0.00000], [0.98824, 0.81569,
-    0.00000], [0.98824, 0.79608, 0.00000], [0.98824, 0.77647, 0.00000],
-    [0.98824, 0.76078, 0.00000], [1.00000, 1.00000, 1.00000], [1.00000,
-    1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [0.98824, 0.69020,
-    0.00000], [0.98824, 0.67059, 0.00000], [0.98824, 0.65490, 0.00000],
-    [0.98824, 0.63922, 0.00000], [0.98824, 0.61961, 0.00000], [0.99216,
-    0.60392, 0.00000], [0.99216, 0.58824, 0.00000], [0.99216, 0.56863,
-    0.00000], [0.99216, 0.55294, 0.00000], [0.99608, 0.53725, 0.00000],
-    [0.99608, 0.51765, 0.00000], [0.99608, 0.50196, 0.00000], [0.99608,
-    0.48627, 0.00000], [1.00000, 0.47059, 0.00000], [1.00000, 0.43529,
-    0.00000], [1.00000, 0.40392, 0.00000], [1.00000, 0.37255, 0.00000],
-    [1.00000, 0.34118, 0.00000], [1.00000, 0.30980, 0.00000], [1.00000,
-    0.27843, 0.00000], [1.00000, 0.24706, 0.00000], [1.00000, 0.21569,
-    0.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000], [1.00000, 0.09020, 0.00000], [1.00000,
-    0.05882, 0.00000], [1.00000, 0.02745, 0.00000], [1.00000, 0.00000,
-    0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000,
-    0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000,
-    0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000,
-    0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000,
-    0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.04706],
-    [1.00000, 0.00000, 0.09412], [1.00000, 0.00000, 0.14118], [1.00000,
-    1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000,
-    1.00000], [1.00000, 0.00000, 0.32941], [1.00000, 0.00000, 0.37647],
-    [1.00000, 0.00000, 0.42353], [1.00000, 0.00000, 0.47059], [1.00000,
-    0.00000, 0.51765], [1.00000, 0.00000, 0.56471], [1.00000, 0.00000,
-    0.61176], [1.00000, 0.00000, 0.65882], [1.00000, 0.00000, 0.70588],
-    [1.00000, 0.00000, 0.72549], [1.00000, 0.00000, 0.74902], [1.00000,
-    0.00000, 0.77255], [1.00000, 0.00000, 0.79608], [1.00000, 0.00000,
-    0.81569], [1.00000, 0.00000, 0.83922], [1.00000, 0.00000, 0.86275],
-    [1.00000, 0.00000, 0.88627], [1.00000, 0.00000, 0.90588], [1.00000,
-    0.00000, 0.92941], [1.00000, 0.00000, 0.95294], [1.00000, 0.00000,
-    0.97647], [1.00000, 0.00000, 1.00000], [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000,
-    0.14118, 1.00000], [1.00000, 0.17647, 1.00000], [1.00000, 0.21176,
-    1.00000], [1.00000, 0.25098, 1.00000], [1.00000, 0.28627, 1.00000],
-    [1.00000, 0.32157, 1.00000], [1.00000, 0.36078, 1.00000], [1.00000,
-    0.39608, 1.00000], [1.00000, 0.43137, 1.00000], [1.00000, 0.47059,
-    1.00000], [1.00000, 0.48627, 1.00000], [1.00000, 0.50588, 1.00000],
-    [1.00000, 0.52157, 1.00000], [1.00000, 0.54118, 1.00000], [1.00000,
-    0.56078, 1.00000], [1.00000, 0.57647, 1.00000], [1.00000, 0.59608,
-    1.00000], [1.00000, 0.61176, 1.00000], [1.00000, 0.63137, 1.00000],
-    [1.00000, 0.65098, 1.00000], [1.00000, 0.66667, 1.00000], [1.00000,
-    0.68627, 1.00000], [1.00000, 0.70588, 1.00000], [1.00000, 0.74510,
-    1.00000], [1.00000, 0.78824, 1.00000], [1.00000, 0.83137, 1.00000],
-    [1.00000, 0.87059, 1.00000], [1.00000, 0.91373, 1.00000], [1.00000,
-    0.95686, 1.00000], [1.00000, 1.00000, 1.00000] ]
-
-Mousse = [
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.13333],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.26667],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.46667],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.00000, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.06667, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.13333, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.20000, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.26667, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.33333, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.40000, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.46667, 0.00000, 0.53333],
-    [0.53333, 0.00000, 0.53333],
-    [0.53333, 0.00000, 0.53333],
-    [0.53333, 0.00000, 0.53333],
-    [0.53333, 0.00000, 0.53333],
-    [0.53333, 0.00000, 0.46667],
-    [0.53333, 0.00000, 0.46667],
-    [0.53333, 0.00000, 0.46667],
-    [0.53333, 0.00000, 0.46667],
-    [0.60000, 0.00000, 0.40000],
-    [0.60000, 0.00000, 0.40000],
-    [0.60000, 0.00000, 0.40000],
-    [0.60000, 0.00000, 0.40000],
-    [0.60000, 0.00000, 0.33333],
-    [0.60000, 0.00000, 0.33333],
-    [0.60000, 0.00000, 0.33333],
-    [0.60000, 0.00000, 0.33333],
-    [0.66667, 0.00000, 0.26667],
-    [0.66667, 0.00000, 0.26667],
-    [0.66667, 0.00000, 0.26667],
-    [0.66667, 0.00000, 0.26667],
-    [0.66667, 0.00000, 0.20000],
-    [0.66667, 0.00000, 0.20000],
-    [0.66667, 0.00000, 0.20000],
-    [0.66667, 0.00000, 0.20000],
-    [0.73333, 0.00000, 0.13333],
-    [0.73333, 0.00000, 0.13333],
-    [0.73333, 0.00000, 0.13333],
-    [0.73333, 0.00000, 0.13333],
-    [0.73333, 0.00000, 0.06667],
-    [0.73333, 0.00000, 0.06667],
-    [0.73333, 0.00000, 0.06667],
-    [0.73333, 0.00000, 0.06667],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.80000, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.86667, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [0.93333, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.06667, 0.00000],
-    [1.00000, 0.06667, 0.00000],
-    [1.00000, 0.13333, 0.00000],
-    [1.00000, 0.13333, 0.00000],
-    [1.00000, 0.20000, 0.00000],
-    [1.00000, 0.20000, 0.00000],
-    [1.00000, 0.26667, 0.00000],
-    [1.00000, 0.26667, 0.00000],
-    [1.00000, 0.33333, 0.00000],
-    [1.00000, 0.33333, 0.00000],
-    [1.00000, 0.40000, 0.00000],
-    [1.00000, 0.40000, 0.00000],
-    [1.00000, 0.46667, 0.00000],
-    [1.00000, 0.46667, 0.00000],
-    [1.00000, 0.53333, 0.00000],
-    [1.00000, 0.53333, 0.00000],
-    [1.00000, 0.60000, 0.00000],
-    [1.00000, 0.60000, 0.00000],
-    [1.00000, 0.66667, 0.00000],
-    [1.00000, 0.66667, 0.00000],
-    [1.00000, 0.73333, 0.00000],
-    [1.00000, 0.73333, 0.00000],
-    [1.00000, 0.80000, 0.00000],
-    [1.00000, 0.80000, 0.00000],
-    [1.00000, 0.86667, 0.00000],
-    [1.00000, 0.86667, 0.00000],
-    [1.00000, 0.93333, 0.00000],
-    [1.00000, 0.93333, 0.00000],
-    [1.00000, 1.00000, 0.00000],
-    [1.00000, 1.00000, 0.00000],
-    [1.00000, 1.00000, 0.00000],
-    [1.00000, 1.00000, 0.00000],
-    [1.00000, 1.00000, 0.06667],
-    [1.00000, 1.00000, 0.06667],
-    [1.00000, 1.00000, 0.13333],
-    [1.00000, 1.00000, 0.13333],
-    [1.00000, 1.00000, 0.20000],
-    [1.00000, 1.00000, 0.20000],
-    [1.00000, 1.00000, 0.26667],
-    [1.00000, 1.00000, 0.26667],
-    [1.00000, 1.00000, 0.33333],
-    [1.00000, 1.00000, 0.33333],
-    [1.00000, 1.00000, 0.40000],
-    [1.00000, 1.00000, 0.40000],
-    [1.00000, 1.00000, 0.46667],
-    [1.00000, 1.00000, 0.46667],
-    [1.00000, 1.00000, 0.53333],
-    [1.00000, 1.00000, 0.53333],
-    [1.00000, 1.00000, 0.60000],
-    [1.00000, 1.00000, 0.60000],
-    [1.00000, 1.00000, 0.66667],
-    [1.00000, 1.00000, 0.66667],
-    [1.00000, 1.00000, 0.73333],
-    [1.00000, 1.00000, 0.73333],
-    [1.00000, 1.00000, 0.80000],
-    [1.00000, 1.00000, 0.80000],
-    [1.00000, 1.00000, 0.86667],
-    [1.00000, 1.00000, 1.00000],
-]
-
-Rainbow = [
-    [0.00000, 0.00000, 0.01176],
-    [0.00000, 0.00000, 0.02745],
-    [0.00000, 0.00000, 0.04314],
-    [0.00000, 0.00000, 0.05882],
-    [0.00000, 0.00000, 0.07451],
-    [0.00000, 0.00000, 0.09020],
-    [0.00000, 0.00000, 0.10588],
-    [0.00000, 0.00000, 0.12157],
-    [0.00000, 0.00000, 0.13725],
-    [0.00000, 0.00000, 0.15294],
-    [0.00000, 0.00000, 0.16863],
-    [0.00000, 0.00000, 0.18431],
-    [0.00000, 0.00000, 0.20000],
-    [0.00000, 0.00000, 0.21176],
-    [0.00000, 0.00000, 0.22745],
-    [0.00000, 0.00000, 0.24314],
-    [0.00000, 0.00000, 0.25882],
-    [0.00000, 0.00000, 0.27451],
-    [0.00000, 0.00000, 0.29020],
-    [0.00000, 0.00000, 0.30588],
-    [0.00000, 0.00000, 0.32157],
-    [0.00000, 0.00000, 0.33725],
-    [0.00000, 0.00000, 0.35294],
-    [0.00000, 0.00000, 0.36863],
-    [0.00000, 0.00000, 0.38431],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.41176],
-    [0.00000, 0.00000, 0.42745],
-    [0.00000, 0.00000, 0.44314],
-    [0.00000, 0.00000, 0.45882],
-    [0.00000, 0.00000, 0.47451],
-    [0.00000, 0.00000, 0.49020],
-    [0.00000, 0.00000, 0.50588],
-    [0.00000, 0.00000, 0.52157],
-    [0.00000, 0.00000, 0.53725],
-    [0.00000, 0.00000, 0.55294],
-    [0.00000, 0.00000, 0.56863],
-    [0.00000, 0.00000, 0.58431],
-    [0.00000, 0.00000, 0.60000],
-    [0.00000, 0.00000, 0.61176],
-    [0.00000, 0.00000, 0.62745],
-    [0.00000, 0.00000, 0.64314],
-    [0.00000, 0.00000, 0.65882],
-    [0.00000, 0.00000, 0.67451],
-    [0.00000, 0.00000, 0.69020],
-    [0.00000, 0.00000, 0.70588],
-    [0.00000, 0.00000, 0.72157],
-    [0.00000, 0.00000, 0.73725],
-    [0.00000, 0.00000, 0.75294],
-    [0.00000, 0.00000, 0.76863],
-    [0.00000, 0.00000, 0.78431],
-    [0.00000, 0.00000, 0.80000],
-    [0.00000, 0.00000, 0.81176],
-    [0.00000, 0.00000, 0.82745],
-    [0.00000, 0.00000, 0.84314],
-    [0.00000, 0.00000, 0.85882],
-    [0.00000, 0.00000, 0.87451],
-    [0.00000, 0.00000, 0.89020],
-    [0.00000, 0.00000, 0.90588],
-    [0.00000, 0.00000, 0.92157],
-    [0.00000, 0.00000, 0.93725],
-    [0.00000, 0.00000, 0.95294],
-    [0.00000, 0.00000, 0.96863],
-    [0.00000, 0.00000, 0.98431],
-    [0.00000, 0.00000, 1.00000],
-    [0.00000, 0.03529, 1.00000],
-    [0.00000, 0.07059, 1.00000],
-    [0.00000, 0.10980, 1.00000],
-    [0.00000, 0.14510, 1.00000],
-    [0.00000, 0.18039, 1.00000],
-    [0.00000, 0.21961, 1.00000],
-    [0.00000, 0.25490, 1.00000],
-    [0.00000, 0.29412, 1.00000],
-    [0.00000, 0.32941, 1.00000],
-    [0.00000, 0.36471, 1.00000],
-    [0.00000, 0.40392, 1.00000],
-    [0.00000, 0.43922, 1.00000],
-    [0.00000, 0.47843, 1.00000],
-    [0.00000, 0.50196, 1.00000],
-    [0.00000, 0.52549, 1.00000],
-    [0.00000, 0.54902, 1.00000],
-    [0.00000, 0.57255, 1.00000],
-    [0.00000, 0.59608, 1.00000],
-    [0.00000, 0.61961, 1.00000],
-    [0.00000, 0.64314, 1.00000],
-    [0.00000, 0.66667, 1.00000],
-    [0.00000, 0.69020, 1.00000],
-    [0.00000, 0.71373, 1.00000],
-    [0.00000, 0.73725, 1.00000],
-    [0.00000, 0.76078, 1.00000],
-    [0.00000, 0.78431, 1.00000],
-    [0.00000, 0.80000, 1.00000],
-    [0.00000, 0.81569, 1.00000],
-    [0.00000, 0.83137, 1.00000],
-    [0.00000, 0.84706, 1.00000],
-    [0.00000, 0.86667, 1.00000],
-    [0.00000, 0.88235, 1.00000],
-    [0.00000, 0.89804, 1.00000],
-    [0.00000, 0.91373, 1.00000],
-    [0.00000, 0.93333, 1.00000],
-    [0.00000, 0.94902, 1.00000],
-    [0.00000, 0.96471, 1.00000],
-    [0.00000, 0.98039, 1.00000],
-    [0.00000, 1.00000, 1.00000],
-    [0.00000, 1.00000, 0.97647],
-    [0.00000, 1.00000, 0.95294],
-    [0.00000, 1.00000, 0.92941],
-    [0.00000, 1.00000, 0.90588],
-    [0.00000, 1.00000, 0.88627],
-    [0.00000, 1.00000, 0.86275],
-    [0.00000, 1.00000, 0.83922],
-    [0.00000, 1.00000, 0.81569],
-    [0.00000, 1.00000, 0.79608],
-    [0.00000, 1.00000, 0.77255],
-    [0.00000, 1.00000, 0.74902],
-    [0.00000, 1.00000, 0.72549],
-    [0.00000, 1.00000, 0.70588],
-    [0.00000, 1.00000, 0.65098],
-    [0.00000, 1.00000, 0.59608],
-    [0.00000, 1.00000, 0.54118],
-    [0.00000, 1.00000, 0.48627],
-    [0.00000, 1.00000, 0.43137],
-    [0.00000, 1.00000, 0.37647],
-    [0.00000, 1.00000, 0.32549],
-    [0.00000, 1.00000, 0.27059],
-    [0.00000, 1.00000, 0.21569],
-    [0.00000, 1.00000, 0.16078],
-    [0.00000, 1.00000, 0.10588],
-    [0.00000, 1.00000, 0.05098],
-    [0.00000, 1.00000, 0.00000],
-    [0.05098, 1.00000, 0.00000],
-    [0.10588, 1.00000, 0.00000],
-    [0.16078, 1.00000, 0.00000],
-    [0.21569, 1.00000, 0.00000],
-    [0.27059, 1.00000, 0.00000],
-    [0.32549, 1.00000, 0.00000],
-    [0.37647, 1.00000, 0.00000],
-    [0.43137, 1.00000, 0.00000],
-    [0.48627, 1.00000, 0.00000],
-    [0.54118, 1.00000, 0.00000],
-    [0.59608, 1.00000, 0.00000],
-    [0.65098, 1.00000, 0.00000],
-    [0.70588, 1.00000, 0.00000],
-    [0.72549, 1.00000, 0.00000],
-    [0.74902, 1.00000, 0.00000],
-    [0.77255, 1.00000, 0.00000],
-    [0.79608, 1.00000, 0.00000],
-    [0.81569, 1.00000, 0.00000],
-    [0.83922, 1.00000, 0.00000],
-    [0.86275, 1.00000, 0.00000],
-    [0.88627, 1.00000, 0.00000],
-    [0.90588, 1.00000, 0.00000],
-    [0.92941, 1.00000, 0.00000],
-    [0.95294, 1.00000, 0.00000],
-    [0.97647, 1.00000, 0.00000],
-    [1.00000, 1.00000, 0.00000],
-    [0.99608, 0.97647, 0.00000],
-    [0.99608, 0.95686, 0.00000],
-    [0.99608, 0.93333, 0.00000],
-    [0.99608, 0.91373, 0.00000],
-    [0.99216, 0.89412, 0.00000],
-    [0.99216, 0.87059, 0.00000],
-    [0.99216, 0.85098, 0.00000],
-    [0.99216, 0.82745, 0.00000],
-    [0.98824, 0.80784, 0.00000],
-    [0.98824, 0.78824, 0.00000],
-    [0.98824, 0.76471, 0.00000],
-    [0.98824, 0.74510, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.70588, 0.00000],
-    [0.98824, 0.68627, 0.00000],
-    [0.98824, 0.66667, 0.00000],
-    [0.98824, 0.64706, 0.00000],
-    [0.99216, 0.62745, 0.00000],
-    [0.99216, 0.60784, 0.00000],
-    [0.99216, 0.58824, 0.00000],
-    [0.99216, 0.56863, 0.00000],
-    [0.99608, 0.54902, 0.00000],
-    [0.99608, 0.52941, 0.00000],
-    [0.99608, 0.50980, 0.00000],
-    [0.99608, 0.49020, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.43137, 0.00000],
-    [1.00000, 0.39608, 0.00000],
-    [1.00000, 0.36078, 0.00000],
-    [1.00000, 0.32549, 0.00000],
-    [1.00000, 0.28627, 0.00000],
-    [1.00000, 0.25098, 0.00000],
-    [1.00000, 0.21569, 0.00000],
-    [1.00000, 0.18039, 0.00000],
-    [1.00000, 0.14118, 0.00000],
-    [1.00000, 0.10588, 0.00000],
-    [1.00000, 0.07059, 0.00000],
-    [1.00000, 0.03529, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.05098],
-    [1.00000, 0.00000, 0.10588],
-    [1.00000, 0.00000, 0.16078],
-    [1.00000, 0.00000, 0.21569],
-    [1.00000, 0.00000, 0.27059],
-    [1.00000, 0.00000, 0.32549],
-    [1.00000, 0.00000, 0.37647],
-    [1.00000, 0.00000, 0.43137],
-    [1.00000, 0.00000, 0.48627],
-    [1.00000, 0.00000, 0.54118],
-    [1.00000, 0.00000, 0.59608],
-    [1.00000, 0.00000, 0.65098],
-    [1.00000, 0.00000, 0.70588],
-    [1.00000, 0.00000, 0.72549],
-    [1.00000, 0.00000, 0.74902],
-    [1.00000, 0.00000, 0.77255],
-    [1.00000, 0.00000, 0.79608],
-    [1.00000, 0.00000, 0.81569],
-    [1.00000, 0.00000, 0.83922],
-    [1.00000, 0.00000, 0.86275],
-    [1.00000, 0.00000, 0.88627],
-    [1.00000, 0.00000, 0.90588],
-    [1.00000, 0.00000, 0.92941],
-    [1.00000, 0.00000, 0.95294],
-    [1.00000, 0.00000, 0.97647],
-    [1.00000, 0.00000, 1.00000],
-    [1.00000, 0.03529, 1.00000],
-    [1.00000, 0.07059, 1.00000],
-    [1.00000, 0.10588, 1.00000],
-    [1.00000, 0.14118, 1.00000],
-    [1.00000, 0.18039, 1.00000],
-    [1.00000, 0.21569, 1.00000],
-    [1.00000, 0.25098, 1.00000],
-    [1.00000, 0.28627, 1.00000],
-    [1.00000, 0.32549, 1.00000],
-    [1.00000, 0.36078, 1.00000],
-    [1.00000, 0.39608, 1.00000],
-    [1.00000, 0.43137, 1.00000],
-    [1.00000, 0.47059, 1.00000],
-    [1.00000, 0.48627, 1.00000],
-    [1.00000, 0.50588, 1.00000],
-    [1.00000, 0.52157, 1.00000],
-    [1.00000, 0.54118, 1.00000],
-    [1.00000, 0.56078, 1.00000],
-    [1.00000, 0.57647, 1.00000],
-    [1.00000, 0.59608, 1.00000],
-    [1.00000, 0.61176, 1.00000],
-    [1.00000, 0.63137, 1.00000],
-    [1.00000, 0.65098, 1.00000],
-    [1.00000, 0.66667, 1.00000],
-    [1.00000, 0.68627, 1.00000],
-    [1.00000, 0.70588, 1.00000],
-    [1.00000, 0.74510, 1.00000],
-    [1.00000, 0.78824, 1.00000],
-    [1.00000, 0.83137, 1.00000],
-    [1.00000, 0.87059, 1.00000],
-    [1.00000, 0.91373, 1.00000],
-    [1.00000, 0.95686, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-]
-
-Random = [
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.47059, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.62745, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 0.78431, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 1.00000, 0.00392],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00392, 0.86275, 0.47059],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.78431, 0.62745],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.70588, 0.78431],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.00000, 0.62745, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.47059, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.23529, 0.00392, 1.00000],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.47059, 0.00392, 0.78431],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.62745, 0.00392, 0.62745],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.78431, 0.00392, 0.47059],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [0.90196, 0.11765, 0.23529],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.23529, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [1.00000, 0.47059, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [0.98039, 0.98039, 0.47059],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-    [1.00000, 1.00000, 1.00000],
-]
-
-RGB = [
-    [0.00000, 0.00000, 0.00000],
-    [0.01176, 0.00000, 0.00000],
-    [0.02745, 0.00000, 0.00000],
-    [0.04314, 0.00000, 0.00000],
-    [0.05882, 0.00000, 0.00000],
-    [0.07451, 0.00000, 0.00000],
-    [0.08627, 0.00000, 0.00000],
-    [0.10196, 0.00000, 0.00000],
-    [0.11765, 0.00000, 0.00000],
-    [0.13333, 0.00000, 0.00000],
-    [0.14902, 0.00000, 0.00000],
-    [0.16078, 0.00000, 0.00000],
-    [0.17647, 0.00000, 0.00000],
-    [0.19216, 0.00000, 0.00000],
-    [0.20784, 0.00000, 0.00000],
-    [0.22353, 0.00000, 0.00000],
-    [0.23529, 0.00000, 0.00000],
-    [0.25098, 0.00000, 0.00000],
-    [0.26667, 0.00000, 0.00000],
-    [0.28235, 0.00000, 0.00000],
-    [0.29804, 0.00000, 0.00000],
-    [0.30980, 0.00000, 0.00000],
-    [0.32549, 0.00000, 0.00000],
-    [0.34118, 0.00000, 0.00000],
-    [0.35686, 0.00000, 0.00000],
-    [0.37255, 0.00000, 0.00000],
-    [0.38431, 0.00000, 0.00000],
-    [0.40000, 0.00000, 0.00000],
-    [0.41569, 0.00000, 0.00000],
-    [0.43137, 0.00000, 0.00000],
-    [0.44706, 0.00000, 0.00000],
-    [0.45882, 0.00000, 0.00000],
-    [0.47451, 0.00000, 0.00000],
-    [0.49020, 0.00000, 0.00000],
-    [0.50588, 0.00000, 0.00000],
-    [0.52157, 0.00000, 0.00000],
-    [0.53725, 0.00000, 0.00000],
-    [0.54902, 0.00000, 0.00000],
-    [0.56471, 0.00000, 0.00000],
-    [0.58039, 0.00000, 0.00000],
-    [0.59608, 0.00000, 0.00000],
-    [0.61176, 0.00000, 0.00000],
-    [0.62353, 0.00000, 0.00000],
-    [0.63922, 0.00000, 0.00000],
-    [0.65490, 0.00000, 0.00000],
-    [0.67059, 0.00000, 0.00000],
-    [0.68627, 0.00000, 0.00000],
-    [0.69804, 0.00000, 0.00000],
-    [0.71373, 0.00000, 0.00000],
-    [0.72941, 0.00000, 0.00000],
-    [0.74510, 0.00000, 0.00000],
-    [0.76078, 0.00000, 0.00000],
-    [0.77255, 0.00000, 0.00000],
-    [0.78824, 0.00000, 0.00000],
-    [0.80392, 0.00000, 0.00000],
-    [0.81961, 0.00000, 0.00000],
-    [0.83529, 0.00000, 0.00000],
-    [0.84706, 0.00000, 0.00000],
-    [0.86275, 0.00000, 0.00000],
-    [0.87843, 0.00000, 0.00000],
-    [0.89412, 0.00000, 0.00000],
-    [0.90980, 0.00000, 0.00000],
-    [0.92157, 0.00000, 0.00000],
-    [0.93725, 0.00000, 0.00000],
-    [0.95294, 0.00000, 0.00000],
-    [0.96863, 0.01176, 0.00000],
-    [0.98431, 0.02745, 0.00000],
-    [1.00000, 0.04314, 0.00000],
-    [0.98431, 0.05882, 0.00000],
-    [0.96863, 0.07451, 0.00000],
-    [0.95294, 0.09020, 0.00000],
-    [0.93725, 0.10588, 0.00000],
-    [0.92157, 0.12157, 0.00000],
-    [0.90196, 0.13725, 0.00000],
-    [0.88627, 0.15294, 0.00000],
-    [0.87059, 0.16863, 0.00000],
-    [0.85490, 0.18431, 0.00000],
-    [0.83922, 0.20000, 0.00000],
-    [0.82353, 0.21569, 0.00000],
-    [0.80392, 0.23137, 0.00000],
-    [0.78824, 0.24706, 0.00000],
-    [0.77255, 0.26275, 0.00000],
-    [0.75686, 0.27843, 0.00000],
-    [0.74118, 0.29412, 0.00000],
-    [0.72157, 0.30980, 0.00000],
-    [0.70588, 0.32549, 0.00000],
-    [0.69020, 0.34118, 0.00000],
-    [0.67451, 0.35686, 0.00000],
-    [0.65882, 0.37255, 0.00000],
-    [0.64314, 0.38824, 0.00000],
-    [0.62353, 0.40392, 0.00000],
-    [0.60784, 0.41961, 0.00000],
-    [0.59216, 0.43529, 0.00000],
-    [0.57647, 0.45098, 0.00000],
-    [0.56078, 0.46667, 0.00000],
-    [0.54118, 0.48235, 0.00000],
-    [0.52549, 0.49804, 0.00000],
-    [0.50980, 0.51373, 0.00000],
-    [0.49412, 0.52941, 0.00000],
-    [0.47843, 0.54510, 0.00000],
-    [0.46275, 0.56078, 0.00000],
-    [0.44314, 0.57647, 0.00000],
-    [0.42745, 0.59216, 0.00000],
-    [0.41176, 0.60784, 0.00000],
-    [0.39608, 0.62353, 0.00000],
-    [0.38039, 0.63922, 0.00000],
-    [0.36078, 0.65490, 0.00000],
-    [0.34510, 0.67059, 0.00000],
-    [0.32941, 0.68627, 0.00000],
-    [0.31373, 0.70196, 0.00000],
-    [0.29804, 0.71765, 0.00000],
-    [0.28235, 0.73333, 0.00000],
-    [0.26275, 0.74902, 0.00000],
-    [0.24706, 0.76471, 0.00000],
-    [0.23137, 0.78039, 0.00000],
-    [0.21569, 0.79608, 0.00000],
-    [0.20000, 0.81176, 0.00000],
-    [0.18039, 0.82745, 0.00000],
-    [0.16471, 0.84314, 0.00000],
-    [0.14902, 0.85882, 0.00000],
-    [0.13333, 0.87451, 0.00000],
-    [0.11765, 0.89020, 0.00000],
-    [0.10196, 0.90588, 0.00000],
-    [0.08235, 0.92157, 0.00000],
-    [0.06667, 0.93725, 0.00000],
-    [0.05098, 0.95294, 0.00000],
-    [0.03529, 0.96863, 0.00000],
-    [0.01961, 0.98431, 0.01176],
-    [0.00000, 1.00000, 0.02745],
-    [0.00000, 0.98431, 0.04314],
-    [0.00000, 0.96863, 0.05882],
-    [0.00000, 0.95294, 0.07451],
-    [0.00000, 0.93725, 0.09020],
-    [0.00000, 0.92157, 0.10588],
-    [0.00000, 0.90588, 0.11765],
-    [0.00000, 0.89020, 0.13333],
-    [0.00000, 0.87451, 0.14902],
-    [0.00000, 0.85882, 0.16471],
-    [0.00000, 0.84314, 0.18039],
-    [0.00000, 0.82745, 0.19608],
-    [0.00000, 0.81176, 0.21176],
-    [0.00000, 0.79608, 0.22353],
-    [0.00000, 0.78039, 0.23922],
-    [0.00000, 0.76471, 0.25490],
-    [0.00000, 0.74902, 0.27059],
-    [0.00000, 0.73333, 0.28627],
-    [0.00000, 0.71765, 0.30196],
-    [0.00000, 0.70196, 0.31765],
-    [0.00000, 0.68627, 0.33333],
-    [0.00000, 0.66667, 0.34510],
-    [0.00000, 0.65098, 0.36078],
-    [0.00000, 0.63529, 0.37647],
-    [0.00000, 0.61961, 0.39216],
-    [0.00000, 0.60392, 0.40784],
-    [0.00000, 0.58824, 0.42353],
-    [0.00000, 0.57255, 0.43922],
-    [0.00000, 0.55686, 0.45098],
-    [0.00000, 0.54118, 0.46667],
-    [0.00000, 0.52549, 0.48235],
-    [0.00000, 0.50980, 0.49804],
-    [0.00000, 0.49412, 0.51373],
-    [0.00000, 0.47843, 0.52941],
-    [0.00000, 0.46275, 0.54510],
-    [0.00000, 0.44706, 0.55686],
-    [0.00000, 0.43137, 0.57255],
-    [0.00000, 0.41569, 0.58824],
-    [0.00000, 0.40000, 0.60392],
-    [0.00000, 0.38431, 0.61961],
-    [0.00000, 0.36863, 0.63529],
-    [0.00000, 0.35294, 0.65098],
-    [0.00000, 0.33333, 0.66667],
-    [0.00000, 0.31765, 0.67843],
-    [0.00000, 0.30196, 0.69412],
-    [0.00000, 0.28627, 0.70980],
-    [0.00000, 0.27059, 0.72549],
-    [0.00000, 0.25490, 0.74118],
-    [0.00000, 0.23922, 0.75686],
-    [0.00000, 0.22353, 0.77255],
-    [0.00000, 0.20784, 0.78431],
-    [0.00000, 0.19216, 0.80000],
-    [0.00000, 0.17647, 0.81569],
-    [0.00000, 0.16078, 0.83137],
-    [0.00000, 0.14510, 0.84706],
-    [0.00000, 0.12941, 0.86275],
-    [0.00000, 0.11373, 0.87843],
-    [0.00000, 0.09804, 0.89020],
-    [0.00000, 0.08235, 0.90588],
-    [0.00000, 0.06667, 0.92157],
-    [0.00000, 0.05098, 0.93725],
-    [0.00000, 0.03529, 0.95294],
-    [0.00000, 0.01961, 0.96863],
-    [0.00000, 0.00000, 0.98431],
-    [0.00000, 0.00000, 1.00000],
-    [0.00000, 0.00000, 0.98431],
-    [0.00000, 0.00000, 0.96863],
-    [0.00000, 0.00000, 0.95294],
-    [0.00000, 0.00000, 0.93725],
-    [0.00000, 0.00000, 0.92157],
-    [0.00000, 0.00000, 0.90588],
-    [0.00000, 0.00000, 0.89020],
-    [0.00000, 0.00000, 0.87451],
-    [0.00000, 0.00000, 0.85882],
-    [0.00000, 0.00000, 0.84314],
-    [0.00000, 0.00000, 0.82745],
-    [0.00000, 0.00000, 0.81176],
-    [0.00000, 0.00000, 0.79608],
-    [0.00000, 0.00000, 0.78039],
-    [0.00000, 0.00000, 0.76471],
-    [0.00000, 0.00000, 0.74902],
-    [0.00000, 0.00000, 0.73333],
-    [0.00000, 0.00000, 0.71765],
-    [0.00000, 0.00000, 0.70196],
-    [0.00000, 0.00000, 0.68627],
-    [0.00000, 0.00000, 0.66667],
-    [0.00000, 0.00000, 0.65098],
-    [0.00000, 0.00000, 0.63529],
-    [0.00000, 0.00000, 0.61961],
-    [0.00000, 0.00000, 0.60392],
-    [0.00000, 0.00000, 0.58824],
-    [0.00000, 0.00000, 0.57255],
-    [0.00000, 0.00000, 0.55686],
-    [0.00000, 0.00000, 0.54118],
-    [0.00000, 0.00000, 0.52549],
-    [0.00000, 0.00000, 0.50980],
-    [0.00000, 0.00000, 0.49412],
-    [0.00000, 0.00000, 0.47843],
-    [0.00000, 0.00000, 0.46275],
-    [0.00000, 0.00000, 0.44706],
-    [0.00000, 0.00000, 0.43137],
-    [0.00000, 0.00000, 0.41569],
-    [0.00000, 0.00000, 0.40000],
-    [0.00000, 0.00000, 0.38431],
-    [0.00000, 0.00000, 0.36863],
-    [0.00000, 0.00000, 0.35294],
-    [0.00000, 0.00000, 0.33333],
-    [0.00000, 0.00000, 0.31765],
-    [0.00000, 0.00000, 0.30196],
-    [0.00000, 0.00000, 0.28627],
-    [0.00000, 0.00000, 0.27059],
-    [0.00000, 0.00000, 0.25490],
-    [0.00000, 0.00000, 0.23922],
-    [0.00000, 0.00000, 0.22353],
-    [0.00000, 0.00000, 0.20784],
-    [0.00000, 0.00000, 0.19216],
-    [0.00000, 0.00000, 0.17647],
-    [0.00000, 0.00000, 0.16078],
-    [0.00000, 0.00000, 0.14510],
-    [0.00000, 0.00000, 0.12941],
-    [0.00000, 0.00000, 0.11373],
-    [0.00000, 0.00000, 0.09804],
-    [0.00000, 0.00000, 0.08235],
-    [0.00000, 0.00000, 0.06667],
-    [0.00000, 0.00000, 0.05098],
-    [0.00000, 0.00000, 0.03529],
-    [0.00000, 0.00000, 0.01961],
-    [0.00000, 0.00000, 0.00000],
-]
-
-Smooth = [
-    [0.00000, 0.00000, 1.00000],
-    [0.01569, 0.00000, 0.98431],
-    [0.03529, 0.00000, 0.96471],
-    [0.05098, 0.00000, 0.94902],
-    [0.06667, 0.00000, 0.93333],
-    [0.08627, 0.00000, 0.91373],
-    [0.10196, 0.00000, 0.89804],
-    [0.11765, 0.00000, 0.88235],
-    [0.13725, 0.00000, 0.86275],
-    [0.15294, 0.00000, 0.84706],
-    [0.16863, 0.00000, 0.83137],
-    [0.18824, 0.00000, 0.81176],
-    [0.20392, 0.00000, 0.79608],
-    [0.21961, 0.00000, 0.78039],
-    [0.23922, 0.00000, 0.76078],
-    [0.25490, 0.00000, 0.74510],
-    [0.27059, 0.00000, 0.72941],
-    [0.28627, 0.00000, 0.71373],
-    [0.30588, 0.00000, 0.69412],
-    [0.32157, 0.00000, 0.67843],
-    [0.33725, 0.00000, 0.66275],
-    [0.35686, 0.00000, 0.64314],
-    [0.37255, 0.00000, 0.62745],
-    [0.38824, 0.00000, 0.61176],
-    [0.40784, 0.00000, 0.59216],
-    [0.42353, 0.00000, 0.57647],
-    [0.43922, 0.00000, 0.56078],
-    [0.45882, 0.00000, 0.54118],
-    [0.47451, 0.00000, 0.52549],
-    [0.49020, 0.00000, 0.50980],
-    [0.50980, 0.00000, 0.49020],
-    [0.52549, 0.00000, 0.47451],
-    [0.54118, 0.00000, 0.45882],
-    [0.56078, 0.00000, 0.43922],
-    [0.57647, 0.00000, 0.42353],
-    [0.59216, 0.00000, 0.40784],
-    [0.61176, 0.00000, 0.38824],
-    [0.62745, 0.00000, 0.37255],
-    [0.64314, 0.00000, 0.35686],
-    [0.66275, 0.00000, 0.33725],
-    [0.67843, 0.00000, 0.32157],
-    [0.69412, 0.00000, 0.30588],
-    [0.71373, 0.00000, 0.28627],
-    [0.72941, 0.00000, 0.27059],
-    [0.74510, 0.00000, 0.25490],
-    [0.76078, 0.00000, 0.23922],
-    [0.78039, 0.00000, 0.21961],
-    [0.79608, 0.00000, 0.20392],
-    [0.81176, 0.00000, 0.18824],
-    [0.83137, 0.00000, 0.16863],
-    [0.84706, 0.00000, 0.15294],
-    [0.86275, 0.00000, 0.13725],
-    [0.88235, 0.00000, 0.11765],
-    [0.89804, 0.00000, 0.10196],
-    [0.91373, 0.00000, 0.08627],
-    [0.93333, 0.00000, 0.06667],
-    [0.94902, 0.00000, 0.05098],
-    [0.96471, 0.00000, 0.03529],
-    [0.98431, 0.00000, 0.01569],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.00000, 0.00000],
-    [1.00000, 0.01176, 0.00000],
-    [1.00000, 0.01961, 0.00000],
-    [1.00000, 0.03137, 0.00000],
-    [1.00000, 0.03922, 0.00000],
-    [1.00000, 0.05098, 0.00000],
-    [1.00000, 0.05882, 0.00000],
-    [1.00000, 0.07059, 0.00000],
-    [1.00000, 0.08235, 0.00000],
-    [1.00000, 0.09020, 0.00000],
-    [1.00000, 0.10196, 0.00000],
-    [1.00000, 0.10980, 0.00000],
-    [1.00000, 0.12157, 0.00000],
-    [1.00000, 0.12941, 0.00000],
-    [1.00000, 0.14118, 0.00000],
-    [0.99608, 0.15294, 0.00000],
-    [0.99608, 0.16078, 0.00000],
-    [0.99608, 0.17255, 0.00000],
-    [0.99608, 0.18039, 0.00000],
-    [0.99608, 0.19216, 0.00000],
-    [0.99608, 0.20392, 0.00000],
-    [0.99608, 0.21176, 0.00000],
-    [0.99608, 0.22353, 0.00000],
-    [0.99608, 0.23137, 0.00000],
-    [0.99608, 0.24314, 0.00000],
-    [0.99608, 0.25098, 0.00000],
-    [0.99608, 0.26275, 0.00000],
-    [0.99608, 0.27451, 0.00000],
-    [0.99608, 0.28235, 0.00000],
-    [0.99608, 0.29412, 0.00000],
-    [0.99608, 0.30196, 0.00000],
-    [0.99608, 0.31373, 0.00000],
-    [0.99608, 0.32157, 0.00000],
-    [0.99608, 0.33333, 0.00000],
-    [0.99608, 0.34510, 0.00000],
-    [0.99608, 0.35294, 0.00000],
-    [0.99608, 0.36471, 0.00000],
-    [0.99608, 0.37255, 0.00000],
-    [0.99608, 0.38431, 0.00000],
-    [0.99608, 0.39216, 0.00000],
-    [0.99608, 0.40392, 0.00000],
-    [0.99608, 0.41569, 0.00000],
-    [0.99608, 0.42353, 0.00000],
-    [0.99608, 0.43529, 0.00000],
-    [0.99608, 0.44314, 0.00000],
-    [0.99216, 0.45490, 0.00000],
-    [0.99216, 0.46667, 0.00000],
-    [0.99216, 0.47451, 0.00000],
-    [0.99216, 0.48627, 0.00000],
-    [0.99216, 0.49412, 0.00000],
-    [0.99216, 0.50588, 0.00000],
-    [0.99216, 0.51373, 0.00000],
-    [0.99216, 0.52549, 0.00000],
-    [0.99216, 0.53725, 0.00000],
-    [0.99216, 0.54510, 0.00000],
-    [0.99216, 0.55686, 0.00000],
-    [0.99216, 0.56471, 0.00000],
-    [0.99216, 0.57647, 0.00000],
-    [0.99216, 0.58431, 0.00000],
-    [0.99216, 0.59608, 0.00000],
-    [0.99216, 0.60000, 0.00000],
-    [0.99216, 0.60784, 0.00000],
-    [0.99216, 0.61176, 0.00000],
-    [0.99216, 0.61569, 0.00000],
-    [0.99216, 0.61961, 0.00000],
-    [0.99216, 0.62745, 0.00000],
-    [0.99216, 0.63137, 0.00000],
-    [0.99216, 0.63529, 0.00000],
-    [0.99216, 0.64314, 0.00000],
-    [0.98824, 0.64706, 0.00000],
-    [0.98824, 0.65098, 0.00000],
-    [0.98824, 0.65882, 0.00000],
-    [0.98824, 0.66275, 0.00000],
-    [0.98824, 0.66667, 0.00000],
-    [0.98824, 0.67451, 0.00000],
-    [0.98824, 0.67843, 0.00000],
-    [0.98824, 0.68235, 0.00000],
-    [0.98824, 0.68627, 0.00000],
-    [0.98824, 0.69412, 0.00000],
-    [0.98824, 0.69804, 0.00000],
-    [0.98824, 0.70196, 0.00000],
-    [0.98824, 0.70980, 0.00000],
-    [0.98824, 0.71373, 0.00000],
-    [0.98824, 0.71765, 0.00000],
-    [0.98824, 0.72549, 0.00000],
-    [0.98824, 0.72941, 0.00000],
-    [0.98824, 0.73333, 0.00000],
-    [0.98824, 0.73725, 0.00000],
-    [0.98824, 0.74510, 0.00000],
-    [0.98824, 0.74902, 0.00000],
-    [0.98431, 0.75294, 0.00000],
-    [0.98431, 0.76078, 0.00000],
-    [0.98431, 0.76471, 0.00000],
-    [0.98431, 0.76863, 0.00000],
-    [0.98431, 0.77255, 0.00000],
-    [0.98431, 0.78039, 0.00000],
-    [0.98431, 0.78431, 0.00000],
-    [0.98431, 0.78824, 0.00000],
-    [0.98431, 0.79608, 0.00000],
-    [0.98431, 0.80000, 0.00000],
-    [0.98431, 0.80392, 0.00000],
-    [0.98431, 0.81176, 0.00000],
-    [0.98431, 0.81569, 0.00000],
-    [0.98431, 0.81961, 0.00000],
-    [0.98431, 0.82745, 0.00000],
-    [0.98431, 0.83137, 0.00000],
-    [0.98431, 0.83529, 0.00000],
-    [0.98431, 0.83922, 0.00000],
-    [0.98431, 0.84706, 0.00000],
-    [0.98431, 0.85098, 0.00000],
-    [0.98039, 0.85490, 0.00000],
-    [0.98039, 0.86275, 0.00000],
-    [0.98039, 0.86667, 0.00000],
-    [0.98039, 0.87059, 0.00000],
-    [0.98039, 0.87843, 0.00000],
-    [0.98039, 0.88235, 0.00000],
-    [0.98039, 0.88627, 0.00000],
-    [0.98039, 0.89020, 0.00000],
-    [0.98039, 0.89804, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.98039, 0.90196, 0.00000],
-    [0.96471, 0.88627, 0.00000],
-    [0.94902, 0.87059, 0.00000],
-    [0.92941, 0.85490, 0.00000],
-    [0.91373, 0.83922, 0.00000],
-    [0.89804, 0.82745, 0.00000],
-    [0.88235, 0.81176, 0.00000],
-    [0.86275, 0.79608, 0.00000],
-    [0.84706, 0.78039, 0.00000],
-    [0.83137, 0.76471, 0.00000],
-    [0.81569, 0.74902, 0.00000],
-    [0.79608, 0.73333, 0.00000],
-    [0.78039, 0.71765, 0.00000],
-    [0.76471, 0.70196, 0.00000],
-    [0.74902, 0.68627, 0.00000],
-    [0.72941, 0.67451, 0.00000],
-    [0.71373, 0.65882, 0.00000],
-    [0.69804, 0.64314, 0.00000],
-    [0.68235, 0.62745, 0.00000],
-    [0.66275, 0.61176, 0.00000],
-    [0.64706, 0.59608, 0.00000],
-    [0.63137, 0.58039, 0.00000],
-    [0.61569, 0.56471, 0.00000],
-    [0.60000, 0.54902, 0.00000],
-    [0.58039, 0.53333, 0.00000],
-    [0.56471, 0.52157, 0.00000],
-    [0.54902, 0.50588, 0.00000],
-    [0.53333, 0.49020, 0.00000],
-    [0.51373, 0.47451, 0.00000],
-    [0.49804, 0.45882, 0.00000],
-    [0.48235, 0.44314, 0.00000],
-    [0.46667, 0.42745, 0.00000],
-    [0.44706, 0.41176, 0.00000],
-    [0.43137, 0.39608, 0.00000],
-    [0.41569, 0.38039, 0.00000],
-    [0.40000, 0.36863, 0.00000],
-    [0.38039, 0.35294, 0.00000],
-    [0.36471, 0.33725, 0.00000],
-    [0.34902, 0.32157, 0.00000],
-    [0.33333, 0.30588, 0.00000],
-    [0.31765, 0.29020, 0.00000],
-    [0.29804, 0.27451, 0.00000],
-    [0.28235, 0.25882, 0.00000],
-    [0.26667, 0.24314, 0.00000],
-    [0.25098, 0.22745, 0.00000],
-    [0.23137, 0.21569, 0.00000],
-    [0.21569, 0.20000, 0.00000],
-    [0.20000, 0.18431, 0.00000],
-    [0.18431, 0.16863, 0.00000],
-    [0.16471, 0.15294, 0.00000],
-    [0.14902, 0.13725, 0.00000],
-    [0.13333, 0.12157, 0.00000],
-    [0.11765, 0.10588, 0.00000],
-    [0.09804, 0.09020, 0.00000],
-    [0.08235, 0.07451, 0.00000],
-    [0.06667, 0.06275, 0.00000],
-    [0.05098, 0.04706, 0.00000],
-    [0.03137, 0.03137, 0.00000],
-    [0.01569, 0.01569, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-    [0.00000, 0.00000, 0.00000],
-]
-
-Staircase = [
-    [0.00392, 0.00392, 0.31373],
-    [0.00784, 0.00784, 0.31373],
-    [0.01176, 0.01176, 0.31373],
-    [0.01569, 0.01569, 0.31373],
-    [0.01961, 0.01961, 0.31373],
-    [0.02353, 0.02353, 0.31373],
-    [0.02745, 0.02745, 0.31373],
-    [0.03137, 0.03137, 0.31373],
-    [0.03529, 0.03529, 0.31373],
-    [0.03922, 0.03922, 0.31373],
-    [0.04314, 0.04314, 0.31373],
-    [0.04706, 0.04706, 0.31373],
-    [0.05098, 0.05098, 0.31373],
-    [0.05490, 0.05490, 0.31373],
-    [0.05882, 0.05882, 0.31373],
-    [0.06275, 0.06275, 0.31373],
-    [0.06667, 0.06667, 0.47059],
-    [0.07059, 0.07059, 0.47059],
-    [0.07451, 0.07451, 0.47059],
-    [0.07843, 0.07843, 0.47059],
-    [0.08235, 0.08235, 0.47059],
-    [0.08627, 0.08627, 0.47059],
-    [0.09020, 0.09020, 0.47059],
-    [0.09412, 0.09412, 0.47059],
-    [0.09804, 0.09804, 0.47059],
-    [0.10196, 0.10196, 0.47059],
-    [0.10588, 0.10588, 0.47059],
-    [0.10980, 0.10980, 0.47059],
-    [0.11373, 0.11373, 0.47059],
-    [0.11765, 0.11765, 0.47059],
-    [0.12157, 0.12157, 0.47059],
-    [0.12549, 0.12549, 0.47059],
-    [0.12941, 0.12941, 0.62745],
-    [0.13333, 0.13333, 0.62745],
-    [0.13725, 0.13725, 0.62745],
-    [0.14118, 0.14118, 0.62745],
-    [0.14510, 0.14510, 0.62745],
-    [0.14902, 0.14902, 0.62745],
-    [0.15294, 0.15294, 0.62745],
-    [0.15686, 0.15686, 0.62745],
-    [0.16078, 0.16078, 0.62745],
-    [0.16471, 0.16471, 0.62745],
-    [0.16863, 0.16863, 0.62745],
-    [0.17255, 0.17255, 0.62745],
-    [0.17647, 0.17647, 0.62745],
-    [0.18039, 0.18039, 0.62745],
-    [0.18431, 0.18431, 0.62745],
-    [0.18824, 0.18824, 0.62745],
-    [0.19216, 0.19216, 0.78431],
-    [0.19608, 0.19608, 0.78431],
-    [0.20000, 0.20000, 0.78431],
-    [0.20392, 0.20392, 0.78431],
-    [0.20784, 0.20784, 0.78431],
-    [0.21176, 0.21176, 0.78431],
-    [0.21569, 0.21569, 0.78431],
-    [0.21961, 0.21961, 0.78431],
-    [0.22353, 0.22353, 0.78431],
-    [0.22745, 0.22745, 0.78431],
-    [0.23137, 0.23137, 0.78431],
-    [0.23529, 0.23529, 0.78431],
-    [0.23922, 0.23922, 0.78431],
-    [0.24314, 0.24314, 0.78431],
-    [0.24706, 0.24706, 0.78431],
-    [0.25098, 0.25098, 0.78431],
-    [0.25490, 0.25490, 0.94118],
-    [0.25882, 0.25882, 0.94118],
-    [0.26275, 0.26275, 0.94118],
-    [0.26667, 0.26667, 0.94118],
-    [0.27059, 0.27059, 0.94118],
-    [0.27451, 0.27451, 0.94118],
-    [0.27843, 0.27843, 0.94118],
-    [0.28235, 0.28235, 0.94118],
-    [0.28627, 0.28627, 0.94118],
-    [0.29020, 0.29020, 0.94118],
-    [0.29412, 0.29412, 0.94118],
-    [0.29804, 0.29804, 0.94118],
-    [0.30196, 0.30196, 0.94118],
-    [0.30588, 0.30588, 0.94118],
-    [0.30980, 0.30980, 0.94118],
-    [0.31373, 0.31373, 0.94118],
-    [0.31765, 0.31765, 0.95294],
-    [0.32157, 0.32157, 0.96471],
-    [0.32549, 0.32549, 0.97647],
-    [0.32941, 0.32941, 0.98824],
-    [0.33333, 0.33333, 1.00000],
-    [0.00392, 0.31373, 0.00392],
-    [0.00784, 0.31373, 0.00784],
-    [0.01176, 0.31373, 0.01176],
-    [0.01569, 0.31373, 0.01569],
-    [0.01961, 0.31373, 0.01961],
-    [0.02353, 0.31373, 0.02353],
-    [0.02745, 0.31373, 0.02745],
-    [0.03137, 0.31373, 0.03137],
-    [0.03529, 0.31373, 0.03529],
-    [0.03922, 0.31373, 0.03922],
-    [0.04314, 0.31373, 0.04314],
-    [0.04706, 0.31373, 0.04706],
-    [0.05098, 0.31373, 0.05098],
-    [0.05490, 0.31373, 0.05490],
-    [0.05882, 0.31373, 0.05882],
-    [0.06275, 0.31373, 0.06275],
-    [0.06667, 0.47059, 0.06667],
-    [0.07059, 0.47059, 0.07059],
-    [0.07451, 0.47059, 0.07451],
-    [0.07843, 0.47059, 0.07843],
-    [0.08235, 0.47059, 0.08235],
-    [0.08627, 0.47059, 0.08627],
-    [0.09020, 0.47059, 0.09020],
-    [0.09412, 0.47059, 0.09412],
-    [0.09804, 0.47059, 0.09804],
-    [0.10196, 0.47059, 0.10196],
-    [0.10588, 0.47059, 0.10588],
-    [0.10980, 0.47059, 0.10980],
-    [0.11373, 0.47059, 0.11373],
-    [0.11765, 0.47059, 0.11765],
-    [0.12157, 0.47059, 0.12157],
-    [0.12549, 0.47059, 0.12549],
-    [0.12941, 0.62745, 0.12941],
-    [0.13333, 0.62745, 0.13333],
-    [0.13725, 0.62745, 0.13725],
-    [0.14118, 0.62745, 0.14118],
-    [0.14510, 0.62745, 0.14510],
-    [0.14902, 0.62745, 0.14902],
-    [0.15294, 0.62745, 0.15294],
-    [0.15686, 0.62745, 0.15686],
-    [0.16078, 0.62745, 0.16078],
-    [0.16471, 0.62745, 0.16471],
-    [0.16863, 0.62745, 0.16863],
-    [0.17255, 0.62745, 0.17255],
-    [0.17647, 0.62745, 0.17647],
-    [0.18039, 0.62745, 0.18039],
-    [0.18431, 0.62745, 0.18431],
-    [0.18824, 0.62745, 0.18824],
-    [0.19216, 0.78431, 0.19216],
-    [0.19608, 0.78431, 0.19608],
-    [0.20000, 0.78431, 0.20000],
-    [0.20392, 0.78431, 0.20392],
-    [0.20784, 0.78431, 0.20784],
-    [0.21176, 0.78431, 0.21176],
-    [0.21569, 0.78431, 0.21569],
-    [0.21961, 0.78431, 0.21961],
-    [0.22353, 0.78431, 0.22353],
-    [0.22745, 0.78431, 0.22745],
-    [0.23137, 0.78431, 0.23137],
-    [0.23529, 0.78431, 0.23529],
-    [0.23922, 0.78431, 0.23922],
-    [0.24314, 0.78431, 0.24314],
-    [0.24706, 0.78431, 0.24706],
-    [0.25098, 0.78431, 0.25098],
-    [0.25490, 0.94118, 0.25490],
-    [0.25882, 0.94118, 0.25882],
-    [0.26275, 0.94118, 0.26275],
-    [0.26667, 0.94118, 0.26667],
-    [0.27059, 0.94118, 0.27059],
-    [0.27451, 0.94118, 0.27451],
-    [0.27843, 0.94118, 0.27843],
-    [0.28235, 0.94118, 0.28235],
-    [0.28627, 0.94118, 0.28627],
-    [0.29020, 0.94118, 0.29020],
-    [0.29412, 0.94118, 0.29412],
-    [0.29804, 0.94118, 0.29804],
-    [0.30196, 0.94118, 0.30196],
-    [0.30588, 0.94118, 0.30588],
-    [0.30980, 0.94118, 0.30980],
-    [0.31373, 0.94118, 0.31373],
-    [0.31765, 0.95294, 0.31765],
-    [0.32157, 0.96471, 0.32157],
-    [0.32549, 0.97647, 0.32549],
-    [0.32941, 0.98824, 0.32941],
-    [0.33333, 1.00000, 0.33333],
-    [0.31373, 0.00392, 0.00392],
-    [0.31373, 0.00784, 0.00784],
-    [0.31373, 0.01176, 0.01176],
-    [0.31373, 0.01569, 0.01569],
-    [0.31373, 0.01961, 0.01961],
-    [0.31373, 0.02353, 0.02353],
-    [0.31373, 0.02745, 0.02745],
-    [0.31373, 0.03137, 0.03137],
-    [0.31373, 0.03529, 0.03529],
-    [0.31373, 0.03922, 0.03922],
-    [0.31373, 0.04314, 0.04314],
-    [0.31373, 0.04706, 0.04706],
-    [0.31373, 0.05098, 0.05098],
-    [0.31373, 0.05490, 0.05490],
-    [0.31373, 0.05882, 0.05882],
-    [0.31373, 0.06275, 0.06275],
-    [0.47059, 0.06667, 0.06667],
-    [0.47059, 0.07059, 0.07059],
-    [0.47059, 0.07451, 0.07451],
-    [0.47059, 0.07843, 0.07843],
-    [0.47059, 0.08235, 0.08235],
-    [0.47059, 0.08627, 0.08627],
-    [0.47059, 0.09020, 0.09020],
-    [0.47059, 0.09412, 0.09412],
-    [0.47059, 0.09804, 0.09804],
-    [0.47059, 0.10196, 0.10196],
-    [0.47059, 0.10588, 0.10588],
-    [0.47059, 0.10980, 0.10980],
-    [0.47059, 0.11373, 0.11373],
-    [0.47059, 0.11765, 0.11765],
-    [0.47059, 0.12157, 0.12157],
-    [0.47059, 0.12549, 0.12549],
-    [0.62745, 0.12941, 0.12941],
-    [0.62745, 0.13333, 0.13333],
-    [0.62745, 0.13725, 0.13725],
-    [0.62745, 0.14118, 0.14118],
-    [0.62745, 0.14510, 0.14510],
-    [0.62745, 0.14902, 0.14902],
-    [0.62745, 0.15294, 0.15294],
-    [0.62745, 0.15686, 0.15686],
-    [0.62745, 0.16078, 0.16078],
-    [0.62745, 0.16471, 0.16471],
-    [0.62745, 0.16863, 0.16863],
-    [0.62745, 0.17255, 0.17255],
-    [0.62745, 0.17647, 0.17647],
-    [0.62745, 0.18039, 0.18039],
-    [0.62745, 0.18431, 0.18431],
-    [0.62745, 0.18824, 0.18824],
-    [0.78431, 0.19216, 0.19216],
-    [0.78431, 0.19608, 0.19608],
-    [0.78431, 0.20000, 0.20000],
-    [0.78431, 0.20392, 0.20392],
-    [0.78431, 0.20784, 0.20784],
-    [0.78431, 0.21176, 0.21176],
-    [0.78431, 0.21569, 0.21569],
-    [0.78431, 0.21961, 0.21961],
-    [0.78431, 0.22353, 0.22353],
-    [0.78431, 0.22745, 0.22745],
-    [0.78431, 0.23137, 0.23137],
-    [0.78431, 0.23529, 0.23529],
-    [0.78431, 0.23922, 0.23922],
-    [0.78431, 0.24314, 0.24314],
-    [0.78431, 0.24706, 0.24706],
-    [0.78431, 0.25098, 0.25098],
-    [0.94118, 0.25490, 0.25490],
-    [0.94118, 0.25882, 0.25882],
-    [0.94118, 0.26275, 0.26275],
-    [0.94118, 0.26667, 0.26667],
-    [0.94118, 0.27059, 0.27059],
-    [0.94118, 0.27451, 0.27451],
-    [0.94118, 0.27843, 0.27843],
-    [0.94118, 0.28235, 0.28235],
-    [0.94118, 0.28627, 0.28627],
-    [0.94118, 0.29020, 0.29020],
-    [0.94118, 0.29412, 0.29412],
-    [0.94118, 0.29804, 0.29804],
-    [0.94118, 0.30196, 0.30196],
-    [0.94118, 0.30588, 0.30588],
-    [0.94118, 0.30980, 0.30980],
-    [0.94118, 0.31373, 0.31373],
-    [0.94902, 0.39216, 0.39216],
-    [0.96078, 0.52941, 0.52941],
-    [0.97255, 0.66667, 0.66667],
-    [0.98431, 0.80392, 0.80392],
-    [0.99216, 0.80000, 0.80000],
-    [1.00000, 1.00000, 1.00000],
-]
-
-RGB2 = [
-    [0.00000, 0.00000, 1.00000],
-    [0.00000, 0.00000, 0.98431],
-    [0.00000, 0.01961, 0.96863],
-    [0.00000, 0.03529, 0.95294],
-    [0.00000, 0.05098, 0.93725],
-    [0.00000, 0.06667, 0.92157],
-    [0.00000, 0.08235, 0.90588],
-    [0.00000, 0.09804, 0.89020],
-    [0.00000, 0.11373, 0.87843],
-    [0.00000, 0.12941, 0.86275],
-    [0.00000, 0.14510, 0.84706],
-    [0.00000, 0.16078, 0.83137],
-    [0.00000, 0.17647, 0.81569],
-    [0.00000, 0.19216, 0.80000],
-    [0.00000, 0.20784, 0.78431],
-    [0.00000, 0.22353, 0.77255],
-    [0.00000, 0.23922, 0.75686],
-    [0.00000, 0.25490, 0.74118],
-    [0.00000, 0.27059, 0.72549],
-    [0.00000, 0.28627, 0.70980],
-    [0.00000, 0.30196, 0.69412],
-    [0.00000, 0.31765, 0.67843],
-    [0.00000, 0.33333, 0.66667],
-    [0.00000, 0.35294, 0.65098],
-    [0.00000, 0.36863, 0.63529],
-    [0.00000, 0.38431, 0.61961],
-    [0.00000, 0.40000, 0.60392],
-    [0.00000, 0.41569, 0.58824],
-    [0.00000, 0.43137, 0.57255],
-    [0.00000, 0.44706, 0.55686],
-    [0.00000, 0.46275, 0.54510],
-    [0.00000, 0.47843, 0.52941],
-    [0.00000, 0.49412, 0.51373],
-    [0.00000, 0.50980, 0.49804],
-    [0.00000, 0.52549, 0.48235],
-    [0.00000, 0.54118, 0.46667],
-    [0.00000, 0.55686, 0.45098],
-    [0.00000, 0.57255, 0.43922],
-    [0.00000, 0.58824, 0.42353],
-    [0.00000, 0.60392, 0.40784],
-    [0.00000, 0.61961, 0.39216],
-    [0.00000, 0.63529, 0.37647],
-    [0.00000, 0.65098, 0.36078],
-    [0.00000, 0.66667, 0.34510],
-    [0.00000, 0.68627, 0.33333],
-    [0.00000, 0.70196, 0.31765],
-    [0.00000, 0.71765, 0.30196],
-    [0.00000, 0.73333, 0.28627],
-    [0.00000, 0.74902, 0.27059],
-    [0.00000, 0.76471, 0.25490],
-    [0.00000, 0.78039, 0.23922],
-    [0.00000, 0.79608, 0.22353],
-    [0.00000, 0.81176, 0.21176],
-    [0.00000, 0.82745, 0.19608],
-    [0.00000, 0.84314, 0.18039],
-    [0.00000, 0.85882, 0.16471],
-    [0.00000, 0.87451, 0.14902],
-    [0.00000, 0.89020, 0.13333],
-    [0.00000, 0.90588, 0.11765],
-    [0.00000, 0.92157, 0.10588],
-    [0.00000, 0.93725, 0.09020],
-    [0.00000, 0.95294, 0.07451],
-    [0.00000, 0.96863, 0.05882],
-    [0.00000, 0.98431, 0.04314],
-    [0.00000, 1.00000, 0.02745],
-    [0.01961, 0.98431, 0.01176],
-    [0.03529, 0.96863, 0.00000],
-    [0.05098, 0.95294, 0.00000],
-    [0.06667, 0.93725, 0.00000],
-    [0.08235, 0.92157, 0.00000],
-    [0.10196, 0.90588, 0.00000],
-    [0.11765, 0.89020, 0.00000],
-    [0.13333, 0.87451, 0.00000],
-    [0.14902, 0.85882, 0.00000],
-    [0.16471, 0.84314, 0.00000],
-    [0.18039, 0.82745, 0.00000],
-    [0.20000, 0.81176, 0.00000],
-    [0.21569, 0.79608, 0.00000],
-    [0.23137, 0.78039, 0.00000],
-    [0.24706, 0.76471, 0.00000],
-    [0.26275, 0.74902, 0.00000],
-    [0.28235, 0.73333, 0.00000],
-    [0.29804, 0.71765, 0.00000],
-    [0.31373, 0.70196, 0.00000],
-    [0.32941, 0.68627, 0.00000],
-    [0.34510, 0.67059, 0.00000],
-    [0.36078, 0.65490, 0.00000],
-    [0.38039, 0.63922, 0.00000],
-    [0.39608, 0.62353, 0.00000],
-    [0.41176, 0.60784, 0.00000],
-    [0.42745, 0.59216, 0.00000],
-    [0.44314, 0.57647, 0.00000],
-    [0.46275, 0.56078, 0.00000],
-    [0.47843, 0.54510, 0.00000],
-    [0.49412, 0.52941, 0.00000],
-    [0.50980, 0.51373, 0.00000],
-    [0.52549, 0.49804, 0.00000],
-    [0.54118, 0.48235, 0.00000],
-    [0.56078, 0.46667, 0.00000],
-    [0.57647, 0.45098, 0.00000],
-    [0.59216, 0.43529, 0.00000],
-    [0.60784, 0.41961, 0.00000],
-    [0.62353, 0.40392, 0.00000],
-    [0.64314, 0.38824, 0.00000],
-    [0.65882, 0.37255, 0.00000],
-    [0.67451, 0.35686, 0.00000],
-    [0.69020, 0.34118, 0.00000],
-    [0.70588, 0.32549, 0.00000],
-    [0.72157, 0.30980, 0.00000],
-    [0.74118, 0.29412, 0.00000],
-    [0.75686, 0.27843, 0.00000],
-    [0.77255, 0.26275, 0.00000],
-    [0.78824, 0.24706, 0.00000],
-    [0.80392, 0.23137, 0.00000],
-    [0.82353, 0.21569, 0.00000],
-    [0.83922, 0.20000, 0.00000],
-    [0.85490, 0.18431, 0.00000],
-    [0.87059, 0.16863, 0.00000],
-    [0.88627, 0.15294, 0.00000],
-    [0.90196, 0.13725, 0.00000],
-    [0.92157, 0.12157, 0.00000],
-    [0.93725, 0.10588, 0.00000],
-    [0.95294, 0.09020, 0.00000],
-    [0.96863, 0.07451, 0.00000],
-    [0.98431, 0.05882, 0.00000],
-    [1.00000, 0.04314, 0.00000],
-]
-
-Mirp = [
-    [0.000000, 0.000000, 1.000000],
-    [0.000000, 0.060295, 1.000000],
-    [0.000000, 0.112233, 1.000000],
-    [0.000000, 0.157963, 1.000000],
-    [0.000000, 0.198902, 1.000000],
-    [0.000000, 0.236033, 1.000000],
-    [0.000000, 0.270066, 1.000000],
-    [0.000000, 0.301531, 1.000000],
-    [0.000000, 0.330834, 1.000000],
-    [0.000000, 0.358294, 1.000000],
-    [0.000000, 0.384164, 1.000000],
-    [0.000000, 0.408651, 1.000000],
-    [0.000000, 0.431924, 1.000000],
-    [0.000000, 0.454124, 1.000000],
-    [0.000000, 0.475368, 1.000000],
-    [0.000000, 0.495760, 1.000000],
-    [0.000000, 0.515384, 1.000000],
-    [0.000000, 0.534315, 1.000000],
-    [0.000000, 0.552619, 1.000000],
-    [0.000000, 0.570353, 1.000000],
-    [0.000000, 0.587566, 1.000000],
-    [0.000000, 0.604304, 1.000000],
-    [0.000000, 0.620605, 1.000000],
-    [0.000000, 0.636507, 1.000000],
-    [0.000000, 0.652040, 1.000000],
-    [0.000000, 0.667234, 1.000000],
-    [0.000000, 0.682114, 1.000000],
-    [0.000000, 0.696706, 1.000000],
-    [0.000000, 0.711030, 1.000000],
-    [0.000000, 0.725108, 1.000000],
-    [0.000000, 0.738957, 1.000000],
-    [0.000000, 0.752595, 1.000000],
-    [0.000000, 0.766038, 1.000000],
-    [0.000000, 0.779300, 1.000000],
-    [0.000000, 0.792396, 1.000000],
-    [0.000000, 0.805338, 1.000000],
-    [0.000000, 0.818139, 1.000000],
-    [0.000000, 0.830811, 1.000000],
-    [0.000000, 0.843364, 1.000000],
-    [0.000000, 0.855809, 1.000000],
-    [0.000000, 0.868156, 1.000000],
-    [0.000000, 0.880414, 1.000000],
-    [0.000000, 0.892592, 1.000000],
-    [0.000000, 0.904700, 1.000000],
-    [0.000000, 0.916746, 1.000000],
-    [0.000000, 0.928738, 1.000000],
-    [0.000000, 0.940684, 1.000000],
-    [0.000000, 0.952592, 1.000000],
-    [0.000000, 0.964470, 1.000000],
-    [0.000000, 0.976326, 1.000000],
-    [0.000000, 0.988167, 1.000000],
-    [0.000000, 1.000000, 1.000000],
-    [0.000000, 1.000000, 0.988167],
-    [0.000000, 1.000000, 0.976326],
-    [0.000000, 1.000000, 0.964470],
-    [0.000000, 1.000000, 0.952592],
-    [0.000000, 1.000000, 0.940684],
-    [0.000000, 1.000000, 0.928738],
-    [0.000000, 1.000000, 0.916746],
-    [0.000000, 1.000000, 0.904700],
-    [0.000000, 1.000000, 0.892592],
-    [0.000000, 1.000000, 0.880414],
-    [0.000000, 1.000000, 0.868156],
-    [0.000000, 1.000000, 0.855809],
-    [0.000000, 1.000000, 0.843364],
-    [0.000000, 1.000000, 0.830811],
-    [0.000000, 1.000000, 0.818139],
-    [0.000000, 1.000000, 0.805338],
-    [0.000000, 1.000000, 0.792396],
-    [0.000000, 1.000000, 0.779300],
-    [0.000000, 1.000000, 0.766038],
-    [0.000000, 1.000000, 0.752595],
-    [0.000000, 1.000000, 0.738957],
-    [0.000000, 1.000000, 0.725108],
-    [0.000000, 1.000000, 0.711030],
-    [0.000000, 1.000000, 0.696706],
-    [0.000000, 1.000000, 0.682114],
-    [0.000000, 1.000000, 0.667234],
-    [0.000000, 1.000000, 0.652040],
-    [0.000000, 1.000000, 0.636507],
-    [0.000000, 1.000000, 0.620605],
-    [0.000000, 1.000000, 0.604304],
-    [0.000000, 1.000000, 0.587566],
-    [0.000000, 1.000000, 0.570353],
-    [0.000000, 1.000000, 0.552619],
-    [0.000000, 1.000000, 0.534315],
-    [0.000000, 1.000000, 0.515384],
-    [0.000000, 1.000000, 0.495760],
-    [0.000000, 1.000000, 0.475368],
-    [0.000000, 1.000000, 0.454124],
-    [0.000000, 1.000000, 0.431924],
-    [0.000000, 1.000000, 0.408651],
-    [0.000000, 1.000000, 0.384164],
-    [0.000000, 1.000000, 0.358294],
-    [0.000000, 1.000000, 0.330834],
-    [0.000000, 1.000000, 0.301531],
-    [0.000000, 1.000000, 0.270066],
-    [0.000000, 1.000000, 0.236033],
-    [0.000000, 1.000000, 0.198902],
-    [0.000000, 1.000000, 0.157963],
-    [0.000000, 1.000000, 0.112233],
-    [0.000000, 1.000000, 0.060295],
-    [0.000000, 1.000000, 0.000000],
-    [0.060295, 1.000000, 0.000000],
-    [0.112233, 1.000000, 0.000000],
-    [0.157963, 1.000000, 0.000000],
-    [0.198902, 1.000000, 0.000000],
-    [0.236033, 1.000000, 0.000000],
-    [0.270066, 1.000000, 0.000000],
-    [0.301531, 1.000000, 0.000000],
-    [0.330834, 1.000000, 0.000000],
-    [0.358294, 1.000000, 0.000000],
-    [0.384164, 1.000000, 0.000000],
-    [0.408651, 1.000000, 0.000000],
-    [0.431924, 1.000000, 0.000000],
-    [0.454124, 1.000000, 0.000000],
-    [0.475368, 1.000000, 0.000000],
-    [0.495760, 1.000000, 0.000000],
-    [0.515384, 1.000000, 0.000000],
-    [0.534315, 1.000000, 0.000000],
-    [0.552619, 1.000000, 0.000000],
-    [0.570353, 1.000000, 0.000000],
-    [0.587566, 1.000000, 0.000000],
-    [0.604304, 1.000000, 0.000000],
-    [0.620605, 1.000000, 0.000000],
-    [0.636507, 1.000000, 0.000000],
-    [0.652040, 1.000000, 0.000000],
-    [0.667234, 1.000000, 0.000000],
-    [0.682114, 1.000000, 0.000000],
-    [0.696706, 1.000000, 0.000000],
-    [0.711030, 1.000000, 0.000000],
-    [0.725108, 1.000000, 0.000000],
-    [0.738957, 1.000000, 0.000000],
-    [0.752595, 1.000000, 0.000000],
-    [0.766038, 1.000000, 0.000000],
-    [0.779300, 1.000000, 0.000000],
-    [0.792396, 1.000000, 0.000000],
-    [0.805338, 1.000000, 0.000000],
-    [0.818139, 1.000000, 0.000000],
-    [0.830811, 1.000000, 0.000000],
-    [0.843364, 1.000000, 0.000000],
-    [0.855809, 1.000000, 0.000000],
-    [0.868156, 1.000000, 0.000000],
-    [0.880414, 1.000000, 0.000000],
-    [0.892592, 1.000000, 0.000000],
-    [0.904700, 1.000000, 0.000000],
-    [0.916746, 1.000000, 0.000000],
-    [0.928738, 1.000000, 0.000000],
-    [0.940684, 1.000000, 0.000000],
-    [0.952592, 1.000000, 0.000000],
-    [0.964470, 1.000000, 0.000000],
-    [0.976326, 1.000000, 0.000000],
-    [0.988167, 1.000000, 0.000000],
-    [1.000000, 1.000000, 0.000000],
-    [1.000000, 0.988167, 0.000000],
-    [1.000000, 0.976326, 0.000000],
-    [1.000000, 0.964470, 0.000000],
-    [1.000000, 0.952592, 0.000000],
-    [1.000000, 0.940684, 0.000000],
-    [1.000000, 0.928738, 0.000000],
-    [1.000000, 0.916746, 0.000000],
-    [1.000000, 0.904700, 0.000000],
-    [1.000000, 0.892592, 0.000000],
-    [1.000000, 0.880414, 0.000000],
-    [1.000000, 0.868156, 0.000000],
-    [1.000000, 0.855809, 0.000000],
-    [1.000000, 0.843364, 0.000000],
-    [1.000000, 0.830811, 0.000000],
-    [1.000000, 0.818139, 0.000000],
-    [1.000000, 0.805338, 0.000000],
-    [1.000000, 0.792396, 0.000000],
-    [1.000000, 0.779300, 0.000000],
-    [1.000000, 0.766038, 0.000000],
-    [1.000000, 0.752595, 0.000000],
-    [1.000000, 0.738957, 0.000000],
-    [1.000000, 0.725108, 0.000000],
-    [1.000000, 0.711030, 0.000000],
-    [1.000000, 0.696706, 0.000000],
-    [1.000000, 0.682114, 0.000000],
-    [1.000000, 0.667234, 0.000000],
-    [1.000000, 0.652040, 0.000000],
-    [1.000000, 0.636507, 0.000000],
-    [1.000000, 0.620605, 0.000000],
-    [1.000000, 0.604304, 0.000000],
-    [1.000000, 0.587566, 0.000000],
-    [1.000000, 0.570353, 0.000000],
-    [1.000000, 0.552619, 0.000000],
-    [1.000000, 0.534315, 0.000000],
-    [1.000000, 0.515384, 0.000000],
-    [1.000000, 0.495760, 0.000000],
-    [1.000000, 0.475368, 0.000000],
-    [1.000000, 0.454124, 0.000000],
-    [1.000000, 0.431924, 0.000000],
-    [1.000000, 0.408651, 0.000000],
-    [1.000000, 0.384164, 0.000000],
-    [1.000000, 0.358294, 0.000000],
-    [1.000000, 0.330834, 0.000000],
-    [1.000000, 0.301531, 0.000000],
-    [1.000000, 0.270066, 0.000000],
-    [1.000000, 0.236033, 0.000000],
-    [1.000000, 0.198902, 0.000000],
-    [1.000000, 0.157963, 0.000000],
-    [1.000000, 0.112233, 0.000000],
-    [1.000000, 0.060295, 0.000000],
-    [1.000000, 0.000000, 0.000000],
-    [1.000000, 0.000000, 0.060295],
-    [1.000000, 0.000000, 0.112233],
-    [1.000000, 0.000000, 0.157963],
-    [1.000000, 0.000000, 0.198902],
-    [1.000000, 0.000000, 0.236033],
-    [1.000000, 0.000000, 0.270066],
-    [1.000000, 0.000000, 0.301531],
-    [1.000000, 0.000000, 0.330834],
-    [1.000000, 0.000000, 0.358294],
-    [1.000000, 0.000000, 0.384164],
-    [1.000000, 0.000000, 0.408651],
-    [1.000000, 0.000000, 0.431924],
-    [1.000000, 0.000000, 0.454124],
-    [1.000000, 0.000000, 0.475368],
-    [1.000000, 0.000000, 0.495760],
-    [1.000000, 0.000000, 0.515384],
-    [1.000000, 0.000000, 0.534315],
-    [1.000000, 0.000000, 0.552619],
-    [1.000000, 0.000000, 0.570353],
-    [1.000000, 0.000000, 0.587566],
-    [1.000000, 0.000000, 0.604304],
-    [1.000000, 0.000000, 0.620605],
-    [1.000000, 0.000000, 0.636507],
-    [1.000000, 0.000000, 0.652040],
-    [1.000000, 0.000000, 0.667234],
-    [1.000000, 0.000000, 0.682114],
-    [1.000000, 0.000000, 0.696706],
-    [1.000000, 0.000000, 0.711030],
-    [1.000000, 0.000000, 0.725108],
-    [1.000000, 0.000000, 0.738957],
-    [1.000000, 0.000000, 0.752595],
-    [1.000000, 0.000000, 0.766038],
-    [1.000000, 0.000000, 0.779300],
-    [1.000000, 0.000000, 0.792396],
-    [1.000000, 0.000000, 0.805338],
-    [1.000000, 0.000000, 0.818139],
-    [1.000000, 0.000000, 0.830811],
-    [1.000000, 0.000000, 0.843364],
-    [1.000000, 0.000000, 0.855809],
-    [1.000000, 0.000000, 0.868156],
-    [1.000000, 0.000000, 0.880414],
-    [1.000000, 0.000000, 0.892592],
-    [1.000000, 0.000000, 0.904700],
-    [1.000000, 0.000000, 0.916746],
-    [1.000000, 0.000000, 0.928738],
-    [1.000000, 0.000000, 0.940684],
-    [1.000000, 0.000000, 0.952592],
-    [1.000000, 0.000000, 0.964470],
-    [1.000000, 0.000000, 0.976326],
-    [1.000000, 0.000000, 0.988167],
-    [1.000000, 0.000000, 1.000000],
-]
+Background = [
+    [0.00000, 0.00000, 0.00000], [0.01587, 0.01587, 0.01587], [0.03174,
+    0.03174, 0.03174], [0.04761, 0.04761, 0.04761], [0.06348, 0.06348,
+    0.06348], [0.07935, 0.07935, 0.07935], [0.09522, 0.09522, 0.09522],
+    [0.11109, 0.11109, 0.11109], [0.12696, 0.12696, 0.12696], [0.14283,
+    0.14283, 0.14283], [0.15870, 0.15870, 0.15870], [0.17457, 0.17457,
+    0.17457], [0.19044, 0.19044, 0.19044], [0.20631, 0.20631, 0.20631],
+    [0.22218, 0.22218, 0.22218], [0.23805, 0.23805, 0.23805], [0.25392,
+    0.25392, 0.25392], [0.26979, 0.26979, 0.26979], [0.28566, 0.28566,
+    0.28566], [0.30153, 0.30153, 0.30153], [0.31740, 0.31740, 0.31740],
+    [0.33327, 0.33327, 0.33327], [0.34914, 0.34914, 0.34914], [0.36501,
+    0.36501, 0.36501], [0.38088, 0.38088, 0.38088], [0.39675, 0.39675,
+    0.39675], [0.41262, 0.41262, 0.41262], [0.42849, 0.42849, 0.42849],
+    [0.44436, 0.44436, 0.44436], [0.46023, 0.46023, 0.46023], [0.47610,
+    0.47610, 0.47610], [0.49197, 0.49197, 0.49197], [0.50784, 0.50784,
+    0.50784], [0.52371, 0.52371, 0.52371], [0.53958, 0.53958, 0.53958],
+    [0.55545, 0.55545, 0.55545], [0.57132, 0.57132, 0.57132], [0.58719,
+    0.58719, 0.58719], [0.60306, 0.60306, 0.60306], [0.61893, 0.61893,
+    0.61893], [0.63480, 0.63480, 0.63480], [0.65067, 0.65067, 0.65067],
+    [0.66654, 0.66654, 0.66654], [0.68241, 0.68241, 0.68241], [0.69828,
+    0.69828, 0.69828], [0.71415, 0.71415, 0.71415], [0.73002, 0.73002,
+    0.73002], [0.74589, 0.74589, 0.74589], [0.76176, 0.76176, 0.76176],
+    [0.77763, 0.77763, 0.77763], [0.79350, 0.79350, 0.79350], [0.80937,
+    0.80937, 0.80937], [0.82524, 0.82524, 0.82524], [0.84111, 0.84111,
+    0.84111], [0.85698, 0.85698, 0.85698], [0.87285, 0.87285, 0.87285],
+    [0.88872, 0.88872, 0.88872], [0.90459, 0.90459, 0.90459], [0.92046,
+    0.92046, 0.92046], [0.93633, 0.93633, 0.93633], [0.95220, 0.95220,
+    0.95220], [0.96807, 0.96807, 0.96807], [0.98394, 0.98394, 0.98394],
+    [0.99981, 0.99981, 0.99981], [0.00000, 0.00000, 0.99981], [0.00000,
+    0.01587, 0.98394], [0.00000, 0.03174, 0.96807], [0.00000, 0.04761,
+    0.95220], [0.00000, 0.06348, 0.93633], [0.00000, 0.07935, 0.92046],
+    [0.00000, 0.09522, 0.90459], [0.00000, 0.11109, 0.88872], [0.00000,
+    0.12696, 0.87285], [0.00000, 0.14283, 0.85698], [0.00000, 0.15870,
+    0.84111], [0.00000, 0.17457, 0.82524], [0.00000, 0.19044, 0.80937],
+    [0.00000, 0.20631, 0.79350], [0.00000, 0.22218, 0.77763], [0.00000,
+    0.23805, 0.76176], [0.00000, 0.25392, 0.74589], [0.00000, 0.26979,
+    0.73002], [0.00000, 0.28566, 0.71415], [0.00000, 0.30153, 0.69828],
+    [0.00000, 0.31740, 0.68241], [0.00000, 0.33327, 0.66654], [0.00000,
+    0.34914, 0.65067], [0.00000, 0.36501, 0.63480], [0.00000, 0.38088,
+    0.61893], [0.00000, 0.39675, 0.60306], [0.00000, 0.41262, 0.58719],
+    [0.00000, 0.42849, 0.57132], [0.00000, 0.44436, 0.55545], [0.00000,
+    0.46023, 0.53958], [0.00000, 0.47610, 0.52371], [0.00000, 0.49197,
+    0.50784], [0.00000, 0.50784, 0.49197], [0.00000, 0.52371, 0.47610],
+    [0.00000, 0.53958, 0.46023], [0.00000, 0.55545, 0.44436], [0.00000,
+    0.57132, 0.42849], [0.00000, 0.58719, 0.41262], [0.00000, 0.60306,
+    0.39675], [0.00000, 0.61893, 0.38088], [0.00000, 0.63480, 0.36501],
+    [0.00000, 0.65067, 0.34914], [0.00000, 0.66654, 0.33327], [0.00000,
+    0.68241, 0.31740], [0.00000, 0.69828, 0.30153], [0.00000, 0.71415,
+    0.28566], [0.00000, 0.73002, 0.26979], [0.00000, 0.74589, 0.25392],
+    [0.00000, 0.76176, 0.23805], [0.00000, 0.77763, 0.22218], [0.00000,
+    0.79350, 0.20631], [0.00000, 0.80937, 0.19044], [0.00000, 0.82524,
+    0.17457], [0.00000, 0.84111, 0.15870], [0.00000, 0.85698, 0.14283],
+    [0.00000, 0.87285, 0.12696], [0.00000, 0.88872, 0.11109], [0.00000,
+    0.90459, 0.09522], [0.00000, 0.92046, 0.07935], [0.00000, 0.93633,
+    0.06348], [0.00000, 0.95220, 0.04761], [0.00000, 0.96807, 0.03174],
+    [0.00000, 0.98394, 0.01587], [0.00000, 0.99981, 0.00000], [0.00000,
+    1.00000, 0.00000], [0.01587, 1.00000, 0.00000], [0.03174, 1.00000,
+    0.00000], [0.04761, 1.00000, 0.00000], [0.06348, 1.00000, 0.00000],
+    [0.07935, 1.00000, 0.00000], [0.09522, 1.00000, 0.00000], [0.11109,
+    1.00000, 0.00000], [0.12696, 1.00000, 0.00000], [0.14283, 1.00000,
+    0.00000], [0.15870, 1.00000, 0.00000], [0.17457, 1.00000, 0.00000],
+    [0.19044, 1.00000, 0.00000], [0.20631, 1.00000, 0.00000], [0.22218,
+    1.00000, 0.00000], [0.23805, 1.00000, 0.00000], [0.25392, 1.00000,
+    0.00000], [0.26979, 1.00000, 0.00000], [0.28566, 1.00000, 0.00000],
+    [0.30153, 1.00000, 0.00000], [0.31740, 1.00000, 0.00000], [0.33327,
+    1.00000, 0.00000], [0.34914, 1.00000, 0.00000], [0.36501, 1.00000,
+    0.00000], [0.38088, 1.00000, 0.00000], [0.39675, 1.00000, 0.00000],
+    [0.41262, 1.00000, 0.00000], [0.42849, 1.00000, 0.00000], [0.44436,
+    1.00000, 0.00000], [0.46023, 1.00000, 0.00000], [0.47610, 1.00000,
+    0.00000], [0.49197, 1.00000, 0.00000], [0.50784, 1.00000, 0.00000],
+    [0.52371, 1.00000, 0.00000], [0.53958, 1.00000, 0.00000], [0.55545,
+    1.00000, 0.00000], [0.57132, 1.00000, 0.00000], [0.58719, 1.00000,
+    0.00000], [0.60306, 1.00000, 0.00000], [0.61893, 1.00000, 0.00000],
+    [0.63480, 1.00000, 0.00000], [0.65067, 1.00000, 0.00000], [0.66654,
+    1.00000, 0.00000], [0.68241, 1.00000, 0.00000], [0.69828, 1.00000,
+    0.00000], [0.71415, 1.00000, 0.00000], [0.73002, 1.00000, 0.00000],
+    [0.74589, 1.00000, 0.00000], [0.76176, 1.00000, 0.00000], [0.77763,
+    1.00000, 0.00000], [0.79350, 1.00000, 0.00000], [0.80937, 1.00000,
+    0.00000], [0.82524, 1.00000, 0.00000], [0.84111, 1.00000, 0.00000],
+    [0.85698, 1.00000, 0.00000], [0.87285, 1.00000, 0.00000], [0.88872,
+    1.00000, 0.00000], [0.90459, 1.00000, 0.00000], [0.92046, 1.00000,
+    0.00000], [0.93633, 1.00000, 0.00000], [0.95220, 1.00000, 0.00000],
+    [0.96807, 1.00000, 0.00000], [0.98394, 1.00000, 0.00000], [0.99981,
+    1.00000, 0.00000], [1.00000, 0.99981, 0.00000], [1.00000, 0.98394,
+    0.00000], [1.00000, 0.96807, 0.00000], [1.00000, 0.95220, 0.00000],
+    [1.00000, 0.93633, 0.00000], [1.00000, 0.92046, 0.00000], [1.00000,
+    0.90459, 0.00000], [1.00000, 0.88872, 0.00000], [1.00000, 0.87285,
+    0.00000], [1.00000, 0.85698, 0.00000], [1.00000, 0.84111, 0.00000],
+    [1.00000, 0.82524, 0.00000], [1.00000, 0.80937, 0.00000], [1.00000,
+    0.79350, 0.00000], [1.00000, 0.77763, 0.00000], [1.00000, 0.76176,
+    0.00000], [1.00000, 0.74589, 0.00000], [1.00000, 0.73002, 0.00000],
+    [1.00000, 0.71415, 0.00000], [1.00000, 0.69828, 0.00000], [1.00000,
+    0.68241, 0.00000], [1.00000, 0.66654, 0.00000], [1.00000, 0.65067,
+    0.00000], [1.00000, 0.63480, 0.00000], [1.00000, 0.61893, 0.00000],
+    [1.00000, 0.60306, 0.00000], [1.00000, 0.58719, 0.00000], [1.00000,
+    0.57132, 0.00000], [1.00000, 0.55545, 0.00000], [1.00000, 0.53958,
+    0.00000], [1.00000, 0.52371, 0.00000], [1.00000, 0.50784, 0.00000],
+    [1.00000, 0.49197, 0.00000], [1.00000, 0.47610, 0.00000], [1.00000,
+    0.46023, 0.00000], [1.00000, 0.44436, 0.00000], [1.00000, 0.42849,
+    0.00000], [1.00000, 0.41262, 0.00000], [1.00000, 0.39675, 0.00000],
+    [1.00000, 0.38088, 0.00000], [1.00000, 0.36501, 0.00000], [1.00000,
+    0.34914, 0.00000], [1.00000, 0.33327, 0.00000], [1.00000, 0.31740,
+    0.00000], [1.00000, 0.30153, 0.00000], [1.00000, 0.28566, 0.00000],
+    [1.00000, 0.26979, 0.00000], [1.00000, 0.25392, 0.00000], [1.00000,
+    0.23805, 0.00000], [1.00000, 0.22218, 0.00000], [1.00000, 0.20631,
+    0.00000], [1.00000, 0.19044, 0.00000], [1.00000, 0.17457, 0.00000],
+    [1.00000, 0.15870, 0.00000], [1.00000, 0.14283, 0.00000], [1.00000,
+    0.12696, 0.00000], [1.00000, 0.11109, 0.00000], [1.00000, 0.09522,
+    0.00000], [1.00000, 0.07935, 0.00000], [1.00000, 0.06348, 0.00000],
+    [1.00000, 0.04761, 0.00000], [1.00000, 0.03174, 0.00000], [1.00000,
+    0.01587, 0.00000], [1.00000, 0.00000, 0.00000], ]
+
+Heat = [
+    [0.00000, 0.00000, 0.00000], [0.01176, 0.00392, 0.00000], [0.02353,
+    0.00784, 0.00000], [0.03529, 0.01176, 0.00000], [0.04706, 0.01569,
+    0.00000], [0.05882, 0.01961, 0.00000], [0.07059, 0.02353, 0.00000],
+    [0.08235, 0.02745, 0.00000], [0.09412, 0.03137, 0.00000], [0.10588,
+    0.03529, 0.00000], [0.11765, 0.03922, 0.00000], [0.12941, 0.04314,
+    0.00000], [0.14118, 0.04706, 0.00000], [0.15294, 0.05098, 0.00000],
+    [0.16471, 0.05490, 0.00000], [0.17647, 0.05882, 0.00000], [0.18824,
+    0.06275, 0.00000], [0.20000, 0.06667, 0.00000], [0.21176, 0.07059,
+    0.00000], [0.22353, 0.07451, 0.00000], [0.23529, 0.07843, 0.00000],
+    [0.24706, 0.08235, 0.00000], [0.25882, 0.08627, 0.00000], [0.27059,
+    0.09020, 0.00000], [0.28235, 0.09412, 0.00000], [0.29412, 0.09804,
+    0.00000], [0.30588, 0.10196, 0.00000], [0.31765, 0.10588, 0.00000],
+    [0.32941, 0.10980, 0.00000], [0.34118, 0.11373, 0.00000], [0.35294,
+    0.11765, 0.00000], [0.36471, 0.12157, 0.00000], [0.37647, 0.12549,
+    0.00000], [0.38824, 0.12941, 0.00000], [0.40000, 0.13333, 0.00000],
+    [0.41176, 0.13725, 0.00000], [0.42353, 0.14118, 0.00000], [0.43529,
+    0.14510, 0.00000], [0.44706, 0.14902, 0.00000], [0.45882, 0.15294,
+    0.00000], [0.47059, 0.15686, 0.00000], [0.48235, 0.16078, 0.00000],
+    [0.49412, 0.16471, 0.00000], [0.50588, 0.16863, 0.00000], [0.51765,
+    0.17255, 0.00000], [0.52941, 0.17647, 0.00000], [0.54118, 0.18039,
+    0.00000], [0.55294, 0.18431, 0.00000], [0.56471, 0.18824, 0.00000],
+    [0.57647, 0.19216, 0.00000], [0.58824, 0.19608, 0.00000], [0.60000,
+    0.20000, 0.00000], [0.61176, 0.20392, 0.00000], [0.62353, 0.20784,
+    0.00000], [0.63529, 0.21176, 0.00000], [0.64706, 0.21569, 0.00000],
+    [0.65882, 0.21961, 0.00000], [0.67059, 0.22353, 0.00000], [0.68235,
+    0.22745, 0.00000], [0.69412, 0.23137, 0.00000], [0.70588, 0.23529,
+    0.00000], [0.71765, 0.23922, 0.00000], [0.72941, 0.24314, 0.00000],
+    [0.74118, 0.24706, 0.00000], [0.75294, 0.25098, 0.00000], [0.76471,
+    0.25490, 0.00000], [0.77647, 0.25882, 0.00000], [0.78824, 0.26275,
+    0.00000], [0.80000, 0.26667, 0.00000], [0.81176, 0.27059, 0.00000],
+    [0.82353, 0.27451, 0.00000], [0.83529, 0.27843, 0.00000], [0.84706,
+    0.28235, 0.00000], [0.85882, 0.28627, 0.00000], [0.87059, 0.29020,
+    0.00000], [0.88235, 0.29412, 0.00000], [0.89412, 0.29804, 0.00000],
+    [0.90588, 0.30196, 0.00000], [0.91765, 0.30588, 0.00000], [0.92941,
+    0.30980, 0.00000], [0.94118, 0.31373, 0.00000], [0.95294, 0.31765,
+    0.00000], [0.96471, 0.32157, 0.00000], [0.97647, 0.32549, 0.00000],
+    [0.98824, 0.32941, 0.00000], [1.00000, 0.33333, 0.00000], [1.00000,
+    0.33725, 0.00000], [1.00000, 0.34118, 0.00000], [1.00000, 0.34510,
+    0.00000], [1.00000, 0.34902, 0.00000], [1.00000, 0.35294, 0.00000],
+    [1.00000, 0.35686, 0.00000], [1.00000, 0.36078, 0.00000], [1.00000,
+    0.36471, 0.00000], [1.00000, 0.36863, 0.00000], [1.00000, 0.37255,
+    0.00000], [1.00000, 0.37647, 0.00000], [1.00000, 0.38039, 0.00000],
+    [1.00000, 0.38431, 0.00000], [1.00000, 0.38824, 0.00000], [1.00000,
+    0.39216, 0.00000], [1.00000, 0.39608, 0.00000], [1.00000, 0.40000,
+    0.00000], [1.00000, 0.40392, 0.00000], [1.00000, 0.40784, 0.00000],
+    [1.00000, 0.41176, 0.00000], [1.00000, 0.41569, 0.00000], [1.00000,
+    0.41961, 0.00000], [1.00000, 0.42353, 0.00000], [1.00000, 0.42745,
+    0.00000], [1.00000, 0.43137, 0.00000], [1.00000, 0.43529, 0.00000],
+    [1.00000, 0.43922, 0.00000], [1.00000, 0.44314, 0.00000], [1.00000,
+    0.44706, 0.00000], [1.00000, 0.45098, 0.00000], [1.00000, 0.45490,
+    0.00000], [1.00000, 0.45882, 0.00000], [1.00000, 0.46275, 0.00000],
+    [1.00000, 0.46667, 0.00000], [1.00000, 0.47059, 0.00000], [1.00000,
+    0.47451, 0.00000], [1.00000, 0.47843, 0.00000], [1.00000, 0.48235,
+    0.00000], [1.00000, 0.48627, 0.00000], [1.00000, 0.49020, 0.00000],
+    [1.00000, 0.49412, 0.00000], [1.00000, 0.49804, 0.00000], [1.00000,
+    0.50196, 0.00000], [1.00000, 0.50588, 0.00000], [1.00000, 0.50980,
+    0.00000], [1.00000, 0.51373, 0.00000], [1.00000, 0.51765, 0.00000],
+    [1.00000, 0.52157, 0.00000], [1.00000, 0.52549, 0.00000], [1.00000,
+    0.52941, 0.00000], [1.00000, 0.53333, 0.00000], [1.00000, 0.53725,
+    0.00000], [1.00000, 0.54118, 0.00000], [1.00000, 0.54510, 0.00000],
+    [1.00000, 0.54902, 0.00000], [1.00000, 0.55294, 0.00000], [1.00000,
+    0.55686, 0.00000], [1.00000, 0.56078, 0.00000], [1.00000, 0.56471,
+    0.00000], [1.00000, 0.56863, 0.00000], [1.00000, 0.57255, 0.00000],
+    [1.00000, 0.57647, 0.00000], [1.00000, 0.58039, 0.00000], [1.00000,
+    0.58431, 0.00000], [1.00000, 0.58824, 0.00000], [1.00000, 0.59216,
+    0.00000], [1.00000, 0.59608, 0.00000], [1.00000, 0.60000, 0.00000],
+    [1.00000, 0.60392, 0.00000], [1.00000, 0.60784, 0.00000], [1.00000,
+    0.61176, 0.00000], [1.00000, 0.61569, 0.00000], [1.00000, 0.61961,
+    0.00000], [1.00000, 0.62353, 0.00000], [1.00000, 0.62745, 0.00000],
+    [1.00000, 0.63137, 0.00000], [1.00000, 0.63529, 0.00000], [1.00000,
+    0.63922, 0.00000], [1.00000, 0.64314, 0.00000], [1.00000, 0.64706,
+    0.00000], [1.00000, 0.65098, 0.01176], [1.00000, 0.65490, 0.02353],
+    [1.00000, 0.65882, 0.03529], [1.00000, 0.66275, 0.04706], [1.00000,
+    0.66667, 0.05882], [1.00000, 0.67059, 0.07059], [1.00000, 0.67451,
+    0.08235], [1.00000, 0.67843, 0.09412], [1.00000, 0.68235, 0.10588],
+    [1.00000, 0.68627, 0.11765], [1.00000, 0.69020, 0.12941], [1.00000,
+    0.69412, 0.14118], [1.00000, 0.69804, 0.15294], [1.00000, 0.70196,
+    0.16471], [1.00000, 0.70588, 0.17647], [1.00000, 0.70980, 0.18824],
+    [1.00000, 0.71373, 0.20000], [1.00000, 0.71765, 0.21176], [1.00000,
+    0.72157, 0.22353], [1.00000, 0.72549, 0.23529], [1.00000, 0.72941,
+    0.24706], [1.00000, 0.73333, 0.25882], [1.00000, 0.73725, 0.27059],
+    [1.00000, 0.74118, 0.28235], [1.00000, 0.74510, 0.29412], [1.00000,
+    0.74902, 0.30588], [1.00000, 0.75294, 0.31765], [1.00000, 0.75686,
+    0.32941], [1.00000, 0.76078, 0.34118], [1.00000, 0.76471, 0.35294],
+    [1.00000, 0.76863, 0.36471], [1.00000, 0.77255, 0.37647], [1.00000,
+    0.77647, 0.38824], [1.00000, 0.78039, 0.40000], [1.00000, 0.78431,
+    0.41176], [1.00000, 0.78824, 0.42353], [1.00000, 0.79216, 0.43529],
+    [1.00000, 0.79608, 0.44706], [1.00000, 0.80000, 0.45882], [1.00000,
+    0.80392, 0.47059], [1.00000, 0.80784, 0.48235], [1.00000, 0.81176,
+    0.49412], [1.00000, 0.81569, 0.50588], [1.00000, 0.81961, 0.51765],
+    [1.00000, 0.82353, 0.52941], [1.00000, 0.82745, 0.54118], [1.00000,
+    0.83137, 0.55294], [1.00000, 0.83529, 0.56471], [1.00000, 0.83922,
+    0.57647], [1.00000, 0.84314, 0.58824], [1.00000, 0.84706, 0.60000],
+    [1.00000, 0.85098, 0.61176], [1.00000, 0.85490, 0.62353], [1.00000,
+    0.85882, 0.63529], [1.00000, 0.86275, 0.64706], [1.00000, 0.86667,
+    0.65882], [1.00000, 0.87059, 0.67059], [1.00000, 0.87451, 0.68235],
+    [1.00000, 0.87843, 0.69412], [1.00000, 0.88235, 0.70588], [1.00000,
+    0.88627, 0.71765], [1.00000, 0.89020, 0.72941], [1.00000, 0.89412,
+    0.74118], [1.00000, 0.89804, 0.75294], [1.00000, 0.90196, 0.76471],
+    [1.00000, 0.90588, 0.77647], [1.00000, 0.90980, 0.78824], [1.00000,
+    0.91373, 0.80000], [1.00000, 0.91765, 0.81176], [1.00000, 0.92157,
+    0.82353], [1.00000, 0.92549, 0.83529], [1.00000, 0.92941, 0.84706],
+    [1.00000, 0.93333, 0.85882], [1.00000, 0.93725, 0.87059], [1.00000,
+    0.94118, 0.88235], [1.00000, 0.94510, 0.89412], [1.00000, 0.94902,
+    0.90588], [1.00000, 0.95294, 0.91765], [1.00000, 0.95686, 0.92941],
+    [1.00000, 0.96078, 0.94118], [1.00000, 0.96471, 0.95294], [1.00000,
+    0.96863, 0.96471], [1.00000, 0.97255, 0.97647], [1.00000, 0.97647,
+    0.98824], [1.00000, 0.98039, 1.00000], [1.00000, 0.98431, 1.00000],
+    [1.00000, 0.98824, 1.00000], [1.00000, 0.99216, 1.00000], [1.00000,
+    0.99608, 1.00000], [1.00000, 1.00000, 1.00000], ]
+
+Isophot = [
+    [0.00000, 0.00000, 0.00000], [0.00000, 0.00000, 0.00000], [0.00000,
+    0.00000, 0.00000], [0.00000, 0.00000, 0.00000], [0.00000, 0.00000,
+    0.00000], [0.00000, 0.00000, 0.03922], [0.00000, 0.00000, 0.07843],
+    [0.00000, 0.00000, 0.11765], [0.00000, 0.00000, 0.15686], [0.00000,
+    0.00000, 0.19608], [0.00000, 0.00000, 0.23529], [0.00000, 0.00000,
+    0.27843], [0.00000, 0.00000, 0.31765], [0.00000, 0.00000, 0.35686],
+    [0.00000, 0.00000, 0.39608], [0.00000, 0.00000, 0.43529], [0.00000,
+    0.00000, 0.47451], [0.00000, 0.00000, 0.51765], [0.00000, 0.00000,
+    0.55686], [0.00000, 0.00000, 0.59608], [0.00000, 0.00000, 0.63529],
+    [0.00000, 0.00000, 0.67451], [0.00000, 0.00000, 0.71765], [1.00000,
+    1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000,
+    1.00000], [0.00000, 0.00000, 0.87843], [0.00000, 0.00000, 0.91765],
+    [0.00000, 0.00000, 0.95686], [0.00000, 0.00000, 1.00000], [0.00000,
+    0.03137, 1.00000], [0.00000, 0.06275, 1.00000], [0.00000, 0.09412,
+    1.00000], [0.00000, 0.12549, 1.00000], [0.00000, 0.15686, 1.00000],
+    [0.00000, 0.18824, 1.00000], [0.00000, 0.21961, 1.00000], [0.00000,
+    0.25490, 1.00000], [0.00000, 0.28627, 1.00000], [0.00000, 0.31765,
+    1.00000], [0.00000, 0.34902, 1.00000], [0.00000, 0.38039, 1.00000],
+    [0.00000, 0.41176, 1.00000], [0.00000, 0.44314, 1.00000], [0.00000,
+    0.47843, 1.00000], [0.00000, 0.49804, 1.00000], [0.00000, 0.51765,
+    1.00000], [0.00000, 0.53725, 1.00000], [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [0.00000,
+    0.61961, 1.00000], [0.00000, 0.63922, 1.00000], [0.00000, 0.65882,
+    1.00000], [0.00000, 0.67843, 1.00000], [0.00000, 0.70196, 1.00000],
+    [0.00000, 0.72157, 1.00000], [0.00000, 0.74118, 1.00000], [0.00000,
+    0.76078, 1.00000], [0.00000, 0.78431, 1.00000], [0.00000, 0.79608,
+    1.00000], [0.00000, 0.81176, 1.00000], [0.00000, 0.82353, 1.00000],
+    [0.00000, 0.83922, 1.00000], [0.00000, 0.85490, 1.00000], [0.00000,
+    0.86667, 1.00000], [0.00000, 0.88235, 1.00000], [0.00000, 0.89412,
+    1.00000], [0.00000, 0.90980, 1.00000], [0.00000, 0.92549, 1.00000],
+    [0.00000, 0.93725, 1.00000], [0.00000, 0.95294, 1.00000], [0.00000,
+    0.96863, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000,
+    1.00000], [1.00000, 1.00000, 1.00000], [0.00000, 1.00000, 0.96078],
+    [0.00000, 1.00000, 0.94118], [0.00000, 1.00000, 0.92157], [0.00000,
+    1.00000, 0.90196], [0.00000, 1.00000, 0.88235], [0.00000, 1.00000,
+    0.86275], [0.00000, 1.00000, 0.84314], [0.00000, 1.00000, 0.82353],
+    [0.00000, 1.00000, 0.80392], [0.00000, 1.00000, 0.78431], [0.00000,
+    1.00000, 0.76471], [0.00000, 1.00000, 0.74510], [0.00000, 1.00000,
+    0.72549], [0.00000, 1.00000, 0.70588], [0.00000, 1.00000, 0.65490],
+    [0.00000, 1.00000, 0.60784], [0.00000, 1.00000, 0.56078], [0.00000,
+    1.00000, 0.51373], [0.00000, 1.00000, 0.46667], [0.00000, 1.00000,
+    0.41961], [0.00000, 1.00000, 0.37255], [0.00000, 1.00000, 0.32549],
+    [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000,
+    1.00000, 1.00000], [0.00000, 1.00000, 0.13725], [0.00000, 1.00000,
+    0.09020], [0.00000, 1.00000, 0.04314], [0.00000, 1.00000, 0.00000],
+    [0.04706, 1.00000, 0.00000], [0.09412, 1.00000, 0.00000], [0.14118,
+    1.00000, 0.00000], [0.18824, 1.00000, 0.00000], [0.23529, 1.00000,
+    0.00000], [0.28235, 1.00000, 0.00000], [0.32941, 1.00000, 0.00000],
+    [0.37647, 1.00000, 0.00000], [0.42353, 1.00000, 0.00000], [0.47059,
+    1.00000, 0.00000], [0.51765, 1.00000, 0.00000], [0.56471, 1.00000,
+    0.00000], [0.61176, 1.00000, 0.00000], [0.65882, 1.00000, 0.00000],
+    [0.70588, 1.00000, 0.00000], [0.72549, 1.00000, 0.00000], [0.74510,
+    1.00000, 0.00000], [0.76471, 1.00000, 0.00000], [1.00000, 1.00000,
+    1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000],
+    [0.84314, 1.00000, 0.00000], [0.86275, 1.00000, 0.00000], [0.88235,
+    1.00000, 0.00000], [0.90196, 1.00000, 0.00000], [0.92157, 1.00000,
+    0.00000], [0.94118, 1.00000, 0.00000], [0.96078, 1.00000, 0.00000],
+    [0.98039, 1.00000, 0.00000], [1.00000, 1.00000, 0.00000], [0.99608,
+    0.98039, 0.00000], [0.99608, 0.96078, 0.00000], [0.99608, 0.94118,
+    0.00000], [0.99608, 0.92549, 0.00000], [0.99216, 0.90588, 0.00000],
+    [0.99216, 0.88627, 0.00000], [0.99216, 0.87059, 0.00000], [0.99216,
+    0.85098, 0.00000], [0.98824, 0.83137, 0.00000], [0.98824, 0.81569,
+    0.00000], [0.98824, 0.79608, 0.00000], [0.98824, 0.77647, 0.00000],
+    [0.98824, 0.76078, 0.00000], [1.00000, 1.00000, 1.00000], [1.00000,
+    1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [0.98824, 0.69020,
+    0.00000], [0.98824, 0.67059, 0.00000], [0.98824, 0.65490, 0.00000],
+    [0.98824, 0.63922, 0.00000], [0.98824, 0.61961, 0.00000], [0.99216,
+    0.60392, 0.00000], [0.99216, 0.58824, 0.00000], [0.99216, 0.56863,
+    0.00000], [0.99216, 0.55294, 0.00000], [0.99608, 0.53725, 0.00000],
+    [0.99608, 0.51765, 0.00000], [0.99608, 0.50196, 0.00000], [0.99608,
+    0.48627, 0.00000], [1.00000, 0.47059, 0.00000], [1.00000, 0.43529,
+    0.00000], [1.00000, 0.40392, 0.00000], [1.00000, 0.37255, 0.00000],
+    [1.00000, 0.34118, 0.00000], [1.00000, 0.30980, 0.00000], [1.00000,
+    0.27843, 0.00000], [1.00000, 0.24706, 0.00000], [1.00000, 0.21569,
+    0.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000], [1.00000, 0.09020, 0.00000], [1.00000,
+    0.05882, 0.00000], [1.00000, 0.02745, 0.00000], [1.00000, 0.00000,
+    0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000,
+    0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000,
+    0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000,
+    0.00000, 0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000,
+    0.00000], [1.00000, 0.00000, 0.00000], [1.00000, 0.00000, 0.04706],
+    [1.00000, 0.00000, 0.09412], [1.00000, 0.00000, 0.14118], [1.00000,
+    1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000, 1.00000,
+    1.00000], [1.00000, 0.00000, 0.32941], [1.00000, 0.00000, 0.37647],
+    [1.00000, 0.00000, 0.42353], [1.00000, 0.00000, 0.47059], [1.00000,
+    0.00000, 0.51765], [1.00000, 0.00000, 0.56471], [1.00000, 0.00000,
+    0.61176], [1.00000, 0.00000, 0.65882], [1.00000, 0.00000, 0.70588],
+    [1.00000, 0.00000, 0.72549], [1.00000, 0.00000, 0.74902], [1.00000,
+    0.00000, 0.77255], [1.00000, 0.00000, 0.79608], [1.00000, 0.00000,
+    0.81569], [1.00000, 0.00000, 0.83922], [1.00000, 0.00000, 0.86275],
+    [1.00000, 0.00000, 0.88627], [1.00000, 0.00000, 0.90588], [1.00000,
+    0.00000, 0.92941], [1.00000, 0.00000, 0.95294], [1.00000, 0.00000,
+    0.97647], [1.00000, 0.00000, 1.00000], [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000], [1.00000, 1.00000, 1.00000], [1.00000,
+    0.14118, 1.00000], [1.00000, 0.17647, 1.00000], [1.00000, 0.21176,
+    1.00000], [1.00000, 0.25098, 1.00000], [1.00000, 0.28627, 1.00000],
+    [1.00000, 0.32157, 1.00000], [1.00000, 0.36078, 1.00000], [1.00000,
+    0.39608, 1.00000], [1.00000, 0.43137, 1.00000], [1.00000, 0.47059,
+    1.00000], [1.00000, 0.48627, 1.00000], [1.00000, 0.50588, 1.00000],
+    [1.00000, 0.52157, 1.00000], [1.00000, 0.54118, 1.00000], [1.00000,
+    0.56078, 1.00000], [1.00000, 0.57647, 1.00000], [1.00000, 0.59608,
+    1.00000], [1.00000, 0.61176, 1.00000], [1.00000, 0.63137, 1.00000],
+    [1.00000, 0.65098, 1.00000], [1.00000, 0.66667, 1.00000], [1.00000,
+    0.68627, 1.00000], [1.00000, 0.70588, 1.00000], [1.00000, 0.74510,
+    1.00000], [1.00000, 0.78824, 1.00000], [1.00000, 0.83137, 1.00000],
+    [1.00000, 0.87059, 1.00000], [1.00000, 0.91373, 1.00000], [1.00000,
+    0.95686, 1.00000], [1.00000, 1.00000, 1.00000] ]
+
+Mousse = [
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.13333],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.26667],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.46667],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.00000, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.06667, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.13333, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.20000, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.26667, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.33333, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.40000, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.46667, 0.00000, 0.53333],
+    [0.53333, 0.00000, 0.53333],
+    [0.53333, 0.00000, 0.53333],
+    [0.53333, 0.00000, 0.53333],
+    [0.53333, 0.00000, 0.53333],
+    [0.53333, 0.00000, 0.46667],
+    [0.53333, 0.00000, 0.46667],
+    [0.53333, 0.00000, 0.46667],
+    [0.53333, 0.00000, 0.46667],
+    [0.60000, 0.00000, 0.40000],
+    [0.60000, 0.00000, 0.40000],
+    [0.60000, 0.00000, 0.40000],
+    [0.60000, 0.00000, 0.40000],
+    [0.60000, 0.00000, 0.33333],
+    [0.60000, 0.00000, 0.33333],
+    [0.60000, 0.00000, 0.33333],
+    [0.60000, 0.00000, 0.33333],
+    [0.66667, 0.00000, 0.26667],
+    [0.66667, 0.00000, 0.26667],
+    [0.66667, 0.00000, 0.26667],
+    [0.66667, 0.00000, 0.26667],
+    [0.66667, 0.00000, 0.20000],
+    [0.66667, 0.00000, 0.20000],
+    [0.66667, 0.00000, 0.20000],
+    [0.66667, 0.00000, 0.20000],
+    [0.73333, 0.00000, 0.13333],
+    [0.73333, 0.00000, 0.13333],
+    [0.73333, 0.00000, 0.13333],
+    [0.73333, 0.00000, 0.13333],
+    [0.73333, 0.00000, 0.06667],
+    [0.73333, 0.00000, 0.06667],
+    [0.73333, 0.00000, 0.06667],
+    [0.73333, 0.00000, 0.06667],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.80000, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.86667, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [0.93333, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.06667, 0.00000],
+    [1.00000, 0.06667, 0.00000],
+    [1.00000, 0.13333, 0.00000],
+    [1.00000, 0.13333, 0.00000],
+    [1.00000, 0.20000, 0.00000],
+    [1.00000, 0.20000, 0.00000],
+    [1.00000, 0.26667, 0.00000],
+    [1.00000, 0.26667, 0.00000],
+    [1.00000, 0.33333, 0.00000],
+    [1.00000, 0.33333, 0.00000],
+    [1.00000, 0.40000, 0.00000],
+    [1.00000, 0.40000, 0.00000],
+    [1.00000, 0.46667, 0.00000],
+    [1.00000, 0.46667, 0.00000],
+    [1.00000, 0.53333, 0.00000],
+    [1.00000, 0.53333, 0.00000],
+    [1.00000, 0.60000, 0.00000],
+    [1.00000, 0.60000, 0.00000],
+    [1.00000, 0.66667, 0.00000],
+    [1.00000, 0.66667, 0.00000],
+    [1.00000, 0.73333, 0.00000],
+    [1.00000, 0.73333, 0.00000],
+    [1.00000, 0.80000, 0.00000],
+    [1.00000, 0.80000, 0.00000],
+    [1.00000, 0.86667, 0.00000],
+    [1.00000, 0.86667, 0.00000],
+    [1.00000, 0.93333, 0.00000],
+    [1.00000, 0.93333, 0.00000],
+    [1.00000, 1.00000, 0.00000],
+    [1.00000, 1.00000, 0.00000],
+    [1.00000, 1.00000, 0.00000],
+    [1.00000, 1.00000, 0.00000],
+    [1.00000, 1.00000, 0.06667],
+    [1.00000, 1.00000, 0.06667],
+    [1.00000, 1.00000, 0.13333],
+    [1.00000, 1.00000, 0.13333],
+    [1.00000, 1.00000, 0.20000],
+    [1.00000, 1.00000, 0.20000],
+    [1.00000, 1.00000, 0.26667],
+    [1.00000, 1.00000, 0.26667],
+    [1.00000, 1.00000, 0.33333],
+    [1.00000, 1.00000, 0.33333],
+    [1.00000, 1.00000, 0.40000],
+    [1.00000, 1.00000, 0.40000],
+    [1.00000, 1.00000, 0.46667],
+    [1.00000, 1.00000, 0.46667],
+    [1.00000, 1.00000, 0.53333],
+    [1.00000, 1.00000, 0.53333],
+    [1.00000, 1.00000, 0.60000],
+    [1.00000, 1.00000, 0.60000],
+    [1.00000, 1.00000, 0.66667],
+    [1.00000, 1.00000, 0.66667],
+    [1.00000, 1.00000, 0.73333],
+    [1.00000, 1.00000, 0.73333],
+    [1.00000, 1.00000, 0.80000],
+    [1.00000, 1.00000, 0.80000],
+    [1.00000, 1.00000, 0.86667],
+    [1.00000, 1.00000, 1.00000],
+]
+
+Rainbow = [
+    [0.00000, 0.00000, 0.01176],
+    [0.00000, 0.00000, 0.02745],
+    [0.00000, 0.00000, 0.04314],
+    [0.00000, 0.00000, 0.05882],
+    [0.00000, 0.00000, 0.07451],
+    [0.00000, 0.00000, 0.09020],
+    [0.00000, 0.00000, 0.10588],
+    [0.00000, 0.00000, 0.12157],
+    [0.00000, 0.00000, 0.13725],
+    [0.00000, 0.00000, 0.15294],
+    [0.00000, 0.00000, 0.16863],
+    [0.00000, 0.00000, 0.18431],
+    [0.00000, 0.00000, 0.20000],
+    [0.00000, 0.00000, 0.21176],
+    [0.00000, 0.00000, 0.22745],
+    [0.00000, 0.00000, 0.24314],
+    [0.00000, 0.00000, 0.25882],
+    [0.00000, 0.00000, 0.27451],
+    [0.00000, 0.00000, 0.29020],
+    [0.00000, 0.00000, 0.30588],
+    [0.00000, 0.00000, 0.32157],
+    [0.00000, 0.00000, 0.33725],
+    [0.00000, 0.00000, 0.35294],
+    [0.00000, 0.00000, 0.36863],
+    [0.00000, 0.00000, 0.38431],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.41176],
+    [0.00000, 0.00000, 0.42745],
+    [0.00000, 0.00000, 0.44314],
+    [0.00000, 0.00000, 0.45882],
+    [0.00000, 0.00000, 0.47451],
+    [0.00000, 0.00000, 0.49020],
+    [0.00000, 0.00000, 0.50588],
+    [0.00000, 0.00000, 0.52157],
+    [0.00000, 0.00000, 0.53725],
+    [0.00000, 0.00000, 0.55294],
+    [0.00000, 0.00000, 0.56863],
+    [0.00000, 0.00000, 0.58431],
+    [0.00000, 0.00000, 0.60000],
+    [0.00000, 0.00000, 0.61176],
+    [0.00000, 0.00000, 0.62745],
+    [0.00000, 0.00000, 0.64314],
+    [0.00000, 0.00000, 0.65882],
+    [0.00000, 0.00000, 0.67451],
+    [0.00000, 0.00000, 0.69020],
+    [0.00000, 0.00000, 0.70588],
+    [0.00000, 0.00000, 0.72157],
+    [0.00000, 0.00000, 0.73725],
+    [0.00000, 0.00000, 0.75294],
+    [0.00000, 0.00000, 0.76863],
+    [0.00000, 0.00000, 0.78431],
+    [0.00000, 0.00000, 0.80000],
+    [0.00000, 0.00000, 0.81176],
+    [0.00000, 0.00000, 0.82745],
+    [0.00000, 0.00000, 0.84314],
+    [0.00000, 0.00000, 0.85882],
+    [0.00000, 0.00000, 0.87451],
+    [0.00000, 0.00000, 0.89020],
+    [0.00000, 0.00000, 0.90588],
+    [0.00000, 0.00000, 0.92157],
+    [0.00000, 0.00000, 0.93725],
+    [0.00000, 0.00000, 0.95294],
+    [0.00000, 0.00000, 0.96863],
+    [0.00000, 0.00000, 0.98431],
+    [0.00000, 0.00000, 1.00000],
+    [0.00000, 0.03529, 1.00000],
+    [0.00000, 0.07059, 1.00000],
+    [0.00000, 0.10980, 1.00000],
+    [0.00000, 0.14510, 1.00000],
+    [0.00000, 0.18039, 1.00000],
+    [0.00000, 0.21961, 1.00000],
+    [0.00000, 0.25490, 1.00000],
+    [0.00000, 0.29412, 1.00000],
+    [0.00000, 0.32941, 1.00000],
+    [0.00000, 0.36471, 1.00000],
+    [0.00000, 0.40392, 1.00000],
+    [0.00000, 0.43922, 1.00000],
+    [0.00000, 0.47843, 1.00000],
+    [0.00000, 0.50196, 1.00000],
+    [0.00000, 0.52549, 1.00000],
+    [0.00000, 0.54902, 1.00000],
+    [0.00000, 0.57255, 1.00000],
+    [0.00000, 0.59608, 1.00000],
+    [0.00000, 0.61961, 1.00000],
+    [0.00000, 0.64314, 1.00000],
+    [0.00000, 0.66667, 1.00000],
+    [0.00000, 0.69020, 1.00000],
+    [0.00000, 0.71373, 1.00000],
+    [0.00000, 0.73725, 1.00000],
+    [0.00000, 0.76078, 1.00000],
+    [0.00000, 0.78431, 1.00000],
+    [0.00000, 0.80000, 1.00000],
+    [0.00000, 0.81569, 1.00000],
+    [0.00000, 0.83137, 1.00000],
+    [0.00000, 0.84706, 1.00000],
+    [0.00000, 0.86667, 1.00000],
+    [0.00000, 0.88235, 1.00000],
+    [0.00000, 0.89804, 1.00000],
+    [0.00000, 0.91373, 1.00000],
+    [0.00000, 0.93333, 1.00000],
+    [0.00000, 0.94902, 1.00000],
+    [0.00000, 0.96471, 1.00000],
+    [0.00000, 0.98039, 1.00000],
+    [0.00000, 1.00000, 1.00000],
+    [0.00000, 1.00000, 0.97647],
+    [0.00000, 1.00000, 0.95294],
+    [0.00000, 1.00000, 0.92941],
+    [0.00000, 1.00000, 0.90588],
+    [0.00000, 1.00000, 0.88627],
+    [0.00000, 1.00000, 0.86275],
+    [0.00000, 1.00000, 0.83922],
+    [0.00000, 1.00000, 0.81569],
+    [0.00000, 1.00000, 0.79608],
+    [0.00000, 1.00000, 0.77255],
+    [0.00000, 1.00000, 0.74902],
+    [0.00000, 1.00000, 0.72549],
+    [0.00000, 1.00000, 0.70588],
+    [0.00000, 1.00000, 0.65098],
+    [0.00000, 1.00000, 0.59608],
+    [0.00000, 1.00000, 0.54118],
+    [0.00000, 1.00000, 0.48627],
+    [0.00000, 1.00000, 0.43137],
+    [0.00000, 1.00000, 0.37647],
+    [0.00000, 1.00000, 0.32549],
+    [0.00000, 1.00000, 0.27059],
+    [0.00000, 1.00000, 0.21569],
+    [0.00000, 1.00000, 0.16078],
+    [0.00000, 1.00000, 0.10588],
+    [0.00000, 1.00000, 0.05098],
+    [0.00000, 1.00000, 0.00000],
+    [0.05098, 1.00000, 0.00000],
+    [0.10588, 1.00000, 0.00000],
+    [0.16078, 1.00000, 0.00000],
+    [0.21569, 1.00000, 0.00000],
+    [0.27059, 1.00000, 0.00000],
+    [0.32549, 1.00000, 0.00000],
+    [0.37647, 1.00000, 0.00000],
+    [0.43137, 1.00000, 0.00000],
+    [0.48627, 1.00000, 0.00000],
+    [0.54118, 1.00000, 0.00000],
+    [0.59608, 1.00000, 0.00000],
+    [0.65098, 1.00000, 0.00000],
+    [0.70588, 1.00000, 0.00000],
+    [0.72549, 1.00000, 0.00000],
+    [0.74902, 1.00000, 0.00000],
+    [0.77255, 1.00000, 0.00000],
+    [0.79608, 1.00000, 0.00000],
+    [0.81569, 1.00000, 0.00000],
+    [0.83922, 1.00000, 0.00000],
+    [0.86275, 1.00000, 0.00000],
+    [0.88627, 1.00000, 0.00000],
+    [0.90588, 1.00000, 0.00000],
+    [0.92941, 1.00000, 0.00000],
+    [0.95294, 1.00000, 0.00000],
+    [0.97647, 1.00000, 0.00000],
+    [1.00000, 1.00000, 0.00000],
+    [0.99608, 0.97647, 0.00000],
+    [0.99608, 0.95686, 0.00000],
+    [0.99608, 0.93333, 0.00000],
+    [0.99608, 0.91373, 0.00000],
+    [0.99216, 0.89412, 0.00000],
+    [0.99216, 0.87059, 0.00000],
+    [0.99216, 0.85098, 0.00000],
+    [0.99216, 0.82745, 0.00000],
+    [0.98824, 0.80784, 0.00000],
+    [0.98824, 0.78824, 0.00000],
+    [0.98824, 0.76471, 0.00000],
+    [0.98824, 0.74510, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.70588, 0.00000],
+    [0.98824, 0.68627, 0.00000],
+    [0.98824, 0.66667, 0.00000],
+    [0.98824, 0.64706, 0.00000],
+    [0.99216, 0.62745, 0.00000],
+    [0.99216, 0.60784, 0.00000],
+    [0.99216, 0.58824, 0.00000],
+    [0.99216, 0.56863, 0.00000],
+    [0.99608, 0.54902, 0.00000],
+    [0.99608, 0.52941, 0.00000],
+    [0.99608, 0.50980, 0.00000],
+    [0.99608, 0.49020, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.43137, 0.00000],
+    [1.00000, 0.39608, 0.00000],
+    [1.00000, 0.36078, 0.00000],
+    [1.00000, 0.32549, 0.00000],
+    [1.00000, 0.28627, 0.00000],
+    [1.00000, 0.25098, 0.00000],
+    [1.00000, 0.21569, 0.00000],
+    [1.00000, 0.18039, 0.00000],
+    [1.00000, 0.14118, 0.00000],
+    [1.00000, 0.10588, 0.00000],
+    [1.00000, 0.07059, 0.00000],
+    [1.00000, 0.03529, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.05098],
+    [1.00000, 0.00000, 0.10588],
+    [1.00000, 0.00000, 0.16078],
+    [1.00000, 0.00000, 0.21569],
+    [1.00000, 0.00000, 0.27059],
+    [1.00000, 0.00000, 0.32549],
+    [1.00000, 0.00000, 0.37647],
+    [1.00000, 0.00000, 0.43137],
+    [1.00000, 0.00000, 0.48627],
+    [1.00000, 0.00000, 0.54118],
+    [1.00000, 0.00000, 0.59608],
+    [1.00000, 0.00000, 0.65098],
+    [1.00000, 0.00000, 0.70588],
+    [1.00000, 0.00000, 0.72549],
+    [1.00000, 0.00000, 0.74902],
+    [1.00000, 0.00000, 0.77255],
+    [1.00000, 0.00000, 0.79608],
+    [1.00000, 0.00000, 0.81569],
+    [1.00000, 0.00000, 0.83922],
+    [1.00000, 0.00000, 0.86275],
+    [1.00000, 0.00000, 0.88627],
+    [1.00000, 0.00000, 0.90588],
+    [1.00000, 0.00000, 0.92941],
+    [1.00000, 0.00000, 0.95294],
+    [1.00000, 0.00000, 0.97647],
+    [1.00000, 0.00000, 1.00000],
+    [1.00000, 0.03529, 1.00000],
+    [1.00000, 0.07059, 1.00000],
+    [1.00000, 0.10588, 1.00000],
+    [1.00000, 0.14118, 1.00000],
+    [1.00000, 0.18039, 1.00000],
+    [1.00000, 0.21569, 1.00000],
+    [1.00000, 0.25098, 1.00000],
+    [1.00000, 0.28627, 1.00000],
+    [1.00000, 0.32549, 1.00000],
+    [1.00000, 0.36078, 1.00000],
+    [1.00000, 0.39608, 1.00000],
+    [1.00000, 0.43137, 1.00000],
+    [1.00000, 0.47059, 1.00000],
+    [1.00000, 0.48627, 1.00000],
+    [1.00000, 0.50588, 1.00000],
+    [1.00000, 0.52157, 1.00000],
+    [1.00000, 0.54118, 1.00000],
+    [1.00000, 0.56078, 1.00000],
+    [1.00000, 0.57647, 1.00000],
+    [1.00000, 0.59608, 1.00000],
+    [1.00000, 0.61176, 1.00000],
+    [1.00000, 0.63137, 1.00000],
+    [1.00000, 0.65098, 1.00000],
+    [1.00000, 0.66667, 1.00000],
+    [1.00000, 0.68627, 1.00000],
+    [1.00000, 0.70588, 1.00000],
+    [1.00000, 0.74510, 1.00000],
+    [1.00000, 0.78824, 1.00000],
+    [1.00000, 0.83137, 1.00000],
+    [1.00000, 0.87059, 1.00000],
+    [1.00000, 0.91373, 1.00000],
+    [1.00000, 0.95686, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+]
+
+Random = [
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.47059, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.62745, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 0.78431, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 1.00000, 0.00392],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00392, 0.86275, 0.47059],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.78431, 0.62745],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.70588, 0.78431],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.00000, 0.62745, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.47059, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.23529, 0.00392, 1.00000],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.47059, 0.00392, 0.78431],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.62745, 0.00392, 0.62745],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.78431, 0.00392, 0.47059],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [0.90196, 0.11765, 0.23529],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.23529, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [1.00000, 0.47059, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [0.98039, 0.98039, 0.47059],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+    [1.00000, 1.00000, 1.00000],
+]
+
+RGB = [
+    [0.00000, 0.00000, 0.00000],
+    [0.01176, 0.00000, 0.00000],
+    [0.02745, 0.00000, 0.00000],
+    [0.04314, 0.00000, 0.00000],
+    [0.05882, 0.00000, 0.00000],
+    [0.07451, 0.00000, 0.00000],
+    [0.08627, 0.00000, 0.00000],
+    [0.10196, 0.00000, 0.00000],
+    [0.11765, 0.00000, 0.00000],
+    [0.13333, 0.00000, 0.00000],
+    [0.14902, 0.00000, 0.00000],
+    [0.16078, 0.00000, 0.00000],
+    [0.17647, 0.00000, 0.00000],
+    [0.19216, 0.00000, 0.00000],
+    [0.20784, 0.00000, 0.00000],
+    [0.22353, 0.00000, 0.00000],
+    [0.23529, 0.00000, 0.00000],
+    [0.25098, 0.00000, 0.00000],
+    [0.26667, 0.00000, 0.00000],
+    [0.28235, 0.00000, 0.00000],
+    [0.29804, 0.00000, 0.00000],
+    [0.30980, 0.00000, 0.00000],
+    [0.32549, 0.00000, 0.00000],
+    [0.34118, 0.00000, 0.00000],
+    [0.35686, 0.00000, 0.00000],
+    [0.37255, 0.00000, 0.00000],
+    [0.38431, 0.00000, 0.00000],
+    [0.40000, 0.00000, 0.00000],
+    [0.41569, 0.00000, 0.00000],
+    [0.43137, 0.00000, 0.00000],
+    [0.44706, 0.00000, 0.00000],
+    [0.45882, 0.00000, 0.00000],
+    [0.47451, 0.00000, 0.00000],
+    [0.49020, 0.00000, 0.00000],
+    [0.50588, 0.00000, 0.00000],
+    [0.52157, 0.00000, 0.00000],
+    [0.53725, 0.00000, 0.00000],
+    [0.54902, 0.00000, 0.00000],
+    [0.56471, 0.00000, 0.00000],
+    [0.58039, 0.00000, 0.00000],
+    [0.59608, 0.00000, 0.00000],
+    [0.61176, 0.00000, 0.00000],
+    [0.62353, 0.00000, 0.00000],
+    [0.63922, 0.00000, 0.00000],
+    [0.65490, 0.00000, 0.00000],
+    [0.67059, 0.00000, 0.00000],
+    [0.68627, 0.00000, 0.00000],
+    [0.69804, 0.00000, 0.00000],
+    [0.71373, 0.00000, 0.00000],
+    [0.72941, 0.00000, 0.00000],
+    [0.74510, 0.00000, 0.00000],
+    [0.76078, 0.00000, 0.00000],
+    [0.77255, 0.00000, 0.00000],
+    [0.78824, 0.00000, 0.00000],
+    [0.80392, 0.00000, 0.00000],
+    [0.81961, 0.00000, 0.00000],
+    [0.83529, 0.00000, 0.00000],
+    [0.84706, 0.00000, 0.00000],
+    [0.86275, 0.00000, 0.00000],
+    [0.87843, 0.00000, 0.00000],
+    [0.89412, 0.00000, 0.00000],
+    [0.90980, 0.00000, 0.00000],
+    [0.92157, 0.00000, 0.00000],
+    [0.93725, 0.00000, 0.00000],
+    [0.95294, 0.00000, 0.00000],
+    [0.96863, 0.01176, 0.00000],
+    [0.98431, 0.02745, 0.00000],
+    [1.00000, 0.04314, 0.00000],
+    [0.98431, 0.05882, 0.00000],
+    [0.96863, 0.07451, 0.00000],
+    [0.95294, 0.09020, 0.00000],
+    [0.93725, 0.10588, 0.00000],
+    [0.92157, 0.12157, 0.00000],
+    [0.90196, 0.13725, 0.00000],
+    [0.88627, 0.15294, 0.00000],
+    [0.87059, 0.16863, 0.00000],
+    [0.85490, 0.18431, 0.00000],
+    [0.83922, 0.20000, 0.00000],
+    [0.82353, 0.21569, 0.00000],
+    [0.80392, 0.23137, 0.00000],
+    [0.78824, 0.24706, 0.00000],
+    [0.77255, 0.26275, 0.00000],
+    [0.75686, 0.27843, 0.00000],
+    [0.74118, 0.29412, 0.00000],
+    [0.72157, 0.30980, 0.00000],
+    [0.70588, 0.32549, 0.00000],
+    [0.69020, 0.34118, 0.00000],
+    [0.67451, 0.35686, 0.00000],
+    [0.65882, 0.37255, 0.00000],
+    [0.64314, 0.38824, 0.00000],
+    [0.62353, 0.40392, 0.00000],
+    [0.60784, 0.41961, 0.00000],
+    [0.59216, 0.43529, 0.00000],
+    [0.57647, 0.45098, 0.00000],
+    [0.56078, 0.46667, 0.00000],
+    [0.54118, 0.48235, 0.00000],
+    [0.52549, 0.49804, 0.00000],
+    [0.50980, 0.51373, 0.00000],
+    [0.49412, 0.52941, 0.00000],
+    [0.47843, 0.54510, 0.00000],
+    [0.46275, 0.56078, 0.00000],
+    [0.44314, 0.57647, 0.00000],
+    [0.42745, 0.59216, 0.00000],
+    [0.41176, 0.60784, 0.00000],
+    [0.39608, 0.62353, 0.00000],
+    [0.38039, 0.63922, 0.00000],
+    [0.36078, 0.65490, 0.00000],
+    [0.34510, 0.67059, 0.00000],
+    [0.32941, 0.68627, 0.00000],
+    [0.31373, 0.70196, 0.00000],
+    [0.29804, 0.71765, 0.00000],
+    [0.28235, 0.73333, 0.00000],
+    [0.26275, 0.74902, 0.00000],
+    [0.24706, 0.76471, 0.00000],
+    [0.23137, 0.78039, 0.00000],
+    [0.21569, 0.79608, 0.00000],
+    [0.20000, 0.81176, 0.00000],
+    [0.18039, 0.82745, 0.00000],
+    [0.16471, 0.84314, 0.00000],
+    [0.14902, 0.85882, 0.00000],
+    [0.13333, 0.87451, 0.00000],
+    [0.11765, 0.89020, 0.00000],
+    [0.10196, 0.90588, 0.00000],
+    [0.08235, 0.92157, 0.00000],
+    [0.06667, 0.93725, 0.00000],
+    [0.05098, 0.95294, 0.00000],
+    [0.03529, 0.96863, 0.00000],
+    [0.01961, 0.98431, 0.01176],
+    [0.00000, 1.00000, 0.02745],
+    [0.00000, 0.98431, 0.04314],
+    [0.00000, 0.96863, 0.05882],
+    [0.00000, 0.95294, 0.07451],
+    [0.00000, 0.93725, 0.09020],
+    [0.00000, 0.92157, 0.10588],
+    [0.00000, 0.90588, 0.11765],
+    [0.00000, 0.89020, 0.13333],
+    [0.00000, 0.87451, 0.14902],
+    [0.00000, 0.85882, 0.16471],
+    [0.00000, 0.84314, 0.18039],
+    [0.00000, 0.82745, 0.19608],
+    [0.00000, 0.81176, 0.21176],
+    [0.00000, 0.79608, 0.22353],
+    [0.00000, 0.78039, 0.23922],
+    [0.00000, 0.76471, 0.25490],
+    [0.00000, 0.74902, 0.27059],
+    [0.00000, 0.73333, 0.28627],
+    [0.00000, 0.71765, 0.30196],
+    [0.00000, 0.70196, 0.31765],
+    [0.00000, 0.68627, 0.33333],
+    [0.00000, 0.66667, 0.34510],
+    [0.00000, 0.65098, 0.36078],
+    [0.00000, 0.63529, 0.37647],
+    [0.00000, 0.61961, 0.39216],
+    [0.00000, 0.60392, 0.40784],
+    [0.00000, 0.58824, 0.42353],
+    [0.00000, 0.57255, 0.43922],
+    [0.00000, 0.55686, 0.45098],
+    [0.00000, 0.54118, 0.46667],
+    [0.00000, 0.52549, 0.48235],
+    [0.00000, 0.50980, 0.49804],
+    [0.00000, 0.49412, 0.51373],
+    [0.00000, 0.47843, 0.52941],
+    [0.00000, 0.46275, 0.54510],
+    [0.00000, 0.44706, 0.55686],
+    [0.00000, 0.43137, 0.57255],
+    [0.00000, 0.41569, 0.58824],
+    [0.00000, 0.40000, 0.60392],
+    [0.00000, 0.38431, 0.61961],
+    [0.00000, 0.36863, 0.63529],
+    [0.00000, 0.35294, 0.65098],
+    [0.00000, 0.33333, 0.66667],
+    [0.00000, 0.31765, 0.67843],
+    [0.00000, 0.30196, 0.69412],
+    [0.00000, 0.28627, 0.70980],
+    [0.00000, 0.27059, 0.72549],
+    [0.00000, 0.25490, 0.74118],
+    [0.00000, 0.23922, 0.75686],
+    [0.00000, 0.22353, 0.77255],
+    [0.00000, 0.20784, 0.78431],
+    [0.00000, 0.19216, 0.80000],
+    [0.00000, 0.17647, 0.81569],
+    [0.00000, 0.16078, 0.83137],
+    [0.00000, 0.14510, 0.84706],
+    [0.00000, 0.12941, 0.86275],
+    [0.00000, 0.11373, 0.87843],
+    [0.00000, 0.09804, 0.89020],
+    [0.00000, 0.08235, 0.90588],
+    [0.00000, 0.06667, 0.92157],
+    [0.00000, 0.05098, 0.93725],
+    [0.00000, 0.03529, 0.95294],
+    [0.00000, 0.01961, 0.96863],
+    [0.00000, 0.00000, 0.98431],
+    [0.00000, 0.00000, 1.00000],
+    [0.00000, 0.00000, 0.98431],
+    [0.00000, 0.00000, 0.96863],
+    [0.00000, 0.00000, 0.95294],
+    [0.00000, 0.00000, 0.93725],
+    [0.00000, 0.00000, 0.92157],
+    [0.00000, 0.00000, 0.90588],
+    [0.00000, 0.00000, 0.89020],
+    [0.00000, 0.00000, 0.87451],
+    [0.00000, 0.00000, 0.85882],
+    [0.00000, 0.00000, 0.84314],
+    [0.00000, 0.00000, 0.82745],
+    [0.00000, 0.00000, 0.81176],
+    [0.00000, 0.00000, 0.79608],
+    [0.00000, 0.00000, 0.78039],
+    [0.00000, 0.00000, 0.76471],
+    [0.00000, 0.00000, 0.74902],
+    [0.00000, 0.00000, 0.73333],
+    [0.00000, 0.00000, 0.71765],
+    [0.00000, 0.00000, 0.70196],
+    [0.00000, 0.00000, 0.68627],
+    [0.00000, 0.00000, 0.66667],
+    [0.00000, 0.00000, 0.65098],
+    [0.00000, 0.00000, 0.63529],
+    [0.00000, 0.00000, 0.61961],
+    [0.00000, 0.00000, 0.60392],
+    [0.00000, 0.00000, 0.58824],
+    [0.00000, 0.00000, 0.57255],
+    [0.00000, 0.00000, 0.55686],
+    [0.00000, 0.00000, 0.54118],
+    [0.00000, 0.00000, 0.52549],
+    [0.00000, 0.00000, 0.50980],
+    [0.00000, 0.00000, 0.49412],
+    [0.00000, 0.00000, 0.47843],
+    [0.00000, 0.00000, 0.46275],
+    [0.00000, 0.00000, 0.44706],
+    [0.00000, 0.00000, 0.43137],
+    [0.00000, 0.00000, 0.41569],
+    [0.00000, 0.00000, 0.40000],
+    [0.00000, 0.00000, 0.38431],
+    [0.00000, 0.00000, 0.36863],
+    [0.00000, 0.00000, 0.35294],
+    [0.00000, 0.00000, 0.33333],
+    [0.00000, 0.00000, 0.31765],
+    [0.00000, 0.00000, 0.30196],
+    [0.00000, 0.00000, 0.28627],
+    [0.00000, 0.00000, 0.27059],
+    [0.00000, 0.00000, 0.25490],
+    [0.00000, 0.00000, 0.23922],
+    [0.00000, 0.00000, 0.22353],
+    [0.00000, 0.00000, 0.20784],
+    [0.00000, 0.00000, 0.19216],
+    [0.00000, 0.00000, 0.17647],
+    [0.00000, 0.00000, 0.16078],
+    [0.00000, 0.00000, 0.14510],
+    [0.00000, 0.00000, 0.12941],
+    [0.00000, 0.00000, 0.11373],
+    [0.00000, 0.00000, 0.09804],
+    [0.00000, 0.00000, 0.08235],
+    [0.00000, 0.00000, 0.06667],
+    [0.00000, 0.00000, 0.05098],
+    [0.00000, 0.00000, 0.03529],
+    [0.00000, 0.00000, 0.01961],
+    [0.00000, 0.00000, 0.00000],
+]
+
+Smooth = [
+    [0.00000, 0.00000, 1.00000],
+    [0.01569, 0.00000, 0.98431],
+    [0.03529, 0.00000, 0.96471],
+    [0.05098, 0.00000, 0.94902],
+    [0.06667, 0.00000, 0.93333],
+    [0.08627, 0.00000, 0.91373],
+    [0.10196, 0.00000, 0.89804],
+    [0.11765, 0.00000, 0.88235],
+    [0.13725, 0.00000, 0.86275],
+    [0.15294, 0.00000, 0.84706],
+    [0.16863, 0.00000, 0.83137],
+    [0.18824, 0.00000, 0.81176],
+    [0.20392, 0.00000, 0.79608],
+    [0.21961, 0.00000, 0.78039],
+    [0.23922, 0.00000, 0.76078],
+    [0.25490, 0.00000, 0.74510],
+    [0.27059, 0.00000, 0.72941],
+    [0.28627, 0.00000, 0.71373],
+    [0.30588, 0.00000, 0.69412],
+    [0.32157, 0.00000, 0.67843],
+    [0.33725, 0.00000, 0.66275],
+    [0.35686, 0.00000, 0.64314],
+    [0.37255, 0.00000, 0.62745],
+    [0.38824, 0.00000, 0.61176],
+    [0.40784, 0.00000, 0.59216],
+    [0.42353, 0.00000, 0.57647],
+    [0.43922, 0.00000, 0.56078],
+    [0.45882, 0.00000, 0.54118],
+    [0.47451, 0.00000, 0.52549],
+    [0.49020, 0.00000, 0.50980],
+    [0.50980, 0.00000, 0.49020],
+    [0.52549, 0.00000, 0.47451],
+    [0.54118, 0.00000, 0.45882],
+    [0.56078, 0.00000, 0.43922],
+    [0.57647, 0.00000, 0.42353],
+    [0.59216, 0.00000, 0.40784],
+    [0.61176, 0.00000, 0.38824],
+    [0.62745, 0.00000, 0.37255],
+    [0.64314, 0.00000, 0.35686],
+    [0.66275, 0.00000, 0.33725],
+    [0.67843, 0.00000, 0.32157],
+    [0.69412, 0.00000, 0.30588],
+    [0.71373, 0.00000, 0.28627],
+    [0.72941, 0.00000, 0.27059],
+    [0.74510, 0.00000, 0.25490],
+    [0.76078, 0.00000, 0.23922],
+    [0.78039, 0.00000, 0.21961],
+    [0.79608, 0.00000, 0.20392],
+    [0.81176, 0.00000, 0.18824],
+    [0.83137, 0.00000, 0.16863],
+    [0.84706, 0.00000, 0.15294],
+    [0.86275, 0.00000, 0.13725],
+    [0.88235, 0.00000, 0.11765],
+    [0.89804, 0.00000, 0.10196],
+    [0.91373, 0.00000, 0.08627],
+    [0.93333, 0.00000, 0.06667],
+    [0.94902, 0.00000, 0.05098],
+    [0.96471, 0.00000, 0.03529],
+    [0.98431, 0.00000, 0.01569],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.00000, 0.00000],
+    [1.00000, 0.01176, 0.00000],
+    [1.00000, 0.01961, 0.00000],
+    [1.00000, 0.03137, 0.00000],
+    [1.00000, 0.03922, 0.00000],
+    [1.00000, 0.05098, 0.00000],
+    [1.00000, 0.05882, 0.00000],
+    [1.00000, 0.07059, 0.00000],
+    [1.00000, 0.08235, 0.00000],
+    [1.00000, 0.09020, 0.00000],
+    [1.00000, 0.10196, 0.00000],
+    [1.00000, 0.10980, 0.00000],
+    [1.00000, 0.12157, 0.00000],
+    [1.00000, 0.12941, 0.00000],
+    [1.00000, 0.14118, 0.00000],
+    [0.99608, 0.15294, 0.00000],
+    [0.99608, 0.16078, 0.00000],
+    [0.99608, 0.17255, 0.00000],
+    [0.99608, 0.18039, 0.00000],
+    [0.99608, 0.19216, 0.00000],
+    [0.99608, 0.20392, 0.00000],
+    [0.99608, 0.21176, 0.00000],
+    [0.99608, 0.22353, 0.00000],
+    [0.99608, 0.23137, 0.00000],
+    [0.99608, 0.24314, 0.00000],
+    [0.99608, 0.25098, 0.00000],
+    [0.99608, 0.26275, 0.00000],
+    [0.99608, 0.27451, 0.00000],
+    [0.99608, 0.28235, 0.00000],
+    [0.99608, 0.29412, 0.00000],
+    [0.99608, 0.30196, 0.00000],
+    [0.99608, 0.31373, 0.00000],
+    [0.99608, 0.32157, 0.00000],
+    [0.99608, 0.33333, 0.00000],
+    [0.99608, 0.34510, 0.00000],
+    [0.99608, 0.35294, 0.00000],
+    [0.99608, 0.36471, 0.00000],
+    [0.99608, 0.37255, 0.00000],
+    [0.99608, 0.38431, 0.00000],
+    [0.99608, 0.39216, 0.00000],
+    [0.99608, 0.40392, 0.00000],
+    [0.99608, 0.41569, 0.00000],
+    [0.99608, 0.42353, 0.00000],
+    [0.99608, 0.43529, 0.00000],
+    [0.99608, 0.44314, 0.00000],
+    [0.99216, 0.45490, 0.00000],
+    [0.99216, 0.46667, 0.00000],
+    [0.99216, 0.47451, 0.00000],
+    [0.99216, 0.48627, 0.00000],
+    [0.99216, 0.49412, 0.00000],
+    [0.99216, 0.50588, 0.00000],
+    [0.99216, 0.51373, 0.00000],
+    [0.99216, 0.52549, 0.00000],
+    [0.99216, 0.53725, 0.00000],
+    [0.99216, 0.54510, 0.00000],
+    [0.99216, 0.55686, 0.00000],
+    [0.99216, 0.56471, 0.00000],
+    [0.99216, 0.57647, 0.00000],
+    [0.99216, 0.58431, 0.00000],
+    [0.99216, 0.59608, 0.00000],
+    [0.99216, 0.60000, 0.00000],
+    [0.99216, 0.60784, 0.00000],
+    [0.99216, 0.61176, 0.00000],
+    [0.99216, 0.61569, 0.00000],
+    [0.99216, 0.61961, 0.00000],
+    [0.99216, 0.62745, 0.00000],
+    [0.99216, 0.63137, 0.00000],
+    [0.99216, 0.63529, 0.00000],
+    [0.99216, 0.64314, 0.00000],
+    [0.98824, 0.64706, 0.00000],
+    [0.98824, 0.65098, 0.00000],
+    [0.98824, 0.65882, 0.00000],
+    [0.98824, 0.66275, 0.00000],
+    [0.98824, 0.66667, 0.00000],
+    [0.98824, 0.67451, 0.00000],
+    [0.98824, 0.67843, 0.00000],
+    [0.98824, 0.68235, 0.00000],
+    [0.98824, 0.68627, 0.00000],
+    [0.98824, 0.69412, 0.00000],
+    [0.98824, 0.69804, 0.00000],
+    [0.98824, 0.70196, 0.00000],
+    [0.98824, 0.70980, 0.00000],
+    [0.98824, 0.71373, 0.00000],
+    [0.98824, 0.71765, 0.00000],
+    [0.98824, 0.72549, 0.00000],
+    [0.98824, 0.72941, 0.00000],
+    [0.98824, 0.73333, 0.00000],
+    [0.98824, 0.73725, 0.00000],
+    [0.98824, 0.74510, 0.00000],
+    [0.98824, 0.74902, 0.00000],
+    [0.98431, 0.75294, 0.00000],
+    [0.98431, 0.76078, 0.00000],
+    [0.98431, 0.76471, 0.00000],
+    [0.98431, 0.76863, 0.00000],
+    [0.98431, 0.77255, 0.00000],
+    [0.98431, 0.78039, 0.00000],
+    [0.98431, 0.78431, 0.00000],
+    [0.98431, 0.78824, 0.00000],
+    [0.98431, 0.79608, 0.00000],
+    [0.98431, 0.80000, 0.00000],
+    [0.98431, 0.80392, 0.00000],
+    [0.98431, 0.81176, 0.00000],
+    [0.98431, 0.81569, 0.00000],
+    [0.98431, 0.81961, 0.00000],
+    [0.98431, 0.82745, 0.00000],
+    [0.98431, 0.83137, 0.00000],
+    [0.98431, 0.83529, 0.00000],
+    [0.98431, 0.83922, 0.00000],
+    [0.98431, 0.84706, 0.00000],
+    [0.98431, 0.85098, 0.00000],
+    [0.98039, 0.85490, 0.00000],
+    [0.98039, 0.86275, 0.00000],
+    [0.98039, 0.86667, 0.00000],
+    [0.98039, 0.87059, 0.00000],
+    [0.98039, 0.87843, 0.00000],
+    [0.98039, 0.88235, 0.00000],
+    [0.98039, 0.88627, 0.00000],
+    [0.98039, 0.89020, 0.00000],
+    [0.98039, 0.89804, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.98039, 0.90196, 0.00000],
+    [0.96471, 0.88627, 0.00000],
+    [0.94902, 0.87059, 0.00000],
+    [0.92941, 0.85490, 0.00000],
+    [0.91373, 0.83922, 0.00000],
+    [0.89804, 0.82745, 0.00000],
+    [0.88235, 0.81176, 0.00000],
+    [0.86275, 0.79608, 0.00000],
+    [0.84706, 0.78039, 0.00000],
+    [0.83137, 0.76471, 0.00000],
+    [0.81569, 0.74902, 0.00000],
+    [0.79608, 0.73333, 0.00000],
+    [0.78039, 0.71765, 0.00000],
+    [0.76471, 0.70196, 0.00000],
+    [0.74902, 0.68627, 0.00000],
+    [0.72941, 0.67451, 0.00000],
+    [0.71373, 0.65882, 0.00000],
+    [0.69804, 0.64314, 0.00000],
+    [0.68235, 0.62745, 0.00000],
+    [0.66275, 0.61176, 0.00000],
+    [0.64706, 0.59608, 0.00000],
+    [0.63137, 0.58039, 0.00000],
+    [0.61569, 0.56471, 0.00000],
+    [0.60000, 0.54902, 0.00000],
+    [0.58039, 0.53333, 0.00000],
+    [0.56471, 0.52157, 0.00000],
+    [0.54902, 0.50588, 0.00000],
+    [0.53333, 0.49020, 0.00000],
+    [0.51373, 0.47451, 0.00000],
+    [0.49804, 0.45882, 0.00000],
+    [0.48235, 0.44314, 0.00000],
+    [0.46667, 0.42745, 0.00000],
+    [0.44706, 0.41176, 0.00000],
+    [0.43137, 0.39608, 0.00000],
+    [0.41569, 0.38039, 0.00000],
+    [0.40000, 0.36863, 0.00000],
+    [0.38039, 0.35294, 0.00000],
+    [0.36471, 0.33725, 0.00000],
+    [0.34902, 0.32157, 0.00000],
+    [0.33333, 0.30588, 0.00000],
+    [0.31765, 0.29020, 0.00000],
+    [0.29804, 0.27451, 0.00000],
+    [0.28235, 0.25882, 0.00000],
+    [0.26667, 0.24314, 0.00000],
+    [0.25098, 0.22745, 0.00000],
+    [0.23137, 0.21569, 0.00000],
+    [0.21569, 0.20000, 0.00000],
+    [0.20000, 0.18431, 0.00000],
+    [0.18431, 0.16863, 0.00000],
+    [0.16471, 0.15294, 0.00000],
+    [0.14902, 0.13725, 0.00000],
+    [0.13333, 0.12157, 0.00000],
+    [0.11765, 0.10588, 0.00000],
+    [0.09804, 0.09020, 0.00000],
+    [0.08235, 0.07451, 0.00000],
+    [0.06667, 0.06275, 0.00000],
+    [0.05098, 0.04706, 0.00000],
+    [0.03137, 0.03137, 0.00000],
+    [0.01569, 0.01569, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+    [0.00000, 0.00000, 0.00000],
+]
+
+Staircase = [
+    [0.00392, 0.00392, 0.31373],
+    [0.00784, 0.00784, 0.31373],
+    [0.01176, 0.01176, 0.31373],
+    [0.01569, 0.01569, 0.31373],
+    [0.01961, 0.01961, 0.31373],
+    [0.02353, 0.02353, 0.31373],
+    [0.02745, 0.02745, 0.31373],
+    [0.03137, 0.03137, 0.31373],
+    [0.03529, 0.03529, 0.31373],
+    [0.03922, 0.03922, 0.31373],
+    [0.04314, 0.04314, 0.31373],
+    [0.04706, 0.04706, 0.31373],
+    [0.05098, 0.05098, 0.31373],
+    [0.05490, 0.05490, 0.31373],
+    [0.05882, 0.05882, 0.31373],
+    [0.06275, 0.06275, 0.31373],
+    [0.06667, 0.06667, 0.47059],
+    [0.07059, 0.07059, 0.47059],
+    [0.07451, 0.07451, 0.47059],
+    [0.07843, 0.07843, 0.47059],
+    [0.08235, 0.08235, 0.47059],
+    [0.08627, 0.08627, 0.47059],
+    [0.09020, 0.09020, 0.47059],
+    [0.09412, 0.09412, 0.47059],
+    [0.09804, 0.09804, 0.47059],
+    [0.10196, 0.10196, 0.47059],
+    [0.10588, 0.10588, 0.47059],
+    [0.10980, 0.10980, 0.47059],
+    [0.11373, 0.11373, 0.47059],
+    [0.11765, 0.11765, 0.47059],
+    [0.12157, 0.12157, 0.47059],
+    [0.12549, 0.12549, 0.47059],
+    [0.12941, 0.12941, 0.62745],
+    [0.13333, 0.13333, 0.62745],
+    [0.13725, 0.13725, 0.62745],
+    [0.14118, 0.14118, 0.62745],
+    [0.14510, 0.14510, 0.62745],
+    [0.14902, 0.14902, 0.62745],
+    [0.15294, 0.15294, 0.62745],
+    [0.15686, 0.15686, 0.62745],
+    [0.16078, 0.16078, 0.62745],
+    [0.16471, 0.16471, 0.62745],
+    [0.16863, 0.16863, 0.62745],
+    [0.17255, 0.17255, 0.62745],
+    [0.17647, 0.17647, 0.62745],
+    [0.18039, 0.18039, 0.62745],
+    [0.18431, 0.18431, 0.62745],
+    [0.18824, 0.18824, 0.62745],
+    [0.19216, 0.19216, 0.78431],
+    [0.19608, 0.19608, 0.78431],
+    [0.20000, 0.20000, 0.78431],
+    [0.20392, 0.20392, 0.78431],
+    [0.20784, 0.20784, 0.78431],
+    [0.21176, 0.21176, 0.78431],
+    [0.21569, 0.21569, 0.78431],
+    [0.21961, 0.21961, 0.78431],
+    [0.22353, 0.22353, 0.78431],
+    [0.22745, 0.22745, 0.78431],
+    [0.23137, 0.23137, 0.78431],
+    [0.23529, 0.23529, 0.78431],
+    [0.23922, 0.23922, 0.78431],
+    [0.24314, 0.24314, 0.78431],
+    [0.24706, 0.24706, 0.78431],
+    [0.25098, 0.25098, 0.78431],
+    [0.25490, 0.25490, 0.94118],
+    [0.25882, 0.25882, 0.94118],
+    [0.26275, 0.26275, 0.94118],
+    [0.26667, 0.26667, 0.94118],
+    [0.27059, 0.27059, 0.94118],
+    [0.27451, 0.27451, 0.94118],
+    [0.27843, 0.27843, 0.94118],
+    [0.28235, 0.28235, 0.94118],
+    [0.28627, 0.28627, 0.94118],
+    [0.29020, 0.29020, 0.94118],
+    [0.29412, 0.29412, 0.94118],
+    [0.29804, 0.29804, 0.94118],
+    [0.30196, 0.30196, 0.94118],
+    [0.30588, 0.30588, 0.94118],
+    [0.30980, 0.30980, 0.94118],
+    [0.31373, 0.31373, 0.94118],
+    [0.31765, 0.31765, 0.95294],
+    [0.32157, 0.32157, 0.96471],
+    [0.32549, 0.32549, 0.97647],
+    [0.32941, 0.32941, 0.98824],
+    [0.33333, 0.33333, 1.00000],
+    [0.00392, 0.31373, 0.00392],
+    [0.00784, 0.31373, 0.00784],
+    [0.01176, 0.31373, 0.01176],
+    [0.01569, 0.31373, 0.01569],
+    [0.01961, 0.31373, 0.01961],
+    [0.02353, 0.31373, 0.02353],
+    [0.02745, 0.31373, 0.02745],
+    [0.03137, 0.31373, 0.03137],
+    [0.03529, 0.31373, 0.03529],
+    [0.03922, 0.31373, 0.03922],
+    [0.04314, 0.31373, 0.04314],
+    [0.04706, 0.31373, 0.04706],
+    [0.05098, 0.31373, 0.05098],
+    [0.05490, 0.31373, 0.05490],
+    [0.05882, 0.31373, 0.05882],
+    [0.06275, 0.31373, 0.06275],
+    [0.06667, 0.47059, 0.06667],
+    [0.07059, 0.47059, 0.07059],
+    [0.07451, 0.47059, 0.07451],
+    [0.07843, 0.47059, 0.07843],
+    [0.08235, 0.47059, 0.08235],
+    [0.08627, 0.47059, 0.08627],
+    [0.09020, 0.47059, 0.09020],
+    [0.09412, 0.47059, 0.09412],
+    [0.09804, 0.47059, 0.09804],
+    [0.10196, 0.47059, 0.10196],
+    [0.10588, 0.47059, 0.10588],
+    [0.10980, 0.47059, 0.10980],
+    [0.11373, 0.47059, 0.11373],
+    [0.11765, 0.47059, 0.11765],
+    [0.12157, 0.47059, 0.12157],
+    [0.12549, 0.47059, 0.12549],
+    [0.12941, 0.62745, 0.12941],
+    [0.13333, 0.62745, 0.13333],
+    [0.13725, 0.62745, 0.13725],
+    [0.14118, 0.62745, 0.14118],
+    [0.14510, 0.62745, 0.14510],
+    [0.14902, 0.62745, 0.14902],
+    [0.15294, 0.62745, 0.15294],
+    [0.15686, 0.62745, 0.15686],
+    [0.16078, 0.62745, 0.16078],
+    [0.16471, 0.62745, 0.16471],
+    [0.16863, 0.62745, 0.16863],
+    [0.17255, 0.62745, 0.17255],
+    [0.17647, 0.62745, 0.17647],
+    [0.18039, 0.62745, 0.18039],
+    [0.18431, 0.62745, 0.18431],
+    [0.18824, 0.62745, 0.18824],
+    [0.19216, 0.78431, 0.19216],
+    [0.19608, 0.78431, 0.19608],
+    [0.20000, 0.78431, 0.20000],
+    [0.20392, 0.78431, 0.20392],
+    [0.20784, 0.78431, 0.20784],
+    [0.21176, 0.78431, 0.21176],
+    [0.21569, 0.78431, 0.21569],
+    [0.21961, 0.78431, 0.21961],
+    [0.22353, 0.78431, 0.22353],
+    [0.22745, 0.78431, 0.22745],
+    [0.23137, 0.78431, 0.23137],
+    [0.23529, 0.78431, 0.23529],
+    [0.23922, 0.78431, 0.23922],
+    [0.24314, 0.78431, 0.24314],
+    [0.24706, 0.78431, 0.24706],
+    [0.25098, 0.78431, 0.25098],
+    [0.25490, 0.94118, 0.25490],
+    [0.25882, 0.94118, 0.25882],
+    [0.26275, 0.94118, 0.26275],
+    [0.26667, 0.94118, 0.26667],
+    [0.27059, 0.94118, 0.27059],
+    [0.27451, 0.94118, 0.27451],
+    [0.27843, 0.94118, 0.27843],
+    [0.28235, 0.94118, 0.28235],
+    [0.28627, 0.94118, 0.28627],
+    [0.29020, 0.94118, 0.29020],
+    [0.29412, 0.94118, 0.29412],
+    [0.29804, 0.94118, 0.29804],
+    [0.30196, 0.94118, 0.30196],
+    [0.30588, 0.94118, 0.30588],
+    [0.30980, 0.94118, 0.30980],
+    [0.31373, 0.94118, 0.31373],
+    [0.31765, 0.95294, 0.31765],
+    [0.32157, 0.96471, 0.32157],
+    [0.32549, 0.97647, 0.32549],
+    [0.32941, 0.98824, 0.32941],
+    [0.33333, 1.00000, 0.33333],
+    [0.31373, 0.00392, 0.00392],
+    [0.31373, 0.00784, 0.00784],
+    [0.31373, 0.01176, 0.01176],
+    [0.31373, 0.01569, 0.01569],
+    [0.31373, 0.01961, 0.01961],
+    [0.31373, 0.02353, 0.02353],
+    [0.31373, 0.02745, 0.02745],
+    [0.31373, 0.03137, 0.03137],
+    [0.31373, 0.03529, 0.03529],
+    [0.31373, 0.03922, 0.03922],
+    [0.31373, 0.04314, 0.04314],
+    [0.31373, 0.04706, 0.04706],
+    [0.31373, 0.05098, 0.05098],
+    [0.31373, 0.05490, 0.05490],
+    [0.31373, 0.05882, 0.05882],
+    [0.31373, 0.06275, 0.06275],
+    [0.47059, 0.06667, 0.06667],
+    [0.47059, 0.07059, 0.07059],
+    [0.47059, 0.07451, 0.07451],
+    [0.47059, 0.07843, 0.07843],
+    [0.47059, 0.08235, 0.08235],
+    [0.47059, 0.08627, 0.08627],
+    [0.47059, 0.09020, 0.09020],
+    [0.47059, 0.09412, 0.09412],
+    [0.47059, 0.09804, 0.09804],
+    [0.47059, 0.10196, 0.10196],
+    [0.47059, 0.10588, 0.10588],
+    [0.47059, 0.10980, 0.10980],
+    [0.47059, 0.11373, 0.11373],
+    [0.47059, 0.11765, 0.11765],
+    [0.47059, 0.12157, 0.12157],
+    [0.47059, 0.12549, 0.12549],
+    [0.62745, 0.12941, 0.12941],
+    [0.62745, 0.13333, 0.13333],
+    [0.62745, 0.13725, 0.13725],
+    [0.62745, 0.14118, 0.14118],
+    [0.62745, 0.14510, 0.14510],
+    [0.62745, 0.14902, 0.14902],
+    [0.62745, 0.15294, 0.15294],
+    [0.62745, 0.15686, 0.15686],
+    [0.62745, 0.16078, 0.16078],
+    [0.62745, 0.16471, 0.16471],
+    [0.62745, 0.16863, 0.16863],
+    [0.62745, 0.17255, 0.17255],
+    [0.62745, 0.17647, 0.17647],
+    [0.62745, 0.18039, 0.18039],
+    [0.62745, 0.18431, 0.18431],
+    [0.62745, 0.18824, 0.18824],
+    [0.78431, 0.19216, 0.19216],
+    [0.78431, 0.19608, 0.19608],
+    [0.78431, 0.20000, 0.20000],
+    [0.78431, 0.20392, 0.20392],
+    [0.78431, 0.20784, 0.20784],
+    [0.78431, 0.21176, 0.21176],
+    [0.78431, 0.21569, 0.21569],
+    [0.78431, 0.21961, 0.21961],
+    [0.78431, 0.22353, 0.22353],
+    [0.78431, 0.22745, 0.22745],
+    [0.78431, 0.23137, 0.23137],
+    [0.78431, 0.23529, 0.23529],
+    [0.78431, 0.23922, 0.23922],
+    [0.78431, 0.24314, 0.24314],
+    [0.78431, 0.24706, 0.24706],
+    [0.78431, 0.25098, 0.25098],
+    [0.94118, 0.25490, 0.25490],
+    [0.94118, 0.25882, 0.25882],
+    [0.94118, 0.26275, 0.26275],
+    [0.94118, 0.26667, 0.26667],
+    [0.94118, 0.27059, 0.27059],
+    [0.94118, 0.27451, 0.27451],
+    [0.94118, 0.27843, 0.27843],
+    [0.94118, 0.28235, 0.28235],
+    [0.94118, 0.28627, 0.28627],
+    [0.94118, 0.29020, 0.29020],
+    [0.94118, 0.29412, 0.29412],
+    [0.94118, 0.29804, 0.29804],
+    [0.94118, 0.30196, 0.30196],
+    [0.94118, 0.30588, 0.30588],
+    [0.94118, 0.30980, 0.30980],
+    [0.94118, 0.31373, 0.31373],
+    [0.94902, 0.39216, 0.39216],
+    [0.96078, 0.52941, 0.52941],
+    [0.97255, 0.66667, 0.66667],
+    [0.98431, 0.80392, 0.80392],
+    [0.99216, 0.80000, 0.80000],
+    [1.00000, 1.00000, 1.00000],
+]
+
+RGB2 = [
+    [0.00000, 0.00000, 1.00000],
+    [0.00000, 0.00000, 0.98431],
+    [0.00000, 0.01961, 0.96863],
+    [0.00000, 0.03529, 0.95294],
+    [0.00000, 0.05098, 0.93725],
+    [0.00000, 0.06667, 0.92157],
+    [0.00000, 0.08235, 0.90588],
+    [0.00000, 0.09804, 0.89020],
+    [0.00000, 0.11373, 0.87843],
+    [0.00000, 0.12941, 0.86275],
+    [0.00000, 0.14510, 0.84706],
+    [0.00000, 0.16078, 0.83137],
+    [0.00000, 0.17647, 0.81569],
+    [0.00000, 0.19216, 0.80000],
+    [0.00000, 0.20784, 0.78431],
+    [0.00000, 0.22353, 0.77255],
+    [0.00000, 0.23922, 0.75686],
+    [0.00000, 0.25490, 0.74118],
+    [0.00000, 0.27059, 0.72549],
+    [0.00000, 0.28627, 0.70980],
+    [0.00000, 0.30196, 0.69412],
+    [0.00000, 0.31765, 0.67843],
+    [0.00000, 0.33333, 0.66667],
+    [0.00000, 0.35294, 0.65098],
+    [0.00000, 0.36863, 0.63529],
+    [0.00000, 0.38431, 0.61961],
+    [0.00000, 0.40000, 0.60392],
+    [0.00000, 0.41569, 0.58824],
+    [0.00000, 0.43137, 0.57255],
+    [0.00000, 0.44706, 0.55686],
+    [0.00000, 0.46275, 0.54510],
+    [0.00000, 0.47843, 0.52941],
+    [0.00000, 0.49412, 0.51373],
+    [0.00000, 0.50980, 0.49804],
+    [0.00000, 0.52549, 0.48235],
+    [0.00000, 0.54118, 0.46667],
+    [0.00000, 0.55686, 0.45098],
+    [0.00000, 0.57255, 0.43922],
+    [0.00000, 0.58824, 0.42353],
+    [0.00000, 0.60392, 0.40784],
+    [0.00000, 0.61961, 0.39216],
+    [0.00000, 0.63529, 0.37647],
+    [0.00000, 0.65098, 0.36078],
+    [0.00000, 0.66667, 0.34510],
+    [0.00000, 0.68627, 0.33333],
+    [0.00000, 0.70196, 0.31765],
+    [0.00000, 0.71765, 0.30196],
+    [0.00000, 0.73333, 0.28627],
+    [0.00000, 0.74902, 0.27059],
+    [0.00000, 0.76471, 0.25490],
+    [0.00000, 0.78039, 0.23922],
+    [0.00000, 0.79608, 0.22353],
+    [0.00000, 0.81176, 0.21176],
+    [0.00000, 0.82745, 0.19608],
+    [0.00000, 0.84314, 0.18039],
+    [0.00000, 0.85882, 0.16471],
+    [0.00000, 0.87451, 0.14902],
+    [0.00000, 0.89020, 0.13333],
+    [0.00000, 0.90588, 0.11765],
+    [0.00000, 0.92157, 0.10588],
+    [0.00000, 0.93725, 0.09020],
+    [0.00000, 0.95294, 0.07451],
+    [0.00000, 0.96863, 0.05882],
+    [0.00000, 0.98431, 0.04314],
+    [0.00000, 1.00000, 0.02745],
+    [0.01961, 0.98431, 0.01176],
+    [0.03529, 0.96863, 0.00000],
+    [0.05098, 0.95294, 0.00000],
+    [0.06667, 0.93725, 0.00000],
+    [0.08235, 0.92157, 0.00000],
+    [0.10196, 0.90588, 0.00000],
+    [0.11765, 0.89020, 0.00000],
+    [0.13333, 0.87451, 0.00000],
+    [0.14902, 0.85882, 0.00000],
+    [0.16471, 0.84314, 0.00000],
+    [0.18039, 0.82745, 0.00000],
+    [0.20000, 0.81176, 0.00000],
+    [0.21569, 0.79608, 0.00000],
+    [0.23137, 0.78039, 0.00000],
+    [0.24706, 0.76471, 0.00000],
+    [0.26275, 0.74902, 0.00000],
+    [0.28235, 0.73333, 0.00000],
+    [0.29804, 0.71765, 0.00000],
+    [0.31373, 0.70196, 0.00000],
+    [0.32941, 0.68627, 0.00000],
+    [0.34510, 0.67059, 0.00000],
+    [0.36078, 0.65490, 0.00000],
+    [0.38039, 0.63922, 0.00000],
+    [0.39608, 0.62353, 0.00000],
+    [0.41176, 0.60784, 0.00000],
+    [0.42745, 0.59216, 0.00000],
+    [0.44314, 0.57647, 0.00000],
+    [0.46275, 0.56078, 0.00000],
+    [0.47843, 0.54510, 0.00000],
+    [0.49412, 0.52941, 0.00000],
+    [0.50980, 0.51373, 0.00000],
+    [0.52549, 0.49804, 0.00000],
+    [0.54118, 0.48235, 0.00000],
+    [0.56078, 0.46667, 0.00000],
+    [0.57647, 0.45098, 0.00000],
+    [0.59216, 0.43529, 0.00000],
+    [0.60784, 0.41961, 0.00000],
+    [0.62353, 0.40392, 0.00000],
+    [0.64314, 0.38824, 0.00000],
+    [0.65882, 0.37255, 0.00000],
+    [0.67451, 0.35686, 0.00000],
+    [0.69020, 0.34118, 0.00000],
+    [0.70588, 0.32549, 0.00000],
+    [0.72157, 0.30980, 0.00000],
+    [0.74118, 0.29412, 0.00000],
+    [0.75686, 0.27843, 0.00000],
+    [0.77255, 0.26275, 0.00000],
+    [0.78824, 0.24706, 0.00000],
+    [0.80392, 0.23137, 0.00000],
+    [0.82353, 0.21569, 0.00000],
+    [0.83922, 0.20000, 0.00000],
+    [0.85490, 0.18431, 0.00000],
+    [0.87059, 0.16863, 0.00000],
+    [0.88627, 0.15294, 0.00000],
+    [0.90196, 0.13725, 0.00000],
+    [0.92157, 0.12157, 0.00000],
+    [0.93725, 0.10588, 0.00000],
+    [0.95294, 0.09020, 0.00000],
+    [0.96863, 0.07451, 0.00000],
+    [0.98431, 0.05882, 0.00000],
+    [1.00000, 0.04314, 0.00000],
+]
+
+Mirp = [
+    [0.000000, 0.000000, 1.000000],
+    [0.000000, 0.060295, 1.000000],
+    [0.000000, 0.112233, 1.000000],
+    [0.000000, 0.157963, 1.000000],
+    [0.000000, 0.198902, 1.000000],
+    [0.000000, 0.236033, 1.000000],
+    [0.000000, 0.270066, 1.000000],
+    [0.000000, 0.301531, 1.000000],
+    [0.000000, 0.330834, 1.000000],
+    [0.000000, 0.358294, 1.000000],
+    [0.000000, 0.384164, 1.000000],
+    [0.000000, 0.408651, 1.000000],
+    [0.000000, 0.431924, 1.000000],
+    [0.000000, 0.454124, 1.000000],
+    [0.000000, 0.475368, 1.000000],
+    [0.000000, 0.495760, 1.000000],
+    [0.000000, 0.515384, 1.000000],
+    [0.000000, 0.534315, 1.000000],
+    [0.000000, 0.552619, 1.000000],
+    [0.000000, 0.570353, 1.000000],
+    [0.000000, 0.587566, 1.000000],
+    [0.000000, 0.604304, 1.000000],
+    [0.000000, 0.620605, 1.000000],
+    [0.000000, 0.636507, 1.000000],
+    [0.000000, 0.652040, 1.000000],
+    [0.000000, 0.667234, 1.000000],
+    [0.000000, 0.682114, 1.000000],
+    [0.000000, 0.696706, 1.000000],
+    [0.000000, 0.711030, 1.000000],
+    [0.000000, 0.725108, 1.000000],
+    [0.000000, 0.738957, 1.000000],
+    [0.000000, 0.752595, 1.000000],
+    [0.000000, 0.766038, 1.000000],
+    [0.000000, 0.779300, 1.000000],
+    [0.000000, 0.792396, 1.000000],
+    [0.000000, 0.805338, 1.000000],
+    [0.000000, 0.818139, 1.000000],
+    [0.000000, 0.830811, 1.000000],
+    [0.000000, 0.843364, 1.000000],
+    [0.000000, 0.855809, 1.000000],
+    [0.000000, 0.868156, 1.000000],
+    [0.000000, 0.880414, 1.000000],
+    [0.000000, 0.892592, 1.000000],
+    [0.000000, 0.904700, 1.000000],
+    [0.000000, 0.916746, 1.000000],
+    [0.000000, 0.928738, 1.000000],
+    [0.000000, 0.940684, 1.000000],
+    [0.000000, 0.952592, 1.000000],
+    [0.000000, 0.964470, 1.000000],
+    [0.000000, 0.976326, 1.000000],
+    [0.000000, 0.988167, 1.000000],
+    [0.000000, 1.000000, 1.000000],
+    [0.000000, 1.000000, 0.988167],
+    [0.000000, 1.000000, 0.976326],
+    [0.000000, 1.000000, 0.964470],
+    [0.000000, 1.000000, 0.952592],
+    [0.000000, 1.000000, 0.940684],
+    [0.000000, 1.000000, 0.928738],
+    [0.000000, 1.000000, 0.916746],
+    [0.000000, 1.000000, 0.904700],
+    [0.000000, 1.000000, 0.892592],
+    [0.000000, 1.000000, 0.880414],
+    [0.000000, 1.000000, 0.868156],
+    [0.000000, 1.000000, 0.855809],
+    [0.000000, 1.000000, 0.843364],
+    [0.000000, 1.000000, 0.830811],
+    [0.000000, 1.000000, 0.818139],
+    [0.000000, 1.000000, 0.805338],
+    [0.000000, 1.000000, 0.792396],
+    [0.000000, 1.000000, 0.779300],
+    [0.000000, 1.000000, 0.766038],
+    [0.000000, 1.000000, 0.752595],
+    [0.000000, 1.000000, 0.738957],
+    [0.000000, 1.000000, 0.725108],
+    [0.000000, 1.000000, 0.711030],
+    [0.000000, 1.000000, 0.696706],
+    [0.000000, 1.000000, 0.682114],
+    [0.000000, 1.000000, 0.667234],
+    [0.000000, 1.000000, 0.652040],
+    [0.000000, 1.000000, 0.636507],
+    [0.000000, 1.000000, 0.620605],
+    [0.000000, 1.000000, 0.604304],
+    [0.000000, 1.000000, 0.587566],
+    [0.000000, 1.000000, 0.570353],
+    [0.000000, 1.000000, 0.552619],
+    [0.000000, 1.000000, 0.534315],
+    [0.000000, 1.000000, 0.515384],
+    [0.000000, 1.000000, 0.495760],
+    [0.000000, 1.000000, 0.475368],
+    [0.000000, 1.000000, 0.454124],
+    [0.000000, 1.000000, 0.431924],
+    [0.000000, 1.000000, 0.408651],
+    [0.000000, 1.000000, 0.384164],
+    [0.000000, 1.000000, 0.358294],
+    [0.000000, 1.000000, 0.330834],
+    [0.000000, 1.000000, 0.301531],
+    [0.000000, 1.000000, 0.270066],
+    [0.000000, 1.000000, 0.236033],
+    [0.000000, 1.000000, 0.198902],
+    [0.000000, 1.000000, 0.157963],
+    [0.000000, 1.000000, 0.112233],
+    [0.000000, 1.000000, 0.060295],
+    [0.000000, 1.000000, 0.000000],
+    [0.060295, 1.000000, 0.000000],
+    [0.112233, 1.000000, 0.000000],
+    [0.157963, 1.000000, 0.000000],
+    [0.198902, 1.000000, 0.000000],
+    [0.236033, 1.000000, 0.000000],
+    [0.270066, 1.000000, 0.000000],
+    [0.301531, 1.000000, 0.000000],
+    [0.330834, 1.000000, 0.000000],
+    [0.358294, 1.000000, 0.000000],
+    [0.384164, 1.000000, 0.000000],
+    [0.408651, 1.000000, 0.000000],
+    [0.431924, 1.000000, 0.000000],
+    [0.454124, 1.000000, 0.000000],
+    [0.475368, 1.000000, 0.000000],
+    [0.495760, 1.000000, 0.000000],
+    [0.515384, 1.000000, 0.000000],
+    [0.534315, 1.000000, 0.000000],
+    [0.552619, 1.000000, 0.000000],
+    [0.570353, 1.000000, 0.000000],
+    [0.587566, 1.000000, 0.000000],
+    [0.604304, 1.000000, 0.000000],
+    [0.620605, 1.000000, 0.000000],
+    [0.636507, 1.000000, 0.000000],
+    [0.652040, 1.000000, 0.000000],
+    [0.667234, 1.000000, 0.000000],
+    [0.682114, 1.000000, 0.000000],
+    [0.696706, 1.000000, 0.000000],
+    [0.711030, 1.000000, 0.000000],
+    [0.725108, 1.000000, 0.000000],
+    [0.738957, 1.000000, 0.000000],
+    [0.752595, 1.000000, 0.000000],
+    [0.766038, 1.000000, 0.000000],
+    [0.779300, 1.000000, 0.000000],
+    [0.792396, 1.000000, 0.000000],
+    [0.805338, 1.000000, 0.000000],
+    [0.818139, 1.000000, 0.000000],
+    [0.830811, 1.000000, 0.000000],
+    [0.843364, 1.000000, 0.000000],
+    [0.855809, 1.000000, 0.000000],
+    [0.868156, 1.000000, 0.000000],
+    [0.880414, 1.000000, 0.000000],
+    [0.892592, 1.000000, 0.000000],
+    [0.904700, 1.000000, 0.000000],
+    [0.916746, 1.000000, 0.000000],
+    [0.928738, 1.000000, 0.000000],
+    [0.940684, 1.000000, 0.000000],
+    [0.952592, 1.000000, 0.000000],
+    [0.964470, 1.000000, 0.000000],
+    [0.976326, 1.000000, 0.000000],
+    [0.988167, 1.000000, 0.000000],
+    [1.000000, 1.000000, 0.000000],
+    [1.000000, 0.988167, 0.000000],
+    [1.000000, 0.976326, 0.000000],
+    [1.000000, 0.964470, 0.000000],
+    [1.000000, 0.952592, 0.000000],
+    [1.000000, 0.940684, 0.000000],
+    [1.000000, 0.928738, 0.000000],
+    [1.000000, 0.916746, 0.000000],
+    [1.000000, 0.904700, 0.000000],
+    [1.000000, 0.892592, 0.000000],
+    [1.000000, 0.880414, 0.000000],
+    [1.000000, 0.868156, 0.000000],
+    [1.000000, 0.855809, 0.000000],
+    [1.000000, 0.843364, 0.000000],
+    [1.000000, 0.830811, 0.000000],
+    [1.000000, 0.818139, 0.000000],
+    [1.000000, 0.805338, 0.000000],
+    [1.000000, 0.792396, 0.000000],
+    [1.000000, 0.779300, 0.000000],
+    [1.000000, 0.766038, 0.000000],
+    [1.000000, 0.752595, 0.000000],
+    [1.000000, 0.738957, 0.000000],
+    [1.000000, 0.725108, 0.000000],
+    [1.000000, 0.711030, 0.000000],
+    [1.000000, 0.696706, 0.000000],
+    [1.000000, 0.682114, 0.000000],
+    [1.000000, 0.667234, 0.000000],
+    [1.000000, 0.652040, 0.000000],
+    [1.000000, 0.636507, 0.000000],
+    [1.000000, 0.620605, 0.000000],
+    [1.000000, 0.604304, 0.000000],
+    [1.000000, 0.587566, 0.000000],
+    [1.000000, 0.570353, 0.000000],
+    [1.000000, 0.552619, 0.000000],
+    [1.000000, 0.534315, 0.000000],
+    [1.000000, 0.515384, 0.000000],
+    [1.000000, 0.495760, 0.000000],
+    [1.000000, 0.475368, 0.000000],
+    [1.000000, 0.454124, 0.000000],
+    [1.000000, 0.431924, 0.000000],
+    [1.000000, 0.408651, 0.000000],
+    [1.000000, 0.384164, 0.000000],
+    [1.000000, 0.358294, 0.000000],
+    [1.000000, 0.330834, 0.000000],
+    [1.000000, 0.301531, 0.000000],
+    [1.000000, 0.270066, 0.000000],
+    [1.000000, 0.236033, 0.000000],
+    [1.000000, 0.198902, 0.000000],
+    [1.000000, 0.157963, 0.000000],
+    [1.000000, 0.112233, 0.000000],
+    [1.000000, 0.060295, 0.000000],
+    [1.000000, 0.000000, 0.000000],
+    [1.000000, 0.000000, 0.060295],
+    [1.000000, 0.000000, 0.112233],
+    [1.000000, 0.000000, 0.157963],
+    [1.000000, 0.000000, 0.198902],
+    [1.000000, 0.000000, 0.236033],
+    [1.000000, 0.000000, 0.270066],
+    [1.000000, 0.000000, 0.301531],
+    [1.000000, 0.000000, 0.330834],
+    [1.000000, 0.000000, 0.358294],
+    [1.000000, 0.000000, 0.384164],
+    [1.000000, 0.000000, 0.408651],
+    [1.000000, 0.000000, 0.431924],
+    [1.000000, 0.000000, 0.454124],
+    [1.000000, 0.000000, 0.475368],
+    [1.000000, 0.000000, 0.495760],
+    [1.000000, 0.000000, 0.515384],
+    [1.000000, 0.000000, 0.534315],
+    [1.000000, 0.000000, 0.552619],
+    [1.000000, 0.000000, 0.570353],
+    [1.000000, 0.000000, 0.587566],
+    [1.000000, 0.000000, 0.604304],
+    [1.000000, 0.000000, 0.620605],
+    [1.000000, 0.000000, 0.636507],
+    [1.000000, 0.000000, 0.652040],
+    [1.000000, 0.000000, 0.667234],
+    [1.000000, 0.000000, 0.682114],
+    [1.000000, 0.000000, 0.696706],
+    [1.000000, 0.000000, 0.711030],
+    [1.000000, 0.000000, 0.725108],
+    [1.000000, 0.000000, 0.738957],
+    [1.000000, 0.000000, 0.752595],
+    [1.000000, 0.000000, 0.766038],
+    [1.000000, 0.000000, 0.779300],
+    [1.000000, 0.000000, 0.792396],
+    [1.000000, 0.000000, 0.805338],
+    [1.000000, 0.000000, 0.818139],
+    [1.000000, 0.000000, 0.830811],
+    [1.000000, 0.000000, 0.843364],
+    [1.000000, 0.000000, 0.855809],
+    [1.000000, 0.000000, 0.868156],
+    [1.000000, 0.000000, 0.880414],
+    [1.000000, 0.000000, 0.892592],
+    [1.000000, 0.000000, 0.904700],
+    [1.000000, 0.000000, 0.916746],
+    [1.000000, 0.000000, 0.928738],
+    [1.000000, 0.000000, 0.940684],
+    [1.000000, 0.000000, 0.952592],
+    [1.000000, 0.000000, 0.964470],
+    [1.000000, 0.000000, 0.976326],
+    [1.000000, 0.000000, 0.988167],
+    [1.000000, 0.000000, 1.000000],
+]
--- tigger-1.6.0.orig/TigGUI/Images/Colormaps.py
+++ tigger-1.6.0/TigGUI/Images/Colormaps.py
@@ -1,440 +1,440 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import copy
-import math
-
-import numpy
-import numpy.ma
-from PyQt5.Qt import QObject, QWidget, QHBoxLayout, QLabel, \
-    QToolButton, Qt, QColor, QImage, QPixmap, QPainter, QGridLayout, QBrush, QTimer
-from PyQt5.Qwt import QwtSlider
-from PyQt5.QtCore import pyqtSignal
-from scipy.ndimage import measurements
-
-import TigGUI.kitties.utils
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="colormap")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-
-class IntensityMap:
-    """An IntensityMap maps a float array into a 0...1 range."""
-
-    def __init__(self, dmin=None, dmax=None):
-        """Constructor. An optional data range may be supplied."""
-        self.range = None
-        self.subset = None
-        self.subset_minmax = None
-        if dmin is not None:
-            if dmax is None:
-                raise TypeError("both dmin and dmax must be specified, or neither.""")
-            self.setDataRange(dmin, dmax)
-
-    def copy(self):
-        return copy.copy(self)
-
-    def setDataRange(self, dmin, dmax):
-        """Sets the data range."""
-        self.range = dmin, dmax
-
-    def setDataSubset(self, subset, minmax=None):
-        """Sets the data subset."""
-        self.subset = subset
-        self.subset_minmax = minmax
-
-    def getDataSubset(self):
-        return self.subset, self.subset_minmax
-
-    def getDataRange(self, data):
-        """Returns the set data range, or uses data min/max if it is not set"""
-        # use data min/max if no explicit ranges are set
-        return self.range or measurements.extrema(data)[:2]
-
-    def remap(self, data):
-        """Remaps data into 0...1 range"""
-        raise RuntimeError("remap() not implemented in " + str(type(self)))
-
-
-class LinearIntensityMap(IntensityMap):
-    """This scales data linearly between preset min and max values."""
-
-    def remap(self, data):
-        d0, d1 = self.getDataRange(data)
-        dd = d1 - d0
-        if dd:
-            return ((data - d0) / dd).clip(0, 1)
-        else:
-            return numpy.zeros(data.shape, float)
-
-
-class LogIntensityMap(IntensityMap):
-    """This scales data linearly between preset min and max values."""
-
-    def __init__(self, log_cycles=6):
-        self.log_cycles = log_cycles
-
-    def remap(self, data):
-        # d0,d1 is current data range
-        d0, d1 = self.getDataRange(data)
-        if d0 == d1:
-            return numpy.zeros(data.shape, float)
-        dmax = d1 - d0
-        data = data - d0
-        dmin = dmax * (10 ** (-self.log_cycles))
-        # clip data to between dmin and dmax, and take log
-        data = numpy.ma.log10(data.clip(dmin, dmax))
-        # now rescale
-        return (data - math.log10(dmin)) / (math.log10(dmax) - math.log10(dmin))
-
-
-class HistEqIntensityMap(IntensityMap):
-    def __init__(self, nbins=256):
-        """Creates intensity mapper which uses histogram equalization."""
-        IntensityMap.__init__(self)
-        self._nbins = nbins
-        self._cdf = self._bins = self.subset = None
-
-    def setDataSubset(self, subset, minmax=None):
-        IntensityMap.setDataSubset(self, subset, minmax)
-        self._bins = None  # to recompute the CDF
-
-    def setDataRange(self, *range):
-        IntensityMap.setDataRange(self, *range)
-        self._bins = None  # to recompute the CDF
-
-    def _computeCDF(self, data):
-        """Recomputes the CDF using the current data subset and range"""
-        dmin, dmax = self.getDataRange(self.subset if self.subset is not None else data)
-        if dmin == dmax:
-            self._cdf = None
-        else:
-            dprint(1, "computing CDF for range", dmin, dmax)
-            # make cumulative histogram, normalize to 0...1
-            hist = measurements.histogram(self.subset if self.subset is not None else data, dmin, dmax, self._nbins)
-            cdf = numpy.cumsum(hist)
-            if not numpy.all(cdf == 0):
-                cdf = cdf / float(cdf[-1])
-                # append 0 at beginning, as left side of bin
-                self._cdf = numpy.zeros(len(cdf) + 1, float)
-                self._cdf[1:] = cdf[...]
-                # make array of bin edges
-                self._bins = dmin + (dmax - dmin) * numpy.arange(self._nbins + 1) / float(self._nbins)
-
-    def remap(self, data):
-        values = None
-        if self._bins is None:
-            self._computeCDF(data)
-        if self._cdf is None:
-            return numpy.zeros(data.shape, float)
-        if self._bins is not None:
-            values = numpy.interp(data.ravel(), self._bins, self._cdf).reshape(data.shape)
-        if hasattr(data, 'mask') and values is not None:
-            values = numpy.ma.masked_array(values, data.mask)
-        if values is not None:
-            return values
-        else:
-            return numpy.zeros(data.shape, float)
-
-
-class Colormap(QObject):
-    """
-    A Colormap provides operations for turning normalized float arrays into QImages.
-    The default implementation is a linear colormap between two colors.
-    """
-
-    def __init__(self, name, color0=QColor("black"), color1=QColor("white"), alpha=(1, 1)):
-        QObject.__init__(self)
-        self.name = name
-        # color is either specified as one argument (which should then be a [3,n] or [4,n] array),
-        # or as two QColors orstring names.
-        if isinstance(color0, (list, tuple)):
-            self._rgb = numpy.array(color0)
-            if self._rgb.shape[1] != 3 or self._rgb.shape[0] < 2:
-                raise TypeError("expected [N,3] (N>=2) array as first argument")
-        else:
-            if isinstance(color0, str):
-                color0 = QColor(color0)
-            if isinstance(color1, str):
-                color1 = QColor(color1)
-            self._rgb = numpy.array([[color0.red(), color0.green(), color0.blue()],
-                                     [color1.red(), color1.green(), color1.blue()]]) / 255.
-        self._rgb_arg = numpy.arange(self._rgb.shape[0]) / (self._rgb.shape[0] - 1.0)
-        # alpha array
-        self._alpha = numpy.array(alpha).astype(float)
-        self._alpha_arg = numpy.arange(len(alpha)) / (len(alpha) - 1.0)
-        # background brush
-        self._brush = None
-
-    def makeQImage(self, width, height):
-        data = numpy.zeros((width, height), float)
-        data[...] = (numpy.arange(width) / (width - 1.))[:, numpy.newaxis]
-        # make brush image -- diag background, with colormap on top
-        img = QImage(width, height, QImage.Format_RGB32)
-        painter = QPainter(img)
-        painter.fillRect(0, 0, width, height, QBrush(QColor("white")))
-        painter.fillRect(0, 0, width, height, QBrush(Qt.BDiagPattern))
-        painter.drawImage(0, 0, self.colorize(data))
-        painter.end()
-        return img
-
-    def makeQPixmap(self, width, height):
-        data = numpy.zeros((width, height), float)
-        data[...] = (numpy.arange(width) / (width - 1.))[:, numpy.newaxis]
-        # make brush image -- diag background, with colormap on top
-        img = QPixmap(width, height)
-        painter = QPainter(img)
-        painter.fillRect(0, 0, width, height, QBrush(QColor("white")))
-        painter.fillRect(0, 0, width, height, QBrush(Qt.BDiagPattern))
-        painter.drawImage(0, 0, self.colorize(data))
-        painter.end()
-        return img
-
-    def makeBrush(self, width, height):
-        return QBrush(self.makeQImage(width, height))
-
-    def colorize(self, data, alpha=None):
-        """Converts normalized data (0...1) array into a QImage of the same dimensions.
-        'alpha', if set, is a 0...1 array of the same size, which is mapped to the alpha channel
-        (i.e. 0 for fully transparent and 1 for fully opaque).
-        If data is a masked array, masked pixels will be fully transparent."""
-        # setup alpha channel
-        if alpha is None:
-            alpha = numpy.interp(data.ravel(), self._alpha_arg, self._alpha).reshape(data.shape)
-        alpha = numpy.round(255 * alpha).astype(numpy.int32).clip(0, 255)
-        # make RGB arrays
-        rgbs = [(numpy.interp(data.ravel(), self._rgb_arg, self._rgb[:, i]).
-                 reshape(data.shape) * 255).round().astype(numpy.int32).clip(0, 255)
-                for i in range(3)]
-        # add data mask
-        mask = getattr(data, 'mask', None)
-        if mask is not None and mask is not False:
-            alpha[mask] = 0
-            for x in rgbs:
-                x[mask] = 0
-        # do the deed
-        return self.QARGBImage(alpha, *rgbs)
-
-    def makeControlWidgets(self, parent):
-        """Creates control widgets for the colormap's internal parameters.
-        "parent" is a parent widget.
-        Returns None if no controls are required"""
-        return None
-
-    class QARGBImage(QImage):
-        """This is a QImage which is constructed from an A,R,G,B arrays."""
-
-        def __init__(self, a, r, g, b):
-            nx, ny = r.shape
-            argb = (a << 24) | (r << 16) | (g << 8) | b
-            # transpose array, as it is in column-major (C order), while QImages are in row-major order
-            dprint(5, "making qimage of size", nx, ny)
-            self._buffer = argb.transpose().tostring()
-            QImage.__init__(self, self._buffer, nx, ny, QImage.Format_ARGB32)
-
-
-class ColormapWithControls(Colormap):
-    """This is a base class for a colormap with controls knobs"""
-    colormapChanged = pyqtSignal()
-    colormapPreviewed = pyqtSignal()
-
-    class SliderControl(QObject):
-        """This class implements a slider control for a colormap"""
-        valueChanged = pyqtSignal(float)
-        valueMoved = pyqtSignal(float)
-
-        def __init__(self, name, value, minval, maxval, step, format="%s: %.1f"):
-            QObject.__init__(self)
-            self.name, self.value, self.minval, self.maxval, self.step, self.format = \
-                name, value, minval, maxval, step, format
-            self._default = value
-            self._wlabel = None
-            self._wreset = None
-            self._wslider = None
-            self._wslider_timer = None
-
-        def makeControlWidgets(self, parent, gridlayout, row, column):
-            toprow = QWidget(parent)
-            gridlayout.addWidget(toprow, row * 2, column)
-            top_lo = QHBoxLayout(toprow)
-            top_lo.setContentsMargins(0, 0, 0, 0)
-            self._wlabel = QLabel(self.format % (self.name, self.value), toprow)
-            top_lo.addWidget(self._wlabel)
-            self._wreset = QToolButton(toprow)
-            self._wreset.setText("reset")
-            self._wreset.setToolButtonStyle(Qt.ToolButtonTextOnly)
-            self._wreset.setAutoRaise(True)
-            self._wreset.setEnabled(self.value != self._default)
-            self._wreset.clicked.connect(self._resetValue)
-            top_lo.addWidget(self._wreset)
-            self._wslider = QwtSlider(parent)
-            self._wslider.setOrientation(Qt.Horizontal)
-            # This works around a stupid bug in QwtSliders -- see comments on histogram zoom wheel above
-            self._wslider_timer = QTimer(parent)
-            self._wslider_timer.setSingleShot(True)
-            self._wslider_timer.setInterval(500)
-            self._wslider_timer.timeout.connect(self.setValue)
-            gridlayout.addWidget(self._wslider, row * 2 + 1, column)
-            self._wslider.setScale(self.minval, self.maxval)
-            # self._wslider.setScaleStepSize(self.step)
-            self._wslider.setValue(self.value)
-            self._wslider.setTracking(False)
-            self._wslider.valueChanged.connect(self.setValue)
-            self._wslider.sliderMoved.connect(self._previewValue)
-
-        def _resetValue(self):
-            self._wslider.setValue(self._default)
-            self.setValue(self._default)
-
-        def setValue(self, value=None, notify=True):
-            # only update widgets if already created
-            self.value = value
-            if self._wlabel is not None:
-                if value is None:
-                    self.value = value = self._wslider.value()
-                self._wreset.setEnabled(value != self._default)
-                self._wlabel.setText(self.format % (self.name, self.value))
-                # stop timer if being called to finalize the change in value
-                if notify:
-                    self._wslider_timer.stop()
-                    self.valueChanged.emit(self.value)
-
-        def _previewValue(self, value):
-            self.setValue(notify=False)
-            self._wslider_timer.start(500)
-            self.valueMoved.emit(self.value)
-
-    def emitChange(self, *dum):
-        self.colormapChanged.emit()
-
-    def emitPreview(self, *dum):
-        self.colormapPreviewed.emit()
-
-    def loadConfig(self, config):
-        pass
-
-    def saveConfig(self, config, save=True):
-        pass
-
-
-class CubeHelixColormap(ColormapWithControls):
-    """This implements the "cubehelix" colour scheme proposed by Dave Green:
-    D. Green 2011, Bull. Astr. Soc. India (2011) 39, 289–295
-    http://arxiv.org/pdf/1108.5083v1
-    """
-
-    colormapChanged = pyqtSignal()
-
-    def __init__(self, gamma=1, rgb=0.5, rots=-1.5, hue=1.2, name="CubeHelix"):
-        ColormapWithControls.__init__(self, name)
-        self.gamma = self.SliderControl("Gamma", gamma, 0, 6, .1)
-        self.color = self.SliderControl("Colour", rgb, 0, 3, .1)
-        self.cycles = self.SliderControl("Cycles", rots, -10, 10, .1)
-        self.hue = self.SliderControl("Hue", hue, 0, 2, .1)
-
-    def colorize(self, data, alpha=None):
-        """Converts normalized data (0...1) array into a QImage of the same dimensions.
-        'alpha', if set, is a 0...1 array of the same size, which is mapped to the alpha channel
-        (i.e. 0 for fully transparent and 1 for fully opaque).
-        If data is a masked array, masked pixels will be fully transparent."""
-        # setup alpha channel
-        if alpha is None:
-            alpha = numpy.zeros(data.shape, dtype=numpy.int32)
-            alpha[...] = 255
-        else:
-            alpha = numpy.round(255 * alpha).astype(numpy.int32).clip(0, 255)
-        # make RGB arrays
-        dg = data ** self.gamma.value
-        a = self.hue.value * dg * (1 - dg) / 2
-        phi = 2 * math.pi * (self.color.value / 3 + self.cycles.value * data)
-        cosphi = a * numpy.cos(phi)
-        sinphi = a * numpy.sin(phi)
-        r = dg - 0.14861 * cosphi + 1.78277 * sinphi
-        g = dg - 0.29227 * cosphi - 0.90649 * sinphi
-        b = dg + 1.97249 * cosphi
-        rgbs = [(x * 255).round().astype(numpy.int32).clip(0, 255) for x in (r, g, b)]
-        # add data mask
-        mask = getattr(data, 'mask', None)
-        if mask is not None and mask is not False:
-            alpha[mask] = 0
-            for x in rgbs:
-                x[mask] = 0
-        # do the deed
-        return self.QARGBImage(alpha, *rgbs)
-
-    def makeControlWidgets(self, parent):
-        """Creates control widgets for the colormap's internal parameters.
-        "parent" is a parent widget.
-        Returns None if no controls are required"""
-        top = QWidget(parent)
-        layout = QGridLayout(top)
-        layout.setContentsMargins(0, 0, 0, 0)
-        for irow, icol, control in ((0, 0, self.gamma), (0, 1, self.color), (1, 0, self.cycles), (1, 1, self.hue)):
-            control.makeControlWidgets(top, layout, irow, icol)
-            control.valueChanged.connect(self.emitChange)
-            control.valueMoved.connect(self.emitPreview)
-        return top
-
-    def loadConfig(self, config):
-        for name in "gamma", "color", "cycles", "hue":
-            control = getattr(self, name)
-            value = config.getfloat("cubehelix-colourmap-%s" % name, control.value)
-            control.setValue(value, notify=False)
-
-    def saveConfig(self, config, save=True):
-        for name in "gamma", "color", "cycles", "hue":
-            control = getattr(self, name)
-            config.set("cubehelix-colourmap-%s" % name, control.value, save=save)
-
-
-# instantiate "static" colormaps (i.e. those that have no internal parameters, and thus can be
-# shared among images without instantiating a new Colormap object for each)
-GreyscaleColormap = Colormap("Greyscale")
-TransparentFuchsiaColormap = Colormap("Transparent Fuchsia", color0="fuchsia", color1="fuchsia", alpha=(0, 1))
-
-from .ColormapTables import Karma
-
-_karma_colormaps = [
-    Colormap(cmap, getattr(Karma, cmap))
-    for cmap in [
-        "Background",
-        "Heat",
-        "Isophot",
-        "Mousse",
-        "Rainbow",
-        "RGB",
-        "RGB2",
-        "Smooth",
-        "Staircase",
-        "Mirp",
-        "Random"]
-]
-
-
-def getColormapList():
-    """Returns list of Colormap instances."""
-
-    # Some colormaps need a unique instantiation (because they have parameters)
-    # For the rest, use the static objects
-    return [GreyscaleColormap,
-            CubeHelixColormap(),
-            TransparentFuchsiaColormap] + _karma_colormaps
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import copy
+import math
+
+import numpy
+import numpy.ma
+from PyQt5.Qt import QObject, QWidget, QHBoxLayout, QLabel, \
+    QToolButton, Qt, QColor, QImage, QPixmap, QPainter, QGridLayout, QBrush, QTimer
+from PyQt5.Qwt import QwtSlider
+from PyQt5.QtCore import pyqtSignal
+from scipy.ndimage import measurements
+
+import TigGUI.kitties.utils
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="colormap")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+
+class IntensityMap:
+    """An IntensityMap maps a float array into a 0...1 range."""
+
+    def __init__(self, dmin=None, dmax=None):
+        """Constructor. An optional data range may be supplied."""
+        self.range = None
+        self.subset = None
+        self.subset_minmax = None
+        if dmin is not None:
+            if dmax is None:
+                raise TypeError("both dmin and dmax must be specified, or neither.""")
+            self.setDataRange(dmin, dmax)
+
+    def copy(self):
+        return copy.copy(self)
+
+    def setDataRange(self, dmin, dmax):
+        """Sets the data range."""
+        self.range = dmin, dmax
+
+    def setDataSubset(self, subset, minmax=None):
+        """Sets the data subset."""
+        self.subset = subset
+        self.subset_minmax = minmax
+
+    def getDataSubset(self):
+        return self.subset, self.subset_minmax
+
+    def getDataRange(self, data):
+        """Returns the set data range, or uses data min/max if it is not set"""
+        # use data min/max if no explicit ranges are set
+        return self.range or measurements.extrema(data)[:2]
+
+    def remap(self, data):
+        """Remaps data into 0...1 range"""
+        raise RuntimeError("remap() not implemented in " + str(type(self)))
+
+
+class LinearIntensityMap(IntensityMap):
+    """This scales data linearly between preset min and max values."""
+
+    def remap(self, data):
+        d0, d1 = self.getDataRange(data)
+        dd = d1 - d0
+        if dd:
+            return ((data - d0) / dd).clip(0, 1)
+        else:
+            return numpy.zeros(data.shape, float)
+
+
+class LogIntensityMap(IntensityMap):
+    """This scales data linearly between preset min and max values."""
+
+    def __init__(self, log_cycles=6):
+        self.log_cycles = log_cycles
+
+    def remap(self, data):
+        # d0,d1 is current data range
+        d0, d1 = self.getDataRange(data)
+        if d0 == d1:
+            return numpy.zeros(data.shape, float)
+        dmax = d1 - d0
+        data = data - d0
+        dmin = dmax * (10 ** (-self.log_cycles))
+        # clip data to between dmin and dmax, and take log
+        data = numpy.ma.log10(data.clip(dmin, dmax))
+        # now rescale
+        return (data - math.log10(dmin)) / (math.log10(dmax) - math.log10(dmin))
+
+
+class HistEqIntensityMap(IntensityMap):
+    def __init__(self, nbins=256):
+        """Creates intensity mapper which uses histogram equalization."""
+        IntensityMap.__init__(self)
+        self._nbins = nbins
+        self._cdf = self._bins = self.subset = None
+
+    def setDataSubset(self, subset, minmax=None):
+        IntensityMap.setDataSubset(self, subset, minmax)
+        self._bins = None  # to recompute the CDF
+
+    def setDataRange(self, *range):
+        IntensityMap.setDataRange(self, *range)
+        self._bins = None  # to recompute the CDF
+
+    def _computeCDF(self, data):
+        """Recomputes the CDF using the current data subset and range"""
+        dmin, dmax = self.getDataRange(self.subset if self.subset is not None else data)
+        if dmin == dmax:
+            self._cdf = None
+        else:
+            dprint(1, "computing CDF for range", dmin, dmax)
+            # make cumulative histogram, normalize to 0...1
+            hist = measurements.histogram(self.subset if self.subset is not None else data, dmin, dmax, self._nbins)
+            cdf = numpy.cumsum(hist)
+            if not numpy.all(cdf == 0):
+                cdf = cdf / float(cdf[-1])
+                # append 0 at beginning, as left side of bin
+                self._cdf = numpy.zeros(len(cdf) + 1, float)
+                self._cdf[1:] = cdf[...]
+                # make array of bin edges
+                self._bins = dmin + (dmax - dmin) * numpy.arange(self._nbins + 1) / float(self._nbins)
+
+    def remap(self, data):
+        values = None
+        if self._bins is None:
+            self._computeCDF(data)
+        if self._cdf is None:
+            return numpy.zeros(data.shape, float)
+        if self._bins is not None:
+            values = numpy.interp(data.ravel(), self._bins, self._cdf).reshape(data.shape)
+        if hasattr(data, 'mask') and values is not None:
+            values = numpy.ma.masked_array(values, data.mask)
+        if values is not None:
+            return values
+        else:
+            return numpy.zeros(data.shape, float)
+
+
+class Colormap(QObject):
+    """
+    A Colormap provides operations for turning normalized float arrays into QImages.
+    The default implementation is a linear colormap between two colors.
+    """
+
+    def __init__(self, name, color0=QColor("black"), color1=QColor("white"), alpha=(1, 1)):
+        QObject.__init__(self)
+        self.name = name
+        # color is either specified as one argument (which should then be a [3,n] or [4,n] array),
+        # or as two QColors orstring names.
+        if isinstance(color0, (list, tuple)):
+            self._rgb = numpy.array(color0)
+            if self._rgb.shape[1] != 3 or self._rgb.shape[0] < 2:
+                raise TypeError("expected [N,3] (N>=2) array as first argument")
+        else:
+            if isinstance(color0, str):
+                color0 = QColor(color0)
+            if isinstance(color1, str):
+                color1 = QColor(color1)
+            self._rgb = numpy.array([[color0.red(), color0.green(), color0.blue()],
+                                     [color1.red(), color1.green(), color1.blue()]]) / 255.
+        self._rgb_arg = numpy.arange(self._rgb.shape[0]) / (self._rgb.shape[0] - 1.0)
+        # alpha array
+        self._alpha = numpy.array(alpha).astype(float)
+        self._alpha_arg = numpy.arange(len(alpha)) / (len(alpha) - 1.0)
+        # background brush
+        self._brush = None
+
+    def makeQImage(self, width, height):
+        data = numpy.zeros((width, height), float)
+        data[...] = (numpy.arange(width) / (width - 1.))[:, numpy.newaxis]
+        # make brush image -- diag background, with colormap on top
+        img = QImage(width, height, QImage.Format_RGB32)
+        painter = QPainter(img)
+        painter.fillRect(0, 0, width, height, QBrush(QColor("white")))
+        painter.fillRect(0, 0, width, height, QBrush(Qt.BDiagPattern))
+        painter.drawImage(0, 0, self.colorize(data))
+        painter.end()
+        return img
+
+    def makeQPixmap(self, width, height):
+        data = numpy.zeros((width, height), float)
+        data[...] = (numpy.arange(width) / (width - 1.))[:, numpy.newaxis]
+        # make brush image -- diag background, with colormap on top
+        img = QPixmap(width, height)
+        painter = QPainter(img)
+        painter.fillRect(0, 0, width, height, QBrush(QColor("white")))
+        painter.fillRect(0, 0, width, height, QBrush(Qt.BDiagPattern))
+        painter.drawImage(0, 0, self.colorize(data))
+        painter.end()
+        return img
+
+    def makeBrush(self, width, height):
+        return QBrush(self.makeQImage(width, height))
+
+    def colorize(self, data, alpha=None):
+        """Converts normalized data (0...1) array into a QImage of the same dimensions.
+        'alpha', if set, is a 0...1 array of the same size, which is mapped to the alpha channel
+        (i.e. 0 for fully transparent and 1 for fully opaque).
+        If data is a masked array, masked pixels will be fully transparent."""
+        # setup alpha channel
+        if alpha is None:
+            alpha = numpy.interp(data.ravel(), self._alpha_arg, self._alpha).reshape(data.shape)
+        alpha = numpy.round(255 * alpha).astype(numpy.int32).clip(0, 255)
+        # make RGB arrays
+        rgbs = [(numpy.interp(data.ravel(), self._rgb_arg, self._rgb[:, i]).
+                 reshape(data.shape) * 255).round().astype(numpy.int32).clip(0, 255)
+                for i in range(3)]
+        # add data mask
+        mask = getattr(data, 'mask', None)
+        if mask is not None and mask is not False:
+            alpha[mask] = 0
+            for x in rgbs:
+                x[mask] = 0
+        # do the deed
+        return self.QARGBImage(alpha, *rgbs)
+
+    def makeControlWidgets(self, parent):
+        """Creates control widgets for the colormap's internal parameters.
+        "parent" is a parent widget.
+        Returns None if no controls are required"""
+        return None
+
+    class QARGBImage(QImage):
+        """This is a QImage which is constructed from an A,R,G,B arrays."""
+
+        def __init__(self, a, r, g, b):
+            nx, ny = r.shape
+            argb = (a << 24) | (r << 16) | (g << 8) | b
+            # transpose array, as it is in column-major (C order), while QImages are in row-major order
+            dprint(5, "making qimage of size", nx, ny)
+            self._buffer = argb.transpose().tostring()
+            QImage.__init__(self, self._buffer, nx, ny, QImage.Format_ARGB32)
+
+
+class ColormapWithControls(Colormap):
+    """This is a base class for a colormap with controls knobs"""
+    colormapChanged = pyqtSignal()
+    colormapPreviewed = pyqtSignal()
+
+    class SliderControl(QObject):
+        """This class implements a slider control for a colormap"""
+        valueChanged = pyqtSignal(float)
+        valueMoved = pyqtSignal(float)
+
+        def __init__(self, name, value, minval, maxval, step, format="%s: %.1f"):
+            QObject.__init__(self)
+            self.name, self.value, self.minval, self.maxval, self.step, self.format = \
+                name, value, minval, maxval, step, format
+            self._default = value
+            self._wlabel = None
+            self._wreset = None
+            self._wslider = None
+            self._wslider_timer = None
+
+        def makeControlWidgets(self, parent, gridlayout, row, column):
+            toprow = QWidget(parent)
+            gridlayout.addWidget(toprow, row * 2, column)
+            top_lo = QHBoxLayout(toprow)
+            top_lo.setContentsMargins(0, 0, 0, 0)
+            self._wlabel = QLabel(self.format % (self.name, self.value), toprow)
+            top_lo.addWidget(self._wlabel)
+            self._wreset = QToolButton(toprow)
+            self._wreset.setText("reset")
+            self._wreset.setToolButtonStyle(Qt.ToolButtonTextOnly)
+            self._wreset.setAutoRaise(True)
+            self._wreset.setEnabled(self.value != self._default)
+            self._wreset.clicked.connect(self._resetValue)
+            top_lo.addWidget(self._wreset)
+            self._wslider = QwtSlider(parent)
+            self._wslider.setOrientation(Qt.Horizontal)
+            # This works around a stupid bug in QwtSliders -- see comments on histogram zoom wheel above
+            self._wslider_timer = QTimer(parent)
+            self._wslider_timer.setSingleShot(True)
+            self._wslider_timer.setInterval(500)
+            self._wslider_timer.timeout.connect(self.setValue)
+            gridlayout.addWidget(self._wslider, row * 2 + 1, column)
+            self._wslider.setScale(self.minval, self.maxval)
+            # self._wslider.setScaleStepSize(self.step)
+            self._wslider.setValue(self.value)
+            self._wslider.setTracking(False)
+            self._wslider.valueChanged.connect(self.setValue)
+            self._wslider.sliderMoved.connect(self._previewValue)
+
+        def _resetValue(self):
+            self._wslider.setValue(self._default)
+            self.setValue(self._default)
+
+        def setValue(self, value=None, notify=True):
+            # only update widgets if already created
+            self.value = value
+            if self._wlabel is not None:
+                if value is None:
+                    self.value = value = self._wslider.value()
+                self._wreset.setEnabled(value != self._default)
+                self._wlabel.setText(self.format % (self.name, self.value))
+                # stop timer if being called to finalize the change in value
+                if notify:
+                    self._wslider_timer.stop()
+                    self.valueChanged.emit(self.value)
+
+        def _previewValue(self, value):
+            self.setValue(notify=False)
+            self._wslider_timer.start(500)
+            self.valueMoved.emit(self.value)
+
+    def emitChange(self, *dum):
+        self.colormapChanged.emit()
+
+    def emitPreview(self, *dum):
+        self.colormapPreviewed.emit()
+
+    def loadConfig(self, config):
+        pass
+
+    def saveConfig(self, config, save=True):
+        pass
+
+
+class CubeHelixColormap(ColormapWithControls):
+    """This implements the "cubehelix" colour scheme proposed by Dave Green:
+    D. Green 2011, Bull. Astr. Soc. India (2011) 39, 289–295
+    http://arxiv.org/pdf/1108.5083v1
+    """
+
+    colormapChanged = pyqtSignal()
+
+    def __init__(self, gamma=1, rgb=0.5, rots=-1.5, hue=1.2, name="CubeHelix"):
+        ColormapWithControls.__init__(self, name)
+        self.gamma = self.SliderControl("Gamma", gamma, 0, 6, .1)
+        self.color = self.SliderControl("Colour", rgb, 0, 3, .1)
+        self.cycles = self.SliderControl("Cycles", rots, -10, 10, .1)
+        self.hue = self.SliderControl("Hue", hue, 0, 2, .1)
+
+    def colorize(self, data, alpha=None):
+        """Converts normalized data (0...1) array into a QImage of the same dimensions.
+        'alpha', if set, is a 0...1 array of the same size, which is mapped to the alpha channel
+        (i.e. 0 for fully transparent and 1 for fully opaque).
+        If data is a masked array, masked pixels will be fully transparent."""
+        # setup alpha channel
+        if alpha is None:
+            alpha = numpy.zeros(data.shape, dtype=numpy.int32)
+            alpha[...] = 255
+        else:
+            alpha = numpy.round(255 * alpha).astype(numpy.int32).clip(0, 255)
+        # make RGB arrays
+        dg = data ** self.gamma.value
+        a = self.hue.value * dg * (1 - dg) / 2
+        phi = 2 * math.pi * (self.color.value / 3 + self.cycles.value * data)
+        cosphi = a * numpy.cos(phi)
+        sinphi = a * numpy.sin(phi)
+        r = dg - 0.14861 * cosphi + 1.78277 * sinphi
+        g = dg - 0.29227 * cosphi - 0.90649 * sinphi
+        b = dg + 1.97249 * cosphi
+        rgbs = [(x * 255).round().astype(numpy.int32).clip(0, 255) for x in (r, g, b)]
+        # add data mask
+        mask = getattr(data, 'mask', None)
+        if mask is not None and mask is not False:
+            alpha[mask] = 0
+            for x in rgbs:
+                x[mask] = 0
+        # do the deed
+        return self.QARGBImage(alpha, *rgbs)
+
+    def makeControlWidgets(self, parent):
+        """Creates control widgets for the colormap's internal parameters.
+        "parent" is a parent widget.
+        Returns None if no controls are required"""
+        top = QWidget(parent)
+        layout = QGridLayout(top)
+        layout.setContentsMargins(0, 0, 0, 0)
+        for irow, icol, control in ((0, 0, self.gamma), (0, 1, self.color), (1, 0, self.cycles), (1, 1, self.hue)):
+            control.makeControlWidgets(top, layout, irow, icol)
+            control.valueChanged.connect(self.emitChange)
+            control.valueMoved.connect(self.emitPreview)
+        return top
+
+    def loadConfig(self, config):
+        for name in "gamma", "color", "cycles", "hue":
+            control = getattr(self, name)
+            value = config.getfloat("cubehelix-colourmap-%s" % name, control.value)
+            control.setValue(value, notify=False)
+
+    def saveConfig(self, config, save=True):
+        for name in "gamma", "color", "cycles", "hue":
+            control = getattr(self, name)
+            config.set("cubehelix-colourmap-%s" % name, control.value, save=save)
+
+
+# instantiate "static" colormaps (i.e. those that have no internal parameters, and thus can be
+# shared among images without instantiating a new Colormap object for each)
+GreyscaleColormap = Colormap("Greyscale")
+TransparentFuchsiaColormap = Colormap("Transparent Fuchsia", color0="fuchsia", color1="fuchsia", alpha=(0, 1))
+
+from .ColormapTables import Karma
+
+_karma_colormaps = [
+    Colormap(cmap, getattr(Karma, cmap))
+    for cmap in [
+        "Background",
+        "Heat",
+        "Isophot",
+        "Mousse",
+        "Rainbow",
+        "RGB",
+        "RGB2",
+        "Smooth",
+        "Staircase",
+        "Mirp",
+        "Random"]
+]
+
+
+def getColormapList():
+    """Returns list of Colormap instances."""
+
+    # Some colormaps need a unique instantiation (because they have parameters)
+    # For the rest, use the static objects
+    return [GreyscaleColormap,
+            CubeHelixColormap(),
+            TransparentFuchsiaColormap] + _karma_colormaps
--- tigger-1.6.0.orig/TigGUI/Images/ControlDialog.py
+++ tigger-1.6.0/TigGUI/Images/ControlDialog.py
@@ -1,1003 +1,1003 @@
-
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute f and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-
-import numpy
-from PyQt5.Qt import QWidget, QHBoxLayout, QComboBox, QLabel, QLineEdit, QDialog, QToolButton, QVBoxLayout, \
-    Qt, QSize, QSizePolicy, QApplication, QColor, QBrush, QTimer, QFrame, QCheckBox, QStackedWidget, QIcon, QMenu, \
-    QGridLayout, QPen, QRect
-from PyQt5.QtGui import QFont
-from PyQt5.QtWidgets import QDockWidget
-from PyQt5.Qwt import QwtPlot, QwtText, QwtPlotItem, QwtPlotCurve, QwtSymbol, QwtLinearScaleEngine, QwtLogScaleEngine, \
-    QwtPlotPicker, QwtPicker, QwtEventPattern, QwtWheel, QwtSlider,  QwtPickerMachine, QwtPickerClickPointMachine, QwtPickerClickRectMachine
-
-from scipy.ndimage import measurements
-
-from TigGUI.kitties.utils import PersistentCurrier
-from TigGUI.kitties.widgets import BusyIndicator
-from .RenderControl import RenderControl, dprint
-from TigGUI.Images import Colormaps
-from TigGUI.Widgets import FloatValidator, TiggerPlotCurve, TiggerPlotMarker, TDockWidget
-from TigGUI.init import pixmaps
-
-DataValueFormat = "%.4g"
-
-
-class Separator(QWidget):
-    def __init__(self, parent, label, extra_widgets=[], style=QFrame.HLine + QFrame.Raised, offset=16):
-        QWidget.__init__(self, parent)
-        lo = QHBoxLayout(self)
-        lo.setContentsMargins(0, 0, 0, 0)
-        lo.setSpacing(4)
-        if offset:
-            frame = QFrame(self)
-            frame.setFrameStyle(style)
-            frame.setMinimumWidth(offset)
-            lo.addWidget(frame, 0)
-        lo.addWidget(QLabel(label, self), 0)
-        frame = QFrame(self)
-        frame.setFrameStyle(style)
-        lo.addWidget(frame, 1)
-        for w in extra_widgets:
-            lo.addWidget(w, 0)
-
-
-class ImageControlDialog(QDialog):
-    def __init__(self, parent, rc, imgman):
-        """An ImageControlDialog is initialized with a parent widget, a RenderControl object,
-        and an ImageManager object"""
-        QDialog.__init__(self, parent)
-        image = rc.image
-        self.setWindowTitle("%s: Colour Controls" % image.name)
-        self.setWindowIcon(pixmaps.colours.icon())
-        self.setModal(False)
-        self.image = image
-        self._rc = rc
-        self._imgman = imgman
-        self._currier = PersistentCurrier()
-
-        # init internal state
-        self._prev_range = self._display_range = None, None
-        self._hist = None
-        self._geometry = None
-
-        # create layouts
-        lo0 = QVBoxLayout(self)
-        #    lo0.setContentsMargins(0,0,0,0)
-
-        # histogram plot
-        whide = self.makeButton("Hide", self.hide, width=128)
-        whide.setShortcut(Qt.Key_F9)
-        lo0.addWidget(Separator(self, "Histogram and ITF", extra_widgets=[whide]))
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        self._histplot = QwtPlot(self)
-        self._histplot.setAutoDelete(False)
-        lo1.addWidget(self._histplot, 1)
-        lo2 = QHBoxLayout()
-        lo2.setContentsMargins(0, 0, 0, 0)
-        lo2.setSpacing(2)
-        lo0.addLayout(lo2)
-        lo0.addLayout(lo1)
-        self._wautozoom = QCheckBox("autozoom", self)
-        self._wautozoom.setChecked(True)
-        self._wautozoom.setToolTip("""<P>If checked, then the histrogram plot will zoom in automatically when
-      you narrow the current intensity range.</P>""")
-        self._wlogy = QCheckBox("log Y", self)
-        self._wlogy.setChecked(True)
-        self._ylogscale = True
-        self._wlogy.setToolTip(
-            """<P>If checked, a log-scale Y axis is used for the histogram plot instead of a linear one.""")
-        self._wlogy.toggled[bool].connect(self._setHistLogScale)
-        self._whistunzoom = self.makeButton("", self._unzoomHistogram, icon=pixmaps.full_range.icon())
-        self._whistzoomout = self.makeButton("-", self._currier.curry(self._zoomHistogramByFactor, math.sqrt(.1)))
-        self._whistzoomin = self.makeButton("+", self._currier.curry(self._zoomHistogramByFactor, math.sqrt(10)))
-        self._whistzoomin.setToolTip("""<P>Click to zoom into the histogram plot by one step. This does not
-      change the current intensity range.</P>""")
-        self._whistzoomout.setToolTip("""<P>Click to zoom out of the histogram plot by one step. This does not
-      change the current intensity range.</P>""")
-        self._whistunzoom.setToolTip("""<P>Click to reset the histogram plot back to its full extent.
-      This does not change the current intensity range.</P>""")
-        self._whistzoom = QwtWheel(self)
-        self._whistzoom.setMass(0.5)
-        self._whistzoom.setOrientation(Qt.Horizontal)
-        self._whistzoom.setMaximumWidth(80)
-        self._whistzoom.setRange(0, 10)
-        self._whistzoom.setSingleStep(0.1)
-        self._whistzoom.setPageStepCount(1)
-        self._whistzoom.setTickCount(30)
-        self._whistzoom.setTracking(False)
-        self._whistzoom.valueChanged['double'].connect(self._zoomHistogramFinalize)
-        self._whistzoom.wheelMoved['double'].connect(self._zoomHistogramPreview)
-        self._whistzoom.setToolTip("""<P>Use this wheel control to zoom in/out of the histogram plot.
-      This does not change the current intensity range.
-      Note that the zoom wheel should also respond to your mouse wheel, if you have one.</P>""")
-        # This works around a stupid bug in QwtSliders -- when using the mousewheel, only sliderMoved() signals are emitted,
-        # with no final  valueChanged(). If we want to do a fast preview of something on sliderMoved(), and a "slow" final
-        # step on valueChanged(), we're in trouble. So we start a timer on sliderMoved(), and if the timer expires without
-        # anything else happening, do a valueChanged().
-        # Here we use a timer to call zoomHistogramFinalize() w/o an argument.
-        self._whistzoom_timer = QTimer(self)
-        self._whistzoom_timer.setSingleShot(True)
-        self._whistzoom_timer.setInterval(500)
-        self._whistzoom_timer.timeout.connect(self._zoomHistogramFinalize)
-        # set same size for all buttons and controls
-        width = 24
-        for w in self._whistunzoom, self._whistzoomin, self._whistzoomout:
-            w.setMinimumSize(width, width)
-            w.setMaximumSize(width, width)
-        self._whistzoom.setMinimumSize(80, width)
-        self._wlab_histpos_text = "(hover for help)"
-        self._wlab_histpos = QLabel(self._wlab_histpos_text, self)
-        help_font = QFont()
-        help_font.setPointSize(8)
-        self._wlab_histpos.setFont(help_font)
-        self._wlab_histpos.setToolTip("""
-      <P>The plot shows a histogram of either the full image or its selected subset
-      (as per the "Data subset" section below).</P>
-      <P>The current intensity range is indicated by the grey box
-      in the plot.</P>
-      <P>Use the left mouse button to change the low intensity limit, and the right
-      button (on Macs, use Ctrl-click) to change the high limit.</P>
-      <P>Use Shift with the left mouse button to zoom into an area of the histogram,
-      or else use the "zoom wheel" control or the plus/minus toolbuttons above the histogram to zoom in or out.
-      To zoom back out to the full extent of the histogram, click on the rightmost button above the histogram.</P>
-      """)
-        lo2.addWidget(self._wlab_histpos, 1)
-        lo2.addWidget(self._wautozoom)
-        lo2.addWidget(self._wlogy, 0)
-        lo2.addWidget(self._whistzoomin, 0)
-        lo2.addWidget(self._whistzoom, 0)
-        lo2.addWidget(self._whistzoomout, 0)
-        lo2.addWidget(self._whistunzoom, 0)
-        self._zooming_histogram = False
-
-        sliced_axes = rc.slicedAxes()
-        dprint(1, "sliced axes are", sliced_axes)
-        self._stokes_axis = None
-
-        # subset indication
-        lo0.addWidget(Separator(self, "Data subset"))
-        # sliced axis selectors
-        self._wslicers = []
-        if sliced_axes:
-            lo1 = QHBoxLayout()
-            lo1.setContentsMargins(0, 0, 0, 0)
-            lo1.setSpacing(2)
-            lo0.addLayout(lo1)
-            lo1.addWidget(QLabel("Current slice:  ", self))
-            for i, (iextra, name, labels) in enumerate(sliced_axes):
-                lo1.addWidget(QLabel("%s:" % name, self))
-                if name == "STOKES":
-                    self._stokes_axis = iextra
-                # add controls
-                wslicer = QComboBox(self)
-                self._wslicers.append(wslicer)
-                wslicer.addItems(labels)
-                wslicer.setToolTip("""<P>Selects current slice along the %s axis.</P>""" % name)
-                wslicer.setCurrentIndex(self._rc.currentSlice()[iextra])
-                wslicer.activated[int].connect(self._currier.curry(self._rc.changeSlice, iextra))
-                lo2 = QVBoxLayout()
-                lo1.addLayout(lo2)
-                lo2.setContentsMargins(0, 0, 0, 0)
-                lo2.setSpacing(0)
-                wminus = QToolButton(self)
-                wminus.setArrowType(Qt.UpArrow)
-                wminus.clicked.connect(self._currier.curry(self._rc.incrementSlice, iextra, 1))
-                if i == 0:
-                    wminus.setShortcut(Qt.SHIFT + Qt.Key_F7)
-                elif i == 1:
-                    wminus.setShortcut(Qt.SHIFT + Qt.Key_F8)
-                wplus = QToolButton(self)
-                wplus.setArrowType(Qt.DownArrow)
-                wplus.clicked.connect(self._currier.curry(self._rc.incrementSlice, iextra, -1))
-                if i == 0:
-                    wplus.setShortcut(Qt.Key_F7)
-                elif i == 1:
-                    wplus.setShortcut(Qt.Key_F8)
-                wminus.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
-                wplus.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
-                sz = QSize(12, 8)
-                wminus.setMinimumSize(sz)
-                wplus.setMinimumSize(sz)
-                wminus.resize(sz)
-                wplus.resize(sz)
-                lo2.addWidget(wminus)
-                lo2.addWidget(wplus)
-                lo1.addWidget(wslicer)
-                lo1.addSpacing(5)
-            lo1.addStretch(1)
-        # subset indicator
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo1.setSpacing(2)
-        lo0.addLayout(lo1)
-        self._wlab_subset = QLabel("Subset: xxx", self)
-        self._wlab_subset.setToolTip("""<P>This indicates the current data subset to which the histogram
-      and the stats given here apply. Use the "Reset to" control on the right to change the
-      current subset and recompute the histogram and stats.</P>""")
-        lo1.addWidget(self._wlab_subset, 1)
-
-        self._wreset_full = self.makeButton("\u2192 full", self._rc.setFullSubset)
-        lo1.addWidget(self._wreset_full)
-        if sliced_axes:
-            #      if self._stokes_axis is not None and len(sliced_axes)>1:
-            #        self._wreset_stokes = self.makeButton(u"\u21920Stokes",self._rc.setFullSubset)
-            self._wreset_slice = self.makeButton("\u2192 slice", self._rc.setSliceSubset)
-            lo1.addWidget(self._wreset_slice)
-        else:
-            self._wreset_slice = None
-
-        # min/max controls
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo0.addLayout(lo1, 0)
-        self._wlab_stats = QLabel(self)
-        self._wlab_stats.setWordWrap(True)
-        self._wlab_stats.setMinimumWidth(384)
-        lo1.addWidget(self._wlab_stats, 0)
-        self._wmore_stats = self.makeButton("more...", self._showMeanStd)
-        self._wlab_stats.setMinimumHeight(self._wmore_stats.height())
-        lo1.addWidget(self._wmore_stats, 0)
-        lo1.addStretch(1)
-
-        # intensity controls
-        lo0.addWidget(Separator(self, "Intensity mapping"))
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo1.setSpacing(2)
-        lo0.addLayout(lo1, 0)
-        self._range_validator = FloatValidator(self)
-        self._wrange = QLineEdit(self), QLineEdit(self)
-        self._wrange[0].setToolTip("""<P>This is the low end of the intensity range.</P>""")
-        self._wrange[1].setToolTip("""<P>This is the high end of the intensity range.</P>""")
-        for w in self._wrange:
-            w.setValidator(self._range_validator)
-            w.editingFinished.connect(self._changeDisplayRange)
-        lo1.addWidget(QLabel("low:", self), 0)
-        lo1.addWidget(self._wrange[0], 1)
-        self._wrangeleft0 = self.makeButton("\u21920", self._setZeroLeftLimit, width=32)
-        self._wrangeleft0.setToolTip("""<P>Click this to set the low end of the intensity range to 0.</P>""")
-        lo1.addWidget(self._wrangeleft0, 0)
-        lo1.addSpacing(8)
-        lo1.addWidget(QLabel("high:", self), 0)
-        lo1.addWidget(self._wrange[1], 1)
-        lo1.addSpacing(8)
-        self._wrange_full = self.makeButton(None, self._setHistDisplayRange, icon=pixmaps.intensity_graph.icon())
-        lo1.addWidget(self._wrange_full)
-        self._wrange_full.setToolTip(
-            """<P>Click this to reset the intensity range to the current extent of the histogram plot.</P>""")
-        # add menu for display range
-        range_menu = QMenu(self)
-        wrange_menu = QToolButton(self)
-        wrange_menu.setText("Reset to")
-        wrange_menu.setToolTip("""<P>Use this to reset the intensity range to various pre-defined settings.</P>""")
-        lo1.addWidget(wrange_menu)
-        self._qa_range_full = range_menu.addAction(pixmaps.full_range.icon(), "Full subset",
-                                                   self._rc.resetSubsetDisplayRange)
-        self._qa_range_hist = range_menu.addAction(pixmaps.intensity_graph.icon(), "Current histogram limits",
-                                                   self._setHistDisplayRange)
-        for percent in (99.99, 99.9, 99.5, 99, 98, 95):
-            range_menu.addAction("%g%%" % percent, self._currier.curry(self._changeDisplayRangeToPercent, percent))
-        wrange_menu.setMenu(range_menu)
-        wrange_menu.setPopupMode(QToolButton.InstantPopup)
-
-        lo1 = QGridLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo0.addLayout(lo1, 0)
-        self._wimap = QComboBox(self)
-        lo1.addWidget(QLabel("Intensity policy:", self), 0, 0)
-        lo1.addWidget(self._wimap, 1, 0)
-        self._wimap.addItems(rc.getIntensityMapNames())
-        self._wimap.currentIndexChanged[int].connect(self._rc.setIntensityMapNumber)
-        self._wimap.setToolTip("""<P>Use this to change the type of the intensity transfer function (ITF).</P>""")
-
-        # log cycles control
-        lo1.setColumnStretch(1, 1)
-        self._wlogcycles_label = QLabel("Log cycles: ", self)
-        lo1.addWidget(self._wlogcycles_label, 0, 1)
-        #    self._wlogcycles = QwtWheel(self)
-        #    self._wlogcycles.setTotalAngle(360)
-        self._wlogcycles = QwtSlider(self)
-        self._wlogcycles.setToolTip(
-            """<P>Use this to change the log-base for the logarithmic intensity transfer function (ITF).</P>""")
-        # This works around a stupid bug in QwtSliders -- see comments on histogram zoom wheel above
-        self._wlogcycles_timer = QTimer(self)
-        self._wlogcycles_timer.setSingleShot(True)
-        self._wlogcycles_timer.setInterval(500)
-        self._wlogcycles_timer.timeout.connect(self._setIntensityLogCycles)
-        lo1.addWidget(self._wlogcycles, 1, 1)
-        # self._wlogcycles.setRange(1., 10)  # need to find 6.1.5 change from v5
-        self._wlogcycles.setScale(1., 10)
-        # self._wlogcycles.setStep(0.1)  # need to find 6.1.5 change from v5
-        # self._wlogcycles.setScaleStepSize(0.1)
-        self._wlogcycles.setTracking(False)
-        self._wlogcycles.valueChanged.connect(self._setIntensityLogCycles)
-        self._wlogcycles.sliderMoved.connect(self._previewIntensityLogCycles)
-        self._updating_imap = False
-
-        # lock intensity map
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo0.addLayout(lo1, 0)
-        #    lo1.addWidget(QLabel("Lock range accross",self))
-        wlock = QCheckBox("Lock display range", self)
-        wlock.setMinimumWidth(192)
-        wlock.setToolTip("""<P>If checked, then the intensity range will be locked. The ranges of all locked images
-      change simultaneously.</P>""")
-        lo1.addWidget(wlock)
-        wlockall = QToolButton(self)
-        wlockall.setIcon(pixmaps.locked.icon())
-        wlockall.setText("Lock all to this")
-        wlockall.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
-        wlockall.setAutoRaise(True)
-        wlockall.setToolTip("""<P>Click this to lock together the intensity ranges of all images.</P>""")
-        lo1.addWidget(wlockall)
-        wunlockall = QToolButton(self)
-        wunlockall.setIcon(pixmaps.unlocked.icon())
-        wunlockall.setText("Unlock all")
-        wunlockall.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
-        wunlockall.setAutoRaise(True)
-        wunlockall.setToolTip("""<P>Click this to unlock the intensity ranges of all images.</P>""")
-        lo1.addWidget(wunlockall)
-        wlock.setChecked(self._rc.isDisplayRangeLocked())
-        wlock.clicked[bool].connect(self._rc.lockDisplayRange)
-        wlockall.clicked.connect(self._currier.curry(self._imgman.lockAllDisplayRanges, self._rc))
-        wunlockall.clicked.connect(self._imgman.unlockAllDisplayRanges)
-        self._rc.displayRangeLocked.connect(wlock.setChecked)
-
-        #    self._wlock_imap_axis = [ QCheckBox(name,self) for iaxis,name,labels in sliced_axes ]
-        #    for iw,w in enumerate(self._wlock_imap_axis):
-        #      QObject.connect(w,pyqtSignal("toggled(bool)"),self._currier.curry(self._rc.lockDisplayRangeForAxis,iw))
-        #      lo1.addWidget(w,0)
-        lo1.addStretch(1)
-
-        # lo0.addWidget(Separator(self,"Colourmap"))
-        # color bar
-        self._colorbar = QwtPlot(self)
-        lo0.addWidget(self._colorbar)
-        self._colorbar.setAutoDelete(False)
-        self._colorbar.setMinimumHeight(32)
-        self._colorbar.enableAxis(QwtPlot.yLeft, False)
-        self._colorbar.enableAxis(QwtPlot.xBottom, False)
-        # color plot
-        self._colorplot = QwtPlot(self)
-        lo0.addWidget(self._colorplot)
-        self._colorplot.setAutoDelete(False)
-        self._colorplot.setMinimumHeight(64)
-        self._colorplot.enableAxis(QwtPlot.yLeft, False)
-        self._colorplot.enableAxis(QwtPlot.xBottom, False)
-        # self._colorplot.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Preferred)
-        self._colorbar.hide()
-        self._colorplot.hide()
-        # color controls
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo0.addLayout(lo1, 1)
-        lo1.addWidget(QLabel("Colourmap:", self))
-        # colormap list
-        ### NB: use setIconSize() and icons in QComboBox!!!
-        self._wcolmaps = QComboBox(self)
-        self._wcolmaps.setIconSize(QSize(128, 16))
-        self._wcolmaps.setToolTip("""<P>Use this to select a different colourmap.</P>""")
-        for cmap in self._rc.getColormapList():
-            self._wcolmaps.addItem(QIcon(cmap.makeQPixmap(128, 16)), cmap.name)
-        lo1.addWidget(self._wcolmaps)
-        self._wcolmaps.activated[int].connect(self._rc.setColorMapNumber)
-        # add widgetstack for colormap controls
-        self._wcolmap_control_stack = QStackedWidget(self)
-        self._wcolmap_control_blank = QWidget(self._wcolmap_control_stack)
-        self._wcolmap_control_stack.addWidget(self._wcolmap_control_blank)
-        lo0.addWidget(self._wcolmap_control_stack)
-        self._colmap_controls = []
-        # add controls to stack
-        for index, cmap in enumerate(self._rc.getColormapList()):
-            if isinstance(cmap, Colormaps.ColormapWithControls):
-                controls = cmap.makeControlWidgets(self._wcolmap_control_stack)
-                self._wcolmap_control_stack.addWidget(controls)
-                cmap.colormapChanged.connect(self._currier.curry(self._previewColormapParameters, index, cmap))
-                cmap.colormapPreviewed.connect(self._currier.curry(self._previewColormapParameters, index, cmap))
-                self._colmap_controls.append(controls)
-            else:
-                self._colmap_controls.append(self._wcolmap_control_blank)
-
-        # connect updates from renderControl and image
-        self.image.signalSlice.connect(self._updateImageSlice)
-        self._rc.intensityMapChanged.connect(self._updateIntensityMap)
-        self._rc.colorMapChanged.connect(self._updateColorMap)
-        self._rc.dataSubsetChanged.connect(self._updateDataSubset)
-        self._rc.displayRangeChanged.connect(self._updateDisplayRange)
-
-        # update widgets
-        self._setupHistogramPlot()
-        self._updateDataSubset(*self._rc.currentSubset())
-        self._updateColorMap(image.colorMap())
-        self._updateIntensityMap(rc.currentIntensityMap(), rc.currentIntensityMapNumber())
-        self._updateDisplayRange(*self._rc.displayRange())
-
-    def makeButton(self, label, callback=None, width=None, icon=None):
-        btn = QToolButton(self)
-        #    btn.setAutoRaise(True)
-        label and btn.setText(label)
-        icon and btn.setIcon(icon)
-        #    btn = QPushButton(label,self)
-        #   btn.setFlat(True)
-        if width:
-            btn.setMinimumWidth(width)
-            btn.setMaximumWidth(width)
-        if icon:
-            btn.setIcon(icon)
-        if callback:
-            btn.clicked.connect(callback)
-        return btn
-
-    #  def closeEvent (self,ev):
-    #    ev.ignore()
-    #    self.hide()
-
-    def hide(self):
-        self._geometry = self.geometry()
-        QDialog.hide(self)
-        self.parent().setVisible(False)
-
-    def show(self):
-        dprint(4, "show entrypoint")
-        if self._geometry:
-            dprint(4, "setting geometry")
-            self.setGeometry(self._geometry)
-        if self._hist is None:
-            busy = BusyIndicator()
-            dprint(4, "updating histogram")
-            self._updateHistogram()
-            dprint(4, "updating stats")
-            self._updateStats(self._subset, self._subset_range)
-            busy.reset_cursor()
-        dprint(4, "calling QDialog.show")
-        QDialog.show(self)
-
-    # number of bins used to compute intensity transfer function
-    NumItfBins = 1000
-    # number of bins used for displaying histograms
-    NumHistBins = 500
-    # number of bins used for high-res histograms
-    NumHistBinsHi = 10000
-    # colorbar height, as fraction of plot area
-    ColorBarHeight = 0.1
-
-    class HistLimitPicker(QwtPlotPicker):
-        """Auguments QwtPlotPicker with functions for selecting hist min/max values"""
-
-        def __init__(self, plot, label, color="green", mode=QwtPickerClickPointMachine(),
-                     rubber_band=QwtPicker.VLineRubberBand, tracker_mode=QwtPicker.ActiveOnly, track=None):
-            QwtPlotPicker.__init__(self, QwtPlot.xBottom, QwtPlot.yRight, rubber_band, tracker_mode,
-                                   plot.canvas())
-
-            self.setStateMachine(mode)
-            self.plot = plot
-            self.label = label
-            self.track = track
-            self.color = QColor(color)
-            self.setRubberBandPen(QPen(self.color))
-            self.setRubberBand(rubber_band)
-
-        def trackerText(self, pos):
-            x, y = self.plot.invTransform(QwtPlot.xBottom, pos.x()), self.plot.invTransform(QwtPlot.yLeft, pos.y())
-            if self.track:
-                text = self.track(x, y)
-                if text is not None:
-                    return text
-            if self.label:
-                text = QwtText(self.label % dict(x=x, y=y))
-                text.setColor(self.color)
-                return text
-            return QwtText()
-
-        def widgetLeaveEvent(self, ev):
-            if self.track:
-                self.track(None, None)
-            QwtPlotPicker.widgetLeaveEvent(self, ev)
-
-    class ColorBarPlotItem(QwtPlotItem):
-        def __init__(self, y0, y1, *args):
-            QwtPlotItem.__init__(self, *args)
-            self.RenderAntialiased
-            self.imap = None
-            self.cmap = None
-            self._y0 = y1
-            self._dy = y1 - y0
-
-        def setIntensityMap(self, imap):
-            self.imap = imap
-
-        def setColorMap(self, cmap):
-            self.cmap = cmap
-
-        def draw(self, painter, xmap, ymap, rect):
-            """Implements QwtPlotItem.draw(), to render the colorbar on the given painter."""
-            xp1, xp2, xdp, xs1, xs2, xds = xinfo = xmap.p1(), xmap.p2(), xmap.pDist(), xmap.s1(), xmap.s2(), xmap.sDist()
-            yp1, yp2, ydp, ys1, ys2, yds = yinfo = ymap.p1(), ymap.p2(), ymap.pDist(), ymap.s1(), ymap.s2(), ymap.sDist()
-            # xp: coordinates of pixels xp1...xp2 in data units
-            xp = xs1 + (xds / xdp) * (0.5 + numpy.arange(int(xdp)))
-            # convert y0 and y1 into pixel coordinates
-            y0 = yp1 - (self._y0 - ys1) * (ydp / yds)
-            dy = self._dy * (ydp / yds)
-            # remap into an Nx1 image
-            qimg = self.cmap.colorize(self.imap.remap(xp.reshape((len(xp), 1))))
-            # plot image
-            painter.drawImage(QRect(xp1, y0, xdp, dy), qimg)
-
-    class HistogramLineMarker:
-        """Helper class implementing a line marker for a histogram plot"""
-
-        def __init__(self, plot, color="black", linestyle=Qt.DotLine, align=Qt.AlignBottom | Qt.AlignRight, z=90,
-                     label="", zlabel=None, linewidth=1, spacing=2,
-                     yaxis=QwtPlot.yRight):
-            self.line = TiggerPlotCurve()
-            self.line.setRenderHint(QwtPlotItem.RenderAntialiased)
-            self.color = color = color if isinstance(color, QColor) else QColor(color)
-            self.line.setPen(QPen(color, linewidth, linestyle))
-            self.marker = TiggerPlotMarker()
-            self.marker.setRenderHint(QwtPlotItem.RenderAntialiased)
-            self.marker.setLabelAlignment(align)
-            try:
-                self.marker.setSpacing(spacing)
-            except AttributeError:
-                pass
-            self.setText(label)
-            self.line.setZ(z)
-            self.marker.setZ(zlabel if zlabel is not None else z)
-            # set axes -- using yRight, since that is the "markup" z-axis
-            self.line.setAxes(QwtPlot.xBottom, yaxis)
-            self.marker.setAxes(QwtPlot.xBottom, yaxis)
-            # attach to plot
-            self.line.attach(plot)
-            self.marker.attach(plot)
-
-        def show(self):
-            self.line.show()
-            self.marker.show()
-
-        def hide(self):
-            self.line.hide()
-            self.marker.hide()
-
-        def setText(self, text):
-            label = QwtText(text)
-            label.setColor(self.color)
-            self.marker.setLabel(label)
-
-    def _setupHistogramPlot(self):
-        self._histplot.setCanvasBackground(QColor("lightgray"))
-        self._histplot.setAxisFont(QwtPlot.yLeft, QApplication.font())
-        self._histplot.setAxisFont(QwtPlot.xBottom, QApplication.font())
-        # add histogram curves
-        self._histcurve1 = TiggerPlotCurve()
-        self._histcurve1.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._histcurve2 = TiggerPlotCurve()
-        self._histcurve2.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._histcurve1.setStyle(QwtPlotCurve.Steps)
-        self._histcurve2.setStyle(QwtPlotCurve.Steps)
-        self._histcurve1.setPen(QPen(Qt.NoPen))
-        self._histcurve1.setBrush(QBrush(QColor("slategrey")))
-        pen = QPen(QColor("red"))
-        pen.setWidth(1)
-        self._histcurve2.setPen(pen)
-        self._histcurve1.setZ(0)
-        self._histcurve2.setZ(100)
-        #    self._histcurve1.attach(self._histplot)
-        self._histcurve2.attach(self._histplot)
-        # add maxbin and half-max curves
-        self._line_0 = self.HistogramLineMarker(self._histplot, color="grey50", linestyle=Qt.SolidLine,
-                                                align=Qt.AlignTop | Qt.AlignLeft, z=90)
-        self._line_mean = self.HistogramLineMarker(self._histplot, color="black", linestyle=Qt.SolidLine,
-                                                   align=Qt.AlignBottom | Qt.AlignRight, z=91,
-                                                   label="mean", zlabel=151)
-        self._line_std = self.HistogramLineMarker(self._histplot, color="black", linestyle=Qt.SolidLine,
-                                                  align=Qt.AlignTop | Qt.AlignRight, z=91,
-                                                  label="std", zlabel=151)
-        sym = QwtSymbol()
-        sym.setStyle(QwtSymbol.VLine)
-        sym.setSize(8)
-        self._line_std.line.setSymbol(sym)
-        self._line_maxbin = self.HistogramLineMarker(self._histplot, color="green", linestyle=Qt.DotLine,
-                                                     align=Qt.AlignTop | Qt.AlignRight, z=92,
-                                                     label="max bin", zlabel=150)
-        self._line_halfmax = self.HistogramLineMarker(self._histplot, color="green", linestyle=Qt.DotLine,
-                                                      align=Qt.AlignBottom | Qt.AlignRight, z=90,
-                                                      label="half-max", yaxis=QwtPlot.yLeft)
-        # add current range
-        self._rangebox = TiggerPlotCurve()
-        self._rangebox.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._rangebox.setStyle(QwtPlotCurve.Steps)
-        self._rangebox.setYAxis(QwtPlot.yRight)
-        self._rangebox.setPen(QPen(Qt.NoPen))
-        self._rangebox.setBrush(QBrush(QColor("darkgray")))
-        self._rangebox.setZ(50)
-        self._rangebox.attach(self._histplot)
-        self._rangebox2 = TiggerPlotCurve()
-        self._rangebox2.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._rangebox2.setStyle(QwtPlotCurve.Sticks)
-        self._rangebox2.setYAxis(QwtPlot.yRight)
-        self._rangebox2.setZ(60)
-        #  self._rangebox2.attach(self._histplot)
-        # add intensity transfer function
-        self._itfcurve = TiggerPlotCurve()
-        self._itfcurve.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._itfcurve.setStyle(QwtPlotCurve.Lines)
-        self._itfcurve.setPen(QPen(QColor("blue")))
-        self._itfcurve.setYAxis(QwtPlot.yRight)
-        self._itfcurve.setZ(120)
-        self._itfcurve.attach(self._histplot)
-        self._itfmarker = TiggerPlotMarker()
-        self._itfmarker.setRenderHint(QwtPlotItem.RenderAntialiased)
-        label = QwtText("ITF")
-        label.setColor(QColor("blue"))
-        self._itfmarker.setLabel(label)
-        try:
-            self._itfmarker.setSpacing(0)
-        except AttributeError:
-            pass
-        self._itfmarker.setLabelAlignment(Qt.AlignTop | Qt.AlignRight)
-        self._itfmarker.setZ(120)
-        self._itfmarker.attach(self._histplot)
-        # add colorbar
-        self._cb_item = self.ColorBarPlotItem(1, 1 + self.ColorBarHeight)
-        self._cb_item.setYAxis(QwtPlot.yRight)
-        self._cb_item.attach(self._histplot)
-        # add pickers
-        self._hist_minpicker = self.HistLimitPicker(self._histplot, "low: %(x).4g")
-        self._hist_minpicker.setMousePattern(QwtEventPattern.MouseSelect1, Qt.LeftButton)
-        self._hist_minpicker.selected.connect(self._selectLowLimit)
-        self._hist_maxpicker = self.HistLimitPicker(self._histplot, "high: %(x).4g")
-        self._hist_maxpicker.setMousePattern(QwtEventPattern.MouseSelect1, Qt.RightButton)
-        self._hist_maxpicker.selected.connect(self._selectHighLimit)
-        self._hist_maxpicker1 = self.HistLimitPicker(self._histplot, "high: %(x).4g")
-        self._hist_maxpicker1.setMousePattern(QwtEventPattern.MouseSelect1, Qt.LeftButton, Qt.ControlModifier)
-        self._hist_maxpicker1.selected.connect(self._selectHighLimit)
-        self._hist_zoompicker = self.HistLimitPicker(self._histplot, label="zoom",
-                                                     tracker_mode=QwtPicker.AlwaysOn, track=self._trackHistCoordinates,
-                                                     color="black",
-                                                     mode=QwtPickerClickRectMachine(),
-                                                     rubber_band=QwtPicker.RectRubberBand)
-        self._hist_zoompicker.setMousePattern(QwtEventPattern.MouseSelect1, Qt.LeftButton, Qt.ShiftModifier)
-        # self._hist_zoompicker.selected[QRectF].connect(self._zoomHistogramIntoRect)
-        self._hist_zoompicker.selected.connect(self._zoomHistogramIntoRect)
-
-    def _trackHistCoordinates(self, x, y):
-        self._wlab_histpos.setText((DataValueFormat + " %d") % (x, y) if x is not None else self._wlab_histpos_text)
-        return QwtText()
-
-    def _updateITF(self):
-        """Updates current ITF array."""
-        # do nothing if no histogram -- means we're not visible
-        if self._hist is not None:
-            xdata = self._itf_bins
-            ydata = self.image.intensityMap().remap(xdata)
-            self._rangebox.setData(self._rc.displayRange(), [1, 1])
-            self._rangebox2.setData(self._rc.displayRange(), [1, 1])
-            self._itfcurve.setData(xdata, ydata)
-            self._itfmarker.setValue(xdata[0], 1)
-
-    def _updateHistogram(self, hmin=None, hmax=None):
-        """Recomputes histogram. If no arguments, computes full histogram for
-        data subset. If hmin/hmax is specified, computes zoomed-in histogram."""
-        busy = BusyIndicator()
-        self._prev_range = self._display_range
-        dmin, dmax = self._subset_range
-        hmin0, hmax0 = dmin, dmax
-        if hmin0 >= hmax0:
-            hmax0 = hmin0 + 1
-        subset, mask = self.image.optimalRavel(self._subset)
-        # compute full-subset hi-res histogram, if we don't have one (for percentile stats)
-        if self._hist_hires is None:
-            dprint(1, "computing histogram for full subset range", hmin0, hmax0)
-            self._hist_hires = measurements.histogram(subset, hmin0, hmax0, self.NumHistBinsHi, labels=mask,
-                                                      index=None if mask is None else False)
-            self._hist_bins_hires = hmin0 + (hmax0 - hmin0) * (numpy.arange(self.NumHistBinsHi) + 0.5) / float(
-                self.NumHistBinsHi)
-            self._hist_binsize_hires = (hmax0 - hmin0) / self.NumHistBins
-        # if hist limits not specified, then compute lo-res histogram based on the hi-res one
-        if hmin is None:
-            hmin, hmax = hmin0, hmax0
-            # downsample to low-res histogram
-            self._hist = self._hist_hires.reshape((self.NumHistBins, int(self.NumHistBinsHi / self.NumHistBins))).sum(1)
-        else:
-            # zoomed-in low-res histogram
-            # bracket limits at subset range
-            hmin, hmax = max(hmin, dmin), min(hmax, dmax)
-            if hmin >= hmax:
-                hmax = hmin + 1
-            dprint(1, "computing histogram for", self._subset.shape, self._subset.dtype, hmin, hmax)
-            self._hist = measurements.histogram(subset, hmin, hmax, self.NumHistBins, labels=mask,
-                                                index=None if mask is None else False)
-        dprint(1, "histogram computed")
-        # compute bins
-        self._itf_bins = hmin + (hmax - hmin) * (numpy.arange(self.NumItfBins)) / (float(self.NumItfBins) - 1)
-        self._hist_bins = hmin + (hmax - hmin) * (numpy.arange(self.NumHistBins) + 0.5) / float(self.NumHistBins)
-        # histogram range and position of peak
-        self._hist_range = hmin, hmax
-        self._hist_min, self._hist_max, self._hist_imin, self._hist_imax = measurements.extrema(self._hist)
-        self._hist_peak = self._hist_bins[self._hist_imax]
-        # set controls accordingly
-        if dmin >= dmax:
-            dmax = dmin + 1
-        zoom = math.log10((dmax - dmin) / (hmax - hmin))
-        self._whistzoom.setValue(zoom)
-        self._whistunzoom.setEnabled(zoom > 0)
-        self._whistzoomout.setEnabled(zoom > 0)
-        # reset scales
-        self._histplot.setAxisScale(QwtPlot.xBottom, hmin, hmax)
-        self._histplot.setAxisScale(QwtPlot.yRight, 0, 1 + self.ColorBarHeight)
-        # update curves
-        # call _setHistLogScale() (with current setting) to update axis scales and set data
-        self._setHistLogScale(self._ylogscale, replot=False)
-        # set plot lines
-        self._line_0.line.setData([0, 0], [0, 1])
-        self._line_0.marker.setValue(0, 0)
-        self._line_maxbin.line.setData([self._hist_peak, self._hist_peak], [0, 1])
-        self._line_maxbin.marker.setValue(self._hist_peak, 0)
-        self._line_maxbin.setText(("max bin:" + DataValueFormat) % self._hist_peak)
-        # set half-max line
-        self._line_halfmax.line.setData(self._hist_range, [self._hist_max / 2, self._hist_max / 2])
-        self._line_halfmax.marker.setValue(hmin, self._hist_max / 2)
-        # update ITF
-        self._updateITF()
-        busy.reset_cursor()
-
-    def _updateStats(self, subset, minmax):
-        """Recomputes subset statistics."""
-        if subset.size <= (2048 * 2048):
-            self._showMeanStd(busy=False)
-        else:
-            self._wlab_stats.setText(
-                ("min: %s  max: %s  np: %d" % (DataValueFormat, DataValueFormat, self._subset.size)) % minmax)
-            self._wmore_stats.show()
-
-    def _updateDataSubset(self, subset, minmax, desc, subset_type):
-        """Called when the displayed data subset is changed. Updates the histogram."""
-        self._subset = subset
-        self._subset_range = minmax
-        self._wlab_subset.setText("Subset: %s" % desc)
-        self._hist = self._hist_hires = None
-        self._wreset_full.setVisible(subset_type is not RenderControl.SUBSET_FULL)
-        self._wreset_slice and self._wreset_slice.setVisible(subset_type is not RenderControl.SUBSET_SLICE)
-        # hide the mean/std markers, they will only be shown when _showMeanStd() is called
-        self._line_mean.hide()
-        self._line_std.hide()
-        # if we're visibile, recompute histograms and stats
-        if self.isVisible():
-            # if subset is sufficiently small, compute extended stats on-the-fly. Else show the "more" button to compute them later
-            self._updateHistogram()
-            self._updateStats(subset, minmax)
-            self._histplot.replot()
-
-    def _showMeanStd(self, busy=True):
-        if busy:
-            busy = BusyIndicator()
-        dmin, dmax = self._subset_range
-        subset, mask = self.image.optimalRavel(self._subset)
-        dprint(5, "computing mean")
-        mean = measurements.mean(subset, labels=mask, index=None if mask is None else False)
-        dprint(5, "computing std")
-        std = measurements.standard_deviation(subset, labels=mask, index=None if mask is None else False)
-        dprint(5, "done")
-        text = "  ".join([("%s: " + DataValueFormat) % (name, value) for name, value in
-                          (("min", dmin), ("max", dmax), ("mean", mean), ("\n std", std))] + ["np: %d" % self._subset.size])
-        self._wlab_stats.setText(text)
-        self._wmore_stats.hide()
-        # update markers
-        ypos = 0.3
-        self._line_mean.line.setData([mean, mean], [0, 1])
-        self._line_mean.marker.setValue(mean, ypos)
-        self._line_mean.setText(("\u03BC=" + DataValueFormat) % mean)
-        self._line_mean.show()
-        self._line_std.line.setData([mean - std, mean + std], [ypos, ypos])
-        self._line_std.marker.setValue(mean, ypos)
-        self._line_std.setText(("\u03C3=" + DataValueFormat) % std)
-        self._line_std.show()
-        self._histplot.replot()
-        if not isinstance(busy, bool):
-            busy.reset_cursor()
-
-    def _setIntensityLogCyclesLabel(self, value):
-        self._wlogcycles_label.setText("Log cycles: %4.1f" % value)
-
-    def _previewIntensityLogCycles(self, value):
-        self._setIntensityLogCycles(value, notify_image=False, write_config=False)
-        self._wlogcycles_timer.start(500)
-
-    def _setIntensityLogCycles(self, value=None, notify_image=True, write_config=True):
-        if value is None:
-            value = self._wlogcycles.value()
-        # stop timer if being called to finalize the change in value
-        if notify_image:
-            self._wlogcycles_timer.stop()
-        if not self._updating_imap:
-            self._setIntensityLogCyclesLabel(value)
-            self._rc.setIntensityMapLogCycles(value, notify_image=notify_image, write_config=write_config)
-            self._updateITF()
-            self._histplot.replot()
-
-    def _updateDisplayRange(self, dmin, dmax):
-        self._rangebox.setData([dmin, dmax], [.9, .9])
-        self._wrange[0].setText(DataValueFormat % dmin)
-        self._wrange[1].setText(DataValueFormat % dmax)
-        self._wrangeleft0.setEnabled(dmin != 0)
-        self._display_range = dmin, dmax
-        # if auto-zoom is on, zoom the histogram
-        # try to be a little clever about this. Zoom only if (a) both limits have changed (so that adjusting one end of the range
-        # does not cause endless rezooms), or (b) display range is < 1/10 of the histogram range
-        if self._wautozoom.isChecked() and self._hist is not None:
-            if (dmax - dmin) / (self._hist_range[1] - self._hist_range[0]) < .1 or (
-                    dmin != self._prev_range[0] and dmax != self._prev_range[1]):
-                margin = (dmax - dmin) / 8
-                self._updateHistogram(dmin - margin, dmax + margin)
-        self._updateITF()
-        self._histplot.replot()
-
-    def _updateIntensityMap(self, imap, index):
-        self._updating_imap = True
-        try:
-            self._cb_item.setIntensityMap(imap)
-            self._updateITF()
-            self._histplot.replot()
-            self._wimap.setCurrentIndex(index)
-            if isinstance(imap, Colormaps.LogIntensityMap):
-                self._wlogcycles.setValue(imap.log_cycles)
-                self._setIntensityLogCyclesLabel(imap.log_cycles)
-                self._wlogcycles.show()
-                self._wlogcycles_label.show()
-            else:
-                self._wlogcycles.hide()
-                self._wlogcycles_label.hide()
-        finally:
-            self._updating_imap = False
-
-    def _updateColorMap(self, cmap):
-        self._cb_item.setColorMap(cmap)
-        self._histplot.replot()
-        try:
-            index = self._rc.getColormapList().index(cmap)
-        except:
-            return
-        self._setCurrentColormapNumber(index, cmap)
-
-    def _previewColormapParameters(self, index, cmap):
-        """Called to preview a new colormap parameter value"""
-        self._histplot.replot()
-        self._wcolmaps.setItemIcon(index, QIcon(cmap.makeQPixmap(128, 16)))
-
-    def _setCurrentColormapNumber(self, index, cmap):
-        self._wcolmaps.setCurrentIndex(index)
-        # show controls for colormap
-        self._wcolmap_control_stack.setCurrentWidget(self._colmap_controls[index])
-
-    def _changeDisplayRange(self):
-        """Gets display range from widgets and updates the image with it."""
-        try:
-            newrange = [float(str(w.text())) for w in self._wrange]
-        except ValueError:
-            return
-        self._rc.setDisplayRange(*newrange)
-
-    def _setHistDisplayRange(self):
-        self._rc.setDisplayRange(*self._hist_range)
-
-    def _updateImageSlice(self, _slice):
-        for i, (iextra, name, labels) in enumerate(self._rc.slicedAxes()):
-            self._wslicers[i].setCurrentIndex(_slice[iextra])
-
-    def _changeDisplayRangeToPercent(self, percent):
-        busy = BusyIndicator()
-        if self._hist is None:
-            self._updateHistogram()
-            self._updateStats(self._subset, self._subset_range)
-        # delta: we need the [delta,100-delta] interval of the total distribution
-        delta = self._subset.size * ((100. - percent) / 200.)
-        # get F(x): cumulative sum
-        cumsum = numpy.zeros(len(self._hist_hires) + 1, dtype=int)
-        cumsum[1:] = numpy.cumsum(self._hist_hires)
-        bins = numpy.zeros(len(self._hist_hires) + 1, dtype=float)
-        bins[0] = self._subset_range[0]
-        bins[1:] = self._hist_bins_hires + self._hist_binsize_hires / 2
-        # use interpolation to find value interval corresponding to [delta,100-delta] of the distribution
-        dprint(2, self._subset.size, delta, self._subset.size - delta)
-        dprint(2, cumsum, self._hist_bins_hires)
-        # if first bin is already > delta, then set colour range to first bin
-        x0, x1 = numpy.interp([delta, self._subset.size - delta], cumsum, bins)
-        # and change the display range (this will also cause a histplot.replot() via _updateDisplayRange above)
-        self._rc.setDisplayRange(x0, x1)
-        busy.reset_cursor()
-
-    def _setZeroLeftLimit(self):
-        self._rc.setDisplayRange(0., self._rc.displayRange()[1])
-
-    def _selectLowLimit(self, pos):
-        self._rc.setDisplayRange(pos.x(), self._rc.displayRange()[1])
-
-    def _selectHighLimit(self, pos):
-        self._rc.setDisplayRange(self._rc.displayRange()[0], pos.x())
-
-    def _unzoomHistogram(self):
-        self._updateHistogram()
-        self._histplot.replot()
-
-    def _zoomHistogramByFactor(self, factor, curry=None):
-        """
-        Changes histogram limits by specified factor.
-        curry=None is due to an error raised from the signal to zoom
-        and is unused.
-        """
-        # get max distance of plot limit from peak
-        dprint(1, "zooming histogram by", factor)
-        halfdist = (self._hist_range[1] - self._hist_range[0]) / (factor * 2)
-        self._updateHistogram(self._hist_peak - halfdist, self._hist_peak + halfdist)
-        self._histplot.replot()
-
-    def _zoomHistogramIntoRect(self, rect):
-        hmin, hmax = rect.bottomLeft().x(), rect.bottomRight().x()
-        if hmax > hmin:
-            self._updateHistogram(rect.bottomLeft().x(), rect.bottomRight().x())
-            self._histplot.replot()
-
-    def _zoomHistogramPreview(self, value):
-        dprint(2, "wheel moved to", value)
-        self._zoomHistogramFinalize(value, preview=True)
-        self._whistzoom_timer.start()
-
-    def _zoomHistogramFinalize(self, value=None, preview=False):
-        if self._zooming_histogram:
-            return
-        self._zooming_histogram = True
-        try:
-            if value is not None:
-                dmin, dmax = self._subset_range
-                dist = max(dmax - self._hist_peak, self._hist_peak - dmin) / 10 ** value
-                self._preview_hist_range = max(self._hist_peak - dist, dmin), min(self._hist_peak + dist, dmax)
-            if preview:
-                self._histplot.setAxisScale(QwtPlot.xBottom, *self._preview_hist_range)
-            else:
-                dprint(2, "wheel finalized at", value)
-                self._whistzoom_timer.stop()
-                self._updateHistogram(*self._preview_hist_range)
-            self._histplot.replot()
-        finally:
-            self._zooming_histogram = False
-
-    def _setHistLogScale(self, logscale, replot=True):
-        self._ylogscale = logscale
-        if logscale:
-            self._histplot.setAxisScaleEngine(QwtPlot.yLeft, QwtLogScaleEngine())
-            ymax = max(1, self._hist_max)
-            self._histplot.setAxisScale(QwtPlot.yLeft, 1, 10 ** (math.log10(ymax) * (1 + self.ColorBarHeight)))
-            y = self._hist.copy()
-            y[y == 0] = 1
-            self._histcurve1.setData(self._hist_bins, y)
-            self._histcurve2.setData(self._hist_bins, y)
-        else:
-            self._histplot.setAxisScaleEngine(QwtPlot.yLeft, QwtLinearScaleEngine())
-            self._histplot.setAxisScale(QwtPlot.yLeft, 0, self._hist_max * (1 + self.ColorBarHeight))
-            self._histcurve1.setData(self._hist_bins, self._hist)
-            self._histcurve2.setData(self._hist_bins, self._hist)
-        if replot:
-            self._histplot.replot()
+
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute f and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+
+import numpy
+from PyQt5.Qt import QWidget, QHBoxLayout, QComboBox, QLabel, QLineEdit, QDialog, QToolButton, QVBoxLayout, \
+    Qt, QSize, QSizePolicy, QApplication, QColor, QBrush, QTimer, QFrame, QCheckBox, QStackedWidget, QIcon, QMenu, \
+    QGridLayout, QPen, QRect
+from PyQt5.QtGui import QFont
+from PyQt5.QtWidgets import QDockWidget
+from PyQt5.Qwt import QwtPlot, QwtText, QwtPlotItem, QwtPlotCurve, QwtSymbol, QwtLinearScaleEngine, QwtLogScaleEngine, \
+    QwtPlotPicker, QwtPicker, QwtEventPattern, QwtWheel, QwtSlider,  QwtPickerMachine, QwtPickerClickPointMachine, QwtPickerClickRectMachine
+
+from scipy.ndimage import measurements
+
+from TigGUI.kitties.utils import PersistentCurrier
+from TigGUI.kitties.widgets import BusyIndicator
+from .RenderControl import RenderControl, dprint
+from TigGUI.Images import Colormaps
+from TigGUI.Widgets import FloatValidator, TiggerPlotCurve, TiggerPlotMarker, TDockWidget
+from TigGUI.init import pixmaps
+
+DataValueFormat = "%.4g"
+
+
+class Separator(QWidget):
+    def __init__(self, parent, label, extra_widgets=[], style=QFrame.HLine + QFrame.Raised, offset=16):
+        QWidget.__init__(self, parent)
+        lo = QHBoxLayout(self)
+        lo.setContentsMargins(0, 0, 0, 0)
+        lo.setSpacing(4)
+        if offset:
+            frame = QFrame(self)
+            frame.setFrameStyle(style)
+            frame.setMinimumWidth(offset)
+            lo.addWidget(frame, 0)
+        lo.addWidget(QLabel(label, self), 0)
+        frame = QFrame(self)
+        frame.setFrameStyle(style)
+        lo.addWidget(frame, 1)
+        for w in extra_widgets:
+            lo.addWidget(w, 0)
+
+
+class ImageControlDialog(QDialog):
+    def __init__(self, parent, rc, imgman):
+        """An ImageControlDialog is initialized with a parent widget, a RenderControl object,
+        and an ImageManager object"""
+        QDialog.__init__(self, parent)
+        image = rc.image
+        self.setWindowTitle("%s: Colour Controls" % image.name)
+        self.setWindowIcon(pixmaps.colours.icon())
+        self.setModal(False)
+        self.image = image
+        self._rc = rc
+        self._imgman = imgman
+        self._currier = PersistentCurrier()
+
+        # init internal state
+        self._prev_range = self._display_range = None, None
+        self._hist = None
+        self._geometry = None
+
+        # create layouts
+        lo0 = QVBoxLayout(self)
+        #    lo0.setContentsMargins(0,0,0,0)
+
+        # histogram plot
+        whide = self.makeButton("Hide", self.hide, width=128)
+        whide.setShortcut(Qt.Key_F9)
+        lo0.addWidget(Separator(self, "Histogram and ITF", extra_widgets=[whide]))
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        self._histplot = QwtPlot(self)
+        self._histplot.setAutoDelete(False)
+        lo1.addWidget(self._histplot, 1)
+        lo2 = QHBoxLayout()
+        lo2.setContentsMargins(0, 0, 0, 0)
+        lo2.setSpacing(2)
+        lo0.addLayout(lo2)
+        lo0.addLayout(lo1)
+        self._wautozoom = QCheckBox("autozoom", self)
+        self._wautozoom.setChecked(True)
+        self._wautozoom.setToolTip("""<P>If checked, then the histrogram plot will zoom in automatically when
+      you narrow the current intensity range.</P>""")
+        self._wlogy = QCheckBox("log Y", self)
+        self._wlogy.setChecked(True)
+        self._ylogscale = True
+        self._wlogy.setToolTip(
+            """<P>If checked, a log-scale Y axis is used for the histogram plot instead of a linear one.""")
+        self._wlogy.toggled[bool].connect(self._setHistLogScale)
+        self._whistunzoom = self.makeButton("", self._unzoomHistogram, icon=pixmaps.full_range.icon())
+        self._whistzoomout = self.makeButton("-", self._currier.curry(self._zoomHistogramByFactor, math.sqrt(.1)))
+        self._whistzoomin = self.makeButton("+", self._currier.curry(self._zoomHistogramByFactor, math.sqrt(10)))
+        self._whistzoomin.setToolTip("""<P>Click to zoom into the histogram plot by one step. This does not
+      change the current intensity range.</P>""")
+        self._whistzoomout.setToolTip("""<P>Click to zoom out of the histogram plot by one step. This does not
+      change the current intensity range.</P>""")
+        self._whistunzoom.setToolTip("""<P>Click to reset the histogram plot back to its full extent.
+      This does not change the current intensity range.</P>""")
+        self._whistzoom = QwtWheel(self)
+        self._whistzoom.setMass(0.5)
+        self._whistzoom.setOrientation(Qt.Horizontal)
+        self._whistzoom.setMaximumWidth(80)
+        self._whistzoom.setRange(0, 10)
+        self._whistzoom.setSingleStep(0.1)
+        self._whistzoom.setPageStepCount(1)
+        self._whistzoom.setTickCount(30)
+        self._whistzoom.setTracking(False)
+        self._whistzoom.valueChanged['double'].connect(self._zoomHistogramFinalize)
+        self._whistzoom.wheelMoved['double'].connect(self._zoomHistogramPreview)
+        self._whistzoom.setToolTip("""<P>Use this wheel control to zoom in/out of the histogram plot.
+      This does not change the current intensity range.
+      Note that the zoom wheel should also respond to your mouse wheel, if you have one.</P>""")
+        # This works around a stupid bug in QwtSliders -- when using the mousewheel, only sliderMoved() signals are emitted,
+        # with no final  valueChanged(). If we want to do a fast preview of something on sliderMoved(), and a "slow" final
+        # step on valueChanged(), we're in trouble. So we start a timer on sliderMoved(), and if the timer expires without
+        # anything else happening, do a valueChanged().
+        # Here we use a timer to call zoomHistogramFinalize() w/o an argument.
+        self._whistzoom_timer = QTimer(self)
+        self._whistzoom_timer.setSingleShot(True)
+        self._whistzoom_timer.setInterval(500)
+        self._whistzoom_timer.timeout.connect(self._zoomHistogramFinalize)
+        # set same size for all buttons and controls
+        width = 24
+        for w in self._whistunzoom, self._whistzoomin, self._whistzoomout:
+            w.setMinimumSize(width, width)
+            w.setMaximumSize(width, width)
+        self._whistzoom.setMinimumSize(80, width)
+        self._wlab_histpos_text = "(hover for help)"
+        self._wlab_histpos = QLabel(self._wlab_histpos_text, self)
+        help_font = QFont()
+        help_font.setPointSize(8)
+        self._wlab_histpos.setFont(help_font)
+        self._wlab_histpos.setToolTip("""
+      <P>The plot shows a histogram of either the full image or its selected subset
+      (as per the "Data subset" section below).</P>
+      <P>The current intensity range is indicated by the grey box
+      in the plot.</P>
+      <P>Use the left mouse button to change the low intensity limit, and the right
+      button (on Macs, use Ctrl-click) to change the high limit.</P>
+      <P>Use Shift with the left mouse button to zoom into an area of the histogram,
+      or else use the "zoom wheel" control or the plus/minus toolbuttons above the histogram to zoom in or out.
+      To zoom back out to the full extent of the histogram, click on the rightmost button above the histogram.</P>
+      """)
+        lo2.addWidget(self._wlab_histpos, 1)
+        lo2.addWidget(self._wautozoom)
+        lo2.addWidget(self._wlogy, 0)
+        lo2.addWidget(self._whistzoomin, 0)
+        lo2.addWidget(self._whistzoom, 0)
+        lo2.addWidget(self._whistzoomout, 0)
+        lo2.addWidget(self._whistunzoom, 0)
+        self._zooming_histogram = False
+
+        sliced_axes = rc.slicedAxes()
+        dprint(1, "sliced axes are", sliced_axes)
+        self._stokes_axis = None
+
+        # subset indication
+        lo0.addWidget(Separator(self, "Data subset"))
+        # sliced axis selectors
+        self._wslicers = []
+        if sliced_axes:
+            lo1 = QHBoxLayout()
+            lo1.setContentsMargins(0, 0, 0, 0)
+            lo1.setSpacing(2)
+            lo0.addLayout(lo1)
+            lo1.addWidget(QLabel("Current slice:  ", self))
+            for i, (iextra, name, labels) in enumerate(sliced_axes):
+                lo1.addWidget(QLabel("%s:" % name, self))
+                if name == "STOKES":
+                    self._stokes_axis = iextra
+                # add controls
+                wslicer = QComboBox(self)
+                self._wslicers.append(wslicer)
+                wslicer.addItems(labels)
+                wslicer.setToolTip("""<P>Selects current slice along the %s axis.</P>""" % name)
+                wslicer.setCurrentIndex(self._rc.currentSlice()[iextra])
+                wslicer.activated[int].connect(self._currier.curry(self._rc.changeSlice, iextra))
+                lo2 = QVBoxLayout()
+                lo1.addLayout(lo2)
+                lo2.setContentsMargins(0, 0, 0, 0)
+                lo2.setSpacing(0)
+                wminus = QToolButton(self)
+                wminus.setArrowType(Qt.UpArrow)
+                wminus.clicked.connect(self._currier.curry(self._rc.incrementSlice, iextra, 1))
+                if i == 0:
+                    wminus.setShortcut(Qt.SHIFT + Qt.Key_F7)
+                elif i == 1:
+                    wminus.setShortcut(Qt.SHIFT + Qt.Key_F8)
+                wplus = QToolButton(self)
+                wplus.setArrowType(Qt.DownArrow)
+                wplus.clicked.connect(self._currier.curry(self._rc.incrementSlice, iextra, -1))
+                if i == 0:
+                    wplus.setShortcut(Qt.Key_F7)
+                elif i == 1:
+                    wplus.setShortcut(Qt.Key_F8)
+                wminus.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
+                wplus.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
+                sz = QSize(12, 8)
+                wminus.setMinimumSize(sz)
+                wplus.setMinimumSize(sz)
+                wminus.resize(sz)
+                wplus.resize(sz)
+                lo2.addWidget(wminus)
+                lo2.addWidget(wplus)
+                lo1.addWidget(wslicer)
+                lo1.addSpacing(5)
+            lo1.addStretch(1)
+        # subset indicator
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo1.setSpacing(2)
+        lo0.addLayout(lo1)
+        self._wlab_subset = QLabel("Subset: xxx", self)
+        self._wlab_subset.setToolTip("""<P>This indicates the current data subset to which the histogram
+      and the stats given here apply. Use the "Reset to" control on the right to change the
+      current subset and recompute the histogram and stats.</P>""")
+        lo1.addWidget(self._wlab_subset, 1)
+
+        self._wreset_full = self.makeButton("\u2192 full", self._rc.setFullSubset)
+        lo1.addWidget(self._wreset_full)
+        if sliced_axes:
+            #      if self._stokes_axis is not None and len(sliced_axes)>1:
+            #        self._wreset_stokes = self.makeButton(u"\u21920Stokes",self._rc.setFullSubset)
+            self._wreset_slice = self.makeButton("\u2192 slice", self._rc.setSliceSubset)
+            lo1.addWidget(self._wreset_slice)
+        else:
+            self._wreset_slice = None
+
+        # min/max controls
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo0.addLayout(lo1, 0)
+        self._wlab_stats = QLabel(self)
+        self._wlab_stats.setWordWrap(True)
+        self._wlab_stats.setMinimumWidth(384)
+        lo1.addWidget(self._wlab_stats, 0)
+        self._wmore_stats = self.makeButton("more...", self._showMeanStd)
+        self._wlab_stats.setMinimumHeight(self._wmore_stats.height())
+        lo1.addWidget(self._wmore_stats, 0)
+        lo1.addStretch(1)
+
+        # intensity controls
+        lo0.addWidget(Separator(self, "Intensity mapping"))
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo1.setSpacing(2)
+        lo0.addLayout(lo1, 0)
+        self._range_validator = FloatValidator(self)
+        self._wrange = QLineEdit(self), QLineEdit(self)
+        self._wrange[0].setToolTip("""<P>This is the low end of the intensity range.</P>""")
+        self._wrange[1].setToolTip("""<P>This is the high end of the intensity range.</P>""")
+        for w in self._wrange:
+            w.setValidator(self._range_validator)
+            w.editingFinished.connect(self._changeDisplayRange)
+        lo1.addWidget(QLabel("low:", self), 0)
+        lo1.addWidget(self._wrange[0], 1)
+        self._wrangeleft0 = self.makeButton("\u21920", self._setZeroLeftLimit, width=32)
+        self._wrangeleft0.setToolTip("""<P>Click this to set the low end of the intensity range to 0.</P>""")
+        lo1.addWidget(self._wrangeleft0, 0)
+        lo1.addSpacing(8)
+        lo1.addWidget(QLabel("high:", self), 0)
+        lo1.addWidget(self._wrange[1], 1)
+        lo1.addSpacing(8)
+        self._wrange_full = self.makeButton(None, self._setHistDisplayRange, icon=pixmaps.intensity_graph.icon())
+        lo1.addWidget(self._wrange_full)
+        self._wrange_full.setToolTip(
+            """<P>Click this to reset the intensity range to the current extent of the histogram plot.</P>""")
+        # add menu for display range
+        range_menu = QMenu(self)
+        wrange_menu = QToolButton(self)
+        wrange_menu.setText("Reset to")
+        wrange_menu.setToolTip("""<P>Use this to reset the intensity range to various pre-defined settings.</P>""")
+        lo1.addWidget(wrange_menu)
+        self._qa_range_full = range_menu.addAction(pixmaps.full_range.icon(), "Full subset",
+                                                   self._rc.resetSubsetDisplayRange)
+        self._qa_range_hist = range_menu.addAction(pixmaps.intensity_graph.icon(), "Current histogram limits",
+                                                   self._setHistDisplayRange)
+        for percent in (99.99, 99.9, 99.5, 99, 98, 95):
+            range_menu.addAction("%g%%" % percent, self._currier.curry(self._changeDisplayRangeToPercent, percent))
+        wrange_menu.setMenu(range_menu)
+        wrange_menu.setPopupMode(QToolButton.InstantPopup)
+
+        lo1 = QGridLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo0.addLayout(lo1, 0)
+        self._wimap = QComboBox(self)
+        lo1.addWidget(QLabel("Intensity policy:", self), 0, 0)
+        lo1.addWidget(self._wimap, 1, 0)
+        self._wimap.addItems(rc.getIntensityMapNames())
+        self._wimap.currentIndexChanged[int].connect(self._rc.setIntensityMapNumber)
+        self._wimap.setToolTip("""<P>Use this to change the type of the intensity transfer function (ITF).</P>""")
+
+        # log cycles control
+        lo1.setColumnStretch(1, 1)
+        self._wlogcycles_label = QLabel("Log cycles: ", self)
+        lo1.addWidget(self._wlogcycles_label, 0, 1)
+        #    self._wlogcycles = QwtWheel(self)
+        #    self._wlogcycles.setTotalAngle(360)
+        self._wlogcycles = QwtSlider(self)
+        self._wlogcycles.setToolTip(
+            """<P>Use this to change the log-base for the logarithmic intensity transfer function (ITF).</P>""")
+        # This works around a stupid bug in QwtSliders -- see comments on histogram zoom wheel above
+        self._wlogcycles_timer = QTimer(self)
+        self._wlogcycles_timer.setSingleShot(True)
+        self._wlogcycles_timer.setInterval(500)
+        self._wlogcycles_timer.timeout.connect(self._setIntensityLogCycles)
+        lo1.addWidget(self._wlogcycles, 1, 1)
+        # self._wlogcycles.setRange(1., 10)  # need to find 6.1.5 change from v5
+        self._wlogcycles.setScale(1., 10)
+        # self._wlogcycles.setStep(0.1)  # need to find 6.1.5 change from v5
+        # self._wlogcycles.setScaleStepSize(0.1)
+        self._wlogcycles.setTracking(False)
+        self._wlogcycles.valueChanged.connect(self._setIntensityLogCycles)
+        self._wlogcycles.sliderMoved.connect(self._previewIntensityLogCycles)
+        self._updating_imap = False
+
+        # lock intensity map
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo0.addLayout(lo1, 0)
+        #    lo1.addWidget(QLabel("Lock range accross",self))
+        wlock = QCheckBox("Lock display range", self)
+        wlock.setMinimumWidth(192)
+        wlock.setToolTip("""<P>If checked, then the intensity range will be locked. The ranges of all locked images
+      change simultaneously.</P>""")
+        lo1.addWidget(wlock)
+        wlockall = QToolButton(self)
+        wlockall.setIcon(pixmaps.locked.icon())
+        wlockall.setText("Lock all to this")
+        wlockall.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
+        wlockall.setAutoRaise(True)
+        wlockall.setToolTip("""<P>Click this to lock together the intensity ranges of all images.</P>""")
+        lo1.addWidget(wlockall)
+        wunlockall = QToolButton(self)
+        wunlockall.setIcon(pixmaps.unlocked.icon())
+        wunlockall.setText("Unlock all")
+        wunlockall.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
+        wunlockall.setAutoRaise(True)
+        wunlockall.setToolTip("""<P>Click this to unlock the intensity ranges of all images.</P>""")
+        lo1.addWidget(wunlockall)
+        wlock.setChecked(self._rc.isDisplayRangeLocked())
+        wlock.clicked[bool].connect(self._rc.lockDisplayRange)
+        wlockall.clicked.connect(self._currier.curry(self._imgman.lockAllDisplayRanges, self._rc))
+        wunlockall.clicked.connect(self._imgman.unlockAllDisplayRanges)
+        self._rc.displayRangeLocked.connect(wlock.setChecked)
+
+        #    self._wlock_imap_axis = [ QCheckBox(name,self) for iaxis,name,labels in sliced_axes ]
+        #    for iw,w in enumerate(self._wlock_imap_axis):
+        #      QObject.connect(w,pyqtSignal("toggled(bool)"),self._currier.curry(self._rc.lockDisplayRangeForAxis,iw))
+        #      lo1.addWidget(w,0)
+        lo1.addStretch(1)
+
+        # lo0.addWidget(Separator(self,"Colourmap"))
+        # color bar
+        self._colorbar = QwtPlot(self)
+        lo0.addWidget(self._colorbar)
+        self._colorbar.setAutoDelete(False)
+        self._colorbar.setMinimumHeight(32)
+        self._colorbar.enableAxis(QwtPlot.yLeft, False)
+        self._colorbar.enableAxis(QwtPlot.xBottom, False)
+        # color plot
+        self._colorplot = QwtPlot(self)
+        lo0.addWidget(self._colorplot)
+        self._colorplot.setAutoDelete(False)
+        self._colorplot.setMinimumHeight(64)
+        self._colorplot.enableAxis(QwtPlot.yLeft, False)
+        self._colorplot.enableAxis(QwtPlot.xBottom, False)
+        # self._colorplot.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Preferred)
+        self._colorbar.hide()
+        self._colorplot.hide()
+        # color controls
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo0.addLayout(lo1, 1)
+        lo1.addWidget(QLabel("Colourmap:", self))
+        # colormap list
+        ### NB: use setIconSize() and icons in QComboBox!!!
+        self._wcolmaps = QComboBox(self)
+        self._wcolmaps.setIconSize(QSize(128, 16))
+        self._wcolmaps.setToolTip("""<P>Use this to select a different colourmap.</P>""")
+        for cmap in self._rc.getColormapList():
+            self._wcolmaps.addItem(QIcon(cmap.makeQPixmap(128, 16)), cmap.name)
+        lo1.addWidget(self._wcolmaps)
+        self._wcolmaps.activated[int].connect(self._rc.setColorMapNumber)
+        # add widgetstack for colormap controls
+        self._wcolmap_control_stack = QStackedWidget(self)
+        self._wcolmap_control_blank = QWidget(self._wcolmap_control_stack)
+        self._wcolmap_control_stack.addWidget(self._wcolmap_control_blank)
+        lo0.addWidget(self._wcolmap_control_stack)
+        self._colmap_controls = []
+        # add controls to stack
+        for index, cmap in enumerate(self._rc.getColormapList()):
+            if isinstance(cmap, Colormaps.ColormapWithControls):
+                controls = cmap.makeControlWidgets(self._wcolmap_control_stack)
+                self._wcolmap_control_stack.addWidget(controls)
+                cmap.colormapChanged.connect(self._currier.curry(self._previewColormapParameters, index, cmap))
+                cmap.colormapPreviewed.connect(self._currier.curry(self._previewColormapParameters, index, cmap))
+                self._colmap_controls.append(controls)
+            else:
+                self._colmap_controls.append(self._wcolmap_control_blank)
+
+        # connect updates from renderControl and image
+        self.image.signalSlice.connect(self._updateImageSlice)
+        self._rc.intensityMapChanged.connect(self._updateIntensityMap)
+        self._rc.colorMapChanged.connect(self._updateColorMap)
+        self._rc.dataSubsetChanged.connect(self._updateDataSubset)
+        self._rc.displayRangeChanged.connect(self._updateDisplayRange)
+
+        # update widgets
+        self._setupHistogramPlot()
+        self._updateDataSubset(*self._rc.currentSubset())
+        self._updateColorMap(image.colorMap())
+        self._updateIntensityMap(rc.currentIntensityMap(), rc.currentIntensityMapNumber())
+        self._updateDisplayRange(*self._rc.displayRange())
+
+    def makeButton(self, label, callback=None, width=None, icon=None):
+        btn = QToolButton(self)
+        #    btn.setAutoRaise(True)
+        label and btn.setText(label)
+        icon and btn.setIcon(icon)
+        #    btn = QPushButton(label,self)
+        #   btn.setFlat(True)
+        if width:
+            btn.setMinimumWidth(width)
+            btn.setMaximumWidth(width)
+        if icon:
+            btn.setIcon(icon)
+        if callback:
+            btn.clicked.connect(callback)
+        return btn
+
+    #  def closeEvent (self,ev):
+    #    ev.ignore()
+    #    self.hide()
+
+    def hide(self):
+        self._geometry = self.geometry()
+        QDialog.hide(self)
+        self.parent().setVisible(False)
+
+    def show(self):
+        dprint(4, "show entrypoint")
+        if self._geometry:
+            dprint(4, "setting geometry")
+            self.setGeometry(self._geometry)
+        if self._hist is None:
+            busy = BusyIndicator()
+            dprint(4, "updating histogram")
+            self._updateHistogram()
+            dprint(4, "updating stats")
+            self._updateStats(self._subset, self._subset_range)
+            busy.reset_cursor()
+        dprint(4, "calling QDialog.show")
+        QDialog.show(self)
+
+    # number of bins used to compute intensity transfer function
+    NumItfBins = 1000
+    # number of bins used for displaying histograms
+    NumHistBins = 500
+    # number of bins used for high-res histograms
+    NumHistBinsHi = 10000
+    # colorbar height, as fraction of plot area
+    ColorBarHeight = 0.1
+
+    class HistLimitPicker(QwtPlotPicker):
+        """Auguments QwtPlotPicker with functions for selecting hist min/max values"""
+
+        def __init__(self, plot, label, color="green", mode=QwtPickerClickPointMachine(),
+                     rubber_band=QwtPicker.VLineRubberBand, tracker_mode=QwtPicker.ActiveOnly, track=None):
+            QwtPlotPicker.__init__(self, QwtPlot.xBottom, QwtPlot.yRight, rubber_band, tracker_mode,
+                                   plot.canvas())
+
+            self.setStateMachine(mode)
+            self.plot = plot
+            self.label = label
+            self.track = track
+            self.color = QColor(color)
+            self.setRubberBandPen(QPen(self.color))
+            self.setRubberBand(rubber_band)
+
+        def trackerText(self, pos):
+            x, y = self.plot.invTransform(QwtPlot.xBottom, pos.x()), self.plot.invTransform(QwtPlot.yLeft, pos.y())
+            if self.track:
+                text = self.track(x, y)
+                if text is not None:
+                    return text
+            if self.label:
+                text = QwtText(self.label % dict(x=x, y=y))
+                text.setColor(self.color)
+                return text
+            return QwtText()
+
+        def widgetLeaveEvent(self, ev):
+            if self.track:
+                self.track(None, None)
+            QwtPlotPicker.widgetLeaveEvent(self, ev)
+
+    class ColorBarPlotItem(QwtPlotItem):
+        def __init__(self, y0, y1, *args):
+            QwtPlotItem.__init__(self, *args)
+            self.RenderAntialiased
+            self.imap = None
+            self.cmap = None
+            self._y0 = y1
+            self._dy = y1 - y0
+
+        def setIntensityMap(self, imap):
+            self.imap = imap
+
+        def setColorMap(self, cmap):
+            self.cmap = cmap
+
+        def draw(self, painter, xmap, ymap, rect):
+            """Implements QwtPlotItem.draw(), to render the colorbar on the given painter."""
+            xp1, xp2, xdp, xs1, xs2, xds = xinfo = xmap.p1(), xmap.p2(), xmap.pDist(), xmap.s1(), xmap.s2(), xmap.sDist()
+            yp1, yp2, ydp, ys1, ys2, yds = yinfo = ymap.p1(), ymap.p2(), ymap.pDist(), ymap.s1(), ymap.s2(), ymap.sDist()
+            # xp: coordinates of pixels xp1...xp2 in data units
+            xp = xs1 + (xds / xdp) * (0.5 + numpy.arange(int(xdp)))
+            # convert y0 and y1 into pixel coordinates
+            y0 = yp1 - (self._y0 - ys1) * (ydp / yds)
+            dy = self._dy * (ydp / yds)
+            # remap into an Nx1 image
+            qimg = self.cmap.colorize(self.imap.remap(xp.reshape((len(xp), 1))))
+            # plot image
+            painter.drawImage(QRect(xp1, y0, xdp, dy), qimg)
+
+    class HistogramLineMarker:
+        """Helper class implementing a line marker for a histogram plot"""
+
+        def __init__(self, plot, color="black", linestyle=Qt.DotLine, align=Qt.AlignBottom | Qt.AlignRight, z=90,
+                     label="", zlabel=None, linewidth=1, spacing=2,
+                     yaxis=QwtPlot.yRight):
+            self.line = TiggerPlotCurve()
+            self.line.setRenderHint(QwtPlotItem.RenderAntialiased)
+            self.color = color = color if isinstance(color, QColor) else QColor(color)
+            self.line.setPen(QPen(color, linewidth, linestyle))
+            self.marker = TiggerPlotMarker()
+            self.marker.setRenderHint(QwtPlotItem.RenderAntialiased)
+            self.marker.setLabelAlignment(align)
+            try:
+                self.marker.setSpacing(spacing)
+            except AttributeError:
+                pass
+            self.setText(label)
+            self.line.setZ(z)
+            self.marker.setZ(zlabel if zlabel is not None else z)
+            # set axes -- using yRight, since that is the "markup" z-axis
+            self.line.setAxes(QwtPlot.xBottom, yaxis)
+            self.marker.setAxes(QwtPlot.xBottom, yaxis)
+            # attach to plot
+            self.line.attach(plot)
+            self.marker.attach(plot)
+
+        def show(self):
+            self.line.show()
+            self.marker.show()
+
+        def hide(self):
+            self.line.hide()
+            self.marker.hide()
+
+        def setText(self, text):
+            label = QwtText(text)
+            label.setColor(self.color)
+            self.marker.setLabel(label)
+
+    def _setupHistogramPlot(self):
+        self._histplot.setCanvasBackground(QColor("lightgray"))
+        self._histplot.setAxisFont(QwtPlot.yLeft, QApplication.font())
+        self._histplot.setAxisFont(QwtPlot.xBottom, QApplication.font())
+        # add histogram curves
+        self._histcurve1 = TiggerPlotCurve()
+        self._histcurve1.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._histcurve2 = TiggerPlotCurve()
+        self._histcurve2.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._histcurve1.setStyle(QwtPlotCurve.Steps)
+        self._histcurve2.setStyle(QwtPlotCurve.Steps)
+        self._histcurve1.setPen(QPen(Qt.NoPen))
+        self._histcurve1.setBrush(QBrush(QColor("slategrey")))
+        pen = QPen(QColor("red"))
+        pen.setWidth(1)
+        self._histcurve2.setPen(pen)
+        self._histcurve1.setZ(0)
+        self._histcurve2.setZ(100)
+        #    self._histcurve1.attach(self._histplot)
+        self._histcurve2.attach(self._histplot)
+        # add maxbin and half-max curves
+        self._line_0 = self.HistogramLineMarker(self._histplot, color="grey50", linestyle=Qt.SolidLine,
+                                                align=Qt.AlignTop | Qt.AlignLeft, z=90)
+        self._line_mean = self.HistogramLineMarker(self._histplot, color="black", linestyle=Qt.SolidLine,
+                                                   align=Qt.AlignBottom | Qt.AlignRight, z=91,
+                                                   label="mean", zlabel=151)
+        self._line_std = self.HistogramLineMarker(self._histplot, color="black", linestyle=Qt.SolidLine,
+                                                  align=Qt.AlignTop | Qt.AlignRight, z=91,
+                                                  label="std", zlabel=151)
+        sym = QwtSymbol()
+        sym.setStyle(QwtSymbol.VLine)
+        sym.setSize(8)
+        self._line_std.line.setSymbol(sym)
+        self._line_maxbin = self.HistogramLineMarker(self._histplot, color="green", linestyle=Qt.DotLine,
+                                                     align=Qt.AlignTop | Qt.AlignRight, z=92,
+                                                     label="max bin", zlabel=150)
+        self._line_halfmax = self.HistogramLineMarker(self._histplot, color="green", linestyle=Qt.DotLine,
+                                                      align=Qt.AlignBottom | Qt.AlignRight, z=90,
+                                                      label="half-max", yaxis=QwtPlot.yLeft)
+        # add current range
+        self._rangebox = TiggerPlotCurve()
+        self._rangebox.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._rangebox.setStyle(QwtPlotCurve.Steps)
+        self._rangebox.setYAxis(QwtPlot.yRight)
+        self._rangebox.setPen(QPen(Qt.NoPen))
+        self._rangebox.setBrush(QBrush(QColor("darkgray")))
+        self._rangebox.setZ(50)
+        self._rangebox.attach(self._histplot)
+        self._rangebox2 = TiggerPlotCurve()
+        self._rangebox2.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._rangebox2.setStyle(QwtPlotCurve.Sticks)
+        self._rangebox2.setYAxis(QwtPlot.yRight)
+        self._rangebox2.setZ(60)
+        #  self._rangebox2.attach(self._histplot)
+        # add intensity transfer function
+        self._itfcurve = TiggerPlotCurve()
+        self._itfcurve.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._itfcurve.setStyle(QwtPlotCurve.Lines)
+        self._itfcurve.setPen(QPen(QColor("blue")))
+        self._itfcurve.setYAxis(QwtPlot.yRight)
+        self._itfcurve.setZ(120)
+        self._itfcurve.attach(self._histplot)
+        self._itfmarker = TiggerPlotMarker()
+        self._itfmarker.setRenderHint(QwtPlotItem.RenderAntialiased)
+        label = QwtText("ITF")
+        label.setColor(QColor("blue"))
+        self._itfmarker.setLabel(label)
+        try:
+            self._itfmarker.setSpacing(0)
+        except AttributeError:
+            pass
+        self._itfmarker.setLabelAlignment(Qt.AlignTop | Qt.AlignRight)
+        self._itfmarker.setZ(120)
+        self._itfmarker.attach(self._histplot)
+        # add colorbar
+        self._cb_item = self.ColorBarPlotItem(1, 1 + self.ColorBarHeight)
+        self._cb_item.setYAxis(QwtPlot.yRight)
+        self._cb_item.attach(self._histplot)
+        # add pickers
+        self._hist_minpicker = self.HistLimitPicker(self._histplot, "low: %(x).4g")
+        self._hist_minpicker.setMousePattern(QwtEventPattern.MouseSelect1, Qt.LeftButton)
+        self._hist_minpicker.selected.connect(self._selectLowLimit)
+        self._hist_maxpicker = self.HistLimitPicker(self._histplot, "high: %(x).4g")
+        self._hist_maxpicker.setMousePattern(QwtEventPattern.MouseSelect1, Qt.RightButton)
+        self._hist_maxpicker.selected.connect(self._selectHighLimit)
+        self._hist_maxpicker1 = self.HistLimitPicker(self._histplot, "high: %(x).4g")
+        self._hist_maxpicker1.setMousePattern(QwtEventPattern.MouseSelect1, Qt.LeftButton, Qt.ControlModifier)
+        self._hist_maxpicker1.selected.connect(self._selectHighLimit)
+        self._hist_zoompicker = self.HistLimitPicker(self._histplot, label="zoom",
+                                                     tracker_mode=QwtPicker.AlwaysOn, track=self._trackHistCoordinates,
+                                                     color="black",
+                                                     mode=QwtPickerClickRectMachine(),
+                                                     rubber_band=QwtPicker.RectRubberBand)
+        self._hist_zoompicker.setMousePattern(QwtEventPattern.MouseSelect1, Qt.LeftButton, Qt.ShiftModifier)
+        # self._hist_zoompicker.selected[QRectF].connect(self._zoomHistogramIntoRect)
+        self._hist_zoompicker.selected.connect(self._zoomHistogramIntoRect)
+
+    def _trackHistCoordinates(self, x, y):
+        self._wlab_histpos.setText((DataValueFormat + " %d") % (x, y) if x is not None else self._wlab_histpos_text)
+        return QwtText()
+
+    def _updateITF(self):
+        """Updates current ITF array."""
+        # do nothing if no histogram -- means we're not visible
+        if self._hist is not None:
+            xdata = self._itf_bins
+            ydata = self.image.intensityMap().remap(xdata)
+            self._rangebox.setData(self._rc.displayRange(), [1, 1])
+            self._rangebox2.setData(self._rc.displayRange(), [1, 1])
+            self._itfcurve.setData(xdata, ydata)
+            self._itfmarker.setValue(xdata[0], 1)
+
+    def _updateHistogram(self, hmin=None, hmax=None):
+        """Recomputes histogram. If no arguments, computes full histogram for
+        data subset. If hmin/hmax is specified, computes zoomed-in histogram."""
+        busy = BusyIndicator()
+        self._prev_range = self._display_range
+        dmin, dmax = self._subset_range
+        hmin0, hmax0 = dmin, dmax
+        if hmin0 >= hmax0:
+            hmax0 = hmin0 + 1
+        subset, mask = self.image.optimalRavel(self._subset)
+        # compute full-subset hi-res histogram, if we don't have one (for percentile stats)
+        if self._hist_hires is None:
+            dprint(1, "computing histogram for full subset range", hmin0, hmax0)
+            self._hist_hires = measurements.histogram(subset, hmin0, hmax0, self.NumHistBinsHi, labels=mask,
+                                                      index=None if mask is None else False)
+            self._hist_bins_hires = hmin0 + (hmax0 - hmin0) * (numpy.arange(self.NumHistBinsHi) + 0.5) / float(
+                self.NumHistBinsHi)
+            self._hist_binsize_hires = (hmax0 - hmin0) / self.NumHistBins
+        # if hist limits not specified, then compute lo-res histogram based on the hi-res one
+        if hmin is None:
+            hmin, hmax = hmin0, hmax0
+            # downsample to low-res histogram
+            self._hist = self._hist_hires.reshape((self.NumHistBins, int(self.NumHistBinsHi / self.NumHistBins))).sum(1)
+        else:
+            # zoomed-in low-res histogram
+            # bracket limits at subset range
+            hmin, hmax = max(hmin, dmin), min(hmax, dmax)
+            if hmin >= hmax:
+                hmax = hmin + 1
+            dprint(1, "computing histogram for", self._subset.shape, self._subset.dtype, hmin, hmax)
+            self._hist = measurements.histogram(subset, hmin, hmax, self.NumHistBins, labels=mask,
+                                                index=None if mask is None else False)
+        dprint(1, "histogram computed")
+        # compute bins
+        self._itf_bins = hmin + (hmax - hmin) * (numpy.arange(self.NumItfBins)) / (float(self.NumItfBins) - 1)
+        self._hist_bins = hmin + (hmax - hmin) * (numpy.arange(self.NumHistBins) + 0.5) / float(self.NumHistBins)
+        # histogram range and position of peak
+        self._hist_range = hmin, hmax
+        self._hist_min, self._hist_max, self._hist_imin, self._hist_imax = measurements.extrema(self._hist)
+        self._hist_peak = self._hist_bins[self._hist_imax]
+        # set controls accordingly
+        if dmin >= dmax:
+            dmax = dmin + 1
+        zoom = math.log10((dmax - dmin) / (hmax - hmin))
+        self._whistzoom.setValue(zoom)
+        self._whistunzoom.setEnabled(zoom > 0)
+        self._whistzoomout.setEnabled(zoom > 0)
+        # reset scales
+        self._histplot.setAxisScale(QwtPlot.xBottom, hmin, hmax)
+        self._histplot.setAxisScale(QwtPlot.yRight, 0, 1 + self.ColorBarHeight)
+        # update curves
+        # call _setHistLogScale() (with current setting) to update axis scales and set data
+        self._setHistLogScale(self._ylogscale, replot=False)
+        # set plot lines
+        self._line_0.line.setData([0, 0], [0, 1])
+        self._line_0.marker.setValue(0, 0)
+        self._line_maxbin.line.setData([self._hist_peak, self._hist_peak], [0, 1])
+        self._line_maxbin.marker.setValue(self._hist_peak, 0)
+        self._line_maxbin.setText(("max bin:" + DataValueFormat) % self._hist_peak)
+        # set half-max line
+        self._line_halfmax.line.setData(self._hist_range, [self._hist_max / 2, self._hist_max / 2])
+        self._line_halfmax.marker.setValue(hmin, self._hist_max / 2)
+        # update ITF
+        self._updateITF()
+        busy.reset_cursor()
+
+    def _updateStats(self, subset, minmax):
+        """Recomputes subset statistics."""
+        if subset.size <= (2048 * 2048):
+            self._showMeanStd(busy=False)
+        else:
+            self._wlab_stats.setText(
+                ("min: %s  max: %s  np: %d" % (DataValueFormat, DataValueFormat, self._subset.size)) % minmax)
+            self._wmore_stats.show()
+
+    def _updateDataSubset(self, subset, minmax, desc, subset_type):
+        """Called when the displayed data subset is changed. Updates the histogram."""
+        self._subset = subset
+        self._subset_range = minmax
+        self._wlab_subset.setText("Subset: %s" % desc)
+        self._hist = self._hist_hires = None
+        self._wreset_full.setVisible(subset_type is not RenderControl.SUBSET_FULL)
+        self._wreset_slice and self._wreset_slice.setVisible(subset_type is not RenderControl.SUBSET_SLICE)
+        # hide the mean/std markers, they will only be shown when _showMeanStd() is called
+        self._line_mean.hide()
+        self._line_std.hide()
+        # if we're visibile, recompute histograms and stats
+        if self.isVisible():
+            # if subset is sufficiently small, compute extended stats on-the-fly. Else show the "more" button to compute them later
+            self._updateHistogram()
+            self._updateStats(subset, minmax)
+            self._histplot.replot()
+
+    def _showMeanStd(self, busy=True):
+        if busy:
+            busy = BusyIndicator()
+        dmin, dmax = self._subset_range
+        subset, mask = self.image.optimalRavel(self._subset)
+        dprint(5, "computing mean")
+        mean = measurements.mean(subset, labels=mask, index=None if mask is None else False)
+        dprint(5, "computing std")
+        std = measurements.standard_deviation(subset, labels=mask, index=None if mask is None else False)
+        dprint(5, "done")
+        text = "  ".join([("%s: " + DataValueFormat) % (name, value) for name, value in
+                          (("min", dmin), ("max", dmax), ("mean", mean), ("\n std", std))] + ["np: %d" % self._subset.size])
+        self._wlab_stats.setText(text)
+        self._wmore_stats.hide()
+        # update markers
+        ypos = 0.3
+        self._line_mean.line.setData([mean, mean], [0, 1])
+        self._line_mean.marker.setValue(mean, ypos)
+        self._line_mean.setText(("\u03BC=" + DataValueFormat) % mean)
+        self._line_mean.show()
+        self._line_std.line.setData([mean - std, mean + std], [ypos, ypos])
+        self._line_std.marker.setValue(mean, ypos)
+        self._line_std.setText(("\u03C3=" + DataValueFormat) % std)
+        self._line_std.show()
+        self._histplot.replot()
+        if not isinstance(busy, bool):
+            busy.reset_cursor()
+
+    def _setIntensityLogCyclesLabel(self, value):
+        self._wlogcycles_label.setText("Log cycles: %4.1f" % value)
+
+    def _previewIntensityLogCycles(self, value):
+        self._setIntensityLogCycles(value, notify_image=False, write_config=False)
+        self._wlogcycles_timer.start(500)
+
+    def _setIntensityLogCycles(self, value=None, notify_image=True, write_config=True):
+        if value is None:
+            value = self._wlogcycles.value()
+        # stop timer if being called to finalize the change in value
+        if notify_image:
+            self._wlogcycles_timer.stop()
+        if not self._updating_imap:
+            self._setIntensityLogCyclesLabel(value)
+            self._rc.setIntensityMapLogCycles(value, notify_image=notify_image, write_config=write_config)
+            self._updateITF()
+            self._histplot.replot()
+
+    def _updateDisplayRange(self, dmin, dmax):
+        self._rangebox.setData([dmin, dmax], [.9, .9])
+        self._wrange[0].setText(DataValueFormat % dmin)
+        self._wrange[1].setText(DataValueFormat % dmax)
+        self._wrangeleft0.setEnabled(dmin != 0)
+        self._display_range = dmin, dmax
+        # if auto-zoom is on, zoom the histogram
+        # try to be a little clever about this. Zoom only if (a) both limits have changed (so that adjusting one end of the range
+        # does not cause endless rezooms), or (b) display range is < 1/10 of the histogram range
+        if self._wautozoom.isChecked() and self._hist is not None:
+            if (dmax - dmin) / (self._hist_range[1] - self._hist_range[0]) < .1 or (
+                    dmin != self._prev_range[0] and dmax != self._prev_range[1]):
+                margin = (dmax - dmin) / 8
+                self._updateHistogram(dmin - margin, dmax + margin)
+        self._updateITF()
+        self._histplot.replot()
+
+    def _updateIntensityMap(self, imap, index):
+        self._updating_imap = True
+        try:
+            self._cb_item.setIntensityMap(imap)
+            self._updateITF()
+            self._histplot.replot()
+            self._wimap.setCurrentIndex(index)
+            if isinstance(imap, Colormaps.LogIntensityMap):
+                self._wlogcycles.setValue(imap.log_cycles)
+                self._setIntensityLogCyclesLabel(imap.log_cycles)
+                self._wlogcycles.show()
+                self._wlogcycles_label.show()
+            else:
+                self._wlogcycles.hide()
+                self._wlogcycles_label.hide()
+        finally:
+            self._updating_imap = False
+
+    def _updateColorMap(self, cmap):
+        self._cb_item.setColorMap(cmap)
+        self._histplot.replot()
+        try:
+            index = self._rc.getColormapList().index(cmap)
+        except:
+            return
+        self._setCurrentColormapNumber(index, cmap)
+
+    def _previewColormapParameters(self, index, cmap):
+        """Called to preview a new colormap parameter value"""
+        self._histplot.replot()
+        self._wcolmaps.setItemIcon(index, QIcon(cmap.makeQPixmap(128, 16)))
+
+    def _setCurrentColormapNumber(self, index, cmap):
+        self._wcolmaps.setCurrentIndex(index)
+        # show controls for colormap
+        self._wcolmap_control_stack.setCurrentWidget(self._colmap_controls[index])
+
+    def _changeDisplayRange(self):
+        """Gets display range from widgets and updates the image with it."""
+        try:
+            newrange = [float(str(w.text())) for w in self._wrange]
+        except ValueError:
+            return
+        self._rc.setDisplayRange(*newrange)
+
+    def _setHistDisplayRange(self):
+        self._rc.setDisplayRange(*self._hist_range)
+
+    def _updateImageSlice(self, _slice):
+        for i, (iextra, name, labels) in enumerate(self._rc.slicedAxes()):
+            self._wslicers[i].setCurrentIndex(_slice[iextra])
+
+    def _changeDisplayRangeToPercent(self, percent):
+        busy = BusyIndicator()
+        if self._hist is None:
+            self._updateHistogram()
+            self._updateStats(self._subset, self._subset_range)
+        # delta: we need the [delta,100-delta] interval of the total distribution
+        delta = self._subset.size * ((100. - percent) / 200.)
+        # get F(x): cumulative sum
+        cumsum = numpy.zeros(len(self._hist_hires) + 1, dtype=int)
+        cumsum[1:] = numpy.cumsum(self._hist_hires)
+        bins = numpy.zeros(len(self._hist_hires) + 1, dtype=float)
+        bins[0] = self._subset_range[0]
+        bins[1:] = self._hist_bins_hires + self._hist_binsize_hires / 2
+        # use interpolation to find value interval corresponding to [delta,100-delta] of the distribution
+        dprint(2, self._subset.size, delta, self._subset.size - delta)
+        dprint(2, cumsum, self._hist_bins_hires)
+        # if first bin is already > delta, then set colour range to first bin
+        x0, x1 = numpy.interp([delta, self._subset.size - delta], cumsum, bins)
+        # and change the display range (this will also cause a histplot.replot() via _updateDisplayRange above)
+        self._rc.setDisplayRange(x0, x1)
+        busy.reset_cursor()
+
+    def _setZeroLeftLimit(self):
+        self._rc.setDisplayRange(0., self._rc.displayRange()[1])
+
+    def _selectLowLimit(self, pos):
+        self._rc.setDisplayRange(pos.x(), self._rc.displayRange()[1])
+
+    def _selectHighLimit(self, pos):
+        self._rc.setDisplayRange(self._rc.displayRange()[0], pos.x())
+
+    def _unzoomHistogram(self):
+        self._updateHistogram()
+        self._histplot.replot()
+
+    def _zoomHistogramByFactor(self, factor, curry=None):
+        """
+        Changes histogram limits by specified factor.
+        curry=None is due to an error raised from the signal to zoom
+        and is unused.
+        """
+        # get max distance of plot limit from peak
+        dprint(1, "zooming histogram by", factor)
+        halfdist = (self._hist_range[1] - self._hist_range[0]) / (factor * 2)
+        self._updateHistogram(self._hist_peak - halfdist, self._hist_peak + halfdist)
+        self._histplot.replot()
+
+    def _zoomHistogramIntoRect(self, rect):
+        hmin, hmax = rect.bottomLeft().x(), rect.bottomRight().x()
+        if hmax > hmin:
+            self._updateHistogram(rect.bottomLeft().x(), rect.bottomRight().x())
+            self._histplot.replot()
+
+    def _zoomHistogramPreview(self, value):
+        dprint(2, "wheel moved to", value)
+        self._zoomHistogramFinalize(value, preview=True)
+        self._whistzoom_timer.start()
+
+    def _zoomHistogramFinalize(self, value=None, preview=False):
+        if self._zooming_histogram:
+            return
+        self._zooming_histogram = True
+        try:
+            if value is not None:
+                dmin, dmax = self._subset_range
+                dist = max(dmax - self._hist_peak, self._hist_peak - dmin) / 10 ** value
+                self._preview_hist_range = max(self._hist_peak - dist, dmin), min(self._hist_peak + dist, dmax)
+            if preview:
+                self._histplot.setAxisScale(QwtPlot.xBottom, *self._preview_hist_range)
+            else:
+                dprint(2, "wheel finalized at", value)
+                self._whistzoom_timer.stop()
+                self._updateHistogram(*self._preview_hist_range)
+            self._histplot.replot()
+        finally:
+            self._zooming_histogram = False
+
+    def _setHistLogScale(self, logscale, replot=True):
+        self._ylogscale = logscale
+        if logscale:
+            self._histplot.setAxisScaleEngine(QwtPlot.yLeft, QwtLogScaleEngine())
+            ymax = max(1, self._hist_max)
+            self._histplot.setAxisScale(QwtPlot.yLeft, 1, 10 ** (math.log10(ymax) * (1 + self.ColorBarHeight)))
+            y = self._hist.copy()
+            y[y == 0] = 1
+            self._histcurve1.setData(self._hist_bins, y)
+            self._histcurve2.setData(self._hist_bins, y)
+        else:
+            self._histplot.setAxisScaleEngine(QwtPlot.yLeft, QwtLinearScaleEngine())
+            self._histplot.setAxisScale(QwtPlot.yLeft, 0, self._hist_max * (1 + self.ColorBarHeight))
+            self._histcurve1.setData(self._hist_bins, self._hist)
+            self._histcurve2.setData(self._hist_bins, self._hist)
+        if replot:
+            self._histplot.replot()
--- tigger-1.6.0.orig/TigGUI/Images/Controller.py
+++ tigger-1.6.0/TigGUI/Images/Controller.py
@@ -1,618 +1,618 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import sys
-import traceback
-
-import numpy
-from PyQt5.Qt import QHBoxLayout, QFileDialog, QComboBox, QLabel, QLineEdit, QDialog, QToolButton, \
-    Qt, QApplication, QColor, QPixmap, QPainter, QFrame, QMenu, QPen, QKeySequence, QCheckBox
-from PyQt5.QtGui import QFont
-from PyQt5.QtWidgets import QDockWidget, QSizePolicy, QWidget, QPushButton, QStyle
-from PyQt5.Qwt import QwtText, QwtPlotCurve, QwtPlotMarker, QwtScaleMap, QwtPlotItem
-from PyQt5.QtCore import pyqtSignal, QPointF, QSize
-
-import TigGUI.kitties.utils
-from TigGUI.Images.SkyImage import FITSImagePlotItem
-from TigGUI.Plot.SkyModelPlot import LiveImageZoom
-from TigGUI.kitties.utils import PersistentCurrier
-from TigGUI.kitties.widgets import BusyIndicator
-
-
-QStringList = list
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="imagectl")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-from TigGUI.init import pixmaps
-from TigGUI.Widgets import FloatValidator, TDockWidget
-from TigGUI.Images.RenderControl import RenderControl
-from TigGUI.Images.ControlDialog import ImageControlDialog
-
-
-class ImageController(QFrame):
-    """An ImageController is a widget for controlling the display of one image.
-    It can emit the following signals from the image:
-    raise                     raise button was clicked
-    center                  center-on-image option was selected
-    unload                  unload option was selected
-    slice                     image slice has changed, need to redraw (emitted by SkyImage automatically)
-    repaint                 image display range or colormap has changed, need to redraw (emitted by SkyImage automatically)
-    """
-
-    # image signals
-    imageSignalRepaint = pyqtSignal()
-    imageSignalSlice = pyqtSignal(tuple)
-    imageSignalRaise = pyqtSignal([FITSImagePlotItem])
-    imageSignalUnload = pyqtSignal(object)
-    imageSignalCenter = pyqtSignal(object)
-
-    def __init__(self, image, parent, imgman, name=None, save=False):
-        QFrame.__init__(self, parent)
-        self.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
-        # init state
-        self._border_pen = None
-        self._image_label_text = None
-        self._subset = None
-        self.image = image
-        self._imgman = imgman
-        self._currier = PersistentCurrier()
-        self._control_dialog = None
-        # create widgets
-        self._lo = lo = QHBoxLayout(self)
-        lo.setContentsMargins(0, 0, 0, 0)
-        lo.setSpacing(2)
-        # raise button
-        self._wraise = QToolButton(self)
-        lo.addWidget(self._wraise)
-        self._wraise.setIcon(pixmaps.raise_up.icon())
-        self._wraise.setAutoRaise(True)
-        self._can_raise = False
-        self._wraise.clicked.connect(self._raiseButtonPressed)
-        self._wraise.setToolTip("""<P>Click here to raise this image above other images. Hold the button down briefly to
-      show a menu of image operations.</P>""")
-        # center label
-        self._wcenter = QLabel(self)
-        self._wcenter.setPixmap(pixmaps.center_image.pm())
-        self._wcenter.setToolTip(
-            "<P>The plot is currently centered on (the reference pixel %d,%d) of this image.</P>" % self.image.referencePixel())
-        lo.addWidget(self._wcenter)
-        # name/filename label
-        self.name = image.name
-        self._wlabel = QLabel(self.name, self)
-        self._number = 0
-        self.setName(self.name)
-        self._wlabel.setToolTip("%s %s" % (image.filename, "\u00D7".join(map(str, image.data().shape))))
-        lo.addWidget(self._wlabel, 1)
-        # if 'save' is specified, create a "save" button
-        if save:
-            self._wsave = QToolButton(self)
-            lo.addWidget(self._wsave)
-            self._wsave.setText("save")
-            self._wsave.setAutoRaise(True)
-            self._save_dir = save if isinstance(save, str) else "."
-            self._wsave.clicked.connect(self._saveImage)
-            self._wsave.setToolTip("""<P>Click here to write this image to a FITS file.</P>""")
-        # render control
-        self.image.connectRepaint(self.imageSignalRepaint)
-        self.image.connectSlice(self.imageSignalSlice)
-        self.image.connectRaise(self.imageSignalRaise)
-        self.image.connectUnload(self.imageSignalUnload)
-        self.image.connectCenter(self.imageSignalCenter)
-        dprint(2, "creating RenderControl")
-        self._rc = RenderControl(image, self)
-        dprint(2, "done")
-        # selectors for extra axes
-        self._wslicers = []
-        curslice = self._rc.currentSlice()  # this may be loaded from config, so not necessarily 0
-        for iextra, axisname, labels in self._rc.slicedAxes():
-            if axisname.upper() not in ["STOKES", "COMPLEX"]:
-                lbl = QLabel("%s:" % axisname, self)
-                lo.addWidget(lbl)
-            else:
-                lbl = None
-            slicer = QComboBox(self)
-            self._wslicers.append(slicer)
-            lo.addWidget(slicer)
-            slicer.addItems(labels)
-            slicer.setToolTip("""<P>Selects current slice along the %s axis.</P>""" % axisname)
-            slicer.setCurrentIndex(curslice[iextra])
-            slicer.activated[int].connect(self._currier.curry(self._rc.changeSlice, iextra))
-        # min/max display ranges
-        lo.addSpacing(5)
-        self._wrangelbl = QLabel(self)
-        lo.addWidget(self._wrangelbl)
-        self._minmaxvalidator = FloatValidator(self)
-        self._wmin = QLineEdit(self)
-        self._wmax = QLineEdit(self)
-        width = self._wmin.fontMetrics().width("1.234567e-05")
-        for w in self._wmin, self._wmax:
-            lo.addWidget(w, 0)
-            w.setValidator(self._minmaxvalidator)
-            w.setMaximumWidth(width)
-            w.setMinimumWidth(width)
-            w.editingFinished.connect(self._changeDisplayRange)
-        # full-range button
-        self._wfullrange = QToolButton(self)
-        lo.addWidget(self._wfullrange, 0)
-        self._wfullrange.setIcon(pixmaps.zoom_range.icon())
-        self._wfullrange.setAutoRaise(True)
-        self._wfullrange.clicked.connect(self.renderControl().resetSubsetDisplayRange)
-        rangemenu = QMenu(self)
-        rangemenu.addAction(pixmaps.full_range.icon(), "Full subset", self.renderControl().resetSubsetDisplayRange)
-        for percent in (99.99, 99.9, 99.5, 99, 98, 95):
-            rangemenu.addAction("%g%%" % percent, self._currier.curry(self._changeDisplayRangeToPercent, percent))
-        self._wfullrange.setPopupMode(QToolButton.DelayedPopup)
-        self._wfullrange.setMenu(rangemenu)
-        # update widgets from current display range
-        self._updateDisplayRange(*self._rc.displayRange())
-        # lock button
-        self._wlock = QToolButton(self)
-        self._wlock.setIcon(pixmaps.unlocked.icon())
-        self._wlock.setAutoRaise(True)
-        self._wlock.setToolTip("""<P>Click to lock or unlock the intensity range. When the intensity range is locked across multiple images, any changes in the intensity
-          range of one are propagated to the others. Hold the button down briefly for additional options.</P>""")
-        lo.addWidget(self._wlock)
-        self._wlock.clicked.connect(self._toggleDisplayRangeLock)
-        self.renderControl().displayRangeLocked.connect(self._setDisplayRangeLock)
-        self.renderControl().dataSubsetChanged.connect(self._dataSubsetChanged)
-        lockmenu = QMenu(self)
-        lockmenu.addAction(pixmaps.locked.icon(), "Lock all to this",
-                           self._currier.curry(imgman.lockAllDisplayRanges, self.renderControl()))
-        lockmenu.addAction(pixmaps.unlocked.icon(), "Unlock all", imgman.unlockAllDisplayRanges)
-        self._wlock.setPopupMode(QToolButton.DelayedPopup)
-        self._wlock.setMenu(lockmenu)
-        self._setDisplayRangeLock(self.renderControl().isDisplayRangeLocked())
-        # dialog button
-        self._wshowdialog = QToolButton(self)
-        lo.addWidget(self._wshowdialog)
-        self._wshowdialog.setIcon(pixmaps.colours.icon())
-        self._wshowdialog.setAutoRaise(True)
-        self._wshowdialog.setToolTip("""<P>Click for colourmap and intensity policy options.</P>""")
-        self._wshowdialog.clicked.connect(self.showRenderControls)
-        tooltip = """<P>You can change the currently displayed intensity range by entering low and high limits here.</P>
-            <TABLE>
-            <TR><TD><NOBR>Image min:</NOBR></TD><TD>%g</TD><TD>max:</TD><TD>%g</TD></TR>
-            </TABLE>""" % self.image.imageMinMax()
-        for w in self._wmin, self._wmax, self._wrangelbl:
-            w.setToolTip(tooltip)
-        # create image operations menu
-        self._menu = QMenu(self.name, self)
-        self._qa_raise = self._menu.addAction(pixmaps.raise_up.icon(), "Raise image",
-                                              self._currier.curry(self.image.signalRaise.emit, None))
-        self._qa_center = self._menu.addAction(pixmaps.center_image.icon(), "Center plot on image",
-                                               self._currier.curry(self.image.signalCenter.emit, True))
-        self._qa_show_rc = self._menu.addAction(pixmaps.colours.icon(), "Colours && Intensities...",
-                                                self.showRenderControls)
-        if save:
-            self._qa_save = self._menu.addAction("Save image...", self._saveImage)
-        self._menu.addAction("Export image to PNG file...", self._exportImageToPNG)
-        self._export_png_dialog = None
-        self._menu.addAction("Unload image", self._currier.curry(self.image.signalUnload.emit, None))
-        self._wraise.setMenu(self._menu)
-        self._wraise.setPopupMode(QToolButton.DelayedPopup)
-        # connect updates from renderControl and image
-        self.image.signalSlice.connect(self._updateImageSlice)
-        self._rc.displayRangeChanged.connect(self._updateDisplayRange)
-        # default plot depth of image markers
-        self._z_markers = None
-        # and the markers themselves
-        self._image_border = QwtPlotCurve()
-        self._image_border.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._image_label = QwtPlotMarker()
-        self._image_label.setRenderHint(QwtPlotItem.RenderAntialiased)
-        # subset markers
-        self._subset_pen = QPen(QColor("Light Blue"))
-        self._subset_border = QwtPlotCurve()
-        self._subset_border.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._subset_border.setPen(self._subset_pen)
-        self._subset_border.setVisible(False)
-        self._subset_label = QwtPlotMarker()
-        self._subset_label.setRenderHint(QwtPlotItem.RenderAntialiased)
-        text = QwtText("subset")
-        text.setColor(self._subset_pen.color())
-        self._subset_label.setLabel(text)
-        self._subset_label.setLabelAlignment(Qt.AlignRight | Qt.AlignBottom)
-        self._subset_label.setVisible(False)
-        self._setting_lmrect = False
-        self._all_markers = [self._image_border, self._image_label, self._subset_border, self._subset_label]
-        self._exportMaxRes = False
-        self._dockable_colour_ctrl = None
-
-    def close(self):
-        if self._control_dialog:
-            self._control_dialog.close()
-            self._control_dialog = None
-
-    def __del__(self):
-        self.close()
-
-    def __eq__(self, other):
-        return self is other
-
-    def renderControl(self):
-        return self._rc
-
-    def getMenu(self):
-        return self._menu
-
-    def getFilename(self):
-        return self.image.filename
-
-    def setName(self, name):
-        self.name = name
-        self._wlabel.setText("%s: %s" % (chr(ord('a') + self._number), self.name))
-
-    def setNumber(self, num):
-        self._number = num
-        self._menu.menuAction().setText("%s: %s" % (chr(ord('a') + self._number), self.name))
-        self._qa_raise.setShortcut(QKeySequence("Alt+" + chr(ord('A') + num)))
-        self.setName(self.name)
-
-    def getNumber(self):
-        return self._number
-
-    def setPlotProjection(self, proj):
-        self.image.setPlotProjection(proj)
-        sameproj = proj == self.image.projection
-        self._wcenter.setVisible(sameproj)
-        self._qa_center.setVisible(not sameproj)
-        if self._image_border:
-            (l0, l1), (m0, m1) = self.image.getExtents()
-            path = numpy.array([l0, l0, l1, l1, l0]), numpy.array([m0, m1, m1, m0, m0])
-            self._image_border.setSamples(*path)
-            if self._image_label:
-                self._image_label.setValue(path[0][2], path[1][2])
-
-    def addPlotBorder(self, border_pen, label, label_color=None, bg_brush=None):
-        # make plot items for image frame
-        # make curve for image borders
-        (l0, l1), (m0, m1) = self.image.getExtents()
-        self._border_pen = QPen(border_pen)
-        self._image_border.show()
-        self._image_border.setSamples([l0, l0, l1, l1, l0], [m0, m1, m1, m0, m0])
-        self._image_border.setPen(self._border_pen)
-        self._image_border.setZ(self.image.z() + 1 if self._z_markers is None else self._z_markers)
-        if label:
-            self._image_label.show()
-            self._image_label_text = text = QwtText(" %s " % label)
-            text.setColor(label_color)
-            text.setBackgroundBrush(bg_brush)
-            self._image_label.setValue(l1, m1)
-            self._image_label.setLabel(text)
-            self._image_label.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
-            self._image_label.setZ(self.image.z() + 2 if self._z_markers is None else self._z_markers)
-
-    def setPlotBorderStyle(self, border_color=None, label_color=None):
-        if border_color:
-            self._border_pen.setColor(border_color)
-            self._image_border.setPen(self._border_pen)
-        if label_color:
-            self._image_label_text.setColor(label_color)
-            self._image_label.setLabel(self._image_label_text)
-
-    def showPlotBorder(self, show=True):
-        self._image_border.setVisible(show)
-        self._image_label.setVisible(show)
-
-    def attachToPlot(self, plot, z_markers=None):
-        for item in [self.image] + self._all_markers:
-            if item.plot() != plot:
-                item.attach(plot)
-
-    def setImageVisible(self, visible):
-        self.image.setVisible(visible)
-
-    def showRenderControls(self):
-        if not self._control_dialog:
-            dprint(1, "creating control dialog")
-            self._control_dialog = ImageControlDialog(self, self._rc, self._imgman)
-            # line below allows window to be resized by the user
-            self._control_dialog.setSizeGripEnabled(True)
-            # get and set sizing
-            self._control_dialog.setMinimumWidth(396)
-            # create size policy for control dialog
-            colour_ctrl_policy = QSizePolicy()
-            colour_ctrl_policy.setHorizontalPolicy(QSizePolicy.Minimum)
-            self._control_dialog.setSizePolicy(colour_ctrl_policy)
-            # setup dockable colour control dialog
-            self._dockable_colour_ctrl = TDockWidget(title=f"{self._rc.image.name}", parent=self.parent().mainwin,
-                                                     bind_widget=self._control_dialog,
-                                                     close_slot=self.colourctrl_dockwidget_closed,
-                                                     toggle_slot=self.colourctrl_dockwidget_toggled)
-            self.addDockWidgetToTab()
-            dprint(1, "done")
-        # set dockable widget visibility in sync with control dialog
-        if not self._control_dialog.isVisible():
-            dprint(1, "showing control dialog")
-            self._control_dialog.show()
-            self._dockable_colour_ctrl.setVisible(True)
-            self.addDockWidgetToTab()
-            self._dockable_colour_ctrl.show()
-            self._dockable_colour_ctrl.raise_()
-        else:
-            self._control_dialog.hide()
-            self._dockable_colour_ctrl.setVisible(False)
-            if self.parent().mainwin.windowState() != Qt.WindowMaximized:
-                self.parent().mainwin.setMaximumWidth(
-                    self.parent().mainwin.width() + self._dockable_colour_ctrl.width())
-
-    def addDockWidgetToTab(self):
-        # Add dockable widget to main window.
-        # This needs to itterate through the widgets to find DockWidgets already in the right side area,
-        # then tabifydockwidget when adding, or add to the right area if empty
-        widget_list = self.parent().mainwin.findChildren(QDockWidget)
-        for widget in widget_list:
-            if self.parent().mainwin.dockWidgetArea(widget) == 2:  # if in right dock area
-                if widget.isVisible() and not widget.isFloating():  # if widget active and not a window
-                    if self._dockable_colour_ctrl is not widget:  # check not itself
-                        # add dock widget in tab on top of current widget in right area
-                        self.parent().mainwin.tabifyDockWidget(widget, self._dockable_colour_ctrl)
-                        self.parent().mainwin.resizeDocks([widget], [widget.bind_widget.width()], Qt.Horizontal)
-            elif self.parent().mainwin.dockWidgetArea(
-                    widget) == 0:  # if not in any dock area assume we have new dock widget
-                # no previous widget in this area then add
-                self.parent().mainwin.addDockWidget(Qt.RightDockWidgetArea, self._dockable_colour_ctrl)
-                self.parent().mainwin.resizeDocks([widget], [widget.bind_widget.width()], Qt.Horizontal)
-
-    def removeDockWidget(self):
-        # remove image control dock widget
-        self.parent().mainwin.removeDockWidget(self._dockable_colour_ctrl)
-        # get widgets to resize
-        widget_list = self.parent().mainwin.findChildren(QDockWidget)
-        size_list = []
-        result = []
-        for widget in widget_list:
-            if not isinstance(widget.bind_widget, ImageControlDialog):
-                size_list.append(widget.bind_widget.width())
-                result.append(widget)
-                dprint(2, f"{widget} width {widget.width()}")
-                dprint(2, f"{widget} bind_widget width {widget.bind_widget.width()}")
-                if isinstance(widget.bind_widget, LiveImageZoom):
-                    widget.bind_widget.setMinimumWidth(widget.width())
-        widget_list = result
-        # resize dock areas
-        self.parent().mainwin.resizeDocks(widget_list, size_list, Qt.Horizontal)
-
-    def colourctrl_dockwidget_closed(self):
-        self._dockable_colour_ctrl.setVisible(False)
-        if self.parent().mainwin.windowState() != Qt.WindowMaximized:
-            self.parent().mainwin.setMaximumWidth(self.parent().mainwin.width() + self._dockable_colour_ctrl.width())
-
-    def colourctrl_dockwidget_toggled(self):
-        if self._dockable_colour_ctrl.isVisible():
-            if self._dockable_colour_ctrl.isWindow():
-                self._dockable_colour_ctrl.setFloating(False)
-            else:
-                self._dockable_colour_ctrl.setFloating(True)
-                if self.parent().mainwin.windowState() != Qt.WindowMaximized:
-                    self.parent().mainwin.setMaximumWidth(
-                        self.parent().mainwin.width() + self._dockable_colour_ctrl.width())
-
-    def _changeDisplayRangeToPercent(self, percent):
-        if not self._control_dialog:
-            self._control_dialog = ImageControlDialog(self, self._rc, self._imgman)
-        self._control_dialog._changeDisplayRangeToPercent(percent)
-
-    def _updateDisplayRange(self, dmin, dmax):
-        """Updates display range widgets."""
-        self._wmin.setText("%.4g" % dmin)
-        self._wmax.setText("%.4g" % dmax)
-        self._updateFullRangeIcon()
-
-    def _changeDisplayRange(self):
-        """Gets display range from widgets and updates the image with it."""
-        try:
-            newrange = float(str(self._wmin.text())), float(str(self._wmax.text()))
-        except ValueError:
-            return
-        self._rc.setDisplayRange(*newrange)
-
-    def _dataSubsetChanged(self, subset, minmax, desc, subset_type):
-        """Called when the data subset changes (or is reset)"""
-        # hide the subset indicator -- unless we're invoked while we're actually setting the subset itself
-        if not self._setting_lmrect:
-            self._subset = None
-            self._subset_border.setVisible(False)
-            self._subset_label.setVisible(False)
-
-    def setLMRectSubset(self, rect):
-        self._subset = rect
-        l0, m0, l1, m1 = rect.getCoords()
-        self._subset_border.setSamples([l0, l0, l1, l1, l0], [m0, m1, m1, m0, m0])
-        self._subset_border.setVisible(True)
-        self._subset_label.setValue(max(l0, l1), max(m0, m1))
-        self._subset_label.setVisible(True)
-        self._setting_lmrect = True
-        self.renderControl().setLMRectSubset(rect)
-        self._setting_lmrect = False
-
-    def currentSlice(self):
-        return self._rc.currentSlice()
-
-    def _updateImageSlice(self, _slice):
-        dprint(2, _slice)
-        for i, (iextra, name, labels) in enumerate(self._rc.slicedAxes()):
-            slicer = self._wslicers[i]
-            if slicer.currentIndex() != _slice[iextra]:
-                dprint(3, "setting widget", i, "to", _slice[iextra])
-                slicer.setCurrentIndex(_slice[iextra])
-
-    def setMarkersZ(self, z):
-        self._z_markers = z
-        for i, elem in enumerate(self._all_markers):
-            elem.setZ(z + i)
-
-    def setZ(self, z, top=False, depthlabel=None, can_raise=True):
-        self.image.setZ(z)
-        if self._z_markers is None:
-            for i, elem in enumerate(self._all_markers):
-                elem.setZ(z + i + i)
-        # set the depth label, if any
-        label = "%s: %s" % (chr(ord('a') + self._number), self.name)
-        # label = "%s %s"%(depthlabel,self.name) if depthlabel else self.name
-        if top:
-            label = "%s: <B>%s</B>" % (chr(ord('a') + self._number), self.name)
-        self._wlabel.setText(label)
-        # set hotkey
-        self._qa_show_rc.setShortcut(Qt.Key_F9 if top else QKeySequence())
-        # set raise control
-        self._can_raise = can_raise
-        self._qa_raise.setVisible(can_raise)
-        self._wlock.setVisible(can_raise)
-        if can_raise:
-            self._wraise.setToolTip(
-                "<P>Click here to raise this image to the top. Click on the down-arrow to access the image menu.</P>")
-        else:
-            self._wraise.setToolTip("<P>Click to access the image menu.</P>")
-
-    def _raiseButtonPressed(self):
-        if self._can_raise:
-            self.image.signalRaise.emit(self.image)
-        else:
-            self._wraise.showMenu()
-
-    def _saveImage(self):
-        filename = QFileDialog.getSaveFileName(self, "Save FITS file", self._save_dir,
-                                               "FITS files(*.fits *.FITS *fts *FTS)", options=QFileDialog.DontUseNativeDialog)
-        filename = str(filename[0])
-        if not filename:
-            return
-        busy = BusyIndicator()
-        self._imgman.signalShowMessage.emit("""Writing FITS image %s""" % filename, 3000)
-        QApplication.flush()
-        try:
-            self.image.save(filename)
-        except Exception as exc:
-            busy.reset_cursor()
-            traceback.print_exc()
-            self._imgman.signalShowErrorMessage.emit("""Error writing FITS image %s: %s""" % (filename, str(sys.exc_info()[1])))
-            return None
-        self.renderControl().startSavingConfig(filename)
-        self.setName(self.image.name)
-        self._qa_save.setVisible(False)
-        self._wsave.hide()
-        busy.reset_cursor()
-
-    def _exportImageResolution(self):
-        sender = self.sender()
-        if isinstance(sender, QCheckBox):
-            if sender.isChecked():
-                self._exportMaxRes = True
-            else:
-                self._exportMaxRes = False
-
-    def _exportImageToPNG(self, filename=None):
-        if not filename:
-            if not self._export_png_dialog:
-                dialog = self._export_png_dialog = QFileDialog(self, "Export image to PNG", ".", "*.png")
-                dialog.setDefaultSuffix("png")
-                dialog.setFileMode(QFileDialog.AnyFile)
-                dialog.setAcceptMode(QFileDialog.AcceptSave)
-                dialog.setModal(True)
-                dialog.filesSelected['QStringList'].connect(self._exportImageToPNG)
-                # attempt to add limit 4K option - not available on Ubuntu Unity
-                layout = dialog.layout()
-                if layout is not None:
-                    checkbox = QCheckBox("Limit to 4K image")
-                    checkbox.setChecked(False)
-                    checkbox.setToolTip("Limits the image output to 4K")
-                    checkbox.toggled.connect(self._exportImageResolution)
-                    layout.addWidget(checkbox)
-                    dialog.setLayout(layout)
-            return self._export_png_dialog.exec_() == QDialog.Accepted
-        busy = BusyIndicator()
-        if isinstance(filename, QStringList):
-            filename = filename[0]
-        filename = str(filename)
-        # get image dimensions
-        nx, ny = self.image.imageDims()
-        # export either max resolution possible or default to 4K. If image is small then no scaling occurs.
-        if not self._exportMaxRes:
-            # get free memory. Note: Linux only!
-            import os
-            total_memory, used_memory, free_memory = map(int, os.popen('free -t -m').readlines()[-1].split()[1:])
-            # use 90% of free memory available
-            free_memory = free_memory * 0.9
-            # use an approximation to find the max image size that can be generated
-            if nx >= ny and nx > free_memory:
-                scale_factor = round(free_memory / nx, 1)
-            elif ny > nx and ny > free_memory:
-                scale_factor = round(free_memory / ny, 1)
-            else:
-                scale_factor = 1
-        else:
-            # default to 4K
-            if nx > 4000:
-                scale_factor = 4000 / nx
-            elif ny > nx and ny > 4000:
-                scale_factor = 4000 / ny
-            else:
-                scale_factor = 1
-
-        # make QPixmap
-        nx = nx * scale_factor
-        ny = ny * scale_factor
-        (l0, l1), (m0, m1) = self.image.getExtents()
-        pixmap = QPixmap(nx, ny)
-        painter = QPainter(pixmap)
-        # use QwtPlot implementation of draw canvas, since we want to avoid caching
-        xmap = QwtScaleMap()
-        xmap.setPaintInterval(0, nx)
-        xmap.setScaleInterval(l1, l0)
-        ymap = QwtScaleMap()
-        ymap.setPaintInterval(ny, 0)
-        ymap.setScaleInterval(m0, m1)
-        # call painter with clear cache option for consistent file size output.
-        self.image.draw(painter, xmap, ymap, pixmap.rect(), use_cache=False)
-        painter.end()
-        # save to file
-        try:
-            pixmap.save(filename, "PNG")
-            # clean up export items
-            pixmap.detach()
-            del xmap
-            del ymap
-            del pixmap
-            del painter
-        except Exception as exc:
-            self._imgman.signalShowErrorMessage[str, int].emit("Error writing %s: %s" % (filename, str(exc)), 3000)
-            busy.reset_cursor()
-        else:
-            busy.reset_cursor()
-            self._imgman.signalShowMessage[str, int].emit("Exported image to file %s" % filename, 3000)
-
-    def _toggleDisplayRangeLock(self):
-        self.renderControl().lockDisplayRange(not self.renderControl().isDisplayRangeLocked())
-
-    def _setDisplayRangeLock(self, locked):
-        self._wlock.setIcon(pixmaps.locked.icon() if locked else pixmaps.unlocked.icon())
-
-    def _updateFullRangeIcon(self):
-        if self._rc.isSubsetDisplayRange():
-            self._wfullrange.setIcon(pixmaps.zoom_range.icon())
-            self._wfullrange.setToolTip(
-                """<P>The current intensity range is the full range. Hold this button down briefly for additional options.</P>""")
-        else:
-            self._wfullrange.setIcon(pixmaps.full_range.icon())
-            self._wfullrange.setToolTip(
-                """<P>Click to reset to a full intensity range. Hold the button down briefly for additional options.</P>""")
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import sys
+import traceback
+
+import numpy
+from PyQt5.Qt import QHBoxLayout, QFileDialog, QComboBox, QLabel, QLineEdit, QDialog, QToolButton, \
+    Qt, QApplication, QColor, QPixmap, QPainter, QFrame, QMenu, QPen, QKeySequence, QCheckBox
+from PyQt5.QtGui import QFont
+from PyQt5.QtWidgets import QDockWidget, QSizePolicy, QWidget, QPushButton, QStyle
+from PyQt5.Qwt import QwtText, QwtPlotCurve, QwtPlotMarker, QwtScaleMap, QwtPlotItem
+from PyQt5.QtCore import pyqtSignal, QPointF, QSize
+
+import TigGUI.kitties.utils
+from TigGUI.Images.SkyImage import FITSImagePlotItem
+from TigGUI.Plot.SkyModelPlot import LiveImageZoom
+from TigGUI.kitties.utils import PersistentCurrier
+from TigGUI.kitties.widgets import BusyIndicator
+
+
+QStringList = list
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="imagectl")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+from TigGUI.init import pixmaps
+from TigGUI.Widgets import FloatValidator, TDockWidget
+from TigGUI.Images.RenderControl import RenderControl
+from TigGUI.Images.ControlDialog import ImageControlDialog
+
+
+class ImageController(QFrame):
+    """An ImageController is a widget for controlling the display of one image.
+    It can emit the following signals from the image:
+    raise                     raise button was clicked
+    center                  center-on-image option was selected
+    unload                  unload option was selected
+    slice                     image slice has changed, need to redraw (emitted by SkyImage automatically)
+    repaint                 image display range or colormap has changed, need to redraw (emitted by SkyImage automatically)
+    """
+
+    # image signals
+    imageSignalRepaint = pyqtSignal()
+    imageSignalSlice = pyqtSignal(tuple)
+    imageSignalRaise = pyqtSignal([FITSImagePlotItem])
+    imageSignalUnload = pyqtSignal(object)
+    imageSignalCenter = pyqtSignal(object)
+
+    def __init__(self, image, parent, imgman, name=None, save=False):
+        QFrame.__init__(self, parent)
+        self.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
+        # init state
+        self._border_pen = None
+        self._image_label_text = None
+        self._subset = None
+        self.image = image
+        self._imgman = imgman
+        self._currier = PersistentCurrier()
+        self._control_dialog = None
+        # create widgets
+        self._lo = lo = QHBoxLayout(self)
+        lo.setContentsMargins(0, 0, 0, 0)
+        lo.setSpacing(2)
+        # raise button
+        self._wraise = QToolButton(self)
+        lo.addWidget(self._wraise)
+        self._wraise.setIcon(pixmaps.raise_up.icon())
+        self._wraise.setAutoRaise(True)
+        self._can_raise = False
+        self._wraise.clicked.connect(self._raiseButtonPressed)
+        self._wraise.setToolTip("""<P>Click here to raise this image above other images. Hold the button down briefly to
+      show a menu of image operations.</P>""")
+        # center label
+        self._wcenter = QLabel(self)
+        self._wcenter.setPixmap(pixmaps.center_image.pm())
+        self._wcenter.setToolTip(
+            "<P>The plot is currently centered on (the reference pixel %d,%d) of this image.</P>" % self.image.referencePixel())
+        lo.addWidget(self._wcenter)
+        # name/filename label
+        self.name = image.name
+        self._wlabel = QLabel(self.name, self)
+        self._number = 0
+        self.setName(self.name)
+        self._wlabel.setToolTip("%s %s" % (image.filename, "\u00D7".join(map(str, image.data().shape))))
+        lo.addWidget(self._wlabel, 1)
+        # if 'save' is specified, create a "save" button
+        if save:
+            self._wsave = QToolButton(self)
+            lo.addWidget(self._wsave)
+            self._wsave.setText("save")
+            self._wsave.setAutoRaise(True)
+            self._save_dir = save if isinstance(save, str) else "."
+            self._wsave.clicked.connect(self._saveImage)
+            self._wsave.setToolTip("""<P>Click here to write this image to a FITS file.</P>""")
+        # render control
+        self.image.connectRepaint(self.imageSignalRepaint)
+        self.image.connectSlice(self.imageSignalSlice)
+        self.image.connectRaise(self.imageSignalRaise)
+        self.image.connectUnload(self.imageSignalUnload)
+        self.image.connectCenter(self.imageSignalCenter)
+        dprint(2, "creating RenderControl")
+        self._rc = RenderControl(image, self)
+        dprint(2, "done")
+        # selectors for extra axes
+        self._wslicers = []
+        curslice = self._rc.currentSlice()  # this may be loaded from config, so not necessarily 0
+        for iextra, axisname, labels in self._rc.slicedAxes():
+            if axisname.upper() not in ["STOKES", "COMPLEX"]:
+                lbl = QLabel("%s:" % axisname, self)
+                lo.addWidget(lbl)
+            else:
+                lbl = None
+            slicer = QComboBox(self)
+            self._wslicers.append(slicer)
+            lo.addWidget(slicer)
+            slicer.addItems(labels)
+            slicer.setToolTip("""<P>Selects current slice along the %s axis.</P>""" % axisname)
+            slicer.setCurrentIndex(curslice[iextra])
+            slicer.activated[int].connect(self._currier.curry(self._rc.changeSlice, iextra))
+        # min/max display ranges
+        lo.addSpacing(5)
+        self._wrangelbl = QLabel(self)
+        lo.addWidget(self._wrangelbl)
+        self._minmaxvalidator = FloatValidator(self)
+        self._wmin = QLineEdit(self)
+        self._wmax = QLineEdit(self)
+        width = self._wmin.fontMetrics().width("1.234567e-05")
+        for w in self._wmin, self._wmax:
+            lo.addWidget(w, 0)
+            w.setValidator(self._minmaxvalidator)
+            w.setMaximumWidth(width)
+            w.setMinimumWidth(width)
+            w.editingFinished.connect(self._changeDisplayRange)
+        # full-range button
+        self._wfullrange = QToolButton(self)
+        lo.addWidget(self._wfullrange, 0)
+        self._wfullrange.setIcon(pixmaps.zoom_range.icon())
+        self._wfullrange.setAutoRaise(True)
+        self._wfullrange.clicked.connect(self.renderControl().resetSubsetDisplayRange)
+        rangemenu = QMenu(self)
+        rangemenu.addAction(pixmaps.full_range.icon(), "Full subset", self.renderControl().resetSubsetDisplayRange)
+        for percent in (99.99, 99.9, 99.5, 99, 98, 95):
+            rangemenu.addAction("%g%%" % percent, self._currier.curry(self._changeDisplayRangeToPercent, percent))
+        self._wfullrange.setPopupMode(QToolButton.DelayedPopup)
+        self._wfullrange.setMenu(rangemenu)
+        # update widgets from current display range
+        self._updateDisplayRange(*self._rc.displayRange())
+        # lock button
+        self._wlock = QToolButton(self)
+        self._wlock.setIcon(pixmaps.unlocked.icon())
+        self._wlock.setAutoRaise(True)
+        self._wlock.setToolTip("""<P>Click to lock or unlock the intensity range. When the intensity range is locked across multiple images, any changes in the intensity
+          range of one are propagated to the others. Hold the button down briefly for additional options.</P>""")
+        lo.addWidget(self._wlock)
+        self._wlock.clicked.connect(self._toggleDisplayRangeLock)
+        self.renderControl().displayRangeLocked.connect(self._setDisplayRangeLock)
+        self.renderControl().dataSubsetChanged.connect(self._dataSubsetChanged)
+        lockmenu = QMenu(self)
+        lockmenu.addAction(pixmaps.locked.icon(), "Lock all to this",
+                           self._currier.curry(imgman.lockAllDisplayRanges, self.renderControl()))
+        lockmenu.addAction(pixmaps.unlocked.icon(), "Unlock all", imgman.unlockAllDisplayRanges)
+        self._wlock.setPopupMode(QToolButton.DelayedPopup)
+        self._wlock.setMenu(lockmenu)
+        self._setDisplayRangeLock(self.renderControl().isDisplayRangeLocked())
+        # dialog button
+        self._wshowdialog = QToolButton(self)
+        lo.addWidget(self._wshowdialog)
+        self._wshowdialog.setIcon(pixmaps.colours.icon())
+        self._wshowdialog.setAutoRaise(True)
+        self._wshowdialog.setToolTip("""<P>Click for colourmap and intensity policy options.</P>""")
+        self._wshowdialog.clicked.connect(self.showRenderControls)
+        tooltip = """<P>You can change the currently displayed intensity range by entering low and high limits here.</P>
+            <TABLE>
+            <TR><TD><NOBR>Image min:</NOBR></TD><TD>%g</TD><TD>max:</TD><TD>%g</TD></TR>
+            </TABLE>""" % self.image.imageMinMax()
+        for w in self._wmin, self._wmax, self._wrangelbl:
+            w.setToolTip(tooltip)
+        # create image operations menu
+        self._menu = QMenu(self.name, self)
+        self._qa_raise = self._menu.addAction(pixmaps.raise_up.icon(), "Raise image",
+                                              self._currier.curry(self.image.signalRaise.emit, None))
+        self._qa_center = self._menu.addAction(pixmaps.center_image.icon(), "Center plot on image",
+                                               self._currier.curry(self.image.signalCenter.emit, True))
+        self._qa_show_rc = self._menu.addAction(pixmaps.colours.icon(), "Colours && Intensities...",
+                                                self.showRenderControls)
+        if save:
+            self._qa_save = self._menu.addAction("Save image...", self._saveImage)
+        self._menu.addAction("Export image to PNG file...", self._exportImageToPNG)
+        self._export_png_dialog = None
+        self._menu.addAction("Unload image", self._currier.curry(self.image.signalUnload.emit, None))
+        self._wraise.setMenu(self._menu)
+        self._wraise.setPopupMode(QToolButton.DelayedPopup)
+        # connect updates from renderControl and image
+        self.image.signalSlice.connect(self._updateImageSlice)
+        self._rc.displayRangeChanged.connect(self._updateDisplayRange)
+        # default plot depth of image markers
+        self._z_markers = None
+        # and the markers themselves
+        self._image_border = QwtPlotCurve()
+        self._image_border.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._image_label = QwtPlotMarker()
+        self._image_label.setRenderHint(QwtPlotItem.RenderAntialiased)
+        # subset markers
+        self._subset_pen = QPen(QColor("Light Blue"))
+        self._subset_border = QwtPlotCurve()
+        self._subset_border.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._subset_border.setPen(self._subset_pen)
+        self._subset_border.setVisible(False)
+        self._subset_label = QwtPlotMarker()
+        self._subset_label.setRenderHint(QwtPlotItem.RenderAntialiased)
+        text = QwtText("subset")
+        text.setColor(self._subset_pen.color())
+        self._subset_label.setLabel(text)
+        self._subset_label.setLabelAlignment(Qt.AlignRight | Qt.AlignBottom)
+        self._subset_label.setVisible(False)
+        self._setting_lmrect = False
+        self._all_markers = [self._image_border, self._image_label, self._subset_border, self._subset_label]
+        self._exportMaxRes = False
+        self._dockable_colour_ctrl = None
+
+    def close(self):
+        if self._control_dialog:
+            self._control_dialog.close()
+            self._control_dialog = None
+
+    def __del__(self):
+        self.close()
+
+    def __eq__(self, other):
+        return self is other
+
+    def renderControl(self):
+        return self._rc
+
+    def getMenu(self):
+        return self._menu
+
+    def getFilename(self):
+        return self.image.filename
+
+    def setName(self, name):
+        self.name = name
+        self._wlabel.setText("%s: %s" % (chr(ord('a') + self._number), self.name))
+
+    def setNumber(self, num):
+        self._number = num
+        self._menu.menuAction().setText("%s: %s" % (chr(ord('a') + self._number), self.name))
+        self._qa_raise.setShortcut(QKeySequence("Alt+" + chr(ord('A') + num)))
+        self.setName(self.name)
+
+    def getNumber(self):
+        return self._number
+
+    def setPlotProjection(self, proj):
+        self.image.setPlotProjection(proj)
+        sameproj = proj == self.image.projection
+        self._wcenter.setVisible(sameproj)
+        self._qa_center.setVisible(not sameproj)
+        if self._image_border:
+            (l0, l1), (m0, m1) = self.image.getExtents()
+            path = numpy.array([l0, l0, l1, l1, l0]), numpy.array([m0, m1, m1, m0, m0])
+            self._image_border.setSamples(*path)
+            if self._image_label:
+                self._image_label.setValue(path[0][2], path[1][2])
+
+    def addPlotBorder(self, border_pen, label, label_color=None, bg_brush=None):
+        # make plot items for image frame
+        # make curve for image borders
+        (l0, l1), (m0, m1) = self.image.getExtents()
+        self._border_pen = QPen(border_pen)
+        self._image_border.show()
+        self._image_border.setSamples([l0, l0, l1, l1, l0], [m0, m1, m1, m0, m0])
+        self._image_border.setPen(self._border_pen)
+        self._image_border.setZ(self.image.z() + 1 if self._z_markers is None else self._z_markers)
+        if label:
+            self._image_label.show()
+            self._image_label_text = text = QwtText(" %s " % label)
+            text.setColor(label_color)
+            text.setBackgroundBrush(bg_brush)
+            self._image_label.setValue(l1, m1)
+            self._image_label.setLabel(text)
+            self._image_label.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
+            self._image_label.setZ(self.image.z() + 2 if self._z_markers is None else self._z_markers)
+
+    def setPlotBorderStyle(self, border_color=None, label_color=None):
+        if border_color:
+            self._border_pen.setColor(border_color)
+            self._image_border.setPen(self._border_pen)
+        if label_color:
+            self._image_label_text.setColor(label_color)
+            self._image_label.setLabel(self._image_label_text)
+
+    def showPlotBorder(self, show=True):
+        self._image_border.setVisible(show)
+        self._image_label.setVisible(show)
+
+    def attachToPlot(self, plot, z_markers=None):
+        for item in [self.image] + self._all_markers:
+            if item.plot() != plot:
+                item.attach(plot)
+
+    def setImageVisible(self, visible):
+        self.image.setVisible(visible)
+
+    def showRenderControls(self):
+        if not self._control_dialog:
+            dprint(1, "creating control dialog")
+            self._control_dialog = ImageControlDialog(self, self._rc, self._imgman)
+            # line below allows window to be resized by the user
+            self._control_dialog.setSizeGripEnabled(True)
+            # get and set sizing
+            self._control_dialog.setMinimumWidth(396)
+            # create size policy for control dialog
+            colour_ctrl_policy = QSizePolicy()
+            colour_ctrl_policy.setHorizontalPolicy(QSizePolicy.Minimum)
+            self._control_dialog.setSizePolicy(colour_ctrl_policy)
+            # setup dockable colour control dialog
+            self._dockable_colour_ctrl = TDockWidget(title=f"{self._rc.image.name}", parent=self.parent().mainwin,
+                                                     bind_widget=self._control_dialog,
+                                                     close_slot=self.colourctrl_dockwidget_closed,
+                                                     toggle_slot=self.colourctrl_dockwidget_toggled)
+            self.addDockWidgetToTab()
+            dprint(1, "done")
+        # set dockable widget visibility in sync with control dialog
+        if not self._control_dialog.isVisible():
+            dprint(1, "showing control dialog")
+            self._control_dialog.show()
+            self._dockable_colour_ctrl.setVisible(True)
+            self.addDockWidgetToTab()
+            self._dockable_colour_ctrl.show()
+            self._dockable_colour_ctrl.raise_()
+        else:
+            self._control_dialog.hide()
+            self._dockable_colour_ctrl.setVisible(False)
+            if self.parent().mainwin.windowState() != Qt.WindowMaximized:
+                self.parent().mainwin.setMaximumWidth(
+                    self.parent().mainwin.width() + self._dockable_colour_ctrl.width())
+
+    def addDockWidgetToTab(self):
+        # Add dockable widget to main window.
+        # This needs to itterate through the widgets to find DockWidgets already in the right side area,
+        # then tabifydockwidget when adding, or add to the right area if empty
+        widget_list = self.parent().mainwin.findChildren(QDockWidget)
+        for widget in widget_list:
+            if self.parent().mainwin.dockWidgetArea(widget) == 2:  # if in right dock area
+                if widget.isVisible() and not widget.isFloating():  # if widget active and not a window
+                    if self._dockable_colour_ctrl is not widget:  # check not itself
+                        # add dock widget in tab on top of current widget in right area
+                        self.parent().mainwin.tabifyDockWidget(widget, self._dockable_colour_ctrl)
+                        self.parent().mainwin.resizeDocks([widget], [widget.bind_widget.width()], Qt.Horizontal)
+            elif self.parent().mainwin.dockWidgetArea(
+                    widget) == 0:  # if not in any dock area assume we have new dock widget
+                # no previous widget in this area then add
+                self.parent().mainwin.addDockWidget(Qt.RightDockWidgetArea, self._dockable_colour_ctrl)
+                self.parent().mainwin.resizeDocks([widget], [widget.bind_widget.width()], Qt.Horizontal)
+
+    def removeDockWidget(self):
+        # remove image control dock widget
+        self.parent().mainwin.removeDockWidget(self._dockable_colour_ctrl)
+        # get widgets to resize
+        widget_list = self.parent().mainwin.findChildren(QDockWidget)
+        size_list = []
+        result = []
+        for widget in widget_list:
+            if not isinstance(widget.bind_widget, ImageControlDialog):
+                size_list.append(widget.bind_widget.width())
+                result.append(widget)
+                dprint(2, f"{widget} width {widget.width()}")
+                dprint(2, f"{widget} bind_widget width {widget.bind_widget.width()}")
+                if isinstance(widget.bind_widget, LiveImageZoom):
+                    widget.bind_widget.setMinimumWidth(widget.width())
+        widget_list = result
+        # resize dock areas
+        self.parent().mainwin.resizeDocks(widget_list, size_list, Qt.Horizontal)
+
+    def colourctrl_dockwidget_closed(self):
+        self._dockable_colour_ctrl.setVisible(False)
+        if self.parent().mainwin.windowState() != Qt.WindowMaximized:
+            self.parent().mainwin.setMaximumWidth(self.parent().mainwin.width() + self._dockable_colour_ctrl.width())
+
+    def colourctrl_dockwidget_toggled(self):
+        if self._dockable_colour_ctrl.isVisible():
+            if self._dockable_colour_ctrl.isWindow():
+                self._dockable_colour_ctrl.setFloating(False)
+            else:
+                self._dockable_colour_ctrl.setFloating(True)
+                if self.parent().mainwin.windowState() != Qt.WindowMaximized:
+                    self.parent().mainwin.setMaximumWidth(
+                        self.parent().mainwin.width() + self._dockable_colour_ctrl.width())
+
+    def _changeDisplayRangeToPercent(self, percent):
+        if not self._control_dialog:
+            self._control_dialog = ImageControlDialog(self, self._rc, self._imgman)
+        self._control_dialog._changeDisplayRangeToPercent(percent)
+
+    def _updateDisplayRange(self, dmin, dmax):
+        """Updates display range widgets."""
+        self._wmin.setText("%.4g" % dmin)
+        self._wmax.setText("%.4g" % dmax)
+        self._updateFullRangeIcon()
+
+    def _changeDisplayRange(self):
+        """Gets display range from widgets and updates the image with it."""
+        try:
+            newrange = float(str(self._wmin.text())), float(str(self._wmax.text()))
+        except ValueError:
+            return
+        self._rc.setDisplayRange(*newrange)
+
+    def _dataSubsetChanged(self, subset, minmax, desc, subset_type):
+        """Called when the data subset changes (or is reset)"""
+        # hide the subset indicator -- unless we're invoked while we're actually setting the subset itself
+        if not self._setting_lmrect:
+            self._subset = None
+            self._subset_border.setVisible(False)
+            self._subset_label.setVisible(False)
+
+    def setLMRectSubset(self, rect):
+        self._subset = rect
+        l0, m0, l1, m1 = rect.getCoords()
+        self._subset_border.setSamples([l0, l0, l1, l1, l0], [m0, m1, m1, m0, m0])
+        self._subset_border.setVisible(True)
+        self._subset_label.setValue(max(l0, l1), max(m0, m1))
+        self._subset_label.setVisible(True)
+        self._setting_lmrect = True
+        self.renderControl().setLMRectSubset(rect)
+        self._setting_lmrect = False
+
+    def currentSlice(self):
+        return self._rc.currentSlice()
+
+    def _updateImageSlice(self, _slice):
+        dprint(2, _slice)
+        for i, (iextra, name, labels) in enumerate(self._rc.slicedAxes()):
+            slicer = self._wslicers[i]
+            if slicer.currentIndex() != _slice[iextra]:
+                dprint(3, "setting widget", i, "to", _slice[iextra])
+                slicer.setCurrentIndex(_slice[iextra])
+
+    def setMarkersZ(self, z):
+        self._z_markers = z
+        for i, elem in enumerate(self._all_markers):
+            elem.setZ(z + i)
+
+    def setZ(self, z, top=False, depthlabel=None, can_raise=True):
+        self.image.setZ(z)
+        if self._z_markers is None:
+            for i, elem in enumerate(self._all_markers):
+                elem.setZ(z + i + i)
+        # set the depth label, if any
+        label = "%s: %s" % (chr(ord('a') + self._number), self.name)
+        # label = "%s %s"%(depthlabel,self.name) if depthlabel else self.name
+        if top:
+            label = "%s: <B>%s</B>" % (chr(ord('a') + self._number), self.name)
+        self._wlabel.setText(label)
+        # set hotkey
+        self._qa_show_rc.setShortcut(Qt.Key_F9 if top else QKeySequence())
+        # set raise control
+        self._can_raise = can_raise
+        self._qa_raise.setVisible(can_raise)
+        self._wlock.setVisible(can_raise)
+        if can_raise:
+            self._wraise.setToolTip(
+                "<P>Click here to raise this image to the top. Click on the down-arrow to access the image menu.</P>")
+        else:
+            self._wraise.setToolTip("<P>Click to access the image menu.</P>")
+
+    def _raiseButtonPressed(self):
+        if self._can_raise:
+            self.image.signalRaise.emit(self.image)
+        else:
+            self._wraise.showMenu()
+
+    def _saveImage(self):
+        filename = QFileDialog.getSaveFileName(self, "Save FITS file", self._save_dir,
+                                               "FITS files(*.fits *.FITS *fts *FTS)", options=QFileDialog.DontUseNativeDialog)
+        filename = str(filename[0])
+        if not filename:
+            return
+        busy = BusyIndicator()
+        self._imgman.signalShowMessage.emit("""Writing FITS image %s""" % filename, 3000)
+        QApplication.flush()
+        try:
+            self.image.save(filename)
+        except Exception as exc:
+            busy.reset_cursor()
+            traceback.print_exc()
+            self._imgman.signalShowErrorMessage.emit("""Error writing FITS image %s: %s""" % (filename, str(sys.exc_info()[1])))
+            return None
+        self.renderControl().startSavingConfig(filename)
+        self.setName(self.image.name)
+        self._qa_save.setVisible(False)
+        self._wsave.hide()
+        busy.reset_cursor()
+
+    def _exportImageResolution(self):
+        sender = self.sender()
+        if isinstance(sender, QCheckBox):
+            if sender.isChecked():
+                self._exportMaxRes = True
+            else:
+                self._exportMaxRes = False
+
+    def _exportImageToPNG(self, filename=None):
+        if not filename:
+            if not self._export_png_dialog:
+                dialog = self._export_png_dialog = QFileDialog(self, "Export image to PNG", ".", "*.png")
+                dialog.setDefaultSuffix("png")
+                dialog.setFileMode(QFileDialog.AnyFile)
+                dialog.setAcceptMode(QFileDialog.AcceptSave)
+                dialog.setModal(True)
+                dialog.filesSelected['QStringList'].connect(self._exportImageToPNG)
+                # attempt to add limit 4K option - not available on Ubuntu Unity
+                layout = dialog.layout()
+                if layout is not None:
+                    checkbox = QCheckBox("Limit to 4K image")
+                    checkbox.setChecked(False)
+                    checkbox.setToolTip("Limits the image output to 4K")
+                    checkbox.toggled.connect(self._exportImageResolution)
+                    layout.addWidget(checkbox)
+                    dialog.setLayout(layout)
+            return self._export_png_dialog.exec_() == QDialog.Accepted
+        busy = BusyIndicator()
+        if isinstance(filename, QStringList):
+            filename = filename[0]
+        filename = str(filename)
+        # get image dimensions
+        nx, ny = self.image.imageDims()
+        # export either max resolution possible or default to 4K. If image is small then no scaling occurs.
+        if not self._exportMaxRes:
+            # get free memory. Note: Linux only!
+            import os
+            total_memory, used_memory, free_memory = map(int, os.popen('free -t -m').readlines()[-1].split()[1:])
+            # use 90% of free memory available
+            free_memory = free_memory * 0.9
+            # use an approximation to find the max image size that can be generated
+            if nx >= ny and nx > free_memory:
+                scale_factor = round(free_memory / nx, 1)
+            elif ny > nx and ny > free_memory:
+                scale_factor = round(free_memory / ny, 1)
+            else:
+                scale_factor = 1
+        else:
+            # default to 4K
+            if nx > 4000:
+                scale_factor = 4000 / nx
+            elif ny > nx and ny > 4000:
+                scale_factor = 4000 / ny
+            else:
+                scale_factor = 1
+
+        # make QPixmap
+        nx = nx * scale_factor
+        ny = ny * scale_factor
+        (l0, l1), (m0, m1) = self.image.getExtents()
+        pixmap = QPixmap(nx, ny)
+        painter = QPainter(pixmap)
+        # use QwtPlot implementation of draw canvas, since we want to avoid caching
+        xmap = QwtScaleMap()
+        xmap.setPaintInterval(0, nx)
+        xmap.setScaleInterval(l1, l0)
+        ymap = QwtScaleMap()
+        ymap.setPaintInterval(ny, 0)
+        ymap.setScaleInterval(m0, m1)
+        # call painter with clear cache option for consistent file size output.
+        self.image.draw(painter, xmap, ymap, pixmap.rect(), use_cache=False)
+        painter.end()
+        # save to file
+        try:
+            pixmap.save(filename, "PNG")
+            # clean up export items
+            pixmap.detach()
+            del xmap
+            del ymap
+            del pixmap
+            del painter
+        except Exception as exc:
+            self._imgman.signalShowErrorMessage[str, int].emit("Error writing %s: %s" % (filename, str(exc)), 3000)
+            busy.reset_cursor()
+        else:
+            busy.reset_cursor()
+            self._imgman.signalShowMessage[str, int].emit("Exported image to file %s" % filename, 3000)
+
+    def _toggleDisplayRangeLock(self):
+        self.renderControl().lockDisplayRange(not self.renderControl().isDisplayRangeLocked())
+
+    def _setDisplayRangeLock(self, locked):
+        self._wlock.setIcon(pixmaps.locked.icon() if locked else pixmaps.unlocked.icon())
+
+    def _updateFullRangeIcon(self):
+        if self._rc.isSubsetDisplayRange():
+            self._wfullrange.setIcon(pixmaps.zoom_range.icon())
+            self._wfullrange.setToolTip(
+                """<P>The current intensity range is the full range. Hold this button down briefly for additional options.</P>""")
+        else:
+            self._wfullrange.setIcon(pixmaps.full_range.icon())
+            self._wfullrange.setToolTip(
+                """<P>Click to reset to a full intensity range. Hold the button down briefly for additional options.</P>""")
--- tigger-1.6.0.orig/TigGUI/Images/FITSHeaders.py
+++ tigger-1.6.0/TigGUI/Images/FITSHeaders.py
@@ -1,21 +1,21 @@
-"""Defines various useful functions and constants for parsing FITS headers"""
-
-# Table of Stokes parameters corresponding to Stokes axis indices
-# Taken from Table 7, Greisen, E. W., and Calabretta, M. R., Astronomy & Astrophysics, 395, 1061-1075, 2002
-# (http://www.aanda.org/index.php?option=article&access=bibcode&bibcode=2002A%2526A...395.1061GFUL)
-# So StokesNames[1] == "I", StokesNames[-1] == "RR", StokesNames[-8] == "YX", etc.
-StokesNames = ["", "I", "Q", "U", "V", "YX", "XY", "YY", "XX", "LR", "RL", "LL", "RR"]
-# complex axis convention
-ComplexNames = ["", "real", "imag", "weight"]
-
-
-def isAxisTypeX(ctype):
-    """Checks if given CTYPE corresponds to the X axis"""
-    return any([ctype.startswith(prefix) for prefix in ("RA", "GLON", "ELON", "HLON", "SLON")]) or \
-           ctype in ("L", "X", "LL", "U", "UU")
-
-
-def isAxisTypeY(ctype):
-    """Checks if given CTYPE corresponds to the Y axis"""
-    return any([ctype.startswith(prefix) for prefix in ("DEC", "GLAT", "ELAT", "HLAT", "SLAT")]) or \
-           ctype in ("M", "Y", "MM", "V", "VV")
+"""Defines various useful functions and constants for parsing FITS headers"""
+
+# Table of Stokes parameters corresponding to Stokes axis indices
+# Taken from Table 7, Greisen, E. W., and Calabretta, M. R., Astronomy & Astrophysics, 395, 1061-1075, 2002
+# (http://www.aanda.org/index.php?option=article&access=bibcode&bibcode=2002A%2526A...395.1061GFUL)
+# So StokesNames[1] == "I", StokesNames[-1] == "RR", StokesNames[-8] == "YX", etc.
+StokesNames = ["", "I", "Q", "U", "V", "YX", "XY", "YY", "XX", "LR", "RL", "LL", "RR"]
+# complex axis convention
+ComplexNames = ["", "real", "imag", "weight"]
+
+
+def isAxisTypeX(ctype):
+    """Checks if given CTYPE corresponds to the X axis"""
+    return any([ctype.startswith(prefix) for prefix in ("RA", "GLON", "ELON", "HLON", "SLON")]) or \
+           ctype in ("L", "X", "LL", "U", "UU")
+
+
+def isAxisTypeY(ctype):
+    """Checks if given CTYPE corresponds to the Y axis"""
+    return any([ctype.startswith(prefix) for prefix in ("DEC", "GLAT", "ELAT", "HLAT", "SLAT")]) or \
+           ctype in ("M", "Y", "MM", "V", "VV")
--- tigger-1.6.0.orig/TigGUI/Images/Manager.py
+++ tigger-1.6.0/TigGUI/Images/Manager.py
@@ -1,581 +1,581 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import os.path
-import sys
-import time
-import traceback
-
-import numpy
-from PyQt5.Qt import (QWidget, QFileDialog, QVBoxLayout, QApplication, QMenu, QClipboard, QInputDialog, QActionGroup)
-from PyQt5.QtCore import pyqtSignal
-from PyQt5.QtCore import Qt
-from PyQt5.QtWidgets import QDockWidget
-from astropy.io import fits as pyfits
-
-from TigGUI.Images import FITS_ExtensionList
-from TigGUI.Images import SkyImage
-from TigGUI.Images.SkyImage import FITSImagePlotItem
-from TigGUI.Images.Controller import ImageController, dprint
-from TigGUI.kitties.utils import PersistentCurrier
-from TigGUI.kitties.widgets import BusyIndicator
-
-QStringList = list
-
-
-class ImageManager(QWidget):
-    """An ImageManager manages a stack of images (and associated ImageControllers)"""
-    showErrorMessage = pyqtSignal(str, int)
-    imagesChanged = pyqtSignal()
-    imageRaised = pyqtSignal(FITSImagePlotItem)
-    imagePlotRaised = pyqtSignal()
-
-    def __init__(self, *args):
-        QWidget.__init__(self, *args)
-        self.mainwin = None
-        # init layout
-        self._lo = QVBoxLayout(self)
-        self._lo.setContentsMargins(0, 0, 0, 0)
-        self._lo.setSpacing(0)
-        # init internal state
-        self._currier = PersistentCurrier()
-        self._z0 = 0  # z-depth of first image, the rest count down from it
-        self._updating_imap = False
-        self._locked_display_range = False
-        self._imagecons = []
-        self._imagecon_loadorder = []
-        self._center_image = None
-        self._plot = None
-        self._border_pen = None
-        self._drawing_key = None
-        self._load_image_dialog = None
-        self._label_color = None
-        self._label_bg_brush = None
-        self._model_imagecons = set()
-        # init menu and standard actions
-        self._menu = QMenu("&Image", self)
-        qag = QActionGroup(self)
-        # exclusive controls for plotting topmost or all images
-        self._qa_plot_top = qag.addAction("Display topmost image only")
-        self._qa_plot_all = qag.addAction("Display all images")
-        self._qa_plot_top.setCheckable(True)
-        self._qa_plot_all.setCheckable(True)
-        self._qa_plot_top.setChecked(True)
-        self._qa_plot_all.toggled[bool].connect(self._displayAllImages)
-        self._closing = False
-
-        self._qa_load_clipboard = None
-        self._clipboard_mode = QClipboard.Clipboard
-        QApplication.clipboard().changed[QClipboard.Mode].connect(self._checkClipboardPath)
-        # populate the menu
-        self._repopulateMenu()
-        self.signalShowMessage = None
-        self.signalShowErrorMessage = None
-
-    def close(self):
-        dprint(1, "closing Manager")
-        self._closing = True
-        for ic in self._imagecons:
-            ic.close()
-
-    def setShowMessageSignal(self, _signal):
-        self.signalShowMessage = _signal
-
-    def setShowErrorMessageSignal(self, _signal):
-        self.signalShowErrorMessage = _signal
-
-    def setMainWindow(self, _mainwin):
-        self.mainwin = _mainwin
-
-    def loadImage(self, filename=None, duplicate=True, to_top=True, model=None):
-        """Loads image. Returns ImageControlBar object.
-        If image is already loaded: returns old ICB if duplicate=False (raises to top if to_top=True),
-        or else makes a new control bar.
-        If model is set to a source name, marks the image as associated with a model source. These can be unloaded en masse by calling
-        unloadModelImages().
-        """
-        if filename is None:
-            if not self._load_image_dialog:
-                dialog = self._load_image_dialog = QFileDialog(self, "Load FITS image", ".",
-                                                               "FITS images (%s);;All files (*)" % (" ".join(
-                                                                   ["*" + ext for ext in FITS_ExtensionList])))
-                dialog.setFileMode(QFileDialog.ExistingFile)
-                dialog.setModal(True)
-                dialog.filesSelected['QStringList'].connect(self.loadImage)
-            self._load_image_dialog.exec_()
-            return None
-        if isinstance(filename, QStringList):
-            filename = filename[0]
-        filename = str(filename)
-        # report error if image does not exist
-        if not os.path.exists(filename):
-            self.signalShowErrorMessage.emit("""FITS image %s does not exist.""" % filename)
-            return None
-        # see if image is already loaded
-        if not duplicate:
-            for ic in self._imagecons:
-                if ic.getFilename() and os.path.samefile(filename, ic.getFilename()):
-                    if to_top:
-                        self.raiseImage(ic)
-                    if model:
-                        self._model_imagecons.add(id(ic))
-                    return ic
-        # load the FITS image
-        busy = BusyIndicator()
-        dprint(2, "reading FITS image", filename)
-        self.signalShowMessage.emit("""Reading FITS image %s""" % filename, 3000)
-        QApplication.flush()
-        try:
-            image = SkyImage.FITSImagePlotItem(str(filename))
-        except KeyboardInterrupt:
-            raise
-        except:
-            busy.reset_cursor()
-            traceback.print_exc()
-            print("""Error loading FITS image %s: %s. This may be due to a bug in Tigger; if the FITS file loads fine in another viewer,
-          please send the FITS file, along with a copy of any error messages from the text console, to osmirnov@gmail.com.""" % (
-                filename, str(sys.exc_info()[1])))
-            self.signalShowErrorMessage.emit("""<P>Error loading FITS image %s: %s. This may be due to a bug in Tigger; if the FITS file loads fine in another viewer,
-          please send the FITS file, along with a copy of any error messages from the text console, to osmirnov@gmail.com.</P>""" % (
-                filename, str(sys.exc_info()[1])))
-            return None
-        # create control bar, add to widget stack
-        ic = self._createImageController(image, "model source '%s'" % model if model else filename, model or image.name,
-                                         model=model)
-        print("""Loaded FITS image %s""" % filename)
-        self.signalShowMessage.emit("""Loaded FITS image %s""" % filename, 3000)
-        busy.reset_cursor()
-        return ic
-
-    def setZ0(self, z0):
-        self._z0 = z0
-        if self._imagecons:
-            self.raiseImage(self._imagecons[0])
-
-    def enableImageBorders(self, border_pen, label_color, label_bg_brush):
-        self._border_pen, self._label_color, self._label_bg_brush = \
-            border_pen, label_color, label_bg_brush
-
-    def lockAllDisplayRanges(self, rc0, curry=False):
-        """Locks all display ranges, and sets the intensity from rc0"""
-        if not self._updating_imap:
-            self._updating_imap = True
-            rc0.lockDisplayRange()
-            try:
-                for ic in self._imagecons:
-                    rc1 = ic.renderControl()
-                    if rc1 is not rc0:
-                        rc1.setDisplayRange(*rc0.displayRange())
-                        rc1.lockDisplayRange()
-            finally:
-                self._updating_imap = False
-
-    def unlockAllDisplayRanges(self):
-        """Unlocks all display range."""
-        for ic in self._imagecons:
-            ic.renderControl().lockDisplayRange(False)
-
-    def _lockDisplayRange(self, rc0, lock):
-        """Locks or unlocks the display range of a specific controller."""
-        if lock and not self._updating_imap:
-            self._updating_imap = True
-            try:
-                # if something is already locked, copy display range from it
-                for ic in self._imagecons:
-                    rc1 = ic.renderControl()
-                    if rc1 is not rc0 and rc1.isDisplayRangeLocked():
-                        rc0.setDisplayRange(*rc1.displayRange())
-            finally:
-                self._updating_imap = False
-
-    def _updateDisplayRange(self, rc, dmin, dmax):
-        """This is called whenever one of the images (or rather, its associated RenderControl object) changes its display range."""
-        if not rc.isDisplayRangeLocked():
-            return
-        # If the display range is locked, propagate it to all images.
-        # but don't do it if we're already propagating (otherwise we may get called in an infinte loop)
-        if not self._updating_imap:
-            self._updating_imap = True
-            try:
-                for ic in self._imagecons:
-                    rc1 = ic.renderControl()
-                    if rc1 is not rc and rc1.isDisplayRangeLocked():
-                        rc1.setDisplayRange(dmin, dmax)
-            finally:
-                self._updating_imap = False
-
-    def getImages(self):
-        return [ic.image for ic in self._imagecons]
-
-    def getTopImage(self):
-        return (self._imagecons or None) and self._imagecons[0].image
-
-    def cycleImages(self):
-        index = self._imagecon_loadorder.index(self._imagecons[0])
-        index = (index + 1) % len(self._imagecon_loadorder)
-        self.raiseImage(self._imagecon_loadorder[index])
-
-    def blinkImages(self):
-        if len(self._imagecons) > 1:
-            self.raiseImage(self._imagecons[1])
-
-    def incrementSlice(self, extra_axis, incr):
-        if self._imagecons:
-            rc = self._imagecons[0].renderControl()
-            sliced_axes = rc.slicedAxes()
-            if extra_axis < len(sliced_axes):
-                rc.incrementSlice(sliced_axes[extra_axis][0], incr)
-
-    def setLMRectSubset(self, rect):
-        if self._imagecons:
-            self._imagecons[0].setLMRectSubset(rect)
-
-    def getLMRectStats(self, rect):
-        if self._imagecons:
-            return self._imagecons[0].renderControl().getLMRectStats(rect)
-
-    def unloadModelImages(self):
-        """Unloads images associated with model (i.e. loaded with the model=True flag)"""
-        for ic in [ic for ic in self._imagecons if id(ic) in self._model_imagecons]:
-            self.unloadImage(ic)
-
-    def unloadImage(self, imagecon, foo=None):
-        """Unloads the given imagecon object."""
-        if imagecon not in self._imagecons:
-            return
-        # recenter if needed
-        self._imagecons.remove(imagecon)
-        self._imagecon_loadorder.remove(imagecon)
-        self._model_imagecons.discard(id(imagecon))
-        # remove dockable widget
-        imagecon.removeDockWidget()
-        # reparent widget and release it
-        imagecon.setParent(None)
-        imagecon.close()
-        # recenter image, if unloaded the center image
-        if self._center_image is imagecon.image:
-            self.centerImage(self._imagecons[0] if self._imagecons else None, emit=False)
-        # emit signal
-        self._repopulateMenu()
-        self.imagesChanged.emit()
-        if self._imagecons:
-            self.raiseImage(self._imagecons[0])
-        else:
-            # remove all dock widgets
-            widget_list = self.mainwin.findChildren(QDockWidget)
-            for widget in widget_list:
-                self.mainwin.removeDockWidget(widget)
-                widget.bind_widget.setVisible(False)
-                widget.close()
-            if self.mainwin._current_layout is not self.mainwin.LayoutImageModel:
-                self.mainwin.skyplot.setVisible(False)
-            # reset size to be minus dockables - workaround for bug #164
-            # self.mainwin.setMaximumWidth(self.mainwin.width() - 700)
-
-    def getCenterImage(self):
-        return self._center_image
-
-    def centerImage(self, imagecon, emit=True):
-        self._center_image = imagecon and imagecon.image
-        for ic in self._imagecons:
-            ic.setPlotProjection(self._center_image.projection)
-        if emit or emit is None:  # added this check as curry() call to this method via signal can be emit=None.
-            self.imagesChanged.emit()
-
-    def raiseImage(self, imagecon, foo=None):
-        busy = None
-        # reshuffle image stack, if more than one image image
-        if len(self._imagecons) > 1:
-            busy = BusyIndicator()
-            # reshuffle image stack
-            self._imagecons.remove(imagecon)
-            self._imagecons.insert(0, imagecon)
-            # notify imagecons
-            for i, ic in enumerate(self._imagecons):
-                label = "%d" % (i + 1) if i else "<B>1</B>"
-                ic.setZ(self._z0 - i * 10, top=not i, depthlabel=label, can_raise=True)
-            # adjust visibility
-            for j, ic in enumerate(self._imagecons):
-                ic.setImageVisible(not j or bool(self._qa_plot_all.isChecked()))
-            # issue replot signal fixed with assumption that this signal is now correct according to the old version
-            # self.imageRaised.emit(self._imagecons[0])  # This was the old signal
-            self.imagePlotRaised.emit()
-            self.fastReplot()
-        # else simply update labels
-        else:
-            self._imagecons[0].setZ(self._z0, top=True, depthlabel=None, can_raise=False)
-            self._imagecons[0].setImageVisible(True)
-        # update slice menus
-        img = imagecon.image
-        axes = imagecon.renderControl().slicedAxes()
-        for i, (_next, _prev) in enumerate(self._qa_slices):
-            _next.setVisible(False)
-            _prev.setVisible(False)
-            if i < len(axes):
-                iaxis, name, labels = axes[i]
-                _next.setVisible(True)
-                _prev.setVisible(True)
-                _next.setText("Show next slice along %s axis" % name)
-                _prev.setText("Show previous slice along %s axis" % name)
-        # emit signals
-        self.imageRaised.emit(img)
-        # if dockable control dialog is docked and tabbed then raise to front
-        if imagecon._dockable_colour_ctrl is not None:
-            if imagecon._dockable_colour_ctrl.isVisible():
-                if not imagecon._dockable_colour_ctrl.isFloating():
-                    list_of_tabbed_widgets = self.mainwin.tabifiedDockWidgets(imagecon._dockable_colour_ctrl)
-                    if list_of_tabbed_widgets:
-                        imagecon._dockable_colour_ctrl.raise_()
-        if busy is not None:
-            busy.reset_cursor()
-
-    def resetDrawKey(self):
-        """Makes and sets the current plot's drawing key"""
-        if self._plot:
-            key = []
-            for ic in self._imagecons:
-                key.append(id(ic))
-                key += ic.currentSlice()
-                self._plot.setDrawingKey(tuple(key))
-
-    def fastReplot(self, *dum):
-        """Fast replot -- called when flipping images or slices. Uses the plot cache, if possible."""
-        if self._plot:
-            self.resetDrawKey()
-            dprint(2, "calling replot", time.time() % 60)
-            self._plot.replot()
-            dprint(2, "replot done", time.time() % 60)
-
-    def replot(self, *dum):
-        """Proper replot -- called when an image needs to be properly redrawn. Cleares the plot's drawing cache."""
-        if self._plot:
-            self._plot.clearDrawCache()
-            self.resetDrawKey()
-            self._plot.replot()
-
-    def attachImagesToPlot(self, plot):
-        self._plot = plot
-        self.resetDrawKey()
-        for ic in self._imagecons:
-            ic.attachToPlot(plot)
-
-    def getMenu(self):
-        return self._menu
-
-    def _displayAllImages(self, enabled):
-        busy = BusyIndicator()
-        if enabled:
-            for ic in self._imagecons:
-                ic.setImageVisible(True)
-        else:
-            self._imagecons[0].setImageVisible(True)
-            for ic in self._imagecons[1:]:
-                ic.setImageVisible(False)
-        self.replot()
-        busy.reset_cursor()
-
-    def _checkClipboardPath(self, mode=QClipboard.Clipboard):
-        if self._qa_load_clipboard:
-            self._clipboard_mode = mode
-            try:
-                path = str(QApplication.clipboard().text(mode))
-            except:
-                path = None
-            self._qa_load_clipboard.setEnabled(bool(path and os.path.isfile(path)))
-
-    def _loadClipboardPath(self):
-        try:
-            path = QApplication.clipboard().text(self._clipboard_mode)
-        except:
-            return
-        self.loadImage(path)
-
-    def _repopulateMenu(self):
-        self._menu.clear()
-        self._menu.addAction("&Load image...", self.loadImage, Qt.CTRL + Qt.Key_L)
-        self._menu.addAction("&Compute image...", self.computeImage, Qt.CTRL + Qt.Key_M)
-        self._qa_load_clipboard = self._menu.addAction("Load from clipboard &path", self._loadClipboardPath,
-                                                       Qt.CTRL + Qt.Key_P)
-        self._checkClipboardPath()
-        if self._imagecons:
-            self._menu.addSeparator()
-            # add controls to cycle images and planes
-            for i, imgcon in enumerate(self._imagecons[::-1]):
-                self._menu.addMenu(imgcon.getMenu())
-            self._menu.addSeparator()
-            if len(self._imagecons) > 1:
-                self._menu.addAction("Cycle images", self.cycleImages, Qt.Key_F5)
-                self._menu.addAction("Blink images", self.blinkImages, Qt.Key_F6)
-            self._qa_slices = (
-                (self._menu.addAction("Next slice along axis 1", self._currier.curry(self.incrementSlice, 0, 1),
-                                      Qt.Key_F7),
-                 self._menu.addAction("Previous slice along axis 1", self._currier.curry(self.incrementSlice, 0, -1),
-                                      Qt.SHIFT + Qt.Key_F7)),
-                (self._menu.addAction("Next slice along axis 2", self._currier.curry(self.incrementSlice, 1, 1),
-                                      Qt.Key_F8),
-                 self._menu.addAction("Previous slice along axis 2", self._currier.curry(self.incrementSlice, 1, -1),
-                                      Qt.SHIFT + Qt.Key_F8)))
-            self._menu.addSeparator()
-            self._menu.addAction(self._qa_plot_top)
-            self._menu.addAction(self._qa_plot_all)
-
-    def computeImage(self, expression=None):
-        """Computes image from expression (if expression is None, pops up dialog)"""
-        if expression is None:
-            (expression, ok) = QInputDialog.getText(self, "Compute image",
-                                                    """Enter an image expression to compute.
-                                              Any valid numpy expression is supported, and
-                                              all functions from the numpy module are available (including sub-modules such as fft).
-                                              Use 'a', 'b', 'c' to refer to images.
-                                              Examples:  "(a+b)/2", "cos(a)+sin(b)", "a-a.mean()", "fft.fft2(a)", etc.""")
-            #      (expression,ok) = QInputDialog.getText(self,"Compute image","""<P>Enter an expression to compute.
-            #        Use 'a', 'b', etc. to refer to loaded images. Any valid numpy expression is supported, and all the
-            #       functions from the numpy module are available. Examples of valid expressions include "(a+b)/2",
-            #       "cos(a)+sin(b)", "a-a.mean()", etc.
-            #        </P>
-            #      """)
-            expression = str(expression)
-            if not ok or not expression:
-                return
-        # try to parse expression
-        arglist = [(chr(ord('a') + ic.getNumber()), ic.image) for ic in self._imagecons]
-        try:
-            exprfunc = eval("lambda " + (",".join([x[0] for x in arglist])) + ":" + expression,
-                            numpy.__dict__, {})
-        except Exception as exc:
-            self.signalShowErrorMessage.emit("""Error parsing expression "%s": %s.""" % (expression, str(exc)))
-            return None
-        # try to evaluate expression
-        self.signalShowMessage.emit("Computing expression \"%s\"" % expression, 10000)
-        busy = BusyIndicator()
-        QApplication.flush()
-
-        # trim trivial trailing dimensions. This avoids the problem of when an NxMx1 and an NxMx1x1 arrays are added,
-        # the result is promoted to NxMxMx1 following the numpy rules.
-        def trimshape(shape):
-            out = shape
-            while out and out[-1] == 1:
-                out = out[:-1]
-            return out
-
-        def trimarray(array):
-            return array.reshape(trimshape(array.shape))
-
-        try:
-            result = exprfunc(*[trimarray(x[1].data()) for x in arglist])
-        except Exception as exc:
-            busy.reset_cursor()
-            traceback.print_exc()
-            self.signalShowErrorMessage.emit("""Error evaluating "%s": %s.""" % (expression, str(exc)))
-            return None
-        busy.reset_cursor()
-        if type(result) != numpy.ma.masked_array and type(result) != numpy.ndarray:
-            self.signalShowErrorMessage.emit(
-                """Result of "%s" is of invalid type "%s" (array expected).""" % (expression, type(result).__name__))
-            return None
-        # convert coomplex results to real
-        if numpy.iscomplexobj(result):
-            self.signalShowErrorMessage.emit("""Result of "%s" is complex. Complex images are currently
-      not fully supported, so we'll implicitly use the absolute value instead.""" % (expression))
-            expression = "abs(%s)" % expression
-            result = abs(result)
-        # determine which image this expression can be associated with
-        res_shape = trimshape(result.shape)
-        arglist = [x for x in arglist if hasattr(x[1], 'fits_header') and trimshape(x[1].data().shape) == res_shape]
-        if not arglist:
-            self.signalShowErrorMessage.emit("""Result of "%s" has shape %s, which does not match any loaded FITS image.""" % (
-                expression, "x".join(map(str, result.shape))))
-            return None
-        # look for an image in the arglist with the same projection, and with a valid dirname
-        # (for the where-to-save hint)
-        template = arglist[0][1]
-        # if all images in arglist have the same projection, then it doesn't matter what we use
-        # else ask
-        if len([x for x in arglist[1:] if x[1].projection == template.projection]) != len(arglist) - 1:
-            options = [x[0] for x in arglist]
-            (which, ok) = QInputDialog.getItem(self, "Compute image",
-                                               "Coordinate system to use for the result of \"%s\":" % expression,
-                                               options, 0, False)
-            if not ok:
-                return None
-            try:
-                template = arglist[options.index(which)][1]
-            except:
-                pass
-        # create a FITS image
-        busy = BusyIndicator()
-        dprint(2, "creating FITS image", expression)
-        self.signalShowMessage.emit("""Creating image for %s""" % expression, 3000)
-        QApplication.flush()
-        try:
-            hdu = pyfits.PrimaryHDU(result.transpose(), template.fits_header)
-            skyimage = SkyImage.FITSImagePlotItem(name=expression, filename=None, hdu=hdu)
-        except:
-            busy.reset_cursor()
-            traceback.print_exc()
-            self.signalShowErrorMessage.emit("""Error creating FITS image %s: %s""" % (expression, str(sys.exc_info()[1])))
-            return None
-        # get directory name for save-to hint
-        dirname = getattr(template, 'filename', None)
-        if not dirname:
-            dirnames = [getattr(img, 'filename') for x, img in arglist if hasattr(img, 'filename')]
-            dirname = dirnames[0] if dirnames else None
-        # create control bar, add to widget stack
-        self._createImageController(skyimage, expression, expression,
-                                    save=((dirname and os.path.dirname(dirname)) or "."))
-        self.signalShowMessage.emit("Created new image for %s" % expression, 3000)
-        dprint(2, "image created")
-        busy.reset_cursor()
-
-    def _createImageController(self, image, name, basename, model=False, save=False):
-        dprint(2, "creating ImageController for", name)
-        ic = ImageController(image, self, self, name, save=save)
-        # attach appropriate signals
-        ic.imageSignalRepaint.connect(self.replot)
-        ic.imageSignalSlice.connect(self.fastReplot)
-        image.connectPlotRiased(self.imagePlotRaised)
-        ic.imageSignalRaise.connect(self._currier.curry(self.raiseImage, ic))
-        ic.imageSignalUnload.connect(self._currier.curry(self.unloadImage, ic))
-        ic.imageSignalCenter.connect(self._currier.curry(self.centerImage, ic))
-        ic.setNumber(len(self._imagecons))
-        self._imagecons.insert(0, ic)
-        self._imagecon_loadorder.append(ic)
-        if model:
-            self._model_imagecons.add(id(ic))
-        self._lo.addWidget(ic)
-        if self._border_pen:
-            ic.addPlotBorder(self._border_pen, basename, self._label_color, self._label_bg_brush)
-        ic.renderControl().displayRangeChanged.connect(
-            self._currier.curry(self._updateDisplayRange, ic.renderControl()))
-        ic.renderControl().displayRangeLocked.connect(self._currier.curry(self._lockDisplayRange, ic.renderControl()))
-        self._plot = None
-        # add to menus
-        dprint(2, "repopulating menus")
-        self._repopulateMenu()
-        # center and raise to top of stack
-        self.raiseImage(ic)
-        if not self._center_image:
-            self.centerImage(ic, emit=False)
-        else:
-            ic.setPlotProjection(self._center_image.projection)
-        # signal
-        self.imagesChanged.emit()
-        return ic
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import os.path
+import sys
+import time
+import traceback
+
+import numpy
+from PyQt5.Qt import (QWidget, QFileDialog, QVBoxLayout, QApplication, QMenu, QClipboard, QInputDialog, QActionGroup)
+from PyQt5.QtCore import pyqtSignal
+from PyQt5.QtCore import Qt
+from PyQt5.QtWidgets import QDockWidget
+from astropy.io import fits as pyfits
+
+from TigGUI.Images import FITS_ExtensionList
+from TigGUI.Images import SkyImage
+from TigGUI.Images.SkyImage import FITSImagePlotItem
+from TigGUI.Images.Controller import ImageController, dprint
+from TigGUI.kitties.utils import PersistentCurrier
+from TigGUI.kitties.widgets import BusyIndicator
+
+QStringList = list
+
+
+class ImageManager(QWidget):
+    """An ImageManager manages a stack of images (and associated ImageControllers)"""
+    showErrorMessage = pyqtSignal(str, int)
+    imagesChanged = pyqtSignal()
+    imageRaised = pyqtSignal(FITSImagePlotItem)
+    imagePlotRaised = pyqtSignal()
+
+    def __init__(self, *args):
+        QWidget.__init__(self, *args)
+        self.mainwin = None
+        # init layout
+        self._lo = QVBoxLayout(self)
+        self._lo.setContentsMargins(0, 0, 0, 0)
+        self._lo.setSpacing(0)
+        # init internal state
+        self._currier = PersistentCurrier()
+        self._z0 = 0  # z-depth of first image, the rest count down from it
+        self._updating_imap = False
+        self._locked_display_range = False
+        self._imagecons = []
+        self._imagecon_loadorder = []
+        self._center_image = None
+        self._plot = None
+        self._border_pen = None
+        self._drawing_key = None
+        self._load_image_dialog = None
+        self._label_color = None
+        self._label_bg_brush = None
+        self._model_imagecons = set()
+        # init menu and standard actions
+        self._menu = QMenu("&Image", self)
+        qag = QActionGroup(self)
+        # exclusive controls for plotting topmost or all images
+        self._qa_plot_top = qag.addAction("Display topmost image only")
+        self._qa_plot_all = qag.addAction("Display all images")
+        self._qa_plot_top.setCheckable(True)
+        self._qa_plot_all.setCheckable(True)
+        self._qa_plot_top.setChecked(True)
+        self._qa_plot_all.toggled[bool].connect(self._displayAllImages)
+        self._closing = False
+
+        self._qa_load_clipboard = None
+        self._clipboard_mode = QClipboard.Clipboard
+        QApplication.clipboard().changed[QClipboard.Mode].connect(self._checkClipboardPath)
+        # populate the menu
+        self._repopulateMenu()
+        self.signalShowMessage = None
+        self.signalShowErrorMessage = None
+
+    def close(self):
+        dprint(1, "closing Manager")
+        self._closing = True
+        for ic in self._imagecons:
+            ic.close()
+
+    def setShowMessageSignal(self, _signal):
+        self.signalShowMessage = _signal
+
+    def setShowErrorMessageSignal(self, _signal):
+        self.signalShowErrorMessage = _signal
+
+    def setMainWindow(self, _mainwin):
+        self.mainwin = _mainwin
+
+    def loadImage(self, filename=None, duplicate=True, to_top=True, model=None):
+        """Loads image. Returns ImageControlBar object.
+        If image is already loaded: returns old ICB if duplicate=False (raises to top if to_top=True),
+        or else makes a new control bar.
+        If model is set to a source name, marks the image as associated with a model source. These can be unloaded en masse by calling
+        unloadModelImages().
+        """
+        if filename is None:
+            if not self._load_image_dialog:
+                dialog = self._load_image_dialog = QFileDialog(self, "Load FITS image", ".",
+                                                               "FITS images (%s);;All files (*)" % (" ".join(
+                                                                   ["*" + ext for ext in FITS_ExtensionList])))
+                dialog.setFileMode(QFileDialog.ExistingFile)
+                dialog.setModal(True)
+                dialog.filesSelected['QStringList'].connect(self.loadImage)
+            self._load_image_dialog.exec_()
+            return None
+        if isinstance(filename, QStringList):
+            filename = filename[0]
+        filename = str(filename)
+        # report error if image does not exist
+        if not os.path.exists(filename):
+            self.signalShowErrorMessage.emit("""FITS image %s does not exist.""" % filename)
+            return None
+        # see if image is already loaded
+        if not duplicate:
+            for ic in self._imagecons:
+                if ic.getFilename() and os.path.samefile(filename, ic.getFilename()):
+                    if to_top:
+                        self.raiseImage(ic)
+                    if model:
+                        self._model_imagecons.add(id(ic))
+                    return ic
+        # load the FITS image
+        busy = BusyIndicator()
+        dprint(2, "reading FITS image", filename)
+        self.signalShowMessage.emit("""Reading FITS image %s""" % filename, 3000)
+        QApplication.flush()
+        try:
+            image = SkyImage.FITSImagePlotItem(str(filename))
+        except KeyboardInterrupt:
+            raise
+        except:
+            busy.reset_cursor()
+            traceback.print_exc()
+            print("""Error loading FITS image %s: %s. This may be due to a bug in Tigger; if the FITS file loads fine in another viewer,
+          please send the FITS file, along with a copy of any error messages from the text console, to osmirnov@gmail.com.""" % (
+                filename, str(sys.exc_info()[1])))
+            self.signalShowErrorMessage.emit("""<P>Error loading FITS image %s: %s. This may be due to a bug in Tigger; if the FITS file loads fine in another viewer,
+          please send the FITS file, along with a copy of any error messages from the text console, to osmirnov@gmail.com.</P>""" % (
+                filename, str(sys.exc_info()[1])))
+            return None
+        # create control bar, add to widget stack
+        ic = self._createImageController(image, "model source '%s'" % model if model else filename, model or image.name,
+                                         model=model)
+        print("""Loaded FITS image %s""" % filename)
+        self.signalShowMessage.emit("""Loaded FITS image %s""" % filename, 3000)
+        busy.reset_cursor()
+        return ic
+
+    def setZ0(self, z0):
+        self._z0 = z0
+        if self._imagecons:
+            self.raiseImage(self._imagecons[0])
+
+    def enableImageBorders(self, border_pen, label_color, label_bg_brush):
+        self._border_pen, self._label_color, self._label_bg_brush = \
+            border_pen, label_color, label_bg_brush
+
+    def lockAllDisplayRanges(self, rc0, curry=False):
+        """Locks all display ranges, and sets the intensity from rc0"""
+        if not self._updating_imap:
+            self._updating_imap = True
+            rc0.lockDisplayRange()
+            try:
+                for ic in self._imagecons:
+                    rc1 = ic.renderControl()
+                    if rc1 is not rc0:
+                        rc1.setDisplayRange(*rc0.displayRange())
+                        rc1.lockDisplayRange()
+            finally:
+                self._updating_imap = False
+
+    def unlockAllDisplayRanges(self):
+        """Unlocks all display range."""
+        for ic in self._imagecons:
+            ic.renderControl().lockDisplayRange(False)
+
+    def _lockDisplayRange(self, rc0, lock):
+        """Locks or unlocks the display range of a specific controller."""
+        if lock and not self._updating_imap:
+            self._updating_imap = True
+            try:
+                # if something is already locked, copy display range from it
+                for ic in self._imagecons:
+                    rc1 = ic.renderControl()
+                    if rc1 is not rc0 and rc1.isDisplayRangeLocked():
+                        rc0.setDisplayRange(*rc1.displayRange())
+            finally:
+                self._updating_imap = False
+
+    def _updateDisplayRange(self, rc, dmin, dmax):
+        """This is called whenever one of the images (or rather, its associated RenderControl object) changes its display range."""
+        if not rc.isDisplayRangeLocked():
+            return
+        # If the display range is locked, propagate it to all images.
+        # but don't do it if we're already propagating (otherwise we may get called in an infinte loop)
+        if not self._updating_imap:
+            self._updating_imap = True
+            try:
+                for ic in self._imagecons:
+                    rc1 = ic.renderControl()
+                    if rc1 is not rc and rc1.isDisplayRangeLocked():
+                        rc1.setDisplayRange(dmin, dmax)
+            finally:
+                self._updating_imap = False
+
+    def getImages(self):
+        return [ic.image for ic in self._imagecons]
+
+    def getTopImage(self):
+        return (self._imagecons or None) and self._imagecons[0].image
+
+    def cycleImages(self):
+        index = self._imagecon_loadorder.index(self._imagecons[0])
+        index = (index + 1) % len(self._imagecon_loadorder)
+        self.raiseImage(self._imagecon_loadorder[index])
+
+    def blinkImages(self):
+        if len(self._imagecons) > 1:
+            self.raiseImage(self._imagecons[1])
+
+    def incrementSlice(self, extra_axis, incr):
+        if self._imagecons:
+            rc = self._imagecons[0].renderControl()
+            sliced_axes = rc.slicedAxes()
+            if extra_axis < len(sliced_axes):
+                rc.incrementSlice(sliced_axes[extra_axis][0], incr)
+
+    def setLMRectSubset(self, rect):
+        if self._imagecons:
+            self._imagecons[0].setLMRectSubset(rect)
+
+    def getLMRectStats(self, rect):
+        if self._imagecons:
+            return self._imagecons[0].renderControl().getLMRectStats(rect)
+
+    def unloadModelImages(self):
+        """Unloads images associated with model (i.e. loaded with the model=True flag)"""
+        for ic in [ic for ic in self._imagecons if id(ic) in self._model_imagecons]:
+            self.unloadImage(ic)
+
+    def unloadImage(self, imagecon, foo=None):
+        """Unloads the given imagecon object."""
+        if imagecon not in self._imagecons:
+            return
+        # recenter if needed
+        self._imagecons.remove(imagecon)
+        self._imagecon_loadorder.remove(imagecon)
+        self._model_imagecons.discard(id(imagecon))
+        # remove dockable widget
+        imagecon.removeDockWidget()
+        # reparent widget and release it
+        imagecon.setParent(None)
+        imagecon.close()
+        # recenter image, if unloaded the center image
+        if self._center_image is imagecon.image:
+            self.centerImage(self._imagecons[0] if self._imagecons else None, emit=False)
+        # emit signal
+        self._repopulateMenu()
+        self.imagesChanged.emit()
+        if self._imagecons:
+            self.raiseImage(self._imagecons[0])
+        else:
+            # remove all dock widgets
+            widget_list = self.mainwin.findChildren(QDockWidget)
+            for widget in widget_list:
+                self.mainwin.removeDockWidget(widget)
+                widget.bind_widget.setVisible(False)
+                widget.close()
+            if self.mainwin._current_layout is not self.mainwin.LayoutImageModel:
+                self.mainwin.skyplot.setVisible(False)
+            # reset size to be minus dockables - workaround for bug #164
+            # self.mainwin.setMaximumWidth(self.mainwin.width() - 700)
+
+    def getCenterImage(self):
+        return self._center_image
+
+    def centerImage(self, imagecon, emit=True):
+        self._center_image = imagecon and imagecon.image
+        for ic in self._imagecons:
+            ic.setPlotProjection(self._center_image.projection)
+        if emit or emit is None:  # added this check as curry() call to this method via signal can be emit=None.
+            self.imagesChanged.emit()
+
+    def raiseImage(self, imagecon, foo=None):
+        busy = None
+        # reshuffle image stack, if more than one image image
+        if len(self._imagecons) > 1:
+            busy = BusyIndicator()
+            # reshuffle image stack
+            self._imagecons.remove(imagecon)
+            self._imagecons.insert(0, imagecon)
+            # notify imagecons
+            for i, ic in enumerate(self._imagecons):
+                label = "%d" % (i + 1) if i else "<B>1</B>"
+                ic.setZ(self._z0 - i * 10, top=not i, depthlabel=label, can_raise=True)
+            # adjust visibility
+            for j, ic in enumerate(self._imagecons):
+                ic.setImageVisible(not j or bool(self._qa_plot_all.isChecked()))
+            # issue replot signal fixed with assumption that this signal is now correct according to the old version
+            # self.imageRaised.emit(self._imagecons[0])  # This was the old signal
+            self.imagePlotRaised.emit()
+            self.fastReplot()
+        # else simply update labels
+        else:
+            self._imagecons[0].setZ(self._z0, top=True, depthlabel=None, can_raise=False)
+            self._imagecons[0].setImageVisible(True)
+        # update slice menus
+        img = imagecon.image
+        axes = imagecon.renderControl().slicedAxes()
+        for i, (_next, _prev) in enumerate(self._qa_slices):
+            _next.setVisible(False)
+            _prev.setVisible(False)
+            if i < len(axes):
+                iaxis, name, labels = axes[i]
+                _next.setVisible(True)
+                _prev.setVisible(True)
+                _next.setText("Show next slice along %s axis" % name)
+                _prev.setText("Show previous slice along %s axis" % name)
+        # emit signals
+        self.imageRaised.emit(img)
+        # if dockable control dialog is docked and tabbed then raise to front
+        if imagecon._dockable_colour_ctrl is not None:
+            if imagecon._dockable_colour_ctrl.isVisible():
+                if not imagecon._dockable_colour_ctrl.isFloating():
+                    list_of_tabbed_widgets = self.mainwin.tabifiedDockWidgets(imagecon._dockable_colour_ctrl)
+                    if list_of_tabbed_widgets:
+                        imagecon._dockable_colour_ctrl.raise_()
+        if busy is not None:
+            busy.reset_cursor()
+
+    def resetDrawKey(self):
+        """Makes and sets the current plot's drawing key"""
+        if self._plot:
+            key = []
+            for ic in self._imagecons:
+                key.append(id(ic))
+                key += ic.currentSlice()
+                self._plot.setDrawingKey(tuple(key))
+
+    def fastReplot(self, *dum):
+        """Fast replot -- called when flipping images or slices. Uses the plot cache, if possible."""
+        if self._plot:
+            self.resetDrawKey()
+            dprint(2, "calling replot", time.time() % 60)
+            self._plot.replot()
+            dprint(2, "replot done", time.time() % 60)
+
+    def replot(self, *dum):
+        """Proper replot -- called when an image needs to be properly redrawn. Cleares the plot's drawing cache."""
+        if self._plot:
+            self._plot.clearDrawCache()
+            self.resetDrawKey()
+            self._plot.replot()
+
+    def attachImagesToPlot(self, plot):
+        self._plot = plot
+        self.resetDrawKey()
+        for ic in self._imagecons:
+            ic.attachToPlot(plot)
+
+    def getMenu(self):
+        return self._menu
+
+    def _displayAllImages(self, enabled):
+        busy = BusyIndicator()
+        if enabled:
+            for ic in self._imagecons:
+                ic.setImageVisible(True)
+        else:
+            self._imagecons[0].setImageVisible(True)
+            for ic in self._imagecons[1:]:
+                ic.setImageVisible(False)
+        self.replot()
+        busy.reset_cursor()
+
+    def _checkClipboardPath(self, mode=QClipboard.Clipboard):
+        if self._qa_load_clipboard:
+            self._clipboard_mode = mode
+            try:
+                path = str(QApplication.clipboard().text(mode))
+            except:
+                path = None
+            self._qa_load_clipboard.setEnabled(bool(path and os.path.isfile(path)))
+
+    def _loadClipboardPath(self):
+        try:
+            path = QApplication.clipboard().text(self._clipboard_mode)
+        except:
+            return
+        self.loadImage(path)
+
+    def _repopulateMenu(self):
+        self._menu.clear()
+        self._menu.addAction("&Load image...", self.loadImage, Qt.CTRL + Qt.Key_L)
+        self._menu.addAction("&Compute image...", self.computeImage, Qt.CTRL + Qt.Key_M)
+        self._qa_load_clipboard = self._menu.addAction("Load from clipboard &path", self._loadClipboardPath,
+                                                       Qt.CTRL + Qt.Key_P)
+        self._checkClipboardPath()
+        if self._imagecons:
+            self._menu.addSeparator()
+            # add controls to cycle images and planes
+            for i, imgcon in enumerate(self._imagecons[::-1]):
+                self._menu.addMenu(imgcon.getMenu())
+            self._menu.addSeparator()
+            if len(self._imagecons) > 1:
+                self._menu.addAction("Cycle images", self.cycleImages, Qt.Key_F5)
+                self._menu.addAction("Blink images", self.blinkImages, Qt.Key_F6)
+            self._qa_slices = (
+                (self._menu.addAction("Next slice along axis 1", self._currier.curry(self.incrementSlice, 0, 1),
+                                      Qt.Key_F7),
+                 self._menu.addAction("Previous slice along axis 1", self._currier.curry(self.incrementSlice, 0, -1),
+                                      Qt.SHIFT + Qt.Key_F7)),
+                (self._menu.addAction("Next slice along axis 2", self._currier.curry(self.incrementSlice, 1, 1),
+                                      Qt.Key_F8),
+                 self._menu.addAction("Previous slice along axis 2", self._currier.curry(self.incrementSlice, 1, -1),
+                                      Qt.SHIFT + Qt.Key_F8)))
+            self._menu.addSeparator()
+            self._menu.addAction(self._qa_plot_top)
+            self._menu.addAction(self._qa_plot_all)
+
+    def computeImage(self, expression=None):
+        """Computes image from expression (if expression is None, pops up dialog)"""
+        if expression is None:
+            (expression, ok) = QInputDialog.getText(self, "Compute image",
+                                                    """Enter an image expression to compute.
+                                              Any valid numpy expression is supported, and
+                                              all functions from the numpy module are available (including sub-modules such as fft).
+                                              Use 'a', 'b', 'c' to refer to images.
+                                              Examples:  "(a+b)/2", "cos(a)+sin(b)", "a-a.mean()", "fft.fft2(a)", etc.""")
+            #      (expression,ok) = QInputDialog.getText(self,"Compute image","""<P>Enter an expression to compute.
+            #        Use 'a', 'b', etc. to refer to loaded images. Any valid numpy expression is supported, and all the
+            #       functions from the numpy module are available. Examples of valid expressions include "(a+b)/2",
+            #       "cos(a)+sin(b)", "a-a.mean()", etc.
+            #        </P>
+            #      """)
+            expression = str(expression)
+            if not ok or not expression:
+                return
+        # try to parse expression
+        arglist = [(chr(ord('a') + ic.getNumber()), ic.image) for ic in self._imagecons]
+        try:
+            exprfunc = eval("lambda " + (",".join([x[0] for x in arglist])) + ":" + expression,
+                            numpy.__dict__, {})
+        except Exception as exc:
+            self.signalShowErrorMessage.emit("""Error parsing expression "%s": %s.""" % (expression, str(exc)))
+            return None
+        # try to evaluate expression
+        self.signalShowMessage.emit("Computing expression \"%s\"" % expression, 10000)
+        busy = BusyIndicator()
+        QApplication.flush()
+
+        # trim trivial trailing dimensions. This avoids the problem of when an NxMx1 and an NxMx1x1 arrays are added,
+        # the result is promoted to NxMxMx1 following the numpy rules.
+        def trimshape(shape):
+            out = shape
+            while out and out[-1] == 1:
+                out = out[:-1]
+            return out
+
+        def trimarray(array):
+            return array.reshape(trimshape(array.shape))
+
+        try:
+            result = exprfunc(*[trimarray(x[1].data()) for x in arglist])
+        except Exception as exc:
+            busy.reset_cursor()
+            traceback.print_exc()
+            self.signalShowErrorMessage.emit("""Error evaluating "%s": %s.""" % (expression, str(exc)))
+            return None
+        busy.reset_cursor()
+        if type(result) != numpy.ma.masked_array and type(result) != numpy.ndarray:
+            self.signalShowErrorMessage.emit(
+                """Result of "%s" is of invalid type "%s" (array expected).""" % (expression, type(result).__name__))
+            return None
+        # convert coomplex results to real
+        if numpy.iscomplexobj(result):
+            self.signalShowErrorMessage.emit("""Result of "%s" is complex. Complex images are currently
+      not fully supported, so we'll implicitly use the absolute value instead.""" % (expression))
+            expression = "abs(%s)" % expression
+            result = abs(result)
+        # determine which image this expression can be associated with
+        res_shape = trimshape(result.shape)
+        arglist = [x for x in arglist if hasattr(x[1], 'fits_header') and trimshape(x[1].data().shape) == res_shape]
+        if not arglist:
+            self.signalShowErrorMessage.emit("""Result of "%s" has shape %s, which does not match any loaded FITS image.""" % (
+                expression, "x".join(map(str, result.shape))))
+            return None
+        # look for an image in the arglist with the same projection, and with a valid dirname
+        # (for the where-to-save hint)
+        template = arglist[0][1]
+        # if all images in arglist have the same projection, then it doesn't matter what we use
+        # else ask
+        if len([x for x in arglist[1:] if x[1].projection == template.projection]) != len(arglist) - 1:
+            options = [x[0] for x in arglist]
+            (which, ok) = QInputDialog.getItem(self, "Compute image",
+                                               "Coordinate system to use for the result of \"%s\":" % expression,
+                                               options, 0, False)
+            if not ok:
+                return None
+            try:
+                template = arglist[options.index(which)][1]
+            except:
+                pass
+        # create a FITS image
+        busy = BusyIndicator()
+        dprint(2, "creating FITS image", expression)
+        self.signalShowMessage.emit("""Creating image for %s""" % expression, 3000)
+        QApplication.flush()
+        try:
+            hdu = pyfits.PrimaryHDU(result.transpose(), template.fits_header)
+            skyimage = SkyImage.FITSImagePlotItem(name=expression, filename=None, hdu=hdu)
+        except:
+            busy.reset_cursor()
+            traceback.print_exc()
+            self.signalShowErrorMessage.emit("""Error creating FITS image %s: %s""" % (expression, str(sys.exc_info()[1])))
+            return None
+        # get directory name for save-to hint
+        dirname = getattr(template, 'filename', None)
+        if not dirname:
+            dirnames = [getattr(img, 'filename') for x, img in arglist if hasattr(img, 'filename')]
+            dirname = dirnames[0] if dirnames else None
+        # create control bar, add to widget stack
+        self._createImageController(skyimage, expression, expression,
+                                    save=((dirname and os.path.dirname(dirname)) or "."))
+        self.signalShowMessage.emit("Created new image for %s" % expression, 3000)
+        dprint(2, "image created")
+        busy.reset_cursor()
+
+    def _createImageController(self, image, name, basename, model=False, save=False):
+        dprint(2, "creating ImageController for", name)
+        ic = ImageController(image, self, self, name, save=save)
+        # attach appropriate signals
+        ic.imageSignalRepaint.connect(self.replot)
+        ic.imageSignalSlice.connect(self.fastReplot)
+        image.connectPlotRiased(self.imagePlotRaised)
+        ic.imageSignalRaise.connect(self._currier.curry(self.raiseImage, ic))
+        ic.imageSignalUnload.connect(self._currier.curry(self.unloadImage, ic))
+        ic.imageSignalCenter.connect(self._currier.curry(self.centerImage, ic))
+        ic.setNumber(len(self._imagecons))
+        self._imagecons.insert(0, ic)
+        self._imagecon_loadorder.append(ic)
+        if model:
+            self._model_imagecons.add(id(ic))
+        self._lo.addWidget(ic)
+        if self._border_pen:
+            ic.addPlotBorder(self._border_pen, basename, self._label_color, self._label_bg_brush)
+        ic.renderControl().displayRangeChanged.connect(
+            self._currier.curry(self._updateDisplayRange, ic.renderControl()))
+        ic.renderControl().displayRangeLocked.connect(self._currier.curry(self._lockDisplayRange, ic.renderControl()))
+        self._plot = None
+        # add to menus
+        dprint(2, "repopulating menus")
+        self._repopulateMenu()
+        # center and raise to top of stack
+        self.raiseImage(ic)
+        if not self._center_image:
+            self.centerImage(ic, emit=False)
+        else:
+            ic.setPlotProjection(self._center_image.projection)
+        # signal
+        self.imagesChanged.emit()
+        return ic
--- tigger-1.6.0.orig/TigGUI/Images/RenderControl.py
+++ tigger-1.6.0/TigGUI/Images/RenderControl.py
@@ -1,399 +1,399 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-
-import os.path
-import time
-from PyQt5.Qt import QObject
-from PyQt5.QtCore import pyqtSignal
-from scipy.ndimage import measurements
-import numpy as np
-
-import TigGUI.kitties.utils
-from TigGUI.Images.Colormaps import HistEqIntensityMap, LogIntensityMap, CubeHelixColormap
-from TigGUI.kitties.widgets import BusyIndicator
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="rc")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-from TigGUI.Images import Colormaps
-
-import TigGUI.kitties.config
-
-
-ImageConfigFile = TigGUI.kitties.config.DualConfigParser("tigger.images.conf")
-
-
-class RenderControl(QObject):
-    """RenderControl represents all the options (slices, color and intensity policy data) associated with an image. This object is shared by various GUI elements
-    that control the rendering of images.
-    """
-    intensityMapChanged = pyqtSignal(object, float)
-    colorMapChanged = pyqtSignal(object)
-    dataSubsetChanged = pyqtSignal(np.ndarray, tuple, str, str)
-    displayRangeChanged = pyqtSignal([float, float], [np.float32, np.float32], [HistEqIntensityMap, float])  # on file save np.float32's become float's on reload?
-    displayRangeLocked = pyqtSignal(bool)
-
-    SUBSET_FULL = "full"
-    SUBSET_SLICE = "slice"
-    SUBSET_RECT = "rect"
-
-    def __init__(self, image, parent):
-        QObject.__init__(self, parent)
-        self.image = image
-        self._config = TigGUI.kitties.config.SectionParser(ImageConfigFile, os.path.normpath(
-            os.path.abspath(image.filename))) if image.filename else None
-        # figure out the slicing -- find extra axes with size > 1
-        # self._current_slice contains all extra axis, including the size-1 ones
-        # self._sliced_axes is a list of (iextra,axisname,labels) tuples for size>1 axes
-        # where iextra is an index into self._current_slice.
-        self._current_slice = [0] * image.numExtraAxes()
-        self._slice_dims = [1] * image.numExtraAxes()
-        self._sliced_axes = []
-        for i in range(image.numExtraAxes()):
-            iaxis, axisname, labels = image.extraAxisNumberNameLabels(i)
-            self._slice_dims[i] = len(labels)
-            if len(labels) > 1:
-                self._sliced_axes.append((i, axisname, labels))
-        # set the full image range (i.e. mix/max) and current slice range
-        dprint(2, "getting data min/max")
-        self._fullrange = self._slicerange = image.dataMinMax()[:2]
-        dprint(2, "done")
-        # create dict of intensity maps
-        log_cycles = self._config.getfloat("intensity-log-cycles", 6) if self._config else 6
-        self._imap_list = (
-            ('Linear', Colormaps.LinearIntensityMap()),
-            ('Histogram-equalized', Colormaps.HistEqIntensityMap()),
-            ('log(val-min)', Colormaps.LogIntensityMap(log_cycles))
-        )
-        # create list of color maps
-        self._cmap_list = Colormaps.getColormapList()
-        default_cmap = 0
-        for i, cmap in enumerate(self._cmap_list):
-            if isinstance(cmap, Colormaps.ColormapWithControls):
-                if self._config:
-                    cmap.loadConfig(self._config)
-                cmap.colormapChanged.connect(self.updateColorMapParameters)
-            if isinstance(cmap, Colormaps.CubeHelixColormap):
-                default_cmap = i
-        # set the initial intensity map
-        imap = self._config.getint("intensity-map-number", 0) if self._config else 0
-        cmap = self._config.getint("colour-map-number", default_cmap) if self._config else default_cmap
-        imap = max(min(len(self._imap_list) - 1, imap), 0)
-        cmap = max(min(len(self._cmap_list) - 1, cmap), 0)
-        self._current_imap_index = imap
-        self._current_cmap_index = cmap
-        self.image.setIntensityMap(self._imap_list[imap][1])
-        self.image.setColorMap(self._cmap_list[cmap])
-
-        # cache of min/max values for each slice, as these can be slowish to recompute when flipping slices
-        self._sliceranges = {}
-        # This is the data subset corresponding to the current display range. When the display range is set to
-        # _fullrange, this is the image cube. When it is set to _slicerange, this is the current image slice. When
-        # setLMRectDisplayRange() or setWindowDisplayRange() is used to set the range to the specified window,
-        # this is the a subset of the current slice. The data subset is passed to setDataSubset() of the intensity mapper object
-        self._displaydata = None
-        # This is a tuple of the extrema of the current data subset. This is not quite the same thing as self._displayrange below.
-        # When the display range is reset to cube/slice/window, _displayrange is set to _displaydata_minmax. But if
-        # setDisplayRange() is subsequently called (e.g. if the user manually enters new values into the Range boxes), then
-        # _displayrange will be set to something else until the next reset....() call.
-        self._displaydata_minmax = None
-        # This is a low,high tuple of the current display range -- will be initialized by resetFullDisplayRange()
-        self._displayrange = None
-        if self._config and self._config.has_option("range-min") and self._config.has_option("range-max"):
-            display_range = self._config.getfloat("range-min"), self._config.getfloat("range-max")
-        else:
-            display_range = None
-        self.setFullSubset(display_range, write_config=False)
-        # setup initial slice
-        if self.hasSlicing():
-            if self._config and self._config.has_option("slice"):
-                try:
-                    curslice = list(map(int, self._config.get("slice").split()))
-                except:
-                    curslice = []
-                if len(curslice) == len(self._current_slice):
-                    for iaxis, i in enumerate(curslice):
-                        naxis = len(self.image.extraAxisValues(iaxis))
-                        i = min(naxis - 1, max(0, i))
-                        self._current_slice[iaxis] = i
-            self.selectSlice(self._current_slice, write_config=False)
-        # lock display range if so configured
-        self._lock_display_range = self._config.getbool("lock-range", 0) if self._config else False
-        if self._lock_display_range:
-            self.lockDisplayRange(True, write_config=False)
-
-    def startSavingConfig(self, image_filename):
-        """Saves the current configuration under the specified image filename"""
-        self._config = TigGUI.kitties.config.SectionParser(ImageConfigFile, os.path.normpath(os.path.abspath(image_filename)))
-        if self._displayrange:
-            self._config.set("range-min", self._displayrange[0], save=False)
-            self._config.set("range-max", self._displayrange[1], save=False)
-        if self._current_slice:
-            self._config.set("slice", " ".join(map(str, self._current_slice)), save=False)
-        for cmap in self._cmap_list:
-            if isinstance(cmap, Colormaps.ColormapWithControls):
-                cmap.saveConfig(self._config, save=False)
-        self._config.set("intensity-map-number", self._current_imap_index, save=False)
-        self._config.set("colour-map-number", self._current_cmap_index, save=False)
-        self._config.set("lock-range", self._lock_display_range, save=True)
-
-    def hasSlicing(self):
-        """Returns True if image is a cube, and so has non-trivial slicing axes"""
-        return bool(self._sliced_axes)
-
-    def slicedAxes(self):
-        """Returns list of (axis_num,name,label_list) tuples per each non-trivial slicing axis"""
-        return self._sliced_axes
-
-    def incrementSlice(self, iaxis, incr, write_config=True):
-        dprint(2, "incrementing slice axis", iaxis, "by", incr)
-        self._current_slice[iaxis] = (self._current_slice[iaxis] + incr) % self._slice_dims[iaxis]
-        self._updateSlice(write_config)
-
-    def changeSlice(self, iaxis, index, write_config=True):
-        dprint(2, "changing slice axis", iaxis, "to", index)
-        if self._current_slice[iaxis] != index:
-            self._current_slice[iaxis] = index
-            self._updateSlice(write_config)
-
-    def selectSlice(self, indices, write_config=True):
-        """Selects slice given by indices"""
-        dprint(2, "selecting slice", indices)
-        self._current_slice = list(indices)
-        self._updateSlice(write_config)
-
-    def _updateSlice(self, write_config=True):
-        """Common internal method called to finalize changes to _current_slice"""
-        busy = BusyIndicator()
-        dprint(2, "_updateSlice", self._current_slice, time.time() % 60)
-        indices = tuple(self._current_slice)
-        self.image.selectSlice(*indices)
-        dprint(2, "image slice selected", time.time() % 60)
-        img = self.image.image()
-        self._slicerange = self._sliceranges.get(indices)
-        if self._slicerange is None:
-            self._slicerange = self._sliceranges[indices] = self.image.imageMinMax()[:2]
-        dprint(2, "min/max updated", time.time() % 60)
-        self.setSliceSubset(set_display_range=False)
-        if write_config and self._config:
-            self._config.set("slice", " ".join(map(str, indices)))
-        busy.reset_cursor()
-
-    def displayRange(self):
-        return self._displayrange
-
-    def currentSlice(self):
-        return self._current_slice
-
-    def sliceDimensions(self):
-        return self._slice_dims
-
-    def getIntensityMapNames(self):
-        return [name for name, imap in self._imap_list]
-
-    def currentIntensityMapNumber(self):
-        return self._current_imap_index
-
-    def currentIntensityMap(self):
-        return self.image.intensityMap()
-
-    def setIntensityMapNumber(self, index, write_config=True):
-        busy = BusyIndicator()
-        self._current_imap_index = index
-        imap = self._imap_list[index][1]
-        imap.setDataSubset(self._displaydata, self._displaydata_minmax)
-        imap.setDataRange(*self._displayrange)
-        self.image.setIntensityMap(imap)
-        self.intensityMapChanged.emit(imap, index)
-        if self._config and write_config:
-            self._config.set("intensity-map-number", index)
-        busy.reset_cursor()
-
-    def setIntensityMapLogCycles(self, cycles, notify_image=True, write_config=True):
-        busy = BusyIndicator()
-        imap = self.currentIntensityMap()
-        if isinstance(imap, Colormaps.LogIntensityMap):
-            imap.log_cycles = cycles
-            if notify_image:
-                self.image.setIntensityMap()
-            self.intensityMapChanged.emit(imap, self._current_imap_index)
-        if self._config and write_config:
-            self._config.set("intensity-log-cycles", cycles)
-        busy.reset_cursor()
-
-    def lockDisplayRangeForAxis(self, iaxis, lock):
-        pass
-
-    def getColormapList(self):
-        return self._cmap_list
-
-    def updateColorMapParameters(self):
-        """Call this when the colormap parameters have changed"""
-        busy = BusyIndicator()
-        self.image.updateCurrentColorMap()
-        if self._config:
-            self._cmap_list[self._current_cmap_index].saveConfig(self._config)
-        busy.reset_cursor()
-
-    def setColorMapNumber(self, index, write_config=True):
-        busy = BusyIndicator()
-        self._current_cmap_index = index
-        cmap = self._cmap_list[index]
-        self.image.setColorMap(cmap)
-        self.colorMapChanged.emit(cmap)
-        if self._config and write_config:
-            self._config.set("colour-map-number", index)
-        busy.reset_cursor()
-
-    def currentSubset(self):
-        """Returns tuple of subset,(dmin,dmax),description for current data subset"""
-        return self._displaydata, self._displaydata_minmax, self._displaydata_desc, self._displaydata_type
-
-    def _resetDisplaySubset(self, subset, desc, range=None, set_display_range=True, write_config=True,
-                            subset_type=None):
-        dprint(4, "setting display subset")
-        self._displaydata = subset
-        self._displaydata_desc = desc
-        self._displaydata_minmax = range = range or measurements.extrema(subset)[:2]
-        self._displaydata_type = subset_type
-        dprint(4, "range set")
-        self.image.intensityMap().setDataSubset(self._displaydata, minmax=range)
-        self.image.setIntensityMap(emit=False)
-        dprint(2, f"dataSubsetChanged {type(subset)}, {type(range)}, {type(desc)}, {type(subset_type)}")
-        self.dataSubsetChanged.emit(subset, range, desc, subset_type)
-        if set_display_range:
-            self.setDisplayRange(write_config=write_config, *range)
-
-    def setFullSubset(self, display_range=None, write_config=True):
-        shapedesc = "\u00D7".join(["%d" % x for x in
-                                    list(self.image.imageDims()) + [len(labels) for iaxis, name, labels in
-                                                                    self._sliced_axes]])
-        desc = "full cube" if self._sliced_axes else "full image"
-        self._resetDisplaySubset(self.image.data(), desc, range=self._fullrange, subset_type=self.SUBSET_FULL,
-                                 write_config=write_config, set_display_range=False)
-        self.setDisplayRange(write_config=write_config, *(display_range or self._fullrange))
-
-    def _makeSliceDesc(self):
-        """Makes a description of the current slice"""
-        if not self._sliced_axes:
-            return "full image"
-        descs = []
-        for iextra, name, labels in self._sliced_axes:
-            if name.upper() not in ["STOKES", "COMPLEX"]:
-                descs.append("%s=%s" % (name, labels[self._current_slice[iextra]]))
-            else:
-                descs.append(labels[self._current_slice[iextra]])
-        return "%s plane" % (" ".join(descs),)
-
-    def setSliceSubset(self, set_display_range=True, write_config=True): \
-            return self._resetDisplaySubset(self.image.image(), self._makeSliceDesc(), self._slicerange,
-                                            subset_type=self.SUBSET_SLICE,
-                                            set_display_range=set_display_range, write_config=write_config)
-
-    def _setRectangularSubset(self, xx1, xx2, yy1, yy2):
-        descs = []
-        nx, ny = self.image.imageDims()
-        if xx1 or xx2 != nx:
-            descs.append("x=%d:%d" % (xx1, xx2))
-        if yy1 or yy2 != ny:
-            descs.append("y=%d:%d" % (yy1, yy2))
-        if descs:
-            descs.append("in")
-        descs.append(self._makeSliceDesc())
-        return self._resetDisplaySubset(self.image.image()[xx1:xx2, yy1:yy2], " ".join(descs),
-                                        subset_type=self.SUBSET_RECT)
-
-    def _lmRectToPix(self, rect):
-        """helper function -- converts an LM rectangle to pixel coordinates"""
-        if rect.width() and rect.height():
-            # convert to pixel coordinates
-            x1, y1, x2, y2 = rect.getCoords()
-            x1, y1 = self.image.lmToPix(x1, y1)
-            x2, y2 = self.image.lmToPix(x2, y2)
-            dprint(2, x1, y1, x2, y2)
-            xx1, xx2 = int(math.floor(min(x1, x2))), int(math.ceil(max(x1, x2)))
-            yy1, yy2 = int(math.floor(min(y1, y2))), int(math.ceil(max(y1, y2)))
-            dprint(2, xx1, yy1, xx2, yy2)
-            # ensure limits
-            nx, ny = self.image.imageDims()
-            xx1, xx2 = max(xx1, 0), min(xx2, nx)
-            yy1, yy2 = max(yy1, 0), min(yy2, ny)
-            dprint(2, xx1, yy1, xx2, yy2)
-            # check that we actually selected some valid pixels
-            if xx1 < xx2 and yy1 < yy2:
-                return xx1, xx2, yy1, yy2
-        return None, None, None, None
-
-    def setLMRectSubset(self, rect):
-        xx1, xx2, yy1, yy2 = self._lmRectToPix(rect)
-        if xx1 is not None:
-            return self._setRectangularSubset(xx1, xx2, yy1, yy2)
-
-    def getLMRectStats(self, rect):
-        xx1, xx2, yy1, yy2 = self._lmRectToPix(rect)
-        if xx1 is not None:
-            subset = self.image.image()[xx1:xx2, yy1:yy2]
-            subset, mask = self.image.optimalRavel(subset)
-            mmin, mmax = measurements.extrema(subset, labels=mask, index=None if mask is None else False)[:2]
-            mean = measurements.mean(subset, labels=mask, index=None if mask is None else False)
-            std = measurements.standard_deviation(subset, labels=mask, index=None if mask is None else False)
-            ssum = measurements.sum(subset, labels=mask, index=None if mask is None else False)
-            return xx1, xx2, yy1, yy2, mmin, mmax, mean, std, ssum, subset.size
-        return None
-
-    def setWindowSubset(self, rect=None):
-        rect = rect or self.image.currentRectPix()
-        if rect.width() and rect.height():
-            tl = rect.topLeft()
-            return self._setRectangularSubset(tl.x(), tl.x() + rect.width(), tl.y(), tl.y() + rect.height())
-
-    def resetSubsetDisplayRange(self):
-        self.setDisplayRange(*self._displaydata_minmax)
-
-    def isSubsetDisplayRange(self):
-        return self._displayrange == self._displaydata_minmax
-
-    def setDisplayRange(self, dmin, dmax, notify_image=True, write_config=True):
-        if dmax < dmin:
-            dmin, dmax = dmax, dmin
-        if (dmin, dmax) != self._displayrange:
-            self._displayrange = dmin, dmax
-            self.image.intensityMap().setDataRange(dmin, dmax)
-            if notify_image:
-                busy = BusyIndicator()
-                self.image.setIntensityMap(emit=True)
-                busy.reset_cursor()
-            self.displayRangeChanged.emit(dmin, dmax)
-            if self._config and write_config:
-                self._config.set("range-min", dmin, save=False)
-                self._config.set("range-max", dmax)
-
-    def isDisplayRangeLocked(self):
-        return self._lock_display_range
-
-    def lockDisplayRange(self, lock=True, write_config=True):
-        self._lock_display_range = lock
-        self.displayRangeLocked.emit(lock)
-        if self._config and write_config:
-            self._config.set("lock-range", bool(lock))
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+
+import os.path
+import time
+from PyQt5.Qt import QObject
+from PyQt5.QtCore import pyqtSignal
+from scipy.ndimage import measurements
+import numpy as np
+
+import TigGUI.kitties.utils
+from TigGUI.Images.Colormaps import HistEqIntensityMap, LogIntensityMap, CubeHelixColormap
+from TigGUI.kitties.widgets import BusyIndicator
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="rc")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+from TigGUI.Images import Colormaps
+
+import TigGUI.kitties.config
+
+
+ImageConfigFile = TigGUI.kitties.config.DualConfigParser("tigger.images.conf")
+
+
+class RenderControl(QObject):
+    """RenderControl represents all the options (slices, color and intensity policy data) associated with an image. This object is shared by various GUI elements
+    that control the rendering of images.
+    """
+    intensityMapChanged = pyqtSignal(object, float)
+    colorMapChanged = pyqtSignal(object)
+    dataSubsetChanged = pyqtSignal(np.ndarray, tuple, str, str)
+    displayRangeChanged = pyqtSignal([float, float], [np.float32, np.float32], [HistEqIntensityMap, float])  # on file save np.float32's become float's on reload?
+    displayRangeLocked = pyqtSignal(bool)
+
+    SUBSET_FULL = "full"
+    SUBSET_SLICE = "slice"
+    SUBSET_RECT = "rect"
+
+    def __init__(self, image, parent):
+        QObject.__init__(self, parent)
+        self.image = image
+        self._config = TigGUI.kitties.config.SectionParser(ImageConfigFile, os.path.normpath(
+            os.path.abspath(image.filename))) if image.filename else None
+        # figure out the slicing -- find extra axes with size > 1
+        # self._current_slice contains all extra axis, including the size-1 ones
+        # self._sliced_axes is a list of (iextra,axisname,labels) tuples for size>1 axes
+        # where iextra is an index into self._current_slice.
+        self._current_slice = [0] * image.numExtraAxes()
+        self._slice_dims = [1] * image.numExtraAxes()
+        self._sliced_axes = []
+        for i in range(image.numExtraAxes()):
+            iaxis, axisname, labels = image.extraAxisNumberNameLabels(i)
+            self._slice_dims[i] = len(labels)
+            if len(labels) > 1:
+                self._sliced_axes.append((i, axisname, labels))
+        # set the full image range (i.e. mix/max) and current slice range
+        dprint(2, "getting data min/max")
+        self._fullrange = self._slicerange = image.dataMinMax()[:2]
+        dprint(2, "done")
+        # create dict of intensity maps
+        log_cycles = self._config.getfloat("intensity-log-cycles", 6) if self._config else 6
+        self._imap_list = (
+            ('Linear', Colormaps.LinearIntensityMap()),
+            ('Histogram-equalized', Colormaps.HistEqIntensityMap()),
+            ('log(val-min)', Colormaps.LogIntensityMap(log_cycles))
+        )
+        # create list of color maps
+        self._cmap_list = Colormaps.getColormapList()
+        default_cmap = 0
+        for i, cmap in enumerate(self._cmap_list):
+            if isinstance(cmap, Colormaps.ColormapWithControls):
+                if self._config:
+                    cmap.loadConfig(self._config)
+                cmap.colormapChanged.connect(self.updateColorMapParameters)
+            if isinstance(cmap, Colormaps.CubeHelixColormap):
+                default_cmap = i
+        # set the initial intensity map
+        imap = self._config.getint("intensity-map-number", 0) if self._config else 0
+        cmap = self._config.getint("colour-map-number", default_cmap) if self._config else default_cmap
+        imap = max(min(len(self._imap_list) - 1, imap), 0)
+        cmap = max(min(len(self._cmap_list) - 1, cmap), 0)
+        self._current_imap_index = imap
+        self._current_cmap_index = cmap
+        self.image.setIntensityMap(self._imap_list[imap][1])
+        self.image.setColorMap(self._cmap_list[cmap])
+
+        # cache of min/max values for each slice, as these can be slowish to recompute when flipping slices
+        self._sliceranges = {}
+        # This is the data subset corresponding to the current display range. When the display range is set to
+        # _fullrange, this is the image cube. When it is set to _slicerange, this is the current image slice. When
+        # setLMRectDisplayRange() or setWindowDisplayRange() is used to set the range to the specified window,
+        # this is the a subset of the current slice. The data subset is passed to setDataSubset() of the intensity mapper object
+        self._displaydata = None
+        # This is a tuple of the extrema of the current data subset. This is not quite the same thing as self._displayrange below.
+        # When the display range is reset to cube/slice/window, _displayrange is set to _displaydata_minmax. But if
+        # setDisplayRange() is subsequently called (e.g. if the user manually enters new values into the Range boxes), then
+        # _displayrange will be set to something else until the next reset....() call.
+        self._displaydata_minmax = None
+        # This is a low,high tuple of the current display range -- will be initialized by resetFullDisplayRange()
+        self._displayrange = None
+        if self._config and self._config.has_option("range-min") and self._config.has_option("range-max"):
+            display_range = self._config.getfloat("range-min"), self._config.getfloat("range-max")
+        else:
+            display_range = None
+        self.setFullSubset(display_range, write_config=False)
+        # setup initial slice
+        if self.hasSlicing():
+            if self._config and self._config.has_option("slice"):
+                try:
+                    curslice = list(map(int, self._config.get("slice").split()))
+                except:
+                    curslice = []
+                if len(curslice) == len(self._current_slice):
+                    for iaxis, i in enumerate(curslice):
+                        naxis = len(self.image.extraAxisValues(iaxis))
+                        i = min(naxis - 1, max(0, i))
+                        self._current_slice[iaxis] = i
+            self.selectSlice(self._current_slice, write_config=False)
+        # lock display range if so configured
+        self._lock_display_range = self._config.getbool("lock-range", 0) if self._config else False
+        if self._lock_display_range:
+            self.lockDisplayRange(True, write_config=False)
+
+    def startSavingConfig(self, image_filename):
+        """Saves the current configuration under the specified image filename"""
+        self._config = TigGUI.kitties.config.SectionParser(ImageConfigFile, os.path.normpath(os.path.abspath(image_filename)))
+        if self._displayrange:
+            self._config.set("range-min", self._displayrange[0], save=False)
+            self._config.set("range-max", self._displayrange[1], save=False)
+        if self._current_slice:
+            self._config.set("slice", " ".join(map(str, self._current_slice)), save=False)
+        for cmap in self._cmap_list:
+            if isinstance(cmap, Colormaps.ColormapWithControls):
+                cmap.saveConfig(self._config, save=False)
+        self._config.set("intensity-map-number", self._current_imap_index, save=False)
+        self._config.set("colour-map-number", self._current_cmap_index, save=False)
+        self._config.set("lock-range", self._lock_display_range, save=True)
+
+    def hasSlicing(self):
+        """Returns True if image is a cube, and so has non-trivial slicing axes"""
+        return bool(self._sliced_axes)
+
+    def slicedAxes(self):
+        """Returns list of (axis_num,name,label_list) tuples per each non-trivial slicing axis"""
+        return self._sliced_axes
+
+    def incrementSlice(self, iaxis, incr, write_config=True):
+        dprint(2, "incrementing slice axis", iaxis, "by", incr)
+        self._current_slice[iaxis] = (self._current_slice[iaxis] + incr) % self._slice_dims[iaxis]
+        self._updateSlice(write_config)
+
+    def changeSlice(self, iaxis, index, write_config=True):
+        dprint(2, "changing slice axis", iaxis, "to", index)
+        if self._current_slice[iaxis] != index:
+            self._current_slice[iaxis] = index
+            self._updateSlice(write_config)
+
+    def selectSlice(self, indices, write_config=True):
+        """Selects slice given by indices"""
+        dprint(2, "selecting slice", indices)
+        self._current_slice = list(indices)
+        self._updateSlice(write_config)
+
+    def _updateSlice(self, write_config=True):
+        """Common internal method called to finalize changes to _current_slice"""
+        busy = BusyIndicator()
+        dprint(2, "_updateSlice", self._current_slice, time.time() % 60)
+        indices = tuple(self._current_slice)
+        self.image.selectSlice(*indices)
+        dprint(2, "image slice selected", time.time() % 60)
+        img = self.image.image()
+        self._slicerange = self._sliceranges.get(indices)
+        if self._slicerange is None:
+            self._slicerange = self._sliceranges[indices] = self.image.imageMinMax()[:2]
+        dprint(2, "min/max updated", time.time() % 60)
+        self.setSliceSubset(set_display_range=False)
+        if write_config and self._config:
+            self._config.set("slice", " ".join(map(str, indices)))
+        busy.reset_cursor()
+
+    def displayRange(self):
+        return self._displayrange
+
+    def currentSlice(self):
+        return self._current_slice
+
+    def sliceDimensions(self):
+        return self._slice_dims
+
+    def getIntensityMapNames(self):
+        return [name for name, imap in self._imap_list]
+
+    def currentIntensityMapNumber(self):
+        return self._current_imap_index
+
+    def currentIntensityMap(self):
+        return self.image.intensityMap()
+
+    def setIntensityMapNumber(self, index, write_config=True):
+        busy = BusyIndicator()
+        self._current_imap_index = index
+        imap = self._imap_list[index][1]
+        imap.setDataSubset(self._displaydata, self._displaydata_minmax)
+        imap.setDataRange(*self._displayrange)
+        self.image.setIntensityMap(imap)
+        self.intensityMapChanged.emit(imap, index)
+        if self._config and write_config:
+            self._config.set("intensity-map-number", index)
+        busy.reset_cursor()
+
+    def setIntensityMapLogCycles(self, cycles, notify_image=True, write_config=True):
+        busy = BusyIndicator()
+        imap = self.currentIntensityMap()
+        if isinstance(imap, Colormaps.LogIntensityMap):
+            imap.log_cycles = cycles
+            if notify_image:
+                self.image.setIntensityMap()
+            self.intensityMapChanged.emit(imap, self._current_imap_index)
+        if self._config and write_config:
+            self._config.set("intensity-log-cycles", cycles)
+        busy.reset_cursor()
+
+    def lockDisplayRangeForAxis(self, iaxis, lock):
+        pass
+
+    def getColormapList(self):
+        return self._cmap_list
+
+    def updateColorMapParameters(self):
+        """Call this when the colormap parameters have changed"""
+        busy = BusyIndicator()
+        self.image.updateCurrentColorMap()
+        if self._config:
+            self._cmap_list[self._current_cmap_index].saveConfig(self._config)
+        busy.reset_cursor()
+
+    def setColorMapNumber(self, index, write_config=True):
+        busy = BusyIndicator()
+        self._current_cmap_index = index
+        cmap = self._cmap_list[index]
+        self.image.setColorMap(cmap)
+        self.colorMapChanged.emit(cmap)
+        if self._config and write_config:
+            self._config.set("colour-map-number", index)
+        busy.reset_cursor()
+
+    def currentSubset(self):
+        """Returns tuple of subset,(dmin,dmax),description for current data subset"""
+        return self._displaydata, self._displaydata_minmax, self._displaydata_desc, self._displaydata_type
+
+    def _resetDisplaySubset(self, subset, desc, range=None, set_display_range=True, write_config=True,
+                            subset_type=None):
+        dprint(4, "setting display subset")
+        self._displaydata = subset
+        self._displaydata_desc = desc
+        self._displaydata_minmax = range = range or measurements.extrema(subset)[:2]
+        self._displaydata_type = subset_type
+        dprint(4, "range set")
+        self.image.intensityMap().setDataSubset(self._displaydata, minmax=range)
+        self.image.setIntensityMap(emit=False)
+        dprint(2, f"dataSubsetChanged {type(subset)}, {type(range)}, {type(desc)}, {type(subset_type)}")
+        self.dataSubsetChanged.emit(subset, range, desc, subset_type)
+        if set_display_range:
+            self.setDisplayRange(write_config=write_config, *range)
+
+    def setFullSubset(self, display_range=None, write_config=True):
+        shapedesc = "\u00D7".join(["%d" % x for x in
+                                    list(self.image.imageDims()) + [len(labels) for iaxis, name, labels in
+                                                                    self._sliced_axes]])
+        desc = "full cube" if self._sliced_axes else "full image"
+        self._resetDisplaySubset(self.image.data(), desc, range=self._fullrange, subset_type=self.SUBSET_FULL,
+                                 write_config=write_config, set_display_range=False)
+        self.setDisplayRange(write_config=write_config, *(display_range or self._fullrange))
+
+    def _makeSliceDesc(self):
+        """Makes a description of the current slice"""
+        if not self._sliced_axes:
+            return "full image"
+        descs = []
+        for iextra, name, labels in self._sliced_axes:
+            if name.upper() not in ["STOKES", "COMPLEX"]:
+                descs.append("%s=%s" % (name, labels[self._current_slice[iextra]]))
+            else:
+                descs.append(labels[self._current_slice[iextra]])
+        return "%s plane" % (" ".join(descs),)
+
+    def setSliceSubset(self, set_display_range=True, write_config=True): \
+            return self._resetDisplaySubset(self.image.image(), self._makeSliceDesc(), self._slicerange,
+                                            subset_type=self.SUBSET_SLICE,
+                                            set_display_range=set_display_range, write_config=write_config)
+
+    def _setRectangularSubset(self, xx1, xx2, yy1, yy2):
+        descs = []
+        nx, ny = self.image.imageDims()
+        if xx1 or xx2 != nx:
+            descs.append("x=%d:%d" % (xx1, xx2))
+        if yy1 or yy2 != ny:
+            descs.append("y=%d:%d" % (yy1, yy2))
+        if descs:
+            descs.append("in")
+        descs.append(self._makeSliceDesc())
+        return self._resetDisplaySubset(self.image.image()[xx1:xx2, yy1:yy2], " ".join(descs),
+                                        subset_type=self.SUBSET_RECT)
+
+    def _lmRectToPix(self, rect):
+        """helper function -- converts an LM rectangle to pixel coordinates"""
+        if rect.width() and rect.height():
+            # convert to pixel coordinates
+            x1, y1, x2, y2 = rect.getCoords()
+            x1, y1 = self.image.lmToPix(x1, y1)
+            x2, y2 = self.image.lmToPix(x2, y2)
+            dprint(2, x1, y1, x2, y2)
+            xx1, xx2 = int(math.floor(min(x1, x2))), int(math.ceil(max(x1, x2)))
+            yy1, yy2 = int(math.floor(min(y1, y2))), int(math.ceil(max(y1, y2)))
+            dprint(2, xx1, yy1, xx2, yy2)
+            # ensure limits
+            nx, ny = self.image.imageDims()
+            xx1, xx2 = max(xx1, 0), min(xx2, nx)
+            yy1, yy2 = max(yy1, 0), min(yy2, ny)
+            dprint(2, xx1, yy1, xx2, yy2)
+            # check that we actually selected some valid pixels
+            if xx1 < xx2 and yy1 < yy2:
+                return xx1, xx2, yy1, yy2
+        return None, None, None, None
+
+    def setLMRectSubset(self, rect):
+        xx1, xx2, yy1, yy2 = self._lmRectToPix(rect)
+        if xx1 is not None:
+            return self._setRectangularSubset(xx1, xx2, yy1, yy2)
+
+    def getLMRectStats(self, rect):
+        xx1, xx2, yy1, yy2 = self._lmRectToPix(rect)
+        if xx1 is not None:
+            subset = self.image.image()[xx1:xx2, yy1:yy2]
+            subset, mask = self.image.optimalRavel(subset)
+            mmin, mmax = measurements.extrema(subset, labels=mask, index=None if mask is None else False)[:2]
+            mean = measurements.mean(subset, labels=mask, index=None if mask is None else False)
+            std = measurements.standard_deviation(subset, labels=mask, index=None if mask is None else False)
+            ssum = measurements.sum(subset, labels=mask, index=None if mask is None else False)
+            return xx1, xx2, yy1, yy2, mmin, mmax, mean, std, ssum, subset.size
+        return None
+
+    def setWindowSubset(self, rect=None):
+        rect = rect or self.image.currentRectPix()
+        if rect.width() and rect.height():
+            tl = rect.topLeft()
+            return self._setRectangularSubset(tl.x(), tl.x() + rect.width(), tl.y(), tl.y() + rect.height())
+
+    def resetSubsetDisplayRange(self):
+        self.setDisplayRange(*self._displaydata_minmax)
+
+    def isSubsetDisplayRange(self):
+        return self._displayrange == self._displaydata_minmax
+
+    def setDisplayRange(self, dmin, dmax, notify_image=True, write_config=True):
+        if dmax < dmin:
+            dmin, dmax = dmax, dmin
+        if (dmin, dmax) != self._displayrange:
+            self._displayrange = dmin, dmax
+            self.image.intensityMap().setDataRange(dmin, dmax)
+            if notify_image:
+                busy = BusyIndicator()
+                self.image.setIntensityMap(emit=True)
+                busy.reset_cursor()
+            self.displayRangeChanged.emit(dmin, dmax)
+            if self._config and write_config:
+                self._config.set("range-min", dmin, save=False)
+                self._config.set("range-max", dmax)
+
+    def isDisplayRangeLocked(self):
+        return self._lock_display_range
+
+    def lockDisplayRange(self, lock=True, write_config=True):
+        self._lock_display_range = lock
+        self.displayRangeLocked.emit(lock)
+        if self._config and write_config:
+            self._config.set("lock-range", bool(lock))
--- tigger-1.6.0.orig/TigGUI/Images/SkyImage.py
+++ tigger-1.6.0/TigGUI/Images/SkyImage.py
@@ -1,715 +1,715 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-
-import numpy
-import numpy.ma
-import os.path
-import time
-
-from PyQt5 import QtCore
-from PyQt5.Qt import QObject, QRect, QRectF, QPointF, QPoint, QSizeF
-from PyQt5.Qwt import QwtPlotItem
-from PyQt5.QtCore import pyqtSignal
-from scipy.ndimage import interpolation, measurements
-
-import TigGUI.kitties.utils
-
-from astropy.io import fits as pyfits
-
-from Tigger.Coordinates import Projection
-from TigGUI.Images import Colormaps
-from Tigger.Tools import FITSHeaders
-
-
-DEG = math.pi / 180
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="skyimage")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-
-class SkyImagePlotItem(QwtPlotItem, QObject):
-    """SkyImagePlotItem is a 2D image in l,m coordimnates"""
-
-    def __init__(self, nx=0, ny=0, l0=0, m0=0, dl=1, dm=1, image=None):
-        QwtPlotItem.__init__(self)
-        # name, if any
-        self.name = self.filename = None
-        # internal init
-        self.RenderAntialiased
-        self._qo = QObject()
-        self.qimg = None
-        self._image = self._imgminmax = None
-        self._nvaluecalls = 0
-        self._value_time = self._value_time0 = None
-        self._lminmax = (0, 0)
-        self._mminmax = (0, 0)
-        self._cache_qimage = {}
-        self._cache_mapping = self._cache_imap = self._cache_interp = None
-        self._psfsize = 0, 0, 0
-        #self.projection = None
-        self._nx, self._ny = 0, 0
-        self._l0, self._m0 = 0, 0
-        self._dl, self._dm = 0, 0
-        self._x0, self._y0 = 0, 0
-        self._lminmax = None
-        self._mminmax = None
-        self._bounding_rect = None
-        self._bounding_rect_pix = None
-        self._image_key = None
-        self._prefilter = None
-        self._current_rect = None
-        self._current_rect_pix = None
-        # set image, if specified
-        if image is not None:
-            nx, ny = image.shape
-            self.setImage(image)
-        # set coordinates, if specified
-        if nx and ny:
-            self.setImageCoordinates(nx, ny, l0, m0, dl, dm)
-        # set default colormap and intensity map
-        self.colormap = Colormaps.GreyscaleColormap
-        self.imap = Colormaps.LinearIntensityMap()
-        self.signalRepaint = None
-        self.signalSlice = None
-        self.signalRaise = None
-        self.signalUnload = None
-        self.signalCenter = None
-        self.signalPlotRaised = None
-
-    # start of signal connection methods
-
-    def connectRepaint(self, sig):
-        self.signalRepaint = sig
-
-    def connectSlice(self, sig):
-        self.signalSlice = sig
-
-    def connectRaise(self, sig):
-        self.signalRaise = sig
-
-    def connectUnload(self, sig):
-        self.signalUnload = sig
-
-    def connectCenter(self, sig):
-        self.signalCenter = sig
-
-    def connectPlotRiased(self, sig):
-        self.signalPlotRaised = sig
-
-    # end  of signal connection methods
-
-    def clearDisplayCache(self):
-        """Clears all display caches."""
-        self._cache_qimage = {}
-        self._cache_interp = self._cache_imap = None
-
-    def setColorMap(self, cmap=None, emit=True):
-        """Changes the colormap. If called with no arguments, clears colormap-dependent caches"""
-        self._cache_qimage = {}
-        if cmap:
-            self.colormap = cmap
-        if emit:
-            self.signalRepaint.emit()
-
-    def updateCurrentColorMap(self):
-        self._cache_qimage = {}
-        self.signalRepaint.emit()
-
-    def setIntensityMap(self, imap=None, emit=True):
-        """Changes the intensity map. If called with no arguments, clears intensity map-dependent caches"""
-        self._cache_qimage = {}
-        self._cache_imap = None
-        if imap:
-            self.imap = imap
-        if emit:
-            self.signalRepaint.emit()
-
-    def colorMap(self):
-        return self.colormap
-
-    def intensityMap(self):
-        return self.imap
-
-    def setImageCoordinates(self, nx, ny, x0, y0, l0, m0, dl, dm):
-        """Sets up image coordinates. Pixel x0,y0 is centered at location l0,m0 in the plot, pixel size is dl,dm, image size is (nx,ny)"""
-        dprint(2, "image coordinates are", nx, ny, x0, y0, l0, m0, dl, dm)
-        self._nx, self._ny = nx, ny
-        self._l0, self._m0 = l0, m0
-        self._dl, self._dm = dl, dm
-        self._x0, self._y0 = x0, y0
-        self._lminmax = (l0 - dl * (x0 + 0.5), l0 + (nx - x0 - 0.5) * dl)
-        if dl < 0:
-            self._lminmax = (self._lminmax[1], self._lminmax[0])
-        self._mminmax = (m0 - dm * (y0 + 0.5), m0 + (ny - y0 - 0.5) * dm)
-        self._bounding_rect = QRectF(self._lminmax[0], self._mminmax[0], nx * abs(dl), ny * abs(dm))
-        self._bounding_rect_pix = QRect(0, 0, nx, ny)
-        dprint(2, "image extents are", self._lminmax, self._mminmax)
-
-    def imageDims(self):
-        """Returns image dimensions as mx,ny"""
-        return self._nx, self._ny
-
-    def referencePixel(self):
-        return self._x0, self._y0
-
-    def lmToPix(self, l, m):
-        """Converts l,m coordimnates to float (so possibly fractional) pixel coordinates."""
-        return self._x0 + (l - self._l0) / self._dl, self._y0 + (m - self._m0) / self._dm
-
-    def pixToLm(self, x, y):
-        """Converts pixel coordinates to lm coordinates."""
-        return self._l0 + (x - self._x0) * self._dl, self._m0 + (y - self._y0) * self._dm
-
-    def getExtents(self):
-        """Returns image extent, as (l0,l1),(m0,m1)"""
-        return self._lminmax, self._mminmax
-
-    def boundingRect(self):
-        """Returns bouding rectangle of image, in lm coordinates."""
-        return self._bounding_rect
-
-    def currentRect(self):
-        """Returns currently visible rectange, in lm coordinates. Coordinates may be outside of image range."""
-        return self._current_rect
-
-    def currentRectPix(self):
-        """Returns currently visible rectange, in pixel coordinates. Pixel coordinates are bounded to 0,0 and nx-1,ny-1."""
-        return self._current_rect_pix
-
-    def setImage(self, image, key=None, minmax=None):
-        """Sets image array.
-        If key is not None, sets this as the image key (for use with the pixmap cache.)
-        If minmax is not None, then stores this as the (presumably cached or precomputed) min/max values.
-        """
-        self._image = image
-        self._imgminmax = minmax
-        self._image_key = key
-        # clear intermediate caches
-        self._prefilter = self._cache_interp = self._cache_imap = None
-        # if key is None, also clear QImage cache -- it only works when we have images identified by keys
-        if key is None:
-            self._cache_qimage = {}
-
-    def image(self):
-        """Returns image array."""
-        return self._image
-
-    def imagePixel(self, x, y):
-        if numpy.ma.isMA(self._image):
-            return self._image.data[x, y], self._image.mask[x, y]
-        else:
-            return self._image[x, y], False
-
-    def imageMinMax(self):
-        if not self._imgminmax:
-            dprint(3, "computing image min/max")
-            rdata, rmask = self.optimalRavel(self._image)
-            try:
-                self._imgminmax = measurements.extrema(rdata, labels=rmask, index=None if rmask is None else False)[:2]
-            except:
-                # when all data is masked, some versions of extrema() throw an exception
-                self._imgminmax = numpy.nan, numpy.nan
-            dprint(3, self._imgminmax)
-        return self._imgminmax
-
-    def draw(self, painter, xmap, ymap, rect, use_cache=True):
-        """Implements QwtPlotItem.draw(), to render the image on the given painter."""
-        xp1, xp2, xdp, xs1, xs2, xds = xinfo = xmap.p1(), xmap.p2(), xmap.pDist(), xmap.s1(), xmap.s2(), xmap.sDist()
-        yp1, yp2, ydp, ys1, ys2, yds = yinfo = ymap.p1(), ymap.p2(), ymap.pDist(), ymap.s1(), ymap.s2(), ymap.sDist()
-        dprint(5, "draw:", rect, xinfo, yinfo)
-        self._current_rect = QRectF(QPointF(xs2, ys1), QSizeF(xds, yds))
-        self._current_rect_pix = QRect(QPoint(*self.lmToPix(xs1, ys1)), QPoint(*self.lmToPix(xs2, ys2))).intersected(
-            self._bounding_rect_pix)
-        dprint(5, "draw:", self._current_rect_pix)
-        # put together tuple describing current mapping
-        mapping = xinfo, yinfo
-        # if mapping has changed w.r.t. cache (i.e. zoom has changed), discard all cached QImages
-        if mapping != self._cache_mapping:
-            dprint(2, "does not match cached mapping, cache is:", self._cache_mapping)
-            dprint(2, "and we have:", mapping)
-            self.clearDisplayCache()
-            self._cache_mapping = mapping
-        t0 = time.time()
-        # check cached QImage for current image key.
-        self.qimg = self._cache_qimage.get(self._image_key)
-        if self.qimg:
-            dprint(5, "QImage found in cache, reusing")
-        # else regenerate image
-        else:
-            # check for cached intensity-mapped data
-            if self._cache_imap is not None:
-                dprint(5, "intensity-mapped data found in cache, reusing")
-            else:
-                if self._cache_interp is not None:
-                    dprint(5, "interpolated data found in cache, reusing")
-                else:
-                    image = self._image.transpose() if self._data_fortran_order else self._image
-                    spline_order = 2
-                    xsamp = abs(xmap.sDist() / xmap.pDist()) / abs(self._dl)
-                    ysamp = abs(ymap.sDist() / ymap.pDist()) / abs(self._dm)
-                    if max(xsamp, ysamp) < .33 or min(xsamp, ysamp) > 2:
-                        spline_order = 1
-                    dprint(2, "regenerating drawing cache, sampling factors are", xsamp, ysamp, "spline order is",
-                           spline_order)
-                    self._cache_imap = None
-                    if self._prefilter is None and spline_order > 1:
-                        self._prefilter = interpolation.spline_filter(image, order=spline_order)
-                        dprint(2, "spline prefiltering took", time.time() - t0, "secs")
-                        t0 = time.time()
-                    # make arrays of plot coordinates
-                    # xp[0],yp[0] corresponds to pixel 0,0, where 0,0 is the upper-left corner of the plot
-                    # the maps are in a funny order (w.r.t. meaning of p1/p2/s1/s2), so the indices here are determined empirically
-                    # We also adjust by half-pixel, to get the world coordinate of the pixel _center_
-                    xp = xmap.s1() - (xmap.sDist() / xmap.pDist()) * (0.5 + numpy.arange(int(xmap.pDist())))
-                    yp = ymap.s2() - (ymap.sDist() / ymap.pDist()) * (0.5 + numpy.arange(int(ymap.pDist())))
-                    # now convert plot coordinates into fractional image pixel coordinates
-                    xi = self._x0 + (xp - self._l0) / self._dl
-                    yi = self._y0 + (yp - self._m0) / self._dm
-                    # interpolate image data
-                    ###        # old code for nearest-neighbour interpolation
-                    ###        # superceded by interpolation below (we simply round pixel coordinates to go to NN when oversampling)
-                    ###        xi = xi.round().astype(int)
-                    ###        oob_x = (xi<0)|(xi>=self._nx)
-                    ###        xi[oob_x] = 0
-                    ###        yi = yi.round().astype(int)
-                    ###        oob_y = (yi<0)|(yi>=self._ny)
-                    ###        yi[oob_y] = 0
-                    ###        idx = (xi[:,numpy.newaxis]*self._ny + yi[numpy.newaxis,:]).ravel()
-                    ###        interp_image = self._image.ravel()[idx].reshape((len(xi),len(yi)))
-                    ###        interp_image[oob_x,:] = 0
-                    ###        interp_image[:,oob_y] = 0
-                    ###        self._qimage_cache = self.colormap.colorize(interp_image,self._img_range)
-                    ###        self._qimage_cache_attrs = (rect,xinfo,yinfo)
-
-                    # if either axis is oversampled by a factor of 3 or more, switch to nearest-neighbour interpolation by rounding pixel values
-                    if xsamp < .33:
-                        xi = xi.round()
-                    if ysamp < .33:
-                        yi = yi.round()
-                    # make [2,nx,ny] array of interpolation coordinates
-                    xy = numpy.zeros((2, len(xi), len(yi)))
-                    xy[0, :, :] = xi[:, numpy.newaxis]
-                    xy[1, :, :] = yi[numpy.newaxis, :]
-                    # interpolate. Use NAN for out of range pixels...
-                    # for fortran order, tranpose axes for extra speed (flip XY around then)
-                    if self._data_fortran_order:
-                        xy = xy[-1::-1, ...]
-                    if spline_order > 1:
-                        interp_image = interpolation.map_coordinates(self._prefilter, xy, order=spline_order,
-                                                                     cval=numpy.nan, prefilter=False)
-                    else:
-                        interp_image = interpolation.map_coordinates(image, xy, order=spline_order, cval=numpy.nan)
-                    # ...and put a mask on them (Colormap.colorize() will make these transparent).
-                    mask = ~numpy.isfinite(interp_image)
-                    self._cache_interp = numpy.ma.masked_array(interp_image, mask)
-                    dprint(2, "interpolation took", time.time() - t0, "secs")
-                    t0 = time.time()
-                # ok, we have interpolated data in _cache_interp
-                self._cache_imap = self.imap.remap(self._cache_interp)
-                dprint(2, "intensity mapping took", time.time() - t0, "secs")
-                t0 = time.time()
-            # ok, we have intensity-mapped data in _cache_imap
-            self.qimg = self.colormap.colorize(self._cache_imap)
-            dprint(2, "colorizing took", time.time() - t0, "secs")
-            t0 = time.time()
-            if use_cache:
-                # cache the qimage
-                self._cache_qimage[self._image_key] = self.qimg.copy()
-        # now draw the image
-        t0 = time.time()
-        painter.drawImage(xp1, yp2, self.qimg)
-        dprint(2, "drawing took", time.time() - t0, "secs")
-        # when exporting images to PNG cache needs to be cleared
-        if not use_cache:
-            self.clearDisplayCache()
-
-    def setPsfSize(self, _maj, _min, _pa):
-        self._psfsize = _maj, _min, _pa
-
-    def getPsfSize(self):
-        return self._psfsize
-
-
-ScalePrefixes = ["p", "n", "\u03bc", "m", "", "K", "M", "G", "T"]
-
-
-def getScalePrefix(*values):
-    """Helper method to get the optimal scale and SI prefix for a given range of values"""
-    # take log10. If all values are zero, use prefix of 1.
-    log10 = numpy.ma.log10(numpy.ma.abs(values))
-    if log10.mask.all():
-        return 1, ""
-    # find appropriate prefix
-    # Add 1 to log10(min) (so that >=.1 unit is reported as unit), divide by 3, take floor, look up unit prefix
-    m = int(math.floor((log10.min() + 1) / 3)) + 4
-    m = max(m, 0)
-    m = min(m, len(ScalePrefixes) - 1)
-    return 10 ** ((m - 4) * 3), ScalePrefixes[m]
-
-
-class SkyCubePlotItem(SkyImagePlotItem):
-    """Extends SkyImagePlotItem with a hypercube containing extra slices."""
-
-    def __init__(self, data=None, ndim=None):
-        SkyImagePlotItem.__init__(self)
-        self.RenderAntialiased
-        # datacube (array of any rank)
-        self._data_fortran_order = None
-        self._data = self._dataminmax = None
-        # current image slice (a list of indices) applied to data to make an image
-        self.imgslice = None
-        # info about sky axes
-        self._skyaxes = [None, None]
-        # info about other axes
-        self._extra_axes = []
-        # set other info
-        self.ra0 = 0
-        self.dec0 = 0
-        if data is not None:
-            self.setData(data)
-        elif ndim:
-            self.setNumAxes(ndim)
-
-    def setData(self, data, fortran_order=False):
-        """Sets the datacube. fortran_order is a hint, which makes iteration over
-        fortran-order arrays faster when computing min/max and such."""
-        # Note that iteration order is absolutely critical for large cubes -- if data is in fortran
-        # order in memory, then that's the way we should iterate over it, period. Transposing is too
-        # slow. We therefore create 1D "views" of the data using numpy.ravel(x,order='F'), and use
-        # thse to iterate over the data for things like min/max, masking, etc.
-        if fortran_order:
-            dprint(3, "setData: computing mask (fortran order)")
-            rav = numpy.ravel(data, order='F')
-            rfin = numpy.isfinite(rav)
-            if rfin.all():
-                dprint(3, "setData: phew, all finite, nothing to be masked")
-                self._data = data
-            else:
-                dprint(3, "setData: setting masked elements to 0")
-                rmask = ~rfin
-                rav[rmask] = 0
-                dprint(3, "setData: creating masked array")
-                mask = rmask.reshape(data.shape[-1::-1]).transpose()
-                self._data = numpy.ma.masked_array(data, mask)
-        else:
-            dprint(3, "setData: computing mask (C order)")
-            fin = numpy.isfinite(data)
-            if fin.all():
-                dprint(3, "setData: phew, all finite, nothing to be masked")
-                self._data = data
-            else:
-                dprint(3, "setData: setting masked elements to 0")
-                mask = ~fin
-                data[mask] = 0
-                dprint(3, "setData: creating masked array")
-                self._data = numpy.ma.masked_array(data, mask)
-        dprint(3, "setData: wrapping up")
-        self._data_fortran_order = fortran_order
-        self._dataminmax = None
-        self.setNumAxes(data.ndim)
-        ### old slow code
-        # dprint(3,"setData: computing mask")
-        # fin = numpy.isfinite(data)
-        # mask = ~fin
-        # dprint(3,"setData: setting masked elements to 0")
-        # data[mask] = 0
-        # dprint(3,"setData: creating masked array")
-        # self._data = numpy.ma.masked_array(data,mask)
-        # dprint(3,"setData: wrapping up")
-        # self._data_fortran_order = fortran_order
-        # self._dataminmax = None
-        # self.setNumAxes(data.ndim)
-
-    def data(self):
-        """Returns datacube"""
-        return self._data
-
-    def isDataInFortranOrder(self):
-        return self._data_fortran_order
-
-    def optimalRavel(self, array):
-        """Returns the "optimal ravel" corresponding to the given array, which is either FORTRAN
-        or C order. The optimal ravel is that over which iteration is fastest.
-        Returns tuple of ravarray,ravmask. If input array is not masked, then ravmask=None."""
-        order = 'F' if self._data_fortran_order else 'C'
-        rarr = numpy.ravel(array, order=order)
-        rmask = numpy.ravel(array.mask, order=order) if numpy.ma.isMA(array) else None
-        return rarr, rmask
-
-    def dataMinMax(self):
-        if not self._dataminmax:
-            rdata, rmask = self.optimalRavel(self._data)
-            dprint(3, "computing data min/max")
-            try:
-                self._dataminmax = measurements.extrema(rdata, labels=rmask, index=None if rmask is None else False)
-            except:
-                # when all data is masked, some versions of extrema() throw an exception
-                self._dataminmax = numpy.nan, numpy.nan
-            dprint(3, self._dataminmax)
-        return self._dataminmax
-
-    def setNumAxes(self, ndim):
-        self.imgslice = [0] * ndim
-
-    def setSkyAxis(self, n, iaxis, nx, x0, dx, xpix0):
-        """Sets the sky axis, n=0 for RA and n=1 for Dec"""
-        if not self.imgslice:
-            raise RuntimeError("setNumAxes() must be called first")
-        # reverse axis if step is negative
-        #    if dx<0:
-        #      dx = -dx
-        #      xpix0 = nx-1-xpix0
-        #      self.imgslice[iaxis] = slice(-1,None,-1)
-        #    else:
-        self.imgslice[iaxis] = slice(None)
-        self._skyaxes[n] = iaxis, nx, x0, dx, xpix0
-        if iaxis == 0:
-            self.ra0 = x0
-        else:
-            self.dec0 = x0
-
-    def getSkyAxis(self, n):
-        return self._skyaxes[n][:2]
-
-    def setExtraAxis(self, iaxis, name, labels, values, units):
-        """Sets additional hypercube axis. labels is an array of strings, one per each axis element, for labelled axes, or None if axis should be labelled with values/units.
-        values is an array of axis values, and units are the units in which values are expressed.
-        """
-        units = units or ""
-        scale, prefix = getScalePrefix(values)
-        units = prefix + units
-        # estimate number of significant digits
-        valarr = numpy.array(values) / scale
-        try:
-            ndigits = int(math.ceil(math.log10(max(abs(valarr)) / abs((valarr[1:] - valarr[0:-1])).min())))
-            nexp = int(abs(numpy.log10(abs(valarr))).max())
-            #     print ndigits,nexp
-            if nexp > 4:
-                format = ".%de" % ndigits
-            else:
-                format = ".%df" % ndigits
-        except:
-            format = ".2g"
-        if labels is None:
-            labels = [("%d: %" + format + " %s") % (i, val / scale, units) for i, val in enumerate(values)]
-        self._extra_axes.append((iaxis, name, labels, values, units, scale))
-
-    def numExtraAxes(self):
-        return len(self._extra_axes)
-
-    def extraAxisNumberNameLabels(self, i):
-        return self._extra_axes[i][:3]
-
-    def extraAxisValues(self, i):
-        return self._extra_axes[i][3]
-
-    def extraAxisUnitScale(self, i):
-        return self._extra_axes[i][4:6]
-
-    def setPlotProjection(self, proj=None):
-        """Sets the projection of the plot. Must be called before image is drawn. If None is given, the default
-        projection is used.
-        """
-        if not (self._skyaxes[0] and self._skyaxes[1]):
-            raise RuntimeError("setSkyAxis() must be called for both sky axes")
-        (iaxis_ra, nx, ra0, dra, i0), (iaxis_dec, ny, dec0, ddec, j0) = self._skyaxes
-        proj = proj or self.projection
-        # setup projection properties and get center of field
-        l0, m0 = proj.lm(ra0, dec0)
-        # find cell sizes
-        if proj is self.projection:
-            dl, dm = -self.projection.xscale, self.projection.yscale
-        else:
-            dl = proj.offset(dra, 0)[0]
-            dm = proj.offset(0, ddec)[1]
-        # setup image coordinates
-        self.setImageCoordinates(nx, ny, i0, j0, l0, m0, dl, dm)
-
-    def setDefaultProjection(self, projection=None):
-        """Sets default image projection. If None is given, sets up default SinWCS projection."""
-        # FITSWCS_static does not seem to be called often, if at all.
-        self.projection = projection or Projection.FITSWCS_static(self.ra0, self.dec0)
-        self.setPlotProjection()
-
-    def _setupSlice(self):
-        index = tuple(self.imgslice)
-        key = tuple([index[iaxis] for iaxis, name, labels, values, units, scale in self._extra_axes])
-        image = self._data[index]
-        self.setImage(self._data[index], key=key)
-
-    def selectSlice(self, *indices):
-        if len(indices) != len(self._extra_axes):
-            raise ValueError("number of indices does not match number of extra axes""")
-        for i, (iaxis, name, labels, values, units, scale) in enumerate(self._extra_axes):
-            self.imgslice[iaxis] = indices[i]
-        self._setupSlice()
-        self.signalSlice.emit(indices)
-
-    def currentSlice(self):
-        return list(self.imgslice)
-
-
-class FITSImagePlotItem(SkyCubePlotItem):
-    fits_header = None
-
-    @staticmethod
-    def hasComplexAxis(hdr):
-        """Returns True if given FITS header has a complex axis (must be last axis)"""
-        nax = hdr['NAXIS']
-        return nax if hdr['CTYPE%d' % nax].strip() == "COMPLEX" else 0
-
-    @staticmethod
-    def addComplexAxis(header):
-        """Adds a complex axis to the given FITS header, returns new copy of header"""
-        hdr = header.copy()
-        nax = hdr['NAXIS'] + 1
-        hdr['NAXIS'] = nax
-        hdr.set('NAXIS%d' % nax, 2, "complex image")
-        hdr.set('CTYPE%d' % nax, "COMPLEX", "complex image")
-        hdr.set('CRPIX%d' % nax, 1)
-        hdr.set('CRVAL%d' % nax, 1)
-        hdr.set('CDELT%d' % nax, 1)
-        return hdr
-
-    @staticmethod
-    def removeComplexAxis(header):
-        """Removes a complex axis from the given FITS header, returns new copy of header"""
-        axis = FITSImagePlotItem.hasComplexAxis(header)
-        if axis:
-            header = header.copy()
-            header['NAXIS'] = axis - 1
-            for name in 'NAXIS', 'CTYPE', 'CRPIX', 'CRVAL', 'CDELT':
-                key = "%s%d" % (name, axis)
-                if key in header:
-                    del header[key]
-        return header
-
-    def __init__(self, filename=None, name=None, hdu=None):
-        SkyCubePlotItem.__init__(self)
-        self.RenderAntialiased
-        self.name = name
-        if filename or hdu:
-            self.read(filename, hdu)
-
-    StokesNames = FITSHeaders.StokesNames
-    ComplexNames = FITSHeaders.ComplexNames
-
-    def read(self, filename, hdu=None):
-        self.filename = filename
-        self.name = self.name or os.path.basename(filename)
-        # read FITS file
-        if not hdu:
-            dprint(3, "opening", filename)
-            hdu = pyfits.open(filename)[0]
-            hdu.verify('silentfix')
-            if os.path.getsize(filename) < hdu._file.tell():
-                raise RuntimeError(
-                    f"FITS file may have been truncated: file length ({os.path.getsize(filename)}) "
-                    f"is smaller than expected ({hdu._file.tell()})")
-        hdr = self.fits_header = hdu.header
-        dprint(3, "reading data")
-        data = hdu.data
-        # NB: all-data operations (such as getting global min/max or computing of histograms) are much faster
-        # (almost x2) when data is iterated
-        # over in the proper order. After a transpose(), data is in fortran order. Tell this to setData().
-        data = numpy.transpose(data)  # .copy()
-        dprint(3, "setting data")
-        self.setData(data, fortran_order=True)
-        dprint(3, "reading header")
-        ndim = hdr['NAXIS']
-        if ndim < 2:
-            raise ValueError("Cannot load a one-dimensional FITS file")
-        # setup projection
-        # (strip out history from header, as big histories really slow down FITSWCS)
-        hdr1 = pyfits.Header([x for x in hdr.cards if not str(x).startswith('HISTORY')])
-        proj = Projection.FITSWCS(hdr1)
-        nx = ny = None
-        # find X and Y axes
-        for iaxis in range(ndim):
-            axs = str(iaxis + 1)
-            npix = hdr['NAXIS' + axs]
-            name = hdr.get('CTYPE' + axs, axs).strip().upper()
-            # have we found the coordinate axes?
-            if FITSHeaders.isAxisTypeX(name):
-                nx = npix
-                iaxis_ra = iaxis
-            elif FITSHeaders.isAxisTypeY(name):
-                ny = npix
-                iaxis_dec = iaxis
-        # check that we have them
-        if nx is None or ny is None:
-            iaxis_ra, iaxis_dec = 0, 1
-            nx, ny = hdr.get('NAXIS1'), hdr.get('NAXIS2')
-        for iaxis in range(ndim):
-            axs = str(iaxis + 1)
-            # get axis description
-            npix = hdr['NAXIS' + axs]
-            crval = hdr.get('CRVAL' + axs, 0)
-            cdelt = hdr.get('CDELT' + axs, 1)
-            crpix = hdr.get('CRPIX' + axs, 1) - 1
-            name = hdr.get('CTYPE' + axs, axs).strip().upper()
-            unit = hdr.get('CUNIT' + axs)
-            # if this is not an X/Y axis, add it to the slicers
-            if iaxis not in (iaxis_ra, iaxis_dec):
-                # values becomes a list of axis values
-                values = list(crval + (numpy.arange(npix) - crpix) * cdelt)
-                unit = unit and unit.lower().capitalize()
-                # FITS knows of two enumerable axes: STOKES and COMPLEX. For these two, replace values with proper names
-                if name == "STOKES":
-                    labels = [(self.StokesNames[int(i)] if i > 0 and i < len(self.StokesNames) else "%d" % i) for i in
-                              values]
-                elif name == "COMPLEX":
-                    labels = [(self.ComplexNames[int(i)] if i > 0 and i < len(self.ComplexNames) else "%d" % i) for i in
-                              values]
-                else:
-                    name = name.split("-")[0]
-                    # if values are a simple sequence startying at 0 or 1, make simple labels
-                    if cdelt == 1 and values[0] in (0., 1.):
-                        labels = ["%d%s" % (val, unit) for val in values]
-                    # else set labels to None: setExtraAxis() will figure it out
-                    else:
-                        labels = None
-                self.setExtraAxis(iaxis, name or ("axis " + axs), labels, values, unit)
-        # check for beam parameters
-        psf = [hdr.get(x, None) for x in ('BMAJ', 'BMIN', 'BPA')]
-        if all([x is not None for x in psf]):
-            self.setPsfSize(*[p / 180 * math.pi for p in psf])
-        self.setSkyAxis(0, iaxis_ra, nx, proj.ra0, -proj.xscale, proj.xpix0)
-        self.setSkyAxis(1, iaxis_dec, ny, proj.dec0, proj.yscale, proj.ypix0)
-        self.setDefaultProjection(proj)
-        dprint(3, "setting initial slice")
-        self._setupSlice()
-
-    def save(self, filename):
-        data = data1 = self.data().transpose()
-        if numpy.ma.isMA(data):
-            data1 = data.data.copy()
-            data1[data.mask] = numpy.NAN
-        hdu = pyfits.PrimaryHDU(data1, self.fits_header)
-        hdu.verify('silentfix')
-        if os.path.exists(filename):
-            os.remove(filename)
-        hdu.writeto(filename, overwrite=True)
-        self.filename = filename
-        self.name = os.path.basename(filename)
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+
+import numpy
+import numpy.ma
+import os.path
+import time
+
+from PyQt5 import QtCore
+from PyQt5.Qt import QObject, QRect, QRectF, QPointF, QPoint, QSizeF
+from PyQt5.Qwt import QwtPlotItem
+from PyQt5.QtCore import pyqtSignal
+from scipy.ndimage import interpolation, measurements
+
+import TigGUI.kitties.utils
+
+from astropy.io import fits as pyfits
+
+from Tigger.Coordinates import Projection
+from TigGUI.Images import Colormaps
+from Tigger.Tools import FITSHeaders
+
+
+DEG = math.pi / 180
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="skyimage")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+
+class SkyImagePlotItem(QwtPlotItem, QObject):
+    """SkyImagePlotItem is a 2D image in l,m coordimnates"""
+
+    def __init__(self, nx=0, ny=0, l0=0, m0=0, dl=1, dm=1, image=None):
+        QwtPlotItem.__init__(self)
+        # name, if any
+        self.name = self.filename = None
+        # internal init
+        self.RenderAntialiased
+        self._qo = QObject()
+        self.qimg = None
+        self._image = self._imgminmax = None
+        self._nvaluecalls = 0
+        self._value_time = self._value_time0 = None
+        self._lminmax = (0, 0)
+        self._mminmax = (0, 0)
+        self._cache_qimage = {}
+        self._cache_mapping = self._cache_imap = self._cache_interp = None
+        self._psfsize = 0, 0, 0
+        #self.projection = None
+        self._nx, self._ny = 0, 0
+        self._l0, self._m0 = 0, 0
+        self._dl, self._dm = 0, 0
+        self._x0, self._y0 = 0, 0
+        self._lminmax = None
+        self._mminmax = None
+        self._bounding_rect = None
+        self._bounding_rect_pix = None
+        self._image_key = None
+        self._prefilter = None
+        self._current_rect = None
+        self._current_rect_pix = None
+        # set image, if specified
+        if image is not None:
+            nx, ny = image.shape
+            self.setImage(image)
+        # set coordinates, if specified
+        if nx and ny:
+            self.setImageCoordinates(nx, ny, l0, m0, dl, dm)
+        # set default colormap and intensity map
+        self.colormap = Colormaps.GreyscaleColormap
+        self.imap = Colormaps.LinearIntensityMap()
+        self.signalRepaint = None
+        self.signalSlice = None
+        self.signalRaise = None
+        self.signalUnload = None
+        self.signalCenter = None
+        self.signalPlotRaised = None
+
+    # start of signal connection methods
+
+    def connectRepaint(self, sig):
+        self.signalRepaint = sig
+
+    def connectSlice(self, sig):
+        self.signalSlice = sig
+
+    def connectRaise(self, sig):
+        self.signalRaise = sig
+
+    def connectUnload(self, sig):
+        self.signalUnload = sig
+
+    def connectCenter(self, sig):
+        self.signalCenter = sig
+
+    def connectPlotRiased(self, sig):
+        self.signalPlotRaised = sig
+
+    # end  of signal connection methods
+
+    def clearDisplayCache(self):
+        """Clears all display caches."""
+        self._cache_qimage = {}
+        self._cache_interp = self._cache_imap = None
+
+    def setColorMap(self, cmap=None, emit=True):
+        """Changes the colormap. If called with no arguments, clears colormap-dependent caches"""
+        self._cache_qimage = {}
+        if cmap:
+            self.colormap = cmap
+        if emit:
+            self.signalRepaint.emit()
+
+    def updateCurrentColorMap(self):
+        self._cache_qimage = {}
+        self.signalRepaint.emit()
+
+    def setIntensityMap(self, imap=None, emit=True):
+        """Changes the intensity map. If called with no arguments, clears intensity map-dependent caches"""
+        self._cache_qimage = {}
+        self._cache_imap = None
+        if imap:
+            self.imap = imap
+        if emit:
+            self.signalRepaint.emit()
+
+    def colorMap(self):
+        return self.colormap
+
+    def intensityMap(self):
+        return self.imap
+
+    def setImageCoordinates(self, nx, ny, x0, y0, l0, m0, dl, dm):
+        """Sets up image coordinates. Pixel x0,y0 is centered at location l0,m0 in the plot, pixel size is dl,dm, image size is (nx,ny)"""
+        dprint(2, "image coordinates are", nx, ny, x0, y0, l0, m0, dl, dm)
+        self._nx, self._ny = nx, ny
+        self._l0, self._m0 = l0, m0
+        self._dl, self._dm = dl, dm
+        self._x0, self._y0 = x0, y0
+        self._lminmax = (l0 - dl * (x0 + 0.5), l0 + (nx - x0 - 0.5) * dl)
+        if dl < 0:
+            self._lminmax = (self._lminmax[1], self._lminmax[0])
+        self._mminmax = (m0 - dm * (y0 + 0.5), m0 + (ny - y0 - 0.5) * dm)
+        self._bounding_rect = QRectF(self._lminmax[0], self._mminmax[0], nx * abs(dl), ny * abs(dm))
+        self._bounding_rect_pix = QRect(0, 0, nx, ny)
+        dprint(2, "image extents are", self._lminmax, self._mminmax)
+
+    def imageDims(self):
+        """Returns image dimensions as mx,ny"""
+        return self._nx, self._ny
+
+    def referencePixel(self):
+        return self._x0, self._y0
+
+    def lmToPix(self, l, m):
+        """Converts l,m coordimnates to float (so possibly fractional) pixel coordinates."""
+        return self._x0 + (l - self._l0) / self._dl, self._y0 + (m - self._m0) / self._dm
+
+    def pixToLm(self, x, y):
+        """Converts pixel coordinates to lm coordinates."""
+        return self._l0 + (x - self._x0) * self._dl, self._m0 + (y - self._y0) * self._dm
+
+    def getExtents(self):
+        """Returns image extent, as (l0,l1),(m0,m1)"""
+        return self._lminmax, self._mminmax
+
+    def boundingRect(self):
+        """Returns bouding rectangle of image, in lm coordinates."""
+        return self._bounding_rect
+
+    def currentRect(self):
+        """Returns currently visible rectange, in lm coordinates. Coordinates may be outside of image range."""
+        return self._current_rect
+
+    def currentRectPix(self):
+        """Returns currently visible rectange, in pixel coordinates. Pixel coordinates are bounded to 0,0 and nx-1,ny-1."""
+        return self._current_rect_pix
+
+    def setImage(self, image, key=None, minmax=None):
+        """Sets image array.
+        If key is not None, sets this as the image key (for use with the pixmap cache.)
+        If minmax is not None, then stores this as the (presumably cached or precomputed) min/max values.
+        """
+        self._image = image
+        self._imgminmax = minmax
+        self._image_key = key
+        # clear intermediate caches
+        self._prefilter = self._cache_interp = self._cache_imap = None
+        # if key is None, also clear QImage cache -- it only works when we have images identified by keys
+        if key is None:
+            self._cache_qimage = {}
+
+    def image(self):
+        """Returns image array."""
+        return self._image
+
+    def imagePixel(self, x, y):
+        if numpy.ma.isMA(self._image):
+            return self._image.data[x, y], self._image.mask[x, y]
+        else:
+            return self._image[x, y], False
+
+    def imageMinMax(self):
+        if not self._imgminmax:
+            dprint(3, "computing image min/max")
+            rdata, rmask = self.optimalRavel(self._image)
+            try:
+                self._imgminmax = measurements.extrema(rdata, labels=rmask, index=None if rmask is None else False)[:2]
+            except:
+                # when all data is masked, some versions of extrema() throw an exception
+                self._imgminmax = numpy.nan, numpy.nan
+            dprint(3, self._imgminmax)
+        return self._imgminmax
+
+    def draw(self, painter, xmap, ymap, rect, use_cache=True):
+        """Implements QwtPlotItem.draw(), to render the image on the given painter."""
+        xp1, xp2, xdp, xs1, xs2, xds = xinfo = xmap.p1(), xmap.p2(), xmap.pDist(), xmap.s1(), xmap.s2(), xmap.sDist()
+        yp1, yp2, ydp, ys1, ys2, yds = yinfo = ymap.p1(), ymap.p2(), ymap.pDist(), ymap.s1(), ymap.s2(), ymap.sDist()
+        dprint(5, "draw:", rect, xinfo, yinfo)
+        self._current_rect = QRectF(QPointF(xs2, ys1), QSizeF(xds, yds))
+        self._current_rect_pix = QRect(QPoint(*self.lmToPix(xs1, ys1)), QPoint(*self.lmToPix(xs2, ys2))).intersected(
+            self._bounding_rect_pix)
+        dprint(5, "draw:", self._current_rect_pix)
+        # put together tuple describing current mapping
+        mapping = xinfo, yinfo
+        # if mapping has changed w.r.t. cache (i.e. zoom has changed), discard all cached QImages
+        if mapping != self._cache_mapping:
+            dprint(2, "does not match cached mapping, cache is:", self._cache_mapping)
+            dprint(2, "and we have:", mapping)
+            self.clearDisplayCache()
+            self._cache_mapping = mapping
+        t0 = time.time()
+        # check cached QImage for current image key.
+        self.qimg = self._cache_qimage.get(self._image_key)
+        if self.qimg:
+            dprint(5, "QImage found in cache, reusing")
+        # else regenerate image
+        else:
+            # check for cached intensity-mapped data
+            if self._cache_imap is not None:
+                dprint(5, "intensity-mapped data found in cache, reusing")
+            else:
+                if self._cache_interp is not None:
+                    dprint(5, "interpolated data found in cache, reusing")
+                else:
+                    image = self._image.transpose() if self._data_fortran_order else self._image
+                    spline_order = 2
+                    xsamp = abs(xmap.sDist() / xmap.pDist()) / abs(self._dl)
+                    ysamp = abs(ymap.sDist() / ymap.pDist()) / abs(self._dm)
+                    if max(xsamp, ysamp) < .33 or min(xsamp, ysamp) > 2:
+                        spline_order = 1
+                    dprint(2, "regenerating drawing cache, sampling factors are", xsamp, ysamp, "spline order is",
+                           spline_order)
+                    self._cache_imap = None
+                    if self._prefilter is None and spline_order > 1:
+                        self._prefilter = interpolation.spline_filter(image, order=spline_order)
+                        dprint(2, "spline prefiltering took", time.time() - t0, "secs")
+                        t0 = time.time()
+                    # make arrays of plot coordinates
+                    # xp[0],yp[0] corresponds to pixel 0,0, where 0,0 is the upper-left corner of the plot
+                    # the maps are in a funny order (w.r.t. meaning of p1/p2/s1/s2), so the indices here are determined empirically
+                    # We also adjust by half-pixel, to get the world coordinate of the pixel _center_
+                    xp = xmap.s1() - (xmap.sDist() / xmap.pDist()) * (0.5 + numpy.arange(int(xmap.pDist())))
+                    yp = ymap.s2() - (ymap.sDist() / ymap.pDist()) * (0.5 + numpy.arange(int(ymap.pDist())))
+                    # now convert plot coordinates into fractional image pixel coordinates
+                    xi = self._x0 + (xp - self._l0) / self._dl
+                    yi = self._y0 + (yp - self._m0) / self._dm
+                    # interpolate image data
+                    ###        # old code for nearest-neighbour interpolation
+                    ###        # superceded by interpolation below (we simply round pixel coordinates to go to NN when oversampling)
+                    ###        xi = xi.round().astype(int)
+                    ###        oob_x = (xi<0)|(xi>=self._nx)
+                    ###        xi[oob_x] = 0
+                    ###        yi = yi.round().astype(int)
+                    ###        oob_y = (yi<0)|(yi>=self._ny)
+                    ###        yi[oob_y] = 0
+                    ###        idx = (xi[:,numpy.newaxis]*self._ny + yi[numpy.newaxis,:]).ravel()
+                    ###        interp_image = self._image.ravel()[idx].reshape((len(xi),len(yi)))
+                    ###        interp_image[oob_x,:] = 0
+                    ###        interp_image[:,oob_y] = 0
+                    ###        self._qimage_cache = self.colormap.colorize(interp_image,self._img_range)
+                    ###        self._qimage_cache_attrs = (rect,xinfo,yinfo)
+
+                    # if either axis is oversampled by a factor of 3 or more, switch to nearest-neighbour interpolation by rounding pixel values
+                    if xsamp < .33:
+                        xi = xi.round()
+                    if ysamp < .33:
+                        yi = yi.round()
+                    # make [2,nx,ny] array of interpolation coordinates
+                    xy = numpy.zeros((2, len(xi), len(yi)))
+                    xy[0, :, :] = xi[:, numpy.newaxis]
+                    xy[1, :, :] = yi[numpy.newaxis, :]
+                    # interpolate. Use NAN for out of range pixels...
+                    # for fortran order, tranpose axes for extra speed (flip XY around then)
+                    if self._data_fortran_order:
+                        xy = xy[-1::-1, ...]
+                    if spline_order > 1:
+                        interp_image = interpolation.map_coordinates(self._prefilter, xy, order=spline_order,
+                                                                     cval=numpy.nan, prefilter=False)
+                    else:
+                        interp_image = interpolation.map_coordinates(image, xy, order=spline_order, cval=numpy.nan)
+                    # ...and put a mask on them (Colormap.colorize() will make these transparent).
+                    mask = ~numpy.isfinite(interp_image)
+                    self._cache_interp = numpy.ma.masked_array(interp_image, mask)
+                    dprint(2, "interpolation took", time.time() - t0, "secs")
+                    t0 = time.time()
+                # ok, we have interpolated data in _cache_interp
+                self._cache_imap = self.imap.remap(self._cache_interp)
+                dprint(2, "intensity mapping took", time.time() - t0, "secs")
+                t0 = time.time()
+            # ok, we have intensity-mapped data in _cache_imap
+            self.qimg = self.colormap.colorize(self._cache_imap)
+            dprint(2, "colorizing took", time.time() - t0, "secs")
+            t0 = time.time()
+            if use_cache:
+                # cache the qimage
+                self._cache_qimage[self._image_key] = self.qimg.copy()
+        # now draw the image
+        t0 = time.time()
+        painter.drawImage(xp1, yp2, self.qimg)
+        dprint(2, "drawing took", time.time() - t0, "secs")
+        # when exporting images to PNG cache needs to be cleared
+        if not use_cache:
+            self.clearDisplayCache()
+
+    def setPsfSize(self, _maj, _min, _pa):
+        self._psfsize = _maj, _min, _pa
+
+    def getPsfSize(self):
+        return self._psfsize
+
+
+ScalePrefixes = ["p", "n", "\u03bc", "m", "", "K", "M", "G", "T"]
+
+
+def getScalePrefix(*values):
+    """Helper method to get the optimal scale and SI prefix for a given range of values"""
+    # take log10. If all values are zero, use prefix of 1.
+    log10 = numpy.ma.log10(numpy.ma.abs(values))
+    if log10.mask.all():
+        return 1, ""
+    # find appropriate prefix
+    # Add 1 to log10(min) (so that >=.1 unit is reported as unit), divide by 3, take floor, look up unit prefix
+    m = int(math.floor((log10.min() + 1) / 3)) + 4
+    m = max(m, 0)
+    m = min(m, len(ScalePrefixes) - 1)
+    return 10 ** ((m - 4) * 3), ScalePrefixes[m]
+
+
+class SkyCubePlotItem(SkyImagePlotItem):
+    """Extends SkyImagePlotItem with a hypercube containing extra slices."""
+
+    def __init__(self, data=None, ndim=None):
+        SkyImagePlotItem.__init__(self)
+        self.RenderAntialiased
+        # datacube (array of any rank)
+        self._data_fortran_order = None
+        self._data = self._dataminmax = None
+        # current image slice (a list of indices) applied to data to make an image
+        self.imgslice = None
+        # info about sky axes
+        self._skyaxes = [None, None]
+        # info about other axes
+        self._extra_axes = []
+        # set other info
+        self.ra0 = 0
+        self.dec0 = 0
+        if data is not None:
+            self.setData(data)
+        elif ndim:
+            self.setNumAxes(ndim)
+
+    def setData(self, data, fortran_order=False):
+        """Sets the datacube. fortran_order is a hint, which makes iteration over
+        fortran-order arrays faster when computing min/max and such."""
+        # Note that iteration order is absolutely critical for large cubes -- if data is in fortran
+        # order in memory, then that's the way we should iterate over it, period. Transposing is too
+        # slow. We therefore create 1D "views" of the data using numpy.ravel(x,order='F'), and use
+        # thse to iterate over the data for things like min/max, masking, etc.
+        if fortran_order:
+            dprint(3, "setData: computing mask (fortran order)")
+            rav = numpy.ravel(data, order='F')
+            rfin = numpy.isfinite(rav)
+            if rfin.all():
+                dprint(3, "setData: phew, all finite, nothing to be masked")
+                self._data = data
+            else:
+                dprint(3, "setData: setting masked elements to 0")
+                rmask = ~rfin
+                rav[rmask] = 0
+                dprint(3, "setData: creating masked array")
+                mask = rmask.reshape(data.shape[-1::-1]).transpose()
+                self._data = numpy.ma.masked_array(data, mask)
+        else:
+            dprint(3, "setData: computing mask (C order)")
+            fin = numpy.isfinite(data)
+            if fin.all():
+                dprint(3, "setData: phew, all finite, nothing to be masked")
+                self._data = data
+            else:
+                dprint(3, "setData: setting masked elements to 0")
+                mask = ~fin
+                data[mask] = 0
+                dprint(3, "setData: creating masked array")
+                self._data = numpy.ma.masked_array(data, mask)
+        dprint(3, "setData: wrapping up")
+        self._data_fortran_order = fortran_order
+        self._dataminmax = None
+        self.setNumAxes(data.ndim)
+        ### old slow code
+        # dprint(3,"setData: computing mask")
+        # fin = numpy.isfinite(data)
+        # mask = ~fin
+        # dprint(3,"setData: setting masked elements to 0")
+        # data[mask] = 0
+        # dprint(3,"setData: creating masked array")
+        # self._data = numpy.ma.masked_array(data,mask)
+        # dprint(3,"setData: wrapping up")
+        # self._data_fortran_order = fortran_order
+        # self._dataminmax = None
+        # self.setNumAxes(data.ndim)
+
+    def data(self):
+        """Returns datacube"""
+        return self._data
+
+    def isDataInFortranOrder(self):
+        return self._data_fortran_order
+
+    def optimalRavel(self, array):
+        """Returns the "optimal ravel" corresponding to the given array, which is either FORTRAN
+        or C order. The optimal ravel is that over which iteration is fastest.
+        Returns tuple of ravarray,ravmask. If input array is not masked, then ravmask=None."""
+        order = 'F' if self._data_fortran_order else 'C'
+        rarr = numpy.ravel(array, order=order)
+        rmask = numpy.ravel(array.mask, order=order) if numpy.ma.isMA(array) else None
+        return rarr, rmask
+
+    def dataMinMax(self):
+        if not self._dataminmax:
+            rdata, rmask = self.optimalRavel(self._data)
+            dprint(3, "computing data min/max")
+            try:
+                self._dataminmax = measurements.extrema(rdata, labels=rmask, index=None if rmask is None else False)
+            except:
+                # when all data is masked, some versions of extrema() throw an exception
+                self._dataminmax = numpy.nan, numpy.nan
+            dprint(3, self._dataminmax)
+        return self._dataminmax
+
+    def setNumAxes(self, ndim):
+        self.imgslice = [0] * ndim
+
+    def setSkyAxis(self, n, iaxis, nx, x0, dx, xpix0):
+        """Sets the sky axis, n=0 for RA and n=1 for Dec"""
+        if not self.imgslice:
+            raise RuntimeError("setNumAxes() must be called first")
+        # reverse axis if step is negative
+        #    if dx<0:
+        #      dx = -dx
+        #      xpix0 = nx-1-xpix0
+        #      self.imgslice[iaxis] = slice(-1,None,-1)
+        #    else:
+        self.imgslice[iaxis] = slice(None)
+        self._skyaxes[n] = iaxis, nx, x0, dx, xpix0
+        if iaxis == 0:
+            self.ra0 = x0
+        else:
+            self.dec0 = x0
+
+    def getSkyAxis(self, n):
+        return self._skyaxes[n][:2]
+
+    def setExtraAxis(self, iaxis, name, labels, values, units):
+        """Sets additional hypercube axis. labels is an array of strings, one per each axis element, for labelled axes, or None if axis should be labelled with values/units.
+        values is an array of axis values, and units are the units in which values are expressed.
+        """
+        units = units or ""
+        scale, prefix = getScalePrefix(values)
+        units = prefix + units
+        # estimate number of significant digits
+        valarr = numpy.array(values) / scale
+        try:
+            ndigits = int(math.ceil(math.log10(max(abs(valarr)) / abs((valarr[1:] - valarr[0:-1])).min())))
+            nexp = int(abs(numpy.log10(abs(valarr))).max())
+            #     print ndigits,nexp
+            if nexp > 4:
+                format = ".%de" % ndigits
+            else:
+                format = ".%df" % ndigits
+        except:
+            format = ".2g"
+        if labels is None:
+            labels = [("%d: %" + format + " %s") % (i, val / scale, units) for i, val in enumerate(values)]
+        self._extra_axes.append((iaxis, name, labels, values, units, scale))
+
+    def numExtraAxes(self):
+        return len(self._extra_axes)
+
+    def extraAxisNumberNameLabels(self, i):
+        return self._extra_axes[i][:3]
+
+    def extraAxisValues(self, i):
+        return self._extra_axes[i][3]
+
+    def extraAxisUnitScale(self, i):
+        return self._extra_axes[i][4:6]
+
+    def setPlotProjection(self, proj=None):
+        """Sets the projection of the plot. Must be called before image is drawn. If None is given, the default
+        projection is used.
+        """
+        if not (self._skyaxes[0] and self._skyaxes[1]):
+            raise RuntimeError("setSkyAxis() must be called for both sky axes")
+        (iaxis_ra, nx, ra0, dra, i0), (iaxis_dec, ny, dec0, ddec, j0) = self._skyaxes
+        proj = proj or self.projection
+        # setup projection properties and get center of field
+        l0, m0 = proj.lm(ra0, dec0)
+        # find cell sizes
+        if proj is self.projection:
+            dl, dm = -self.projection.xscale, self.projection.yscale
+        else:
+            dl = proj.offset(dra, 0)[0]
+            dm = proj.offset(0, ddec)[1]
+        # setup image coordinates
+        self.setImageCoordinates(nx, ny, i0, j0, l0, m0, dl, dm)
+
+    def setDefaultProjection(self, projection=None):
+        """Sets default image projection. If None is given, sets up default SinWCS projection."""
+        # FITSWCS_static does not seem to be called often, if at all.
+        self.projection = projection or Projection.FITSWCS_static(self.ra0, self.dec0)
+        self.setPlotProjection()
+
+    def _setupSlice(self):
+        index = tuple(self.imgslice)
+        key = tuple([index[iaxis] for iaxis, name, labels, values, units, scale in self._extra_axes])
+        image = self._data[index]
+        self.setImage(self._data[index], key=key)
+
+    def selectSlice(self, *indices):
+        if len(indices) != len(self._extra_axes):
+            raise ValueError("number of indices does not match number of extra axes""")
+        for i, (iaxis, name, labels, values, units, scale) in enumerate(self._extra_axes):
+            self.imgslice[iaxis] = indices[i]
+        self._setupSlice()
+        self.signalSlice.emit(indices)
+
+    def currentSlice(self):
+        return list(self.imgslice)
+
+
+class FITSImagePlotItem(SkyCubePlotItem):
+    fits_header = None
+
+    @staticmethod
+    def hasComplexAxis(hdr):
+        """Returns True if given FITS header has a complex axis (must be last axis)"""
+        nax = hdr['NAXIS']
+        return nax if hdr['CTYPE%d' % nax].strip() == "COMPLEX" else 0
+
+    @staticmethod
+    def addComplexAxis(header):
+        """Adds a complex axis to the given FITS header, returns new copy of header"""
+        hdr = header.copy()
+        nax = hdr['NAXIS'] + 1
+        hdr['NAXIS'] = nax
+        hdr.set('NAXIS%d' % nax, 2, "complex image")
+        hdr.set('CTYPE%d' % nax, "COMPLEX", "complex image")
+        hdr.set('CRPIX%d' % nax, 1)
+        hdr.set('CRVAL%d' % nax, 1)
+        hdr.set('CDELT%d' % nax, 1)
+        return hdr
+
+    @staticmethod
+    def removeComplexAxis(header):
+        """Removes a complex axis from the given FITS header, returns new copy of header"""
+        axis = FITSImagePlotItem.hasComplexAxis(header)
+        if axis:
+            header = header.copy()
+            header['NAXIS'] = axis - 1
+            for name in 'NAXIS', 'CTYPE', 'CRPIX', 'CRVAL', 'CDELT':
+                key = "%s%d" % (name, axis)
+                if key in header:
+                    del header[key]
+        return header
+
+    def __init__(self, filename=None, name=None, hdu=None):
+        SkyCubePlotItem.__init__(self)
+        self.RenderAntialiased
+        self.name = name
+        if filename or hdu:
+            self.read(filename, hdu)
+
+    StokesNames = FITSHeaders.StokesNames
+    ComplexNames = FITSHeaders.ComplexNames
+
+    def read(self, filename, hdu=None):
+        self.filename = filename
+        self.name = self.name or os.path.basename(filename)
+        # read FITS file
+        if not hdu:
+            dprint(3, "opening", filename)
+            hdu = pyfits.open(filename)[0]
+            hdu.verify('silentfix')
+            if os.path.getsize(filename) < hdu._file.tell():
+                raise RuntimeError(
+                    f"FITS file may have been truncated: file length ({os.path.getsize(filename)}) "
+                    f"is smaller than expected ({hdu._file.tell()})")
+        hdr = self.fits_header = hdu.header
+        dprint(3, "reading data")
+        data = hdu.data
+        # NB: all-data operations (such as getting global min/max or computing of histograms) are much faster
+        # (almost x2) when data is iterated
+        # over in the proper order. After a transpose(), data is in fortran order. Tell this to setData().
+        data = numpy.transpose(data)  # .copy()
+        dprint(3, "setting data")
+        self.setData(data, fortran_order=True)
+        dprint(3, "reading header")
+        ndim = hdr['NAXIS']
+        if ndim < 2:
+            raise ValueError("Cannot load a one-dimensional FITS file")
+        # setup projection
+        # (strip out history from header, as big histories really slow down FITSWCS)
+        hdr1 = pyfits.Header([x for x in hdr.cards if not str(x).startswith('HISTORY')])
+        proj = Projection.FITSWCS(hdr1)
+        nx = ny = None
+        # find X and Y axes
+        for iaxis in range(ndim):
+            axs = str(iaxis + 1)
+            npix = hdr['NAXIS' + axs]
+            name = hdr.get('CTYPE' + axs, axs).strip().upper()
+            # have we found the coordinate axes?
+            if FITSHeaders.isAxisTypeX(name):
+                nx = npix
+                iaxis_ra = iaxis
+            elif FITSHeaders.isAxisTypeY(name):
+                ny = npix
+                iaxis_dec = iaxis
+        # check that we have them
+        if nx is None or ny is None:
+            iaxis_ra, iaxis_dec = 0, 1
+            nx, ny = hdr.get('NAXIS1'), hdr.get('NAXIS2')
+        for iaxis in range(ndim):
+            axs = str(iaxis + 1)
+            # get axis description
+            npix = hdr['NAXIS' + axs]
+            crval = hdr.get('CRVAL' + axs, 0)
+            cdelt = hdr.get('CDELT' + axs, 1)
+            crpix = hdr.get('CRPIX' + axs, 1) - 1
+            name = hdr.get('CTYPE' + axs, axs).strip().upper()
+            unit = hdr.get('CUNIT' + axs)
+            # if this is not an X/Y axis, add it to the slicers
+            if iaxis not in (iaxis_ra, iaxis_dec):
+                # values becomes a list of axis values
+                values = list(crval + (numpy.arange(npix) - crpix) * cdelt)
+                unit = unit and unit.lower().capitalize()
+                # FITS knows of two enumerable axes: STOKES and COMPLEX. For these two, replace values with proper names
+                if name == "STOKES":
+                    labels = [(self.StokesNames[int(i)] if i > 0 and i < len(self.StokesNames) else "%d" % i) for i in
+                              values]
+                elif name == "COMPLEX":
+                    labels = [(self.ComplexNames[int(i)] if i > 0 and i < len(self.ComplexNames) else "%d" % i) for i in
+                              values]
+                else:
+                    name = name.split("-")[0]
+                    # if values are a simple sequence startying at 0 or 1, make simple labels
+                    if cdelt == 1 and values[0] in (0., 1.):
+                        labels = ["%d%s" % (val, unit) for val in values]
+                    # else set labels to None: setExtraAxis() will figure it out
+                    else:
+                        labels = None
+                self.setExtraAxis(iaxis, name or ("axis " + axs), labels, values, unit)
+        # check for beam parameters
+        psf = [hdr.get(x, None) for x in ('BMAJ', 'BMIN', 'BPA')]
+        if all([x is not None for x in psf]):
+            self.setPsfSize(*[p / 180 * math.pi for p in psf])
+        self.setSkyAxis(0, iaxis_ra, nx, proj.ra0, -proj.xscale, proj.xpix0)
+        self.setSkyAxis(1, iaxis_dec, ny, proj.dec0, proj.yscale, proj.ypix0)
+        self.setDefaultProjection(proj)
+        dprint(3, "setting initial slice")
+        self._setupSlice()
+
+    def save(self, filename):
+        data = data1 = self.data().transpose()
+        if numpy.ma.isMA(data):
+            data1 = data.data.copy()
+            data1[data.mask] = numpy.NAN
+        hdu = pyfits.PrimaryHDU(data1, self.fits_header)
+        hdu.verify('silentfix')
+        if os.path.exists(filename):
+            os.remove(filename)
+        hdu.writeto(filename, overwrite=True)
+        self.filename = filename
+        self.name = os.path.basename(filename)
--- tigger-1.6.0.orig/TigGUI/Images/__init__.py
+++ tigger-1.6.0/TigGUI/Images/__init__.py
@@ -1,28 +1,28 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import os.path
-
-FITS_ExtensionList = [".fts", ".FTS", ".fits", ".FITS", ".fit", ".FIT"]
-
-
-def isFITS(filename):
-    return os.path.splitext(filename)[1] in FITS_ExtensionList
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import os.path
+
+FITS_ExtensionList = [".fts", ".FTS", ".fits", ".FITS", ".fit", ".FIT"]
+
+
+def isFITS(filename):
+    return os.path.splitext(filename)[1] in FITS_ExtensionList
--- tigger-1.6.0.orig/TigGUI/MainWindow.py
+++ tigger-1.6.0/TigGUI/MainWindow.py
@@ -1,775 +1,775 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import os
-import sys
-
-import Tigger.Models.Formats
-from PyQt5.Qt import QWidget, QFileDialog, QDialog, QVBoxLayout, \
-    Qt, QSize, QSizePolicy, QApplication, QMenu, QMessageBox, QErrorMessage, QMainWindow, QSplitter
-from PyQt5.QtCore import pyqtSignal
-from PyQt5.QtGui import QIcon
-from PyQt5.QtWidgets import QDockWidget
-from Tigger.Models import SkyModel
-from Tigger.Models.Formats import ModelHTML
-
-import TigGUI.Tools.source_selector
-import TigGUI.kitties.utils
-from TigGUI import AboutDialog
-from TigGUI import Images
-from TigGUI import Widgets
-from TigGUI.Images.ControlDialog import ImageControlDialog
-from TigGUI.Images.Manager import ImageManager
-from TigGUI.Plot.SkyModelPlot import SkyModelPlotter, PersistentCurrier, LiveImageZoom
-from TigGUI.SkyModelTreeWidget import SkyModelTreeWidget, ModelGroupsTable
-from TigGUI.init import pixmaps, Config
-from TigGUI.kitties.widgets import BusyIndicator
-
-QStringList = list
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="mainwin")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-
-class MainWindow(QMainWindow):
-
-    isUpdated = pyqtSignal(bool)
-    hasSkyModel = pyqtSignal(bool)
-    hasSelection = pyqtSignal(bool)
-    modelChanged = pyqtSignal(object)
-    closing = pyqtSignal()
-    signalShowMessage = pyqtSignal([str, int], [str])
-    signalShowErrorMessage = pyqtSignal([str], [str, int])
-    ViewModelColumns = ["name", "RA", "Dec", "type", "Iapp", "I", "Q", "U", "V", "RM", "spi", "shape"]
-
-    def __init__(self, parent, max_width=None, max_height=None, hide_on_close=False):
-        QMainWindow.__init__(self, parent)
-        self.signalShowMessage.connect(self.showMessage, type=Qt.QueuedConnection)
-        self.signalShowErrorMessage.connect(self.showErrorMessage, type=Qt.QueuedConnection)
-        self.setWindowIcon(pixmaps.tigger_starface.icon())
-        self._currier = PersistentCurrier()
-        self.hide()
-        # init column constants
-        for icol, col in enumerate(self.ViewModelColumns):
-            setattr(self, "Column%s" % col.capitalize(), icol)
-        # init GUI
-        self.setWindowTitle("Tigger")
-        self.setWindowIcon(QIcon(pixmaps.purr_logo.pm()))
-        # central widget setup
-        self.cw = QWidget(self)
-        # The actual min width of the control dialog is ~396
-        self._ctrl_dialog_min_size = 400  # approx value
-        # The actual min width of the profile/zoom windows is ~256
-        self._profile_and_zoom_widget_min_size = 300  # approx value
-        # set usable screen space (90% of available)
-        self.max_width = max_width
-        self.max_height = max_height
-        self.setCentralWidget(self.cw)
-        cwlo = QVBoxLayout(self.cw)
-        cwlo.setContentsMargins(5, 5, 5, 5)
-        # make splitter
-        spl1 = self._splitter1 = QSplitter(Qt.Vertical, self.cw)
-        spl1.setOpaqueResize(False)
-        cwlo.addWidget(spl1)
-        # Create listview of LSM entries
-        self.tw = SkyModelTreeWidget(spl1)
-        self.tw.hide()
-
-        # split bottom pane
-        spl2 = self._splitter2 = QSplitter(Qt.Horizontal, spl1)
-        spl2.setOpaqueResize(False)
-        self._skyplot_stack = QWidget(spl2)
-        self._skyplot_stack_lo = QVBoxLayout(self._skyplot_stack)
-        self._skyplot_stack_lo.setContentsMargins(0, 0, 0, 0)
-
-        # add plot
-        self.skyplot = SkyModelPlotter(self._skyplot_stack, self)
-        self.skyplot.resize(128, 128)
-        self.skyplot.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Preferred)
-        self._skyplot_stack_lo.addWidget(self.skyplot, 1000)
-        self.skyplot.hide()
-        self.skyplot.imagesChanged.connect(self._imagesChanged)
-        self.skyplot.setupShowMessages(self.signalShowMessage)
-        self.skyplot.setupShowErrorMessages(self.signalShowErrorMessage)
-
-        self._grouptab_stack = QWidget(spl2)
-        self._grouptab_stack_lo = lo = QVBoxLayout(self._grouptab_stack)
-        self._grouptab_stack_lo.setContentsMargins(0, 0, 0, 0)
-        # add groupings table
-        self.grouptab = ModelGroupsTable(self._grouptab_stack)
-        self.grouptab.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
-        self.hasSkyModel.connect(self.grouptab.setEnabled)
-        lo.addWidget(self.grouptab, 1000)
-        lo.addStretch(1)
-        self.grouptab.hide()
-
-        # add image controls -- parentless for now (setLayout will reparent them anyway)
-        self.imgman = ImageManager()
-        self.imgman.setMainWindow(self)
-        self.imgman.setShowMessageSignal(self.signalShowMessage)
-        self.imgman.setShowErrorMessageSignal(self.signalShowErrorMessage)
-        self.skyplot.setImageManager(self.imgman)
-        self.imgman.imagesChanged.connect(self._imagesChanged)
-
-        # enable status line
-        self.statusBar().show()
-        # Create and populate main menu
-        menubar = self.menuBar()
-        # File menu
-        file_menu = menubar.addMenu("&File")
-        qa_open = file_menu.addAction("&Open model...", self._openFileCallback, Qt.CTRL + Qt.Key_O)
-        qa_merge = file_menu.addAction("&Merge in model...", self._mergeFileCallback, Qt.CTRL + Qt.SHIFT + Qt.Key_O)
-        self.hasSkyModel.connect(qa_merge.setEnabled)
-        file_menu.addSeparator()
-        qa_save = file_menu.addAction("&Save model", self.saveFile, Qt.CTRL + Qt.Key_S)
-        self.isUpdated.connect(qa_save.setEnabled)
-        qa_save_as = file_menu.addAction("Save model &as...", self.saveFileAs)
-        self.hasSkyModel.connect(qa_save_as.setEnabled)
-        qa_save_selection_as = file_menu.addAction("Save selection as...", self.saveSelectionAs)
-        self.hasSelection.connect(qa_save_selection_as.setEnabled)
-        file_menu.addSeparator()
-        qa_close = file_menu.addAction("&Close model", self.closeFile, Qt.CTRL + Qt.Key_W)
-        self.hasSkyModel.connect(qa_close.setEnabled)
-        qa_quit = file_menu.addAction("Quit", self.close, Qt.CTRL + Qt.Key_Q)
-
-        # Image menu
-        menubar.addMenu(self.imgman.getMenu())
-        # Plot menu
-        menubar.addMenu(self.skyplot.getMenu())
-
-        # LSM Menu
-        em = QMenu("&LSM", self)
-        self._qa_em = menubar.addMenu(em)
-        self._qa_em.setVisible(False)
-        self.hasSkyModel.connect(self._qa_em.setVisible)
-        self._column_view_menu = QMenu("&Show columns", self)
-        self._qa_cv_menu = em.addMenu(self._column_view_menu)
-        em.addSeparator()
-        em.addAction("Select &all", self._selectAll, Qt.CTRL + Qt.Key_A)
-        em.addAction("U&nselect all", self._unselectAll, Qt.CTRL + Qt.Key_N)
-        em.addAction("&Invert selection", self._selectInvert, Qt.CTRL + Qt.Key_I)
-        em.addAction("Select b&y attribute...", self._showSourceSelector, Qt.CTRL + Qt.Key_Y)
-        em.addSeparator()
-        qa_add_tag = em.addAction("&Tag selection...", self.addTagToSelection, Qt.CTRL + Qt.Key_T)
-        self.hasSelection.connect(qa_add_tag.setEnabled)
-        qa_del_tag = em.addAction("&Untag selection...", self.removeTagsFromSelection, Qt.CTRL + Qt.Key_U)
-        self.hasSelection.connect(qa_del_tag.setEnabled)
-        qa_del_sel = em.addAction("&Delete selection", self._deleteSelection)
-        self.hasSelection.connect(qa_del_sel.setEnabled)
-
-        # Tools menu
-        tm = self._tools_menu = QMenu("&Tools", self)
-        self._qa_tm = menubar.addMenu(tm)
-        self._qa_tm.setVisible(False)
-        self.hasSkyModel.connect(self._qa_tm.setVisible)
-
-        # Help menu
-        menubar.addSeparator()
-        hm = self._help_menu = menubar.addMenu("&Help")
-        hm.addAction("&About...", self._showAboutDialog)
-        self._about_dialog = None
-
-        # message handlers
-        self.qerrmsg = QErrorMessage(self)
-
-        # set initial state
-        self.setAcceptDrops(True)
-        self.model = None
-        self.filename = None
-        self._display_filename = None
-        self._open_file_dialog = self._merge_file_dialog = self._save_as_dialog = self._save_sel_as_dialog = self._open_image_dialog = None
-        self.isUpdated.emit(False)
-        self.hasSkyModel.emit(False)
-        self.hasSelection.emit(False)
-        self._exiting = False
-
-        # set initial layout
-        self._current_layout = None
-        self.setLayout(self.LayoutEmpty)
-        dprint(1, "init complete")
-
-    # layout identifiers
-    LayoutEmpty = "empty"
-    LayoutImage = "image"
-    LayoutImageModel = "model"
-    LayoutSplit = "split"
-
-    def _getFilenamesFromDropEvent(self, event):
-        """Checks if drop event is valid (i.e. contains a local URL to a FITS file), and returns list of filenames contained therein."""
-        dprint(1, "drop event:", event.mimeData().text())
-        if not event.mimeData().hasUrls():
-            dprint(1, "drop event: no urls")
-            return None
-        filenames = []
-        for url in event.mimeData().urls():
-            name = str(url.toLocalFile())
-            dprint(2, "drop event: name is", name)
-            if name and Images.isFITS(name):
-                filenames.append(name)
-        dprint(2, "drop event: filenames are", filenames)
-        return filenames
-
-    def dragEnterEvent(self, event):
-        if self._getFilenamesFromDropEvent(event):
-            dprint(1, "drag-enter accepted")
-            event.acceptProposedAction()
-        else:
-            dprint(1, "drag-enter rejected")
-
-    def dropEvent(self, event):
-        busy = None
-        filenames = self._getFilenamesFromDropEvent(event)
-        dprint(1, "dropping", filenames)
-        if filenames:
-            event.acceptProposedAction()
-            busy = BusyIndicator()
-            for name in filenames:
-                self.imgman.loadImage(name)
-        if busy is not None:
-            busy.reset_cursor()
-
-    def saveSizes(self):
-        if self._current_layout is not None:
-            dprint(1, "saving sizes for layout", self._current_layout)
-            # save main window size and splitter dimensions
-            sz = self.size()
-            Config.set('%s-main-window-width' % self._current_layout, sz.width())
-            Config.set('%s-main-window-height' % self._current_layout, sz.height())
-            for spl, name in ((self._splitter1, "splitter1"), (self._splitter2, "splitter2")):
-                ssz = spl.sizes()
-                for i, sz in enumerate(ssz):
-                    Config.set('%s-%s-size%d' % (self._current_layout, name, i), sz)
-
-    def loadSizes(self):
-        if self._current_layout is not None:
-            dprint(1, "loading sizes for layout", self._current_layout)
-            # get main window size and splitter dimensions
-            w = Config.getint('%s-main-window-width' % self._current_layout, 0)
-            h = Config.getint('%s-main-window-height' % self._current_layout, 0)
-            dprint(2, "window size is", w, h)
-            if not (w and h):
-                return None
-            self.resize(QSize(w, h))
-            for spl, name in (self._splitter1, "splitter1"), (self._splitter2, "splitter2"):
-                ssz = [Config.getint('%s-%s-size%d' % (self._current_layout, name, i), -1) for i in (0, 1)]
-                dprint(2, "splitter", name, "sizes", ssz)
-                if all([sz >= 0 for sz in ssz]):
-                    spl.setSizes(ssz)
-                else:
-                    return None
-        return True
-
-    def setLayout(self, layout):
-        """Changes the current window layout. Restores sizes etc. from config file."""
-        if self._current_layout is layout:
-            return
-        dprint(1, "switching to layout", layout)
-        # save sizes to config file
-        self.saveSizes()
-        # remove imgman widget from all layouts
-        for lo in self._skyplot_stack_lo, self._grouptab_stack_lo:
-            if lo.indexOf(self.imgman) >= 0:
-                lo.removeWidget(self.imgman)
-        # assign it to appropriate parent and parent's layout
-        if layout is self.LayoutImage:
-            lo = self._skyplot_stack_lo
-            self.setMaximumSize(self.max_width, self.max_height)
-            self.setBaseSize(self.max_width, self.max_height)
-            size_policy = QSizePolicy()
-            size_policy.setVerticalPolicy(QSizePolicy.Minimum)
-            size_policy.setHorizontalPolicy(QSizePolicy.Expanding)
-            self.setSizePolicy(size_policy)
-            # set central widget size - workaround for bug #164
-            # self.cw.setFixedSize(self.max_width - self._ctrl_dialog_min_size - self._profile_and_zoom_widget_min_size, self.max_height)
-            # self.cw.setGeometry(0, self.max_width - self._ctrl_dialog_min_size - self._profile_and_zoom_widget_min_size / 2,
-                               # self.max_width - self._ctrl_dialog_min_size - self._profile_and_zoom_widget_min_size, self.max_height)
-        elif layout is self.LayoutEmpty:
-            lo = self._skyplot_stack_lo
-        else:
-            lo = self._grouptab_stack_lo
-        self.imgman.setParent(lo.parentWidget())
-        lo.addWidget(self.imgman, 0)
-        # show/hide panels
-        if layout is self.LayoutEmpty:
-            self.tw.hide()
-            self.grouptab.hide()
-            # self.skyplot.show()
-        elif layout is self.LayoutImage:
-            self.tw.hide()
-            self.grouptab.hide()
-            self.skyplot.show()
-            # setup dockable state from config file
-            if Config.getbool('livezoom-show'):
-                self.skyplot._livezoom.setVisible(True)
-                self.skyplot._dockable_livezoom.setVisible(True)
-                self.addDockWidget(Qt.LeftDockWidgetArea, self.skyplot._dockable_livezoom)
-            if Config.getbool('liveprofile-show'):
-                self.skyplot._liveprofile.setVisible(True)
-                self.skyplot._dockable_liveprofile.setVisible(True)
-                self.addDockWidget(Qt.LeftDockWidgetArea, self.skyplot._dockable_liveprofile)
-
-            # resize dock areas
-            widget_list = self.findChildren(QDockWidget)
-            size_list = []
-            result = []
-            for widget in widget_list:
-                if not isinstance(widget.bind_widget, ImageControlDialog):
-                    size_list.append(widget.bind_widget.width())
-                    result.append(widget)
-                    dprint(2, f"{widget} width {widget.width()}")
-                    dprint(2, f"{widget} bind_widget width {widget.bind_widget.width()}")
-                    if isinstance(widget.bind_widget, LiveImageZoom):
-                        widget.bind_widget.setMinimumWidth(widget.width())
-            widget_list = result
-            # resize dock areas
-            self.resizeDocks(widget_list, size_list, Qt.Horizontal)
-        elif layout is self.LayoutImageModel:
-            self.tw.show()
-            self.grouptab.show()
-            self.skyplot.show()
-        # reload sizes
-        self._current_layout = layout
-        if not self.loadSizes():
-            dprint(1, "no sizes loaded, setting defaults")
-            if layout is self.LayoutEmpty:
-                self.resize(QSize(512, 256))
-            elif layout is self.LayoutImage:
-                self.resize(QSize(512, 512))
-                self._splitter2.setSizes([512, 0])
-            elif layout is self.LayoutImageModel:
-                self.resize(QSize(1024, 512))
-                self._splitter1.setSizes([256, 256])
-                self._splitter2.setSizes([256, 256])
-
-    def enableUpdates(self, enable=True):
-        """Enables updates of the child widgets. Usually called after startup is completed (i.e. all data loaded)"""
-        self.skyplot.enableUpdates(enable)
-        if enable:
-            if self.model:
-                self.setLayout(self.LayoutImageModel)
-            elif self.imgman.getImages():
-                self.setLayout(self.LayoutImage)
-            else:
-                self.setLayout(self.LayoutEmpty)
-            self.show()
-
-    def _showAboutDialog(self):
-        if not self._about_dialog:
-            self._about_dialog = AboutDialog.AboutDialog(self)
-        self._about_dialog.show()
-
-    def addTool(self, name, callback):
-        """Adds a tool to the Tools menu"""
-        self._tools_menu.addAction(name, self._currier.curry(self._callTool, callback))
-
-    def _callTool(self, callback):
-        callback(self, self.model)
-
-    def _imagesChanged(self):
-        """Called when the set of loaded images has changed"""
-        if self.imgman.getImages():
-            if self._current_layout is self.LayoutEmpty:
-                self.setLayout(self.LayoutImage)
-        else:
-            if not self.model:
-                self.setLayout(self.LayoutEmpty)
-
-    def _selectAll(self):
-        if not self.model:
-            return
-        busy = BusyIndicator()
-        for src in self.model.sources:
-            src.selected = True
-        self.model.emitSelection(self)
-        busy.reset_cursor()
-
-    def _unselectAll(self):
-        if not self.model:
-            return
-        busy = BusyIndicator()
-        for src in self.model.sources:
-            src.selected = False
-        self.model.emitSelection(self)
-        busy.reset_cursor()
-
-    def _selectInvert(self):
-        if not self.model:
-            return
-        busy = BusyIndicator()
-        for src in self.model.sources:
-            src.selected = not src.selected
-        self.model.emitSelection(self)
-        busy.reset_cursor()
-
-    def _deleteSelection(self):
-        unselected = [src for src in self.model.sources if not src.selected]
-        nsel = len(self.model.sources) - len(unselected)
-        if QMessageBox.question(self, "Delete selection", """<P>Really deleted %d selected source(s)?
-        %d unselected sources will remain in the model.</P>""" % (nsel, len(unselected)),
-                                QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel) != QMessageBox.Ok:
-            return
-        self.model.setSources(unselected)
-        self.signalShowMessage[str].emit("""Deleted %d sources""" % nsel)
-        self.model.emitUpdate(SkyModel.SkyModel.UpdateAll, origin=self)
-
-    def _showSourceSelector(self):
-        TigGUI.Tools.source_selector.show_source_selector(self, self.model)
-
-    def _updateModelSelection(self, num, origin=None):
-        """Called when the model selection has been updated."""
-        self.hasSelection.emit(bool(num))
-
-    import Tigger.Models.Formats
-    _formats = [f[1] for f in Tigger.Models.Formats.listFormatsFull()]
-
-    _load_file_types = [(doc, ["*" + ext for ext in extensions], load) for load, save, doc, extensions in _formats if
-                        load]
-    _save_file_types = [(doc, ["*" + ext for ext in extensions], save) for load, save, doc, extensions in _formats if
-                        save]
-
-    def showMessage(self, msg, time=3000):
-        self.statusBar().showMessage(msg, time)
-
-    def showErrorMessage(self, msg, time=3000):
-        self.qerrmsg.showMessage(msg)
-
-    def loadImage(self, filename):
-        return self.imgman.loadImage(filename)
-
-    def setModel(self, model):
-        if model is not None:
-            self.modelChanged.emit(model)
-        if model:
-            self.model = model
-            self.hasSkyModel.emit(True)
-            self.hasSelection.emit(False)
-            self.isUpdated.emit(False)
-            self.model.enableSignals()
-            self.model.connect("updated", self._indicateModelUpdated)
-            self.model.connect("selected", self._updateModelSelection)
-            # pass to children
-            self.tw.setModel(self.model)
-            self.grouptab.setModel(self.model)
-            self.skyplot.setModel(self.model)
-            # add items to View menu
-            self._column_view_menu.clear()
-            self.tw.addColumnViewActionsTo(self._column_view_menu)
-        else:
-            self.model = None
-            self.setWindowTitle("Tigger")
-            self.hasSelection.emit(False)
-            self.isUpdated.emit(False)
-            self.hasSkyModel.emit(False)
-            self.tw.clear()
-            self.grouptab.clear()
-            self.skyplot.setModel(None)
-
-    def _openFileCallback(self):
-        if not self._open_file_dialog:
-            filters = ";;".join(
-                ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._load_file_types])
-            dialog = self._open_file_dialog = QFileDialog(self, "Open sky model", ".", filters)
-            dialog.setFileMode(QFileDialog.ExistingFile)
-            dialog.setModal(True)
-            dialog.filesSelected['QStringList'].connect(self.openFile)
-        self._open_file_dialog.exec_()
-        return
-
-    def _mergeFileCallback(self):
-        if not self._merge_file_dialog:
-            filters = ";;".join(
-                ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._load_file_types])
-            dialog = self._merge_file_dialog = QFileDialog(self, "Merge in sky model", ".", filters)
-            dialog.setFileMode(QFileDialog.ExistingFile)
-            dialog.setModal(True)
-            dialog.filesSelected['QStringList'].connect(self._currier.curry(self.openFile, merge=True))
-        self._merge_file_dialog.exec_()
-        return
-
-    def openFile(self, _filename=None, _format=None, _merge=False, _show=True):
-        # check that we can close existing model
-        if not _merge and not self._canCloseExistingModel():
-            return False
-        if isinstance(_filename, QStringList):
-            _filename = _filename[0]
-        _filename = str(_filename)
-        # try to determine the file type
-        filetype, import_func, export_func, doc = Tigger.Models.Formats.resolveFormat(_filename, _format)
-        if import_func is None:
-            self.signalShowErrorMessage.emit("""Error loading model file %s: unknown file format""" % _filename)
-            return
-        # try to load the specified file
-        busy = BusyIndicator()
-        self.signalShowMessage.emit("""Reading %s file %s""" % (filetype, _filename), 3000)
-        QApplication.flush()
-        try:
-            model = import_func(_filename)
-            model.setFilename(_filename)
-        except:
-            busy.reset_cursor()
-            self.signalShowErrorMessage.emit("""Error loading '%s' file %s: %s""" % (filetype, _filename, str(sys.exc_info()[1])))
-            return
-        else:
-            # set the layout
-            if _show:
-                self.setLayout(self.LayoutImageModel)
-            # add to content
-            if _merge and self.model:
-                self.model.addSources(model.sources)
-                self.signalShowMessage.emit("""Merged in %d sources from '%s' file %s""" % (len(model.sources), filetype, _filename),
-                                 3000)
-                self.model.emitUpdate(SkyModel.SkyModel.UpdateAll)
-            else:
-                print("""Loaded %d sources from '%s' file %s""" % (len(model.sources), filetype, _filename))
-                self.signalShowMessage.emit("""Loaded %d sources from '%s' file %s""" % (len(model.sources), filetype, _filename),
-                                 3000)
-                self._display_filename = os.path.basename(_filename)
-                self.setModel(model)
-                self._indicateModelUpdated(updated=False)
-                # only set self.filename if an export function is available for this format. Otherwise set it to None, so that trying to save
-                # the file results in a save-as operation (so that we don't save to a file in an unsupported format).
-                self.filename = _filename if export_func else None
-        finally:
-            busy.reset_cursor()
-
-    def closeEvent(self, event):
-        dprint(1, "closing")
-        self._exiting = True
-        self.saveSizes()
-        if not self.closeFile():
-            self._exiting = False
-            event.ignore()
-            return
-        self.skyplot.close()
-        self.imgman.close()
-        self.closing.emit()
-        dprint(1, "invoking os._exit(0)")
-        os._exit(0)
-        QMainWindow.closeEvent(self, event)
-
-    def _canCloseExistingModel(self):
-        # save model if modified
-        if self.model and self._model_updated:
-            res = QMessageBox.question(self, "Closing sky model",
-                                       "<P>Model has been modified, would you like to save the changes?</P>",
-                                       QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel, QMessageBox.Save)
-            if res == QMessageBox.Cancel:
-                return False
-            elif res == QMessageBox.Save:
-                if not self.saveFile(confirm=False, overwrite=True):
-                    return False
-        # unload model images, unless we are already exiting anyway
-        if not self._exiting:
-            self.imgman.unloadModelImages()
-        return True
-
-    def closeFile(self):
-        if not self._canCloseExistingModel():
-            return False
-        # close model
-        self._display_filename = None
-        self.setModel(None)
-        # set the layout
-        self.setLayout(self.LayoutImage if self.imgman.getTopImage() else self.LayoutEmpty)
-        return True
-
-    def saveFile(self, filename=None, confirm=False, overwrite=True, non_native=False):
-        """Saves file using the specified 'filename'. If filename is None, uses current filename, if
-        that is not set, goes to saveFileAs() to open dialog and get a filename.
-        If overwrite=False, will ask for confirmation before overwriting an existing file.
-        If non_native=False, will ask for confirmation before exporting in non-native format.
-        If confirm=True, will ask for confirmation regardless.
-        Returns True if saving succeeded, False on error (or if cancelled by user).
-        """
-        if isinstance(filename, QStringList):
-            filename = filename[0]
-        filename = (filename and str(filename)) or self.filename
-        if filename is None:
-            return self.saveFileAs()
-        else:
-            warning = ''
-            # try to determine the file type
-            filetype, import_func, export_func, doc = Tigger.Models.Formats.resolveFormat(filename, None)
-            if export_func is None:
-                self.signalShowErrorMessage.emit("""Error saving model file %s: unsupported output format""" % filename)
-                return
-            if os.path.exists(filename) and not overwrite:
-                warning += "<P>The file already exists and will be overwritten.</P>"
-            if filetype != 'Tigger' and not non_native:
-                warning += """<P>Please note that you are exporting the model using the external format '%s'.
-              Source types, tags and other model features not supported by this
-              format will be omitted during the export.</P>""" % filetype
-            # get confirmation
-            if confirm or warning:
-                dialog = QMessageBox.warning if warning else QMessageBox.question
-                if dialog(self, "Saving sky model", "<P>Save model to %s?</P>%s" % (filename, warning),
-                          QMessageBox.Save | QMessageBox.Cancel, QMessageBox.Save) != QMessageBox.Save:
-                    return False
-            busy = BusyIndicator()
-            try:
-                export_func(self.model, filename)
-                self.model.setFilename(filename)
-            except:
-                busy.reset_cursor()
-                self.signalShowErrorMessage.emit("""Error saving model file %s: %s""" % (filename, str(sys.exc_info()[1])))
-                return False
-            else:
-                self.signalShowMessage.emit("""Saved model to file %s""" % filename, 3000)
-                self._display_filename = os.path.basename(filename)
-                self._indicateModelUpdated(updated=False)
-                self.filename = filename
-                return True
-            finally:
-                busy.reset_cursor()
-
-    def saveFileAs(self, filename=None):
-        """Saves file using the specified 'filename'. If filename is None, opens dialog to get a filename.
-        Returns True if saving succeeded, False on error (or if cancelled by user).
-        """
-        if filename is None:
-            if not self._save_as_dialog:
-                filters = ";;".join(
-                    ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._save_file_types])
-                dialog = self._save_as_dialog = QFileDialog(self, "Save sky model", ".", filters)
-                dialog.setDefaultSuffix(ModelHTML.DefaultExtension)
-                dialog.setFileMode(QFileDialog.AnyFile)
-                dialog.setAcceptMode(QFileDialog.AcceptSave)
-                dialog.setOption(QFileDialog.DontConfirmOverwrite, True)
-                dialog.setModal(True)
-                dialog.filesSelected['QStringList'].connect(self.saveFileAs)
-            return self._save_as_dialog.exec_() == QDialog.Accepted
-        # filename supplied, so save
-        return self.saveFile(filename, confirm=False)
-
-    def saveSelectionAs(self, filename=None, force=False):
-        if not self.model:
-            return
-        if filename is None:
-            if not self._save_sel_as_dialog:
-                filters = ";;".join(
-                    ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._save_file_types])
-                dialog = self._save_sel_as_dialog = QFileDialog(self, "Save sky model", ".", filters)
-                dialog.setDefaultSuffix(ModelHTML.DefaultExtension)
-                dialog.setFileMode(QFileDialog.AnyFile)
-                dialog.setAcceptMode(QFileDialog.AcceptSave)
-                dialog.setOption(QFileDialog.DontConfirmOverwrite, False)
-                dialog.setModal(True)
-                dialog.filesSelected['QStringList'].connect(self.saveSelectionAs)
-            return self._save_sel_as_dialog.exec_() == QDialog.Accepted
-        # save selection
-        if isinstance(filename, QStringList):
-            filename = filename[0]
-        filename = str(filename)
-        selmodel = self.model.copy()
-        sources = [src for src in self.model.sources if src.selected]
-        if not sources:
-            self.signalShowErrorMessage.emit("""You have not selected any sources to save.""")
-            return
-        # try to determine the file type
-        filetype, import_func, export_func, doc = Tigger.Models.Formats.resolveFormat(filename, None)
-        if export_func is None:
-            self.signalShowErrorMessage.emit("""Error saving model file %s: unsupported output format""" % filename)
-            return
-        busy = BusyIndicator()
-        try:
-            export_func(self.model, filename, sources=sources)
-        except:
-            busy.reset_cursor()
-            self.signalShowErrorMessage.emit(
-                """Error saving selection to model file %s: %s""" % (filename, str(sys.exc_info()[1])))
-            return False
-        else:
-            self.signalShowMessage.emit("""Wrote %d selected source%s to file %s""" % (
-                len(selmodel.sources), "" if len(selmodel.sources) == 1 else "s", filename), 3000)
-        finally:
-            busy.reset_cursor()
-        pass
-
-    def addTagToSelection(self):
-        if not hasattr(self, '_add_tag_dialog'):
-            self._add_tag_dialog = Widgets.AddTagDialog(self, modal=True)
-        self._add_tag_dialog.setTags(self.model.tagnames)
-        self._add_tag_dialog.setValue(True)
-        if self._add_tag_dialog.exec_() != QDialog.Accepted:
-            return
-        tagname, value = self._add_tag_dialog.getTag()
-        if tagname is None or value is None:
-            return None
-        dprint(1, "tagging selected sources with", tagname, value)
-        # tag selected sources
-        for src in self.model.sources:
-            if src.selected:
-                src.setAttribute(tagname, value)
-        # If tag is not new, set a UpdateSelectionOnly flag on the signal
-        dprint(1, "adding tag to model")
-        self.model.addTag(tagname)
-        dprint(1, "recomputing totals")
-        self.model.getTagGrouping(tagname).computeTotal(self.model.sources)
-        dprint(1, "emitting update signal")
-        what = SkyModel.SkyModel.UpdateSourceContent + SkyModel.SkyModel.UpdateTags + SkyModel.SkyModel.UpdateSelectionOnly
-        self.model.emitUpdate(what, origin=self)
-
-    def removeTagsFromSelection(self):
-        if not hasattr(self, '_remove_tag_dialog'):
-            self._remove_tag_dialog = Widgets.SelectTagsDialog(self, modal=True, caption="Remove Tags",
-                                                               ok_button="Remove")
-        # get set of all tags in selected sources
-        tags = set()
-        for src in self.model.sources:
-            if src.selected:
-                tags.update(src.getTagNames())
-        if not tags:
-            return
-        tags = list(tags)
-        tags.sort()
-        # show dialog
-        self._remove_tag_dialog.setTags(tags)
-        if self._remove_tag_dialog.exec_() != QDialog.Accepted:
-            return
-        tags = self._remove_tag_dialog.getSelectedTags()
-        if not tags:
-            return
-        # ask for confirmation
-        plural = (len(tags) > 1 and "s") or ""
-        if QMessageBox.question(self, "Removing tags", "<P>Really remove the tag%s '%s' from selected sources?</P>" % (
-                plural, "', '".join(tags)),
-                                QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes) != QMessageBox.Yes:
-            return
-        # remove the tags
-        for src in self.model.sources:
-            if src.selected:
-                for tag in tags:
-                    src.removeAttribute(tag)
-        # update model
-        self.model.scanTags()
-        self.model.initGroupings()
-        # emit signal
-        what = SkyModel.SkyModel.UpdateSourceContent + SkyModel.SkyModel.UpdateTags + SkyModel.SkyModel.UpdateSelectionOnly
-        self.model.emitUpdate(what, origin=self)
-
-    def _indicateModelUpdated(self, what=None, origin=None, updated=True):
-        """Marks model as updated."""
-        self._model_updated = updated
-        self.isUpdated.emit(updated)
-        if self.model:
-            self.setWindowTitle(
-                "Tigger - %s%s" % ((self._display_filename or "(unnamed)", " (modified)" if updated else "")))
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import os
+import sys
+
+import Tigger.Models.Formats
+from PyQt5.Qt import QWidget, QFileDialog, QDialog, QVBoxLayout, \
+    Qt, QSize, QSizePolicy, QApplication, QMenu, QMessageBox, QErrorMessage, QMainWindow, QSplitter
+from PyQt5.QtCore import pyqtSignal
+from PyQt5.QtGui import QIcon
+from PyQt5.QtWidgets import QDockWidget
+from Tigger.Models import SkyModel
+from Tigger.Models.Formats import ModelHTML
+
+import TigGUI.Tools.source_selector
+import TigGUI.kitties.utils
+from TigGUI import AboutDialog
+from TigGUI import Images
+from TigGUI import Widgets
+from TigGUI.Images.ControlDialog import ImageControlDialog
+from TigGUI.Images.Manager import ImageManager
+from TigGUI.Plot.SkyModelPlot import SkyModelPlotter, PersistentCurrier, LiveImageZoom
+from TigGUI.SkyModelTreeWidget import SkyModelTreeWidget, ModelGroupsTable
+from TigGUI.init import pixmaps, Config
+from TigGUI.kitties.widgets import BusyIndicator
+
+QStringList = list
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="mainwin")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+
+class MainWindow(QMainWindow):
+
+    isUpdated = pyqtSignal(bool)
+    hasSkyModel = pyqtSignal(bool)
+    hasSelection = pyqtSignal(bool)
+    modelChanged = pyqtSignal(object)
+    closing = pyqtSignal()
+    signalShowMessage = pyqtSignal([str, int], [str])
+    signalShowErrorMessage = pyqtSignal([str], [str, int])
+    ViewModelColumns = ["name", "RA", "Dec", "type", "Iapp", "I", "Q", "U", "V", "RM", "spi", "shape"]
+
+    def __init__(self, parent, max_width=None, max_height=None, hide_on_close=False):
+        QMainWindow.__init__(self, parent)
+        self.signalShowMessage.connect(self.showMessage, type=Qt.QueuedConnection)
+        self.signalShowErrorMessage.connect(self.showErrorMessage, type=Qt.QueuedConnection)
+        self.setWindowIcon(pixmaps.tigger_starface.icon())
+        self._currier = PersistentCurrier()
+        self.hide()
+        # init column constants
+        for icol, col in enumerate(self.ViewModelColumns):
+            setattr(self, "Column%s" % col.capitalize(), icol)
+        # init GUI
+        self.setWindowTitle("Tigger")
+        self.setWindowIcon(QIcon(pixmaps.purr_logo.pm()))
+        # central widget setup
+        self.cw = QWidget(self)
+        # The actual min width of the control dialog is ~396
+        self._ctrl_dialog_min_size = 400  # approx value
+        # The actual min width of the profile/zoom windows is ~256
+        self._profile_and_zoom_widget_min_size = 300  # approx value
+        # set usable screen space (90% of available)
+        self.max_width = max_width
+        self.max_height = max_height
+        self.setCentralWidget(self.cw)
+        cwlo = QVBoxLayout(self.cw)
+        cwlo.setContentsMargins(5, 5, 5, 5)
+        # make splitter
+        spl1 = self._splitter1 = QSplitter(Qt.Vertical, self.cw)
+        spl1.setOpaqueResize(False)
+        cwlo.addWidget(spl1)
+        # Create listview of LSM entries
+        self.tw = SkyModelTreeWidget(spl1)
+        self.tw.hide()
+
+        # split bottom pane
+        spl2 = self._splitter2 = QSplitter(Qt.Horizontal, spl1)
+        spl2.setOpaqueResize(False)
+        self._skyplot_stack = QWidget(spl2)
+        self._skyplot_stack_lo = QVBoxLayout(self._skyplot_stack)
+        self._skyplot_stack_lo.setContentsMargins(0, 0, 0, 0)
+
+        # add plot
+        self.skyplot = SkyModelPlotter(self._skyplot_stack, self)
+        self.skyplot.resize(128, 128)
+        self.skyplot.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Preferred)
+        self._skyplot_stack_lo.addWidget(self.skyplot, 1000)
+        self.skyplot.hide()
+        self.skyplot.imagesChanged.connect(self._imagesChanged)
+        self.skyplot.setupShowMessages(self.signalShowMessage)
+        self.skyplot.setupShowErrorMessages(self.signalShowErrorMessage)
+
+        self._grouptab_stack = QWidget(spl2)
+        self._grouptab_stack_lo = lo = QVBoxLayout(self._grouptab_stack)
+        self._grouptab_stack_lo.setContentsMargins(0, 0, 0, 0)
+        # add groupings table
+        self.grouptab = ModelGroupsTable(self._grouptab_stack)
+        self.grouptab.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
+        self.hasSkyModel.connect(self.grouptab.setEnabled)
+        lo.addWidget(self.grouptab, 1000)
+        lo.addStretch(1)
+        self.grouptab.hide()
+
+        # add image controls -- parentless for now (setLayout will reparent them anyway)
+        self.imgman = ImageManager()
+        self.imgman.setMainWindow(self)
+        self.imgman.setShowMessageSignal(self.signalShowMessage)
+        self.imgman.setShowErrorMessageSignal(self.signalShowErrorMessage)
+        self.skyplot.setImageManager(self.imgman)
+        self.imgman.imagesChanged.connect(self._imagesChanged)
+
+        # enable status line
+        self.statusBar().show()
+        # Create and populate main menu
+        menubar = self.menuBar()
+        # File menu
+        file_menu = menubar.addMenu("&File")
+        qa_open = file_menu.addAction("&Open model...", self._openFileCallback, Qt.CTRL + Qt.Key_O)
+        qa_merge = file_menu.addAction("&Merge in model...", self._mergeFileCallback, Qt.CTRL + Qt.SHIFT + Qt.Key_O)
+        self.hasSkyModel.connect(qa_merge.setEnabled)
+        file_menu.addSeparator()
+        qa_save = file_menu.addAction("&Save model", self.saveFile, Qt.CTRL + Qt.Key_S)
+        self.isUpdated.connect(qa_save.setEnabled)
+        qa_save_as = file_menu.addAction("Save model &as...", self.saveFileAs)
+        self.hasSkyModel.connect(qa_save_as.setEnabled)
+        qa_save_selection_as = file_menu.addAction("Save selection as...", self.saveSelectionAs)
+        self.hasSelection.connect(qa_save_selection_as.setEnabled)
+        file_menu.addSeparator()
+        qa_close = file_menu.addAction("&Close model", self.closeFile, Qt.CTRL + Qt.Key_W)
+        self.hasSkyModel.connect(qa_close.setEnabled)
+        qa_quit = file_menu.addAction("Quit", self.close, Qt.CTRL + Qt.Key_Q)
+
+        # Image menu
+        menubar.addMenu(self.imgman.getMenu())
+        # Plot menu
+        menubar.addMenu(self.skyplot.getMenu())
+
+        # LSM Menu
+        em = QMenu("&LSM", self)
+        self._qa_em = menubar.addMenu(em)
+        self._qa_em.setVisible(False)
+        self.hasSkyModel.connect(self._qa_em.setVisible)
+        self._column_view_menu = QMenu("&Show columns", self)
+        self._qa_cv_menu = em.addMenu(self._column_view_menu)
+        em.addSeparator()
+        em.addAction("Select &all", self._selectAll, Qt.CTRL + Qt.Key_A)
+        em.addAction("U&nselect all", self._unselectAll, Qt.CTRL + Qt.Key_N)
+        em.addAction("&Invert selection", self._selectInvert, Qt.CTRL + Qt.Key_I)
+        em.addAction("Select b&y attribute...", self._showSourceSelector, Qt.CTRL + Qt.Key_Y)
+        em.addSeparator()
+        qa_add_tag = em.addAction("&Tag selection...", self.addTagToSelection, Qt.CTRL + Qt.Key_T)
+        self.hasSelection.connect(qa_add_tag.setEnabled)
+        qa_del_tag = em.addAction("&Untag selection...", self.removeTagsFromSelection, Qt.CTRL + Qt.Key_U)
+        self.hasSelection.connect(qa_del_tag.setEnabled)
+        qa_del_sel = em.addAction("&Delete selection", self._deleteSelection)
+        self.hasSelection.connect(qa_del_sel.setEnabled)
+
+        # Tools menu
+        tm = self._tools_menu = QMenu("&Tools", self)
+        self._qa_tm = menubar.addMenu(tm)
+        self._qa_tm.setVisible(False)
+        self.hasSkyModel.connect(self._qa_tm.setVisible)
+
+        # Help menu
+        menubar.addSeparator()
+        hm = self._help_menu = menubar.addMenu("&Help")
+        hm.addAction("&About...", self._showAboutDialog)
+        self._about_dialog = None
+
+        # message handlers
+        self.qerrmsg = QErrorMessage(self)
+
+        # set initial state
+        self.setAcceptDrops(True)
+        self.model = None
+        self.filename = None
+        self._display_filename = None
+        self._open_file_dialog = self._merge_file_dialog = self._save_as_dialog = self._save_sel_as_dialog = self._open_image_dialog = None
+        self.isUpdated.emit(False)
+        self.hasSkyModel.emit(False)
+        self.hasSelection.emit(False)
+        self._exiting = False
+
+        # set initial layout
+        self._current_layout = None
+        self.setLayout(self.LayoutEmpty)
+        dprint(1, "init complete")
+
+    # layout identifiers
+    LayoutEmpty = "empty"
+    LayoutImage = "image"
+    LayoutImageModel = "model"
+    LayoutSplit = "split"
+
+    def _getFilenamesFromDropEvent(self, event):
+        """Checks if drop event is valid (i.e. contains a local URL to a FITS file), and returns list of filenames contained therein."""
+        dprint(1, "drop event:", event.mimeData().text())
+        if not event.mimeData().hasUrls():
+            dprint(1, "drop event: no urls")
+            return None
+        filenames = []
+        for url in event.mimeData().urls():
+            name = str(url.toLocalFile())
+            dprint(2, "drop event: name is", name)
+            if name and Images.isFITS(name):
+                filenames.append(name)
+        dprint(2, "drop event: filenames are", filenames)
+        return filenames
+
+    def dragEnterEvent(self, event):
+        if self._getFilenamesFromDropEvent(event):
+            dprint(1, "drag-enter accepted")
+            event.acceptProposedAction()
+        else:
+            dprint(1, "drag-enter rejected")
+
+    def dropEvent(self, event):
+        busy = None
+        filenames = self._getFilenamesFromDropEvent(event)
+        dprint(1, "dropping", filenames)
+        if filenames:
+            event.acceptProposedAction()
+            busy = BusyIndicator()
+            for name in filenames:
+                self.imgman.loadImage(name)
+        if busy is not None:
+            busy.reset_cursor()
+
+    def saveSizes(self):
+        if self._current_layout is not None:
+            dprint(1, "saving sizes for layout", self._current_layout)
+            # save main window size and splitter dimensions
+            sz = self.size()
+            Config.set('%s-main-window-width' % self._current_layout, sz.width())
+            Config.set('%s-main-window-height' % self._current_layout, sz.height())
+            for spl, name in ((self._splitter1, "splitter1"), (self._splitter2, "splitter2")):
+                ssz = spl.sizes()
+                for i, sz in enumerate(ssz):
+                    Config.set('%s-%s-size%d' % (self._current_layout, name, i), sz)
+
+    def loadSizes(self):
+        if self._current_layout is not None:
+            dprint(1, "loading sizes for layout", self._current_layout)
+            # get main window size and splitter dimensions
+            w = Config.getint('%s-main-window-width' % self._current_layout, 0)
+            h = Config.getint('%s-main-window-height' % self._current_layout, 0)
+            dprint(2, "window size is", w, h)
+            if not (w and h):
+                return None
+            self.resize(QSize(w, h))
+            for spl, name in (self._splitter1, "splitter1"), (self._splitter2, "splitter2"):
+                ssz = [Config.getint('%s-%s-size%d' % (self._current_layout, name, i), -1) for i in (0, 1)]
+                dprint(2, "splitter", name, "sizes", ssz)
+                if all([sz >= 0 for sz in ssz]):
+                    spl.setSizes(ssz)
+                else:
+                    return None
+        return True
+
+    def setLayout(self, layout):
+        """Changes the current window layout. Restores sizes etc. from config file."""
+        if self._current_layout is layout:
+            return
+        dprint(1, "switching to layout", layout)
+        # save sizes to config file
+        self.saveSizes()
+        # remove imgman widget from all layouts
+        for lo in self._skyplot_stack_lo, self._grouptab_stack_lo:
+            if lo.indexOf(self.imgman) >= 0:
+                lo.removeWidget(self.imgman)
+        # assign it to appropriate parent and parent's layout
+        if layout is self.LayoutImage:
+            lo = self._skyplot_stack_lo
+            self.setMaximumSize(self.max_width, self.max_height)
+            self.setBaseSize(self.max_width, self.max_height)
+            size_policy = QSizePolicy()
+            size_policy.setVerticalPolicy(QSizePolicy.Minimum)
+            size_policy.setHorizontalPolicy(QSizePolicy.Expanding)
+            self.setSizePolicy(size_policy)
+            # set central widget size - workaround for bug #164
+            # self.cw.setFixedSize(self.max_width - self._ctrl_dialog_min_size - self._profile_and_zoom_widget_min_size, self.max_height)
+            # self.cw.setGeometry(0, self.max_width - self._ctrl_dialog_min_size - self._profile_and_zoom_widget_min_size / 2,
+                               # self.max_width - self._ctrl_dialog_min_size - self._profile_and_zoom_widget_min_size, self.max_height)
+        elif layout is self.LayoutEmpty:
+            lo = self._skyplot_stack_lo
+        else:
+            lo = self._grouptab_stack_lo
+        self.imgman.setParent(lo.parentWidget())
+        lo.addWidget(self.imgman, 0)
+        # show/hide panels
+        if layout is self.LayoutEmpty:
+            self.tw.hide()
+            self.grouptab.hide()
+            # self.skyplot.show()
+        elif layout is self.LayoutImage:
+            self.tw.hide()
+            self.grouptab.hide()
+            self.skyplot.show()
+            # setup dockable state from config file
+            if Config.getbool('livezoom-show'):
+                self.skyplot._livezoom.setVisible(True)
+                self.skyplot._dockable_livezoom.setVisible(True)
+                self.addDockWidget(Qt.LeftDockWidgetArea, self.skyplot._dockable_livezoom)
+            if Config.getbool('liveprofile-show'):
+                self.skyplot._liveprofile.setVisible(True)
+                self.skyplot._dockable_liveprofile.setVisible(True)
+                self.addDockWidget(Qt.LeftDockWidgetArea, self.skyplot._dockable_liveprofile)
+
+            # resize dock areas
+            widget_list = self.findChildren(QDockWidget)
+            size_list = []
+            result = []
+            for widget in widget_list:
+                if not isinstance(widget.bind_widget, ImageControlDialog):
+                    size_list.append(widget.bind_widget.width())
+                    result.append(widget)
+                    dprint(2, f"{widget} width {widget.width()}")
+                    dprint(2, f"{widget} bind_widget width {widget.bind_widget.width()}")
+                    if isinstance(widget.bind_widget, LiveImageZoom):
+                        widget.bind_widget.setMinimumWidth(widget.width())
+            widget_list = result
+            # resize dock areas
+            self.resizeDocks(widget_list, size_list, Qt.Horizontal)
+        elif layout is self.LayoutImageModel:
+            self.tw.show()
+            self.grouptab.show()
+            self.skyplot.show()
+        # reload sizes
+        self._current_layout = layout
+        if not self.loadSizes():
+            dprint(1, "no sizes loaded, setting defaults")
+            if layout is self.LayoutEmpty:
+                self.resize(QSize(512, 256))
+            elif layout is self.LayoutImage:
+                self.resize(QSize(512, 512))
+                self._splitter2.setSizes([512, 0])
+            elif layout is self.LayoutImageModel:
+                self.resize(QSize(1024, 512))
+                self._splitter1.setSizes([256, 256])
+                self._splitter2.setSizes([256, 256])
+
+    def enableUpdates(self, enable=True):
+        """Enables updates of the child widgets. Usually called after startup is completed (i.e. all data loaded)"""
+        self.skyplot.enableUpdates(enable)
+        if enable:
+            if self.model:
+                self.setLayout(self.LayoutImageModel)
+            elif self.imgman.getImages():
+                self.setLayout(self.LayoutImage)
+            else:
+                self.setLayout(self.LayoutEmpty)
+            self.show()
+
+    def _showAboutDialog(self):
+        if not self._about_dialog:
+            self._about_dialog = AboutDialog.AboutDialog(self)
+        self._about_dialog.show()
+
+    def addTool(self, name, callback):
+        """Adds a tool to the Tools menu"""
+        self._tools_menu.addAction(name, self._currier.curry(self._callTool, callback))
+
+    def _callTool(self, callback):
+        callback(self, self.model)
+
+    def _imagesChanged(self):
+        """Called when the set of loaded images has changed"""
+        if self.imgman.getImages():
+            if self._current_layout is self.LayoutEmpty:
+                self.setLayout(self.LayoutImage)
+        else:
+            if not self.model:
+                self.setLayout(self.LayoutEmpty)
+
+    def _selectAll(self):
+        if not self.model:
+            return
+        busy = BusyIndicator()
+        for src in self.model.sources:
+            src.selected = True
+        self.model.emitSelection(self)
+        busy.reset_cursor()
+
+    def _unselectAll(self):
+        if not self.model:
+            return
+        busy = BusyIndicator()
+        for src in self.model.sources:
+            src.selected = False
+        self.model.emitSelection(self)
+        busy.reset_cursor()
+
+    def _selectInvert(self):
+        if not self.model:
+            return
+        busy = BusyIndicator()
+        for src in self.model.sources:
+            src.selected = not src.selected
+        self.model.emitSelection(self)
+        busy.reset_cursor()
+
+    def _deleteSelection(self):
+        unselected = [src for src in self.model.sources if not src.selected]
+        nsel = len(self.model.sources) - len(unselected)
+        if QMessageBox.question(self, "Delete selection", """<P>Really deleted %d selected source(s)?
+        %d unselected sources will remain in the model.</P>""" % (nsel, len(unselected)),
+                                QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel) != QMessageBox.Ok:
+            return
+        self.model.setSources(unselected)
+        self.signalShowMessage[str].emit("""Deleted %d sources""" % nsel)
+        self.model.emitUpdate(SkyModel.SkyModel.UpdateAll, origin=self)
+
+    def _showSourceSelector(self):
+        TigGUI.Tools.source_selector.show_source_selector(self, self.model)
+
+    def _updateModelSelection(self, num, origin=None):
+        """Called when the model selection has been updated."""
+        self.hasSelection.emit(bool(num))
+
+    import Tigger.Models.Formats
+    _formats = [f[1] for f in Tigger.Models.Formats.listFormatsFull()]
+
+    _load_file_types = [(doc, ["*" + ext for ext in extensions], load) for load, save, doc, extensions in _formats if
+                        load]
+    _save_file_types = [(doc, ["*" + ext for ext in extensions], save) for load, save, doc, extensions in _formats if
+                        save]
+
+    def showMessage(self, msg, time=3000):
+        self.statusBar().showMessage(msg, time)
+
+    def showErrorMessage(self, msg, time=3000):
+        self.qerrmsg.showMessage(msg)
+
+    def loadImage(self, filename):
+        return self.imgman.loadImage(filename)
+
+    def setModel(self, model):
+        if model is not None:
+            self.modelChanged.emit(model)
+        if model:
+            self.model = model
+            self.hasSkyModel.emit(True)
+            self.hasSelection.emit(False)
+            self.isUpdated.emit(False)
+            self.model.enableSignals()
+            self.model.connect("updated", self._indicateModelUpdated)
+            self.model.connect("selected", self._updateModelSelection)
+            # pass to children
+            self.tw.setModel(self.model)
+            self.grouptab.setModel(self.model)
+            self.skyplot.setModel(self.model)
+            # add items to View menu
+            self._column_view_menu.clear()
+            self.tw.addColumnViewActionsTo(self._column_view_menu)
+        else:
+            self.model = None
+            self.setWindowTitle("Tigger")
+            self.hasSelection.emit(False)
+            self.isUpdated.emit(False)
+            self.hasSkyModel.emit(False)
+            self.tw.clear()
+            self.grouptab.clear()
+            self.skyplot.setModel(None)
+
+    def _openFileCallback(self):
+        if not self._open_file_dialog:
+            filters = ";;".join(
+                ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._load_file_types])
+            dialog = self._open_file_dialog = QFileDialog(self, "Open sky model", ".", filters)
+            dialog.setFileMode(QFileDialog.ExistingFile)
+            dialog.setModal(True)
+            dialog.filesSelected['QStringList'].connect(self.openFile)
+        self._open_file_dialog.exec_()
+        return
+
+    def _mergeFileCallback(self):
+        if not self._merge_file_dialog:
+            filters = ";;".join(
+                ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._load_file_types])
+            dialog = self._merge_file_dialog = QFileDialog(self, "Merge in sky model", ".", filters)
+            dialog.setFileMode(QFileDialog.ExistingFile)
+            dialog.setModal(True)
+            dialog.filesSelected['QStringList'].connect(self._currier.curry(self.openFile, merge=True))
+        self._merge_file_dialog.exec_()
+        return
+
+    def openFile(self, _filename=None, _format=None, _merge=False, _show=True):
+        # check that we can close existing model
+        if not _merge and not self._canCloseExistingModel():
+            return False
+        if isinstance(_filename, QStringList):
+            _filename = _filename[0]
+        _filename = str(_filename)
+        # try to determine the file type
+        filetype, import_func, export_func, doc = Tigger.Models.Formats.resolveFormat(_filename, _format)
+        if import_func is None:
+            self.signalShowErrorMessage.emit("""Error loading model file %s: unknown file format""" % _filename)
+            return
+        # try to load the specified file
+        busy = BusyIndicator()
+        self.signalShowMessage.emit("""Reading %s file %s""" % (filetype, _filename), 3000)
+        QApplication.flush()
+        try:
+            model = import_func(_filename)
+            model.setFilename(_filename)
+        except:
+            busy.reset_cursor()
+            self.signalShowErrorMessage.emit("""Error loading '%s' file %s: %s""" % (filetype, _filename, str(sys.exc_info()[1])))
+            return
+        else:
+            # set the layout
+            if _show:
+                self.setLayout(self.LayoutImageModel)
+            # add to content
+            if _merge and self.model:
+                self.model.addSources(model.sources)
+                self.signalShowMessage.emit("""Merged in %d sources from '%s' file %s""" % (len(model.sources), filetype, _filename),
+                                 3000)
+                self.model.emitUpdate(SkyModel.SkyModel.UpdateAll)
+            else:
+                print("""Loaded %d sources from '%s' file %s""" % (len(model.sources), filetype, _filename))
+                self.signalShowMessage.emit("""Loaded %d sources from '%s' file %s""" % (len(model.sources), filetype, _filename),
+                                 3000)
+                self._display_filename = os.path.basename(_filename)
+                self.setModel(model)
+                self._indicateModelUpdated(updated=False)
+                # only set self.filename if an export function is available for this format. Otherwise set it to None, so that trying to save
+                # the file results in a save-as operation (so that we don't save to a file in an unsupported format).
+                self.filename = _filename if export_func else None
+        finally:
+            busy.reset_cursor()
+
+    def closeEvent(self, event):
+        dprint(1, "closing")
+        self._exiting = True
+        self.saveSizes()
+        if not self.closeFile():
+            self._exiting = False
+            event.ignore()
+            return
+        self.skyplot.close()
+        self.imgman.close()
+        self.closing.emit()
+        dprint(1, "invoking os._exit(0)")
+        os._exit(0)
+        QMainWindow.closeEvent(self, event)
+
+    def _canCloseExistingModel(self):
+        # save model if modified
+        if self.model and self._model_updated:
+            res = QMessageBox.question(self, "Closing sky model",
+                                       "<P>Model has been modified, would you like to save the changes?</P>",
+                                       QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel, QMessageBox.Save)
+            if res == QMessageBox.Cancel:
+                return False
+            elif res == QMessageBox.Save:
+                if not self.saveFile(confirm=False, overwrite=True):
+                    return False
+        # unload model images, unless we are already exiting anyway
+        if not self._exiting:
+            self.imgman.unloadModelImages()
+        return True
+
+    def closeFile(self):
+        if not self._canCloseExistingModel():
+            return False
+        # close model
+        self._display_filename = None
+        self.setModel(None)
+        # set the layout
+        self.setLayout(self.LayoutImage if self.imgman.getTopImage() else self.LayoutEmpty)
+        return True
+
+    def saveFile(self, filename=None, confirm=False, overwrite=True, non_native=False):
+        """Saves file using the specified 'filename'. If filename is None, uses current filename, if
+        that is not set, goes to saveFileAs() to open dialog and get a filename.
+        If overwrite=False, will ask for confirmation before overwriting an existing file.
+        If non_native=False, will ask for confirmation before exporting in non-native format.
+        If confirm=True, will ask for confirmation regardless.
+        Returns True if saving succeeded, False on error (or if cancelled by user).
+        """
+        if isinstance(filename, QStringList):
+            filename = filename[0]
+        filename = (filename and str(filename)) or self.filename
+        if filename is None:
+            return self.saveFileAs()
+        else:
+            warning = ''
+            # try to determine the file type
+            filetype, import_func, export_func, doc = Tigger.Models.Formats.resolveFormat(filename, None)
+            if export_func is None:
+                self.signalShowErrorMessage.emit("""Error saving model file %s: unsupported output format""" % filename)
+                return
+            if os.path.exists(filename) and not overwrite:
+                warning += "<P>The file already exists and will be overwritten.</P>"
+            if filetype != 'Tigger' and not non_native:
+                warning += """<P>Please note that you are exporting the model using the external format '%s'.
+              Source types, tags and other model features not supported by this
+              format will be omitted during the export.</P>""" % filetype
+            # get confirmation
+            if confirm or warning:
+                dialog = QMessageBox.warning if warning else QMessageBox.question
+                if dialog(self, "Saving sky model", "<P>Save model to %s?</P>%s" % (filename, warning),
+                          QMessageBox.Save | QMessageBox.Cancel, QMessageBox.Save) != QMessageBox.Save:
+                    return False
+            busy = BusyIndicator()
+            try:
+                export_func(self.model, filename)
+                self.model.setFilename(filename)
+            except:
+                busy.reset_cursor()
+                self.signalShowErrorMessage.emit("""Error saving model file %s: %s""" % (filename, str(sys.exc_info()[1])))
+                return False
+            else:
+                self.signalShowMessage.emit("""Saved model to file %s""" % filename, 3000)
+                self._display_filename = os.path.basename(filename)
+                self._indicateModelUpdated(updated=False)
+                self.filename = filename
+                return True
+            finally:
+                busy.reset_cursor()
+
+    def saveFileAs(self, filename=None):
+        """Saves file using the specified 'filename'. If filename is None, opens dialog to get a filename.
+        Returns True if saving succeeded, False on error (or if cancelled by user).
+        """
+        if filename is None:
+            if not self._save_as_dialog:
+                filters = ";;".join(
+                    ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._save_file_types])
+                dialog = self._save_as_dialog = QFileDialog(self, "Save sky model", ".", filters)
+                dialog.setDefaultSuffix(ModelHTML.DefaultExtension)
+                dialog.setFileMode(QFileDialog.AnyFile)
+                dialog.setAcceptMode(QFileDialog.AcceptSave)
+                dialog.setOption(QFileDialog.DontConfirmOverwrite, True)
+                dialog.setModal(True)
+                dialog.filesSelected['QStringList'].connect(self.saveFileAs)
+            return self._save_as_dialog.exec_() == QDialog.Accepted
+        # filename supplied, so save
+        return self.saveFile(filename, confirm=False)
+
+    def saveSelectionAs(self, filename=None, force=False):
+        if not self.model:
+            return
+        if filename is None:
+            if not self._save_sel_as_dialog:
+                filters = ";;".join(
+                    ["%s (%s)" % (name, " ".join(patterns)) for name, patterns, func in self._save_file_types])
+                dialog = self._save_sel_as_dialog = QFileDialog(self, "Save sky model", ".", filters)
+                dialog.setDefaultSuffix(ModelHTML.DefaultExtension)
+                dialog.setFileMode(QFileDialog.AnyFile)
+                dialog.setAcceptMode(QFileDialog.AcceptSave)
+                dialog.setOption(QFileDialog.DontConfirmOverwrite, False)
+                dialog.setModal(True)
+                dialog.filesSelected['QStringList'].connect(self.saveSelectionAs)
+            return self._save_sel_as_dialog.exec_() == QDialog.Accepted
+        # save selection
+        if isinstance(filename, QStringList):
+            filename = filename[0]
+        filename = str(filename)
+        selmodel = self.model.copy()
+        sources = [src for src in self.model.sources if src.selected]
+        if not sources:
+            self.signalShowErrorMessage.emit("""You have not selected any sources to save.""")
+            return
+        # try to determine the file type
+        filetype, import_func, export_func, doc = Tigger.Models.Formats.resolveFormat(filename, None)
+        if export_func is None:
+            self.signalShowErrorMessage.emit("""Error saving model file %s: unsupported output format""" % filename)
+            return
+        busy = BusyIndicator()
+        try:
+            export_func(self.model, filename, sources=sources)
+        except:
+            busy.reset_cursor()
+            self.signalShowErrorMessage.emit(
+                """Error saving selection to model file %s: %s""" % (filename, str(sys.exc_info()[1])))
+            return False
+        else:
+            self.signalShowMessage.emit("""Wrote %d selected source%s to file %s""" % (
+                len(selmodel.sources), "" if len(selmodel.sources) == 1 else "s", filename), 3000)
+        finally:
+            busy.reset_cursor()
+        pass
+
+    def addTagToSelection(self):
+        if not hasattr(self, '_add_tag_dialog'):
+            self._add_tag_dialog = Widgets.AddTagDialog(self, modal=True)
+        self._add_tag_dialog.setTags(self.model.tagnames)
+        self._add_tag_dialog.setValue(True)
+        if self._add_tag_dialog.exec_() != QDialog.Accepted:
+            return
+        tagname, value = self._add_tag_dialog.getTag()
+        if tagname is None or value is None:
+            return None
+        dprint(1, "tagging selected sources with", tagname, value)
+        # tag selected sources
+        for src in self.model.sources:
+            if src.selected:
+                src.setAttribute(tagname, value)
+        # If tag is not new, set a UpdateSelectionOnly flag on the signal
+        dprint(1, "adding tag to model")
+        self.model.addTag(tagname)
+        dprint(1, "recomputing totals")
+        self.model.getTagGrouping(tagname).computeTotal(self.model.sources)
+        dprint(1, "emitting update signal")
+        what = SkyModel.SkyModel.UpdateSourceContent + SkyModel.SkyModel.UpdateTags + SkyModel.SkyModel.UpdateSelectionOnly
+        self.model.emitUpdate(what, origin=self)
+
+    def removeTagsFromSelection(self):
+        if not hasattr(self, '_remove_tag_dialog'):
+            self._remove_tag_dialog = Widgets.SelectTagsDialog(self, modal=True, caption="Remove Tags",
+                                                               ok_button="Remove")
+        # get set of all tags in selected sources
+        tags = set()
+        for src in self.model.sources:
+            if src.selected:
+                tags.update(src.getTagNames())
+        if not tags:
+            return
+        tags = list(tags)
+        tags.sort()
+        # show dialog
+        self._remove_tag_dialog.setTags(tags)
+        if self._remove_tag_dialog.exec_() != QDialog.Accepted:
+            return
+        tags = self._remove_tag_dialog.getSelectedTags()
+        if not tags:
+            return
+        # ask for confirmation
+        plural = (len(tags) > 1 and "s") or ""
+        if QMessageBox.question(self, "Removing tags", "<P>Really remove the tag%s '%s' from selected sources?</P>" % (
+                plural, "', '".join(tags)),
+                                QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes) != QMessageBox.Yes:
+            return
+        # remove the tags
+        for src in self.model.sources:
+            if src.selected:
+                for tag in tags:
+                    src.removeAttribute(tag)
+        # update model
+        self.model.scanTags()
+        self.model.initGroupings()
+        # emit signal
+        what = SkyModel.SkyModel.UpdateSourceContent + SkyModel.SkyModel.UpdateTags + SkyModel.SkyModel.UpdateSelectionOnly
+        self.model.emitUpdate(what, origin=self)
+
+    def _indicateModelUpdated(self, what=None, origin=None, updated=True):
+        """Marks model as updated."""
+        self._model_updated = updated
+        self.isUpdated.emit(updated)
+        if self.model:
+            self.setWindowTitle(
+                "Tigger - %s%s" % ((self._display_filename or "(unnamed)", " (modified)" if updated else "")))
--- tigger-1.6.0.orig/TigGUI/Plot/MouseModes.py
+++ tigger-1.6.0/TigGUI/Plot/MouseModes.py
@@ -1,222 +1,222 @@
-from PyQt5.Qt import QObject, Qt, QActionGroup
-from PyQt5.QtCore import pyqtSignal
-
-import TigGUI.kitties.utils
-from TigGUI.init import Config, ConfigFile, ConfigFileName, pixmaps
-from TigGUI.kitties.utils import PersistentCurrier
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="mmod")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-_Contexts = dict(image=1, model=2)
-
-WHEELUP = "WheelUp"
-WHEELDOWN = "WheelDown"
-
-MM_ZWIN = "zoom-window"
-MM_ZUNDO = "zoom-undo"
-MM_ZREDO = "zoom-redo"
-MM_UNZOOM = "unzoom"
-MM_MEAS = "measure"
-MM_STATS = "stats"
-MM_SELSRC = "select-source"
-MM_SELWIN = "select-window"
-MM_SELWINPLUS = "select-window-plus"
-MM_DESEL = "deselect-window"
-
-_AllFuncs = [MM_ZWIN, MM_ZUNDO, MM_ZREDO, MM_UNZOOM,
-             MM_MEAS, MM_STATS, MM_SELSRC, MM_SELWIN, MM_SELWINPLUS, MM_DESEL]
-
-FuncDoc = {
-    MM_ZWIN: "Zoom into window (click-drag) or zoom in at point (double-click)",
-    MM_ZUNDO: "Zoom out to previous view",
-    MM_ZREDO: "Zoom in to previous view",
-    MM_UNZOOM: "Zoom fully out",
-    MM_MEAS: "Measuring ruler (click and drag)",
-    MM_STATS: "Stats in box (click and drag)",
-    MM_SELSRC: "Select nearest source",
-    MM_SELWIN: "Select sources in window",
-    MM_SELWINPLUS: "Extend selection with sources in window",
-    MM_DESEL: "Deselect sources in window"
-}
-
-_DefaultModes = "Mouse3,Mouse2,Mouse1"
-_DefaultInitialMode = "Mouse3"
-
-
-class MouseModeManager(QObject):
-    class MouseMode:
-
-        def __init__(self, mid):
-            self.id = mid
-            self.name = self.icon = self.tooltip = None
-            self.contexts = []
-            self.submodes = []
-            self.patterns = {}
-            self.qa = None
-
-        def addAction(self, menu, qag, callback, toolbar=None):
-            self.qa = menu.addAction(self.name, callback)
-            icon = self.icon and getattr(pixmaps, self.icon, None)
-            icon and self.qa.setIcon(icon.icon())
-            self.qa.setCheckable(True)
-            qag.addAction(self.qa)
-            toolbar and toolbar.addAction(self.qa)
-
-    setMouseMode = pyqtSignal(MouseMode)
-
-    def __init__(self, parent, menu, toolbar):
-        QObject.__init__(self, parent)
-        self._currier = PersistentCurrier()
-        # get list of mouse modes from config
-        modelist = []
-        for mid in Config.get("mouse-modes", _DefaultModes).split(","):
-            if not ConfigFile.has_section(mid):
-                print("ERROR: unknown mouse-mode '%s', skipping. Check your %s." % (mid, ConfigFileName))
-            else:
-                modelist.append(self._readModeConfig(mid))
-        self._modes = dict([(mode.id, mode) for mode in modelist])
-        self._qag_mode = QActionGroup(self)
-        self._qag_submode = QActionGroup(self)
-        self._all_submodes = []
-        # make entries for main modes
-        for mode in modelist:
-            mode.addAction(menu, self._qag_mode, callback=self._currier.curry(self._setMode, mode.id))
-            if mode.submodes:
-                self._all_submodes += list(mode.submodes)
-        # make entries for submodes
-        self._qa_submode_sep = menu.addSeparator()
-        self._modes.update([(mode.id, mode) for mode in self._all_submodes])
-        for mode in self._all_submodes:
-            mode.addAction(menu, self._qag_submode, toolbar=toolbar,
-                           callback=self._currier.curry(self._setSubmode, mode.id))
-        # other init
-        self._current_context = None
-        self._available_submodes = []
-        # set initial mode
-        initmode = Config.get("current-mouse-mode", _DefaultInitialMode)
-        if initmode not in self._modes:
-            initmode = modelist[0].id
-        self._modes[initmode].qa.setChecked(True)
-        self._setMode(initmode, write_config=False)
-
-    def currentMode(self):
-        return self._current_submode or self._current_mode
-
-    def setContext(self, has_image, has_model):
-        self._current_context = (has_image and _Contexts['image']) | (has_model and _Contexts['model'])
-        self._ensureValidSubmodes()
-
-    def _ensureValidSubmodes(self):
-        current = None
-        self._valid_submodes = []
-        # accumulate list of valid submodes, and find the checked-on one
-        for mode in self._available_submodes:
-            if not mode.contexts or not self._current_context or self._current_context & mode.contexts:
-                self._valid_submodes.append(mode)
-                mode.qa.setVisible(True)
-                if mode.qa.isChecked():
-                    current = mode.id
-            else:
-                mode.qa.setVisible(False)
-        if self._valid_submodes:
-            self._setSubmode(current or self._valid_submodes[0].id)
-
-    def _setMode(self, mid, write_config=True):
-        """Called when the mouse mode changes"""
-        if write_config:
-            Config.set("current-mouse-mode", mid)
-        self._current_mode = mode = self._modes[mid]
-        # hide submodes if any
-        for mm in self._all_submodes:
-            mm.qa.setVisible(False)
-        self._qa_submode_sep.setVisible(bool(mode.submodes))
-        self._current_submode = None
-        self._available_submodes = mode.submodes
-        # make relevant submodes visible, and make sure one is enabled
-        if mode.submodes:
-            self._ensureValidSubmodes()
-        else:
-            self.setMouseMode.emit(mode)
-
-    def _setSubmode(self, mid):
-        """Called when the mouse submode changes"""
-        self._current_submode = mode = self._modes[mid]
-        mode.qa.setChecked(True)
-        # hide submodes if any
-        for mm in self._all_submodes:
-            mm.qa.setShortcuts([])
-        # set F4 shortcut to next submode
-        if len(self._valid_submodes) > 1:
-            for i, mm in enumerate(self._valid_submodes):
-                if mm is mode:
-                    self._valid_submodes[(i + 1) % len(self._valid_submodes)].qa.setShortcut(Qt.Key_F4)
-                    break
-        self.setMouseMode.emit(mode)
-
-    def _readModeConfig(self, section, main_tooltip=None):
-        """Reads the given config section (and uses the supplied defaults dict)
-        and returns a dict of mouse_patterns,key_patterns per each function."""
-        # read basic stuff
-        mode = self.MouseMode(section)
-        config = TigGUI.kitties.config.SectionParser(ConfigFile, section)
-        mode.name = config.get("name", section)
-        mode.icon = config.get("icon", "") or None
-        mode.contexts = sum([_Contexts.get(x, 0) for x in config.get("contexts", "").split(",")])
-        submodes = config.get("submodes", "") or None
-        # eiher a mode with submodes, or a main mode
-        if submodes:
-            mode.tooltip = "<P>Your current mouse scheme is \"%s\".</P>" % mode.name
-            for mid in submodes.split(","):
-                if ConfigFile.has_section(mid):
-                    mode.submodes.append(self._readModeConfig(mid, main_tooltip=mode.tooltip))
-                else:
-                    print("ERROR: unknown submode '%s' in mode config section '%s', skipping/ Check your %s." % (
-                        mid, section, ConfigFileName))
-        else:
-            if main_tooltip:
-                mode.tooltip = main_tooltip + """<P>In this scheme, available mouse functions depend on the selected mode.
-        The current mode is %s. Use F4 to cycle through other modes.</P>""" % mode.name
-            else:
-                mode.tooltip = "<P>Your current mouse scheme is: \"%s\".</P>" % mode.name
-            mode.tooltip += """<P>The following mouse functions are available:</P><BR><TABLE>\n"""
-            patterns = {}
-            # get basic patterns
-            for func in _AllFuncs:
-                # get pattern
-                pattern = config.get(func, "")
-                if not pattern:
-                    continue
-                mouse_pattern = key_pattern = None
-                for pat in pattern.split(";"):
-                    pat = pat.strip()
-                    if pat and pat.lower() != "none":
-                        # split by "+" and lookup each identifier in the Qt namespace
-                        scomps = pat.split("+")
-                        try:
-                            comps = [x if x in (WHEELUP, WHEELDOWN) else getattr(Qt, x) for x in scomps]
-                        except AttributeError:
-                            print(
-                                "WARNING: can't parse '%s' for function '%s' in mode config section '%s', disabling. Check your %s." % (
-                                    pat, func, section, ConfigFileName))
-                            continue
-                        # append key/button code and sum of modifiers to the key or keyboard pattern list
-                        if scomps[-1].startswith("Key_"):
-                            if key_pattern:
-                                print(
-                                    "WARNING: more than one key pattern for function '%s' in mode config section '%s', ignoring. Check your %s." % (
-                                        func, section, ConfigFileName))
-                            else:
-                                key_pattern = comps[-1], sum(comps[:-1])
-                        else:
-                            if mouse_pattern:
-                                print(
-                                    "WARNING: more than one mouse pattern for function '%s' in mode config section '%s', ignoring. Check your %s." % (
-                                        func, section, ConfigFileName))
-                            else:
-                                mouse_pattern = comps[-1], sum(comps[:-1])
-                mode.tooltip += "<TR><TD>%s:&nbsp;&nbsp;</TD><TD>%s</TD></TR>\n" % (pattern, FuncDoc[func])
-                mode.patterns[func] = (mouse_pattern or (0, 0), key_pattern or (0, 0))
-            mode.tooltip += "</TABLE><BR>"
-        return mode
+from PyQt5.Qt import QObject, Qt, QActionGroup
+from PyQt5.QtCore import pyqtSignal
+
+import TigGUI.kitties.utils
+from TigGUI.init import Config, ConfigFile, ConfigFileName, pixmaps
+from TigGUI.kitties.utils import PersistentCurrier
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="mmod")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+_Contexts = dict(image=1, model=2)
+
+WHEELUP = "WheelUp"
+WHEELDOWN = "WheelDown"
+
+MM_ZWIN = "zoom-window"
+MM_ZUNDO = "zoom-undo"
+MM_ZREDO = "zoom-redo"
+MM_UNZOOM = "unzoom"
+MM_MEAS = "measure"
+MM_STATS = "stats"
+MM_SELSRC = "select-source"
+MM_SELWIN = "select-window"
+MM_SELWINPLUS = "select-window-plus"
+MM_DESEL = "deselect-window"
+
+_AllFuncs = [MM_ZWIN, MM_ZUNDO, MM_ZREDO, MM_UNZOOM,
+             MM_MEAS, MM_STATS, MM_SELSRC, MM_SELWIN, MM_SELWINPLUS, MM_DESEL]
+
+FuncDoc = {
+    MM_ZWIN: "Zoom into window (click-drag) or zoom in at point (double-click)",
+    MM_ZUNDO: "Zoom out to previous view",
+    MM_ZREDO: "Zoom in to previous view",
+    MM_UNZOOM: "Zoom fully out",
+    MM_MEAS: "Measuring ruler (click and drag)",
+    MM_STATS: "Stats in box (click and drag)",
+    MM_SELSRC: "Select nearest source",
+    MM_SELWIN: "Select sources in window",
+    MM_SELWINPLUS: "Extend selection with sources in window",
+    MM_DESEL: "Deselect sources in window"
+}
+
+_DefaultModes = "Mouse3,Mouse2,Mouse1"
+_DefaultInitialMode = "Mouse3"
+
+
+class MouseModeManager(QObject):
+    class MouseMode:
+
+        def __init__(self, mid):
+            self.id = mid
+            self.name = self.icon = self.tooltip = None
+            self.contexts = []
+            self.submodes = []
+            self.patterns = {}
+            self.qa = None
+
+        def addAction(self, menu, qag, callback, toolbar=None):
+            self.qa = menu.addAction(self.name, callback)
+            icon = self.icon and getattr(pixmaps, self.icon, None)
+            icon and self.qa.setIcon(icon.icon())
+            self.qa.setCheckable(True)
+            qag.addAction(self.qa)
+            toolbar and toolbar.addAction(self.qa)
+
+    setMouseMode = pyqtSignal(MouseMode)
+
+    def __init__(self, parent, menu, toolbar):
+        QObject.__init__(self, parent)
+        self._currier = PersistentCurrier()
+        # get list of mouse modes from config
+        modelist = []
+        for mid in Config.get("mouse-modes", _DefaultModes).split(","):
+            if not ConfigFile.has_section(mid):
+                print("ERROR: unknown mouse-mode '%s', skipping. Check your %s." % (mid, ConfigFileName))
+            else:
+                modelist.append(self._readModeConfig(mid))
+        self._modes = dict([(mode.id, mode) for mode in modelist])
+        self._qag_mode = QActionGroup(self)
+        self._qag_submode = QActionGroup(self)
+        self._all_submodes = []
+        # make entries for main modes
+        for mode in modelist:
+            mode.addAction(menu, self._qag_mode, callback=self._currier.curry(self._setMode, mode.id))
+            if mode.submodes:
+                self._all_submodes += list(mode.submodes)
+        # make entries for submodes
+        self._qa_submode_sep = menu.addSeparator()
+        self._modes.update([(mode.id, mode) for mode in self._all_submodes])
+        for mode in self._all_submodes:
+            mode.addAction(menu, self._qag_submode, toolbar=toolbar,
+                           callback=self._currier.curry(self._setSubmode, mode.id))
+        # other init
+        self._current_context = None
+        self._available_submodes = []
+        # set initial mode
+        initmode = Config.get("current-mouse-mode", _DefaultInitialMode)
+        if initmode not in self._modes:
+            initmode = modelist[0].id
+        self._modes[initmode].qa.setChecked(True)
+        self._setMode(initmode, write_config=False)
+
+    def currentMode(self):
+        return self._current_submode or self._current_mode
+
+    def setContext(self, has_image, has_model):
+        self._current_context = (has_image and _Contexts['image']) | (has_model and _Contexts['model'])
+        self._ensureValidSubmodes()
+
+    def _ensureValidSubmodes(self):
+        current = None
+        self._valid_submodes = []
+        # accumulate list of valid submodes, and find the checked-on one
+        for mode in self._available_submodes:
+            if not mode.contexts or not self._current_context or self._current_context & mode.contexts:
+                self._valid_submodes.append(mode)
+                mode.qa.setVisible(True)
+                if mode.qa.isChecked():
+                    current = mode.id
+            else:
+                mode.qa.setVisible(False)
+        if self._valid_submodes:
+            self._setSubmode(current or self._valid_submodes[0].id)
+
+    def _setMode(self, mid, write_config=True):
+        """Called when the mouse mode changes"""
+        if write_config:
+            Config.set("current-mouse-mode", mid)
+        self._current_mode = mode = self._modes[mid]
+        # hide submodes if any
+        for mm in self._all_submodes:
+            mm.qa.setVisible(False)
+        self._qa_submode_sep.setVisible(bool(mode.submodes))
+        self._current_submode = None
+        self._available_submodes = mode.submodes
+        # make relevant submodes visible, and make sure one is enabled
+        if mode.submodes:
+            self._ensureValidSubmodes()
+        else:
+            self.setMouseMode.emit(mode)
+
+    def _setSubmode(self, mid):
+        """Called when the mouse submode changes"""
+        self._current_submode = mode = self._modes[mid]
+        mode.qa.setChecked(True)
+        # hide submodes if any
+        for mm in self._all_submodes:
+            mm.qa.setShortcuts([])
+        # set F4 shortcut to next submode
+        if len(self._valid_submodes) > 1:
+            for i, mm in enumerate(self._valid_submodes):
+                if mm is mode:
+                    self._valid_submodes[(i + 1) % len(self._valid_submodes)].qa.setShortcut(Qt.Key_F4)
+                    break
+        self.setMouseMode.emit(mode)
+
+    def _readModeConfig(self, section, main_tooltip=None):
+        """Reads the given config section (and uses the supplied defaults dict)
+        and returns a dict of mouse_patterns,key_patterns per each function."""
+        # read basic stuff
+        mode = self.MouseMode(section)
+        config = TigGUI.kitties.config.SectionParser(ConfigFile, section)
+        mode.name = config.get("name", section)
+        mode.icon = config.get("icon", "") or None
+        mode.contexts = sum([_Contexts.get(x, 0) for x in config.get("contexts", "").split(",")])
+        submodes = config.get("submodes", "") or None
+        # eiher a mode with submodes, or a main mode
+        if submodes:
+            mode.tooltip = "<P>Your current mouse scheme is \"%s\".</P>" % mode.name
+            for mid in submodes.split(","):
+                if ConfigFile.has_section(mid):
+                    mode.submodes.append(self._readModeConfig(mid, main_tooltip=mode.tooltip))
+                else:
+                    print("ERROR: unknown submode '%s' in mode config section '%s', skipping/ Check your %s." % (
+                        mid, section, ConfigFileName))
+        else:
+            if main_tooltip:
+                mode.tooltip = main_tooltip + """<P>In this scheme, available mouse functions depend on the selected mode.
+        The current mode is %s. Use F4 to cycle through other modes.</P>""" % mode.name
+            else:
+                mode.tooltip = "<P>Your current mouse scheme is: \"%s\".</P>" % mode.name
+            mode.tooltip += """<P>The following mouse functions are available:</P><BR><TABLE>\n"""
+            patterns = {}
+            # get basic patterns
+            for func in _AllFuncs:
+                # get pattern
+                pattern = config.get(func, "")
+                if not pattern:
+                    continue
+                mouse_pattern = key_pattern = None
+                for pat in pattern.split(";"):
+                    pat = pat.strip()
+                    if pat and pat.lower() != "none":
+                        # split by "+" and lookup each identifier in the Qt namespace
+                        scomps = pat.split("+")
+                        try:
+                            comps = [x if x in (WHEELUP, WHEELDOWN) else getattr(Qt, x) for x in scomps]
+                        except AttributeError:
+                            print(
+                                "WARNING: can't parse '%s' for function '%s' in mode config section '%s', disabling. Check your %s." % (
+                                    pat, func, section, ConfigFileName))
+                            continue
+                        # append key/button code and sum of modifiers to the key or keyboard pattern list
+                        if scomps[-1].startswith("Key_"):
+                            if key_pattern:
+                                print(
+                                    "WARNING: more than one key pattern for function '%s' in mode config section '%s', ignoring. Check your %s." % (
+                                        func, section, ConfigFileName))
+                            else:
+                                key_pattern = comps[-1], sum(comps[:-1])
+                        else:
+                            if mouse_pattern:
+                                print(
+                                    "WARNING: more than one mouse pattern for function '%s' in mode config section '%s', ignoring. Check your %s." % (
+                                        func, section, ConfigFileName))
+                            else:
+                                mouse_pattern = comps[-1], sum(comps[:-1])
+                mode.tooltip += "<TR><TD>%s:&nbsp;&nbsp;</TD><TD>%s</TD></TR>\n" % (pattern, FuncDoc[func])
+                mode.patterns[func] = (mouse_pattern or (0, 0), key_pattern or (0, 0))
+            mode.tooltip += "</TABLE><BR>"
+        return mode
--- tigger-1.6.0.orig/TigGUI/Plot/SkyModelPlot.py
+++ tigger-1.6.0/TigGUI/Plot/SkyModelPlot.py
@@ -1,2194 +1,2194 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-import re
-import time
-
-import numpy
-from PyQt5 import QtGui
-from PyQt5.Qt import QWidget, QHBoxLayout, QFileDialog, QComboBox, QLabel, \
-    QDialog, QToolButton, QVBoxLayout, QAction, QEvent, QSize, QMouseEvent, \
-    QSizePolicy, QApplication, QColor, QImage, QPixmap, QPainter, QToolTip, \
-    QBrush, QTimer, QCheckBox, QMenu, QPen, QRect, QClipboard, \
-    QInputDialog, QActionGroup, QRectF, QPointF, QPoint, QMessageBox, QTransform, QToolBar, QCoreApplication
-from PyQt5.QtCore import *
-from PyQt5.QtCore import Qt
-from PyQt5.QtCore import pyqtSignal
-from PyQt5.QtGui import QPolygon, QFont, QPalette
-from PyQt5.QtWidgets import QDockWidget, QPushButton, QStyle, QSpacerItem
-from PyQt5.Qwt import QwtPlot, QwtPlotPicker, QwtText, QwtPlotItem, QwtPlotCurve, QwtPicker, QwtEventPattern, \
-    QwtSymbol, QwtPlotZoomer, QwtScaleEngine, QwtPickerMachine, QwtPickerClickRectMachine, QwtPickerClickPointMachine, \
-    QwtPickerPolygonMachine, QwtPickerDragRectMachine, QwtPickerDragLineMachine, QwtPlotCanvas, QwtPickerTrackerMachine
-
-import TigGUI.kitties.utils
-from TigGUI.kitties.utils import curry, PersistentCurrier
-from TigGUI.kitties.widgets import BusyIndicator
-
-QStringList = list
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="plot")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-from TigGUI.init import pixmaps, Config
-from Tigger.Models import ModelClasses
-from Tigger import Coordinates
-from Tigger.Coordinates import Projection
-from Tigger.Models.SkyModel import SkyModel
-from TigGUI.Widgets import TiggerPlotCurve, TiggerPlotMarker, TDockWidget, TigToolTip
-from TigGUI.Plot import MouseModes
-
-# plot Z depths for various classes of objects
-Z_Image = 1000
-Z_Grid = 9000
-Z_Source = 10000
-Z_SelectedSource = 10001
-Z_CurrentSource = 10002
-Z_Markup = 10010
-
-# default stepping of grid circles
-DefaultGridStep_ArcSec = 30 * 60
-
-DEG = math.pi / 180
-
-
-class SourceMarker:
-    """SourceMarker implements a source marker corresponding to a SkyModel source.
-  The base class implements a marker at the centre.
-  """
-    QwtSymbolStyles = dict(none=QwtSymbol.NoSymbol,
-                           cross=QwtSymbol.XCross,
-                           plus=QwtSymbol.Cross,
-                           dot=QwtSymbol.Ellipse,
-                           circle=QwtSymbol.Ellipse,
-                           square=QwtSymbol.Rect,
-                           diamond=QwtSymbol.Diamond,
-                           triangle=QwtSymbol.Triangle,
-                           dtriangle=QwtSymbol.DTriangle,
-                           utriangle=QwtSymbol.UTriangle,
-                           ltriangle=QwtSymbol.LTriangle,
-                           rtriangle=QwtSymbol.RTriangle,
-                           hline=QwtSymbol.HLine,
-                           vline=QwtSymbol.VLine,
-                           star1=QwtSymbol.Star1,
-                           star2=QwtSymbol.Star2,
-                           hexagon=QwtSymbol.Hexagon)
-
-    def __init__(self, src, l, m, size, model):
-        self.src = src
-        self._lm, self._size = (l, m), size
-        self.plotmarker = TiggerPlotMarker()
-        self.plotmarker.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self.plotmarker.setValue(l, m)
-        self._symbol = QwtSymbol()
-        self._font = QApplication.font()
-        self._model = model
-        self.resetStyle()
-
-    def lm(self):
-        """Returns plot coordinates of marker, as an l,m tuple"""
-        return self._lm
-
-    def lmQPointF(self):
-        """Returns plot coordinates of marker, as a QPointF"""
-        return self.plotmarker.value()
-
-    def source(self):
-        """Returns model source associated with marker"""
-        return self.src
-
-    def attach(self, plot):
-        """Attaches to plot"""
-        self.plotmarker.attach(plot)
-
-    def isVisible(self):
-        return self.plotmarker.isVisible()
-
-    def setZ(self, z):
-        self.plotmarker.setZ(z)
-
-    def resetStyle(self):
-        """Sets the source style based on current model settings"""
-        self.style, self.label = self._model.getSourcePlotStyle(self.src)
-        self._selected = getattr(self.src, 'selected', False)
-        # setup marker components
-        self._setupMarker(self.style, self.label)
-        # setup depth
-        if self._model.currentSource() is self.src:
-            self.setZ(Z_CurrentSource)
-        elif self._selected:
-            self.setZ(Z_SelectedSource)
-        else:
-            self.setZ(Z_Source)
-
-    def _setupMarker(self, style, label):
-        """Sets up the plot marker (self.plotmarker) based on style object and label string.
-    If style=None, makes marker invisible."""
-        if not style:
-            self.plotmarker.setVisible(False)
-            return
-        self.plotmarker.setVisible(True)
-        self._symbol.setStyle(self.QwtSymbolStyles.get(style.symbol, QwtSymbol.Cross))
-        self._font.setPointSize(style.label_size)
-        symbol_color = QColor(style.symbol_color)
-        label_color = QColor(style.label_color)
-        # dots have a fixed size
-        if style.symbol == "dot":
-            self._symbol.setSize(2)
-        else:
-            self._symbol.setSize(self._size)
-        self._symbol.setPen(QPen(symbol_color, style.symbol_linewidth))
-        self._symbol.setBrush(QBrush(Qt.NoBrush))
-        lab_pen = QPen(Qt.NoPen)
-        lab_brush = QBrush(Qt.NoBrush)
-        self._label = label or ""
-        self.plotmarker.setSymbol(self._symbol)
-        txt = QwtText(self._label)
-        txt.setColor(label_color)
-        txt.setFont(self._font)
-        txt.setBorderPen(lab_pen)
-        txt.setBackgroundBrush(lab_brush)
-        self.plotmarker.setLabel(txt)
-        self.plotmarker.setLabelAlignment(Qt.AlignBottom | Qt.AlignRight)
-
-    def checkSelected(self):
-        """Checks the src.selected attribute, resets marker if it has changed.
-    Returns True is something has changed."""
-        sel = getattr(self.src, 'selected', False)
-        if self._selected == sel:
-            return False
-        self._selected = sel
-        self.resetStyle()
-        return True
-
-    def changeStyle(self, group):
-        if group.func(self.src):
-            self.resetStyle()
-            return True
-        return False
-
-
-class ImageSourceMarker(SourceMarker):
-    """This auguments SourceMarker with a FITS image."""
-
-    def __init__(self, src, l, m, size, model, imgman):
-        # load image if needed
-        self.imgman = imgman
-        dprint(2, "loading Image source", src.shape.filename)
-        self.imagecon = imgman.loadImage(src.shape.filename, duplicate=False, to_top=False, model=src.name)
-        # this will return None if the image fails to load, in which case we still produce a marker,
-        # but nothing else
-        if self.imagecon:
-            self.imagecon.setMarkersZ(Z_Source)
-        # init base class
-        SourceMarker.__init__(self, src, l, m, size, model)
-
-    def attach(self, plot):
-        SourceMarker.attach(self, plot)
-        if self.imagecon:
-            self.imagecon.attachToPlot(plot)
-
-    def _setupMarker(self, style, label):
-        SourceMarker._setupMarker(self, style, label)
-        if not style:
-            return
-        symbol_color = QColor(style.symbol_color)
-        label_color = QColor(style.label_color)
-        if self.imagecon:
-            self.imagecon.setPlotBorderStyle(border_color=symbol_color, label_color=label_color)
-
-
-def makeSourceMarker(src, l, m, size, model, imgman):
-    """Creates source marker based on source type"""
-    shape = getattr(src, 'shape', None)
-    #  print type(shape),isinstance(shape,ModelClasses.FITSImage),shape.__class__,ModelClasses.FITSImage
-    if isinstance(shape, ModelClasses.FITSImage):
-        return ImageSourceMarker(src, l, m, size, model, imgman)
-    else:
-        return SourceMarker(src, l, m, size, model)
-
-
-def makeDualColorPen(color1, color2, width=3):
-    c1, c2 = QColor(color1).rgb(), QColor(color2).rgb()
-    texture = QImage(2, 2, QImage.Format_RGB32)
-    texture.setPixel(0, 0, c1)
-    texture.setPixel(1, 1, c1)
-    texture.setPixel(0, 1, c2)
-    texture.setPixel(1, 0, c2)
-    return QPen(QBrush(texture), width)
-
-
-class ToolDialog(QDialog):
-    signalIsVisible = pyqtSignal(bool)
-
-    def __init__(self, parent, configname, menuname, show_shortcut=None):
-        QDialog.__init__(self, parent)
-        self.setModal(False)
-        self.setFocusPolicy(Qt.NoFocus)
-        self.hide()
-        self._configname = configname
-        self._geometry = None
-        # make hide/show qaction
-        self._qa_show = qa = QAction("Show %s" % menuname.replace("&", "&&"), self)
-        if show_shortcut:
-            qa.setShortcut(show_shortcut)
-        qa.setCheckable(True)
-        qa.setChecked(Config.getbool("%s-show" % configname, False))
-        qa.setVisible(False)
-        qa.setToolTip("""<P>The quick zoom & cross-sections window shows a zoom of the current image area
-      under the mose pointer, and X/Y cross-sections through that area.</P>""")
-        qa.triggered[bool].connect(self.setVisible)
-        self._closing = False
-        self._write_config = curry(Config.set, "%s-show" % configname)
-        qa.triggered[bool].connect(self._write_config)
-        self.signalIsVisible.connect(qa.setChecked)
-
-    def getShowQAction(self):
-        return self._qa_show
-
-    def makeAvailable(self, available=True):
-        """Makes the tool available (or unavailable)-- shows/hides the "show" control, and shows/hides the dialog according to this control."""
-        self._qa_show.setVisible(available)
-        self.setVisible(self._qa_show.isChecked() if available else False)
-
-    def initGeometry(self):
-        x0 = Config.getint('%s-x0' % self._configname, 0)
-        y0 = Config.getint('%s-y0' % self._configname, 0)
-        w = Config.getint('%s-width' % self._configname, 0)
-        h = Config.getint('%s-height' % self._configname, 0)
-        if w and h:
-            self.resize(w, h)
-            self.move(x0, y0)
-            return True
-        return False
-
-    def _saveGeometry(self):
-        Config.set('%s-x0' % self._configname, self.pos().x())
-        Config.set('%s-y0' % self._configname, self.pos().y())
-        Config.set('%s-width' % self._configname, self.width())
-        Config.set('%s-height' % self._configname, self.height())
-
-    def close(self):
-        self._closing = True
-        QDialog.close(self)
-
-    def closeEvent(self, event):
-        QDialog.closeEvent(self, event)
-        if not self._closing:
-            self._write_config(False)
-
-    def moveEvent(self, event):
-        self._saveGeometry()
-        QDialog.moveEvent(self, event)
-
-    def resizeEvent(self, event):
-        self._saveGeometry()
-        QDialog.resizeEvent(self, event)
-
-    def setVisible(self, visible, emit=True):
-        if not visible:
-            self._geometry = self.geometry()
-        else:
-            if self._geometry:
-                self.setGeometry(self._geometry)
-        if emit:
-            self.signalIsVisible.emit(visible)
-        QDialog.setVisible(self, visible)
-        # This section aligns the dockwidget with its subqwidget's visibility
-        if visible and not self.parent().isVisible():
-            self.parent().setGeometry(self.geometry())
-            self.parent().setVisible(True)
-        elif not visible and self.parent().isVisible():
-            self.parent().setVisible(False)
-
-
-class LiveImageZoom(ToolDialog):
-    livezoom_resize_signal = pyqtSignal(QSize)
-
-    def __init__(self, parent, radius=10, factor=12):
-        ToolDialog.__init__(self, parent, configname="livezoom", menuname="live zoom & cross-sections",
-                            show_shortcut=Qt.Key_F2)
-        self.setWindowTitle("Zoom & Cross-sections")
-        radius = Config.getint("livezoom-radius", radius)
-        # create size polixy for livezoom
-        livezoom_policy = QSizePolicy()
-        livezoom_policy.setWidthForHeight(True)
-        livezoom_policy.setHeightForWidth(True)
-        self.setSizePolicy(livezoom_policy)
-        # add plots
-        self._lo0 = lo0 = QVBoxLayout(self)
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo1.setSpacing(0)
-        lo0.addLayout(lo1)
-        # control checkboxes
-        self._showzoom = QCheckBox("show zoom", self)
-        self._showcs = QCheckBox("show cross-sections", self)
-        self._showzoom.setChecked(True)
-        self._showcs.setChecked(True)
-        self._showzoom.toggled[bool].connect(self._showZoom)
-        self._showcs.toggled[bool].connect(self._showCrossSections)
-        lo1.addWidget(self._showzoom, 0)
-        lo1.addSpacing(5)
-        lo1.addWidget(self._showcs, 0)
-        lo1.addStretch(1)
-        self._smaller = QToolButton(self)
-        self._smaller.setIcon(pixmaps.window_smaller.icon())
-        self._smaller.clicked.connect(self._shrink)
-        self._larger = QToolButton(self)
-        self._larger.setIcon(pixmaps.window_larger.icon())
-        self._larger.clicked.connect(self._enlarge)
-        lo1.addWidget(self._smaller)
-        lo1.addWidget(self._larger)
-        self._has_zoom = self._has_xcs = self._has_ycs = False
-        # setup zoom plot
-        font = QApplication.font()
-        self._zoomplot = QwtPlot(self)
-        #    self._zoomplot.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Fixed)
-        self._zoomplot.setContentsMargins(5, 5, 5, 5)
-        axes = {QwtPlot.xBottom: "X pixel coordinate",
-                QwtPlot.yLeft: "Y pixel coordinate",
-                QwtPlot.xTop: "X cross-section value",
-                QwtPlot.yRight: "Y cross-section value"}
-        for axis, title in axes.items():
-            self._zoomplot.enableAxis(True)
-            self._zoomplot.setAxisScale(axis, 0, 1)
-            self._zoomplot.setAxisFont(axis, font)
-            self._zoomplot.setAxisMaxMajor(axis, 3)
-            self._zoomplot.axisWidget(axis).setMinBorderDist(16, 16)
-            self._zoomplot.axisWidget(axis).show()
-            text = QwtText(title)
-            text.setFont(font)
-            self._zoomplot.axisWidget(axis).setTitle(text.text())
-        self._zoomplot.setAxisLabelRotation(QwtPlot.yLeft, -90)
-        self._zoomplot.setAxisLabelAlignment(QwtPlot.yLeft, Qt.AlignVCenter)
-        self._zoomplot.setAxisLabelRotation(QwtPlot.yRight, 90)
-        self._zoomplot.setAxisLabelAlignment(QwtPlot.yRight, Qt.AlignVCenter)
-        # self._zoomplot.plotLayout().setAlignCanvasToScales(True)
-        lo0.addWidget(self._zoomplot, 0)
-        # setup ZoomItem for zoom plot
-        self._zi = self.ImageItem()
-        self._zi.attach(self._zoomplot)
-        self._zi.setZ(0)
-        # setup targeting reticule for zoom plot
-        self._reticules = TiggerPlotCurve(), TiggerPlotCurve()
-        for curve in self._reticules:
-            curve.setRenderHint(QwtPlotItem.RenderAntialiased)
-            curve.setPen(QPen(QColor("green")))
-            curve.setStyle(QwtPlotCurve.Lines)
-            curve.attach(self._zoomplot)
-            curve.setZ(1)
-        # setup cross-section curves
-        pen = makeDualColorPen("navy", "yellow")
-        self._xcs = TiggerPlotCurve()
-        self._xcs.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._ycs = TiggerPlotCurve()
-        self._ycs.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._xcs.setPen(makeDualColorPen("navy", "yellow"))
-        self._ycs.setPen(makeDualColorPen("black", "cyan"))
-        for curve in self._xcs, self._ycs:
-            curve.setStyle(QwtPlotCurve.Steps)
-            curve.attach(self._zoomplot)
-            curve.setZ(2)
-        self._xcs.setXAxis(QwtPlot.xBottom)
-        self._xcs.setYAxis(QwtPlot.yRight)
-        self._ycs.setXAxis(QwtPlot.xTop)
-        self._ycs.setYAxis(QwtPlot.yLeft)
-        # self._ycs.setCurveType(QwtPlotCurve.Xfy)  # old qwt5
-        self._ycs.setOrientation(Qt.Vertical)  # Qwt 6 version
-        self._xcs.setOrientation(Qt.Horizontal)  # Qwt 6 version
-        # make QTransform for flipping images upside-down
-        self._xform = QTransform()
-        self._xform.scale(1, -1)
-        # init geometry
-        self.setPlotSize(radius, factor)
-        self.initGeometry()
-
-    def _showZoom(self, show):
-        if not show:
-            self._zi.setVisible(False)
-
-    def _showCrossSections(self, show):
-        self._zoomplot.enableAxis(QwtPlot.xTop, show)
-        self._zoomplot.enableAxis(QwtPlot.yRight, show)
-        if not show:
-            self._xcs.setVisible(False)
-            self._ycs.setVisible(False)
-
-    def _enlarge(self):
-        self.setPlotSize(self._radius * 2, self._magfac)
-
-    def _shrink(self):
-        self.setPlotSize(self._radius / 2, self._magfac)
-
-    def setPlotSize(self, radius, factor):
-        Config.set('livezoom-radius', radius)
-        self._radius = radius
-        # enable smaller/larger buttons based on radius
-        self._smaller.setEnabled(radius > 5)
-        self._larger.setEnabled(radius < 40)
-        # compute other sizes
-        self._npix = radius * 2 + 1
-        self._magfac = factor
-        width = height = self._npix * self._magfac
-        self._zoomplot.setMinimumHeight(height + 80)
-        self._zoomplot.setMinimumWidth(width + 80)
-        # set data array
-        self._data = numpy.ma.masked_array(numpy.zeros((int(self._npix), int(self._npix)), float),
-                                           numpy.zeros((int(self._npix), int(self._npix)), bool))
-        # reset window size
-        self._lo0.update()
-        self.resize(self._lo0.minimumSize())
-        self.livezoom_resize_signal.emit(self._lo0.minimumSize())
-
-    def _getZoomSlice(self, ix, nx):
-        ix0, ix1 = ix - self._radius, ix + self._radius + 1
-        zx0 = -min(ix0, 0)
-        ix0 = max(ix0, 0)
-        zx1 = self._npix - max(ix1, nx - 1) + (nx - 1)
-        ix1 = min(ix1, nx - 1)
-        return ix0, ix1, zx0, zx1
-
-    class ImageItem(QwtPlotItem):
-        """ImageItem subclass used by LiveZoomer to display zoomed-in images"""
-
-        def __init__(self):
-            QwtPlotItem.__init__(self)
-            self._qimg = None
-            self.RenderAntialiased
-
-        def setImage(self, qimg):
-            self._qimg = qimg
-
-        def draw(self, painter, xmap, ymap, rect):
-            """Implements QwtPlotItem.draw(), to render the image on the given painter."""
-            self._qimg and painter.drawImage(QRect(xmap.p1(), ymap.p2(), xmap.pDist(), ymap.pDist()), self._qimg)
-
-    def trackImage(self, image, ix, iy):
-        if not self.isVisible():
-            return
-        # update zoomed image
-        # find overlap of zoom window with image, mask invisible pixels
-        nx, ny = image.imageDims()
-        ix0, ix1, zx0, zx1 = self._getZoomSlice(ix, nx)
-        iy0, iy1, zy0, zy1 = self._getZoomSlice(iy, ny)
-        if ix0 < nx and ix1 >= 0 and iy0 < ny and iy1 >= 0:
-            if self._showzoom.isChecked():
-                # There was an error here when using zoom window zoom buttons
-                # (TypeError: slice indices must be integers or None or have an __index__ method).
-                # Therefore indexes have been cast as int()
-                self._data.mask[...] = False
-                self._data.mask[:int(zx0), ...] = True
-                self._data.mask[int(zx1):, ...] = True
-                self._data.mask[..., :int(zy0)] = True
-                self._data.mask[..., int(zy1):] = True
-                # copy & colorize region
-                self._data[int(zx0):int(zx1), int(zy0):int(zy1)] = image.image()[int(ix0):int(ix1), int(iy0):int(iy1)]
-                intensity = image.intensityMap().remap(self._data)
-                self._zi.setImage(
-                    image.colorMap().colorize(image.intensityMap().remap(self._data)).transformed(self._xform))
-                self._zi.setVisible(True)
-            # set cross-sections
-            if self._showcs.isChecked():
-                if iy >= 0 and iy < ny and ix1 > ix0:
-                    xcs = [float(x) for x in image.image()[int(ix0):int(ix1), int(iy)]]
-                    self._xcs.setData(numpy.arange(ix0 - 1, ix1) + .5, [xcs[0]] + xcs)
-                    self._xcs.setVisible(True)
-                    self._zoomplot.setAxisAutoScale(QwtPlot.yRight)
-                    self._has_xcs = True
-                else:
-                    self._xcs.setVisible(False)
-                    self._zoomplot.setAxisScale(QwtPlot.yRight, 0, 1)
-                if ix >= 0 and ix < nx and iy1 > iy0:
-                    ycs = [float(y) for y in image.image()[int(ix), int(iy0):int(iy1)]]
-                    # self._ycs.setData([ycs[0]] + ycs, numpy.arange(iy0 - 1, iy1) + .5)
-                    self._ycs.setData([ycs[0]] + ycs, numpy.arange(iy0 - 1, iy1) + .5)
-                    self._ycs.setVisible(True)
-                    self._zoomplot.setAxisAutoScale(QwtPlot.xTop)
-                    self._has_ycs = True
-                else:
-                    self._ycs.setVisible(False)
-                    self._zoomplot.setAxisScale(QwtPlot.xTop, 0, 1)
-        else:
-            for plotitem in self._zi, self._xcs, self._ycs:
-                plotitem.setVisible(False)
-        # set zoom plot scales
-        x0, x1 = ix - self._radius - .5, ix + self._radius + .5
-        y0, y1 = iy - self._radius - .5, iy + self._radius + .5
-        self._reticules[0].setData([ix, ix], [y0, y1])
-        self._reticules[1].setData([x0, x1], [iy, iy])
-        self._zoomplot.setAxisScale(QwtPlot.xBottom, x0, x1)
-        self._zoomplot.setAxisScale(QwtPlot.yLeft, y0, y1)
-        self._zoomplot.enableAxis(QwtPlot.xTop, self._showcs.isChecked())
-        # update plots
-        self._zoomplot.replot()
-
-
-class LiveProfile(ToolDialog):
-    def __init__(self, parent):
-        ToolDialog.__init__(self, parent, configname="liveprofile", menuname="profiles", show_shortcut=Qt.Key_F3)
-        self.setWindowTitle("Profiles")
-        # create size policy for live profile
-        liveprofile_policy = QSizePolicy()
-        liveprofile_policy.setHorizontalPolicy(QSizePolicy.MinimumExpanding)
-        liveprofile_policy.setVerticalPolicy(QSizePolicy.Fixed)
-        self.setSizePolicy(liveprofile_policy)
-        # add plots
-        lo0 = QVBoxLayout(self)
-        lo0.setSpacing(0)
-        lo1 = QHBoxLayout()
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo0.addLayout(lo1)
-        lab = QLabel("Axis: ", self)
-        self._wprofile_axis = QComboBox(self)
-        self._wprofile_axis.activated[int].connect(self.selectAxis)
-        lo1.addWidget(lab, 0)
-        lo1.addWidget(self._wprofile_axis, 0)
-        lo1.addStretch(1)
-        # add profile plot
-        self._font = font = QApplication.font()
-        self._profplot = QwtPlot(self)
-        self._profplot.setContentsMargins(0, 0, 0, 0)
-        self._profplot.enableAxis(QwtPlot.xBottom)
-        self._profplot.enableAxis(QwtPlot.yLeft)
-        self._profplot.setAxisFont(QwtPlot.xBottom, font)
-        self._profplot.setAxisFont(QwtPlot.yLeft, font)
-        #    self._profplot.setAxisMaxMajor(QwtPlot.xBottom,3)
-        self._profplot.setAxisAutoScale(QwtPlot.yLeft)
-        self._profplot.setAxisMaxMajor(QwtPlot.yLeft, 3)
-        self._profplot.axisWidget(QwtPlot.yLeft).setMinBorderDist(16, 16)
-        self._profplot.setAxisLabelRotation(QwtPlot.yLeft, -90)
-        self._profplot.setAxisLabelAlignment(QwtPlot.yLeft, Qt.AlignVCenter)
-        self._profplot.plotLayout().setAlignCanvasToScales(True)
-        lo0.addWidget(self._profplot, 0)
-        self._profplot.setMaximumHeight(256)
-        self._profplot.setMinimumHeight(56)
-        # self._profplot.setMinimumWidth(256)
-        # self._profplot.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
-        self._profplot.setSizePolicy(liveprofile_policy)
-        # and profile curve
-        self._profcurve = TiggerPlotCurve()
-        self._profcurve.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._ycs = TiggerPlotCurve()
-        self._ycs.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._profcurve.setPen(QPen(QColor("white")))
-        self._profcurve.setStyle(QwtPlotCurve.Lines)
-        self._profcurve.setOrientation(Qt.Horizontal)
-        self._profcurve.attach(self._profplot)
-        # config geometry
-        if not self.initGeometry():
-            self.resize(300, 192)
-        self._axes = []
-        self._lastsel = None
-        self._image_id = None
-
-    def setImage(self, image):
-        if id(image) == self._image_id:
-            return
-        self._image_id = id(image)
-        # build list of axes -- first X and Y
-        self._axes = []
-        for n, label in enumerate(("X", "Y")):
-            iaxis, np = image.getSkyAxis(n)
-            self._axes.append((label, iaxis, list(range(np)), "pixels"))
-        self._xaxis = self._axes[0][1]
-        self._yaxis = self._axes[1][1]
-        # then, extra axes
-        for i in range(image.numExtraAxes()):
-            iaxis, name, labels = image.extraAxisNumberNameLabels(i)
-            if len(labels) > 1 and name.upper() not in ("STOKES", "COMPLEX"):
-                values = image.extraAxisValues(i)
-                unit, scale = image.extraAxisUnitScale(i)
-                self._axes.append((name, iaxis, [x / scale for x in values], unit))
-        # put them into the selector
-        names = [name for name, iaxis, vals, unit in self._axes]
-        self._wprofile_axis.addItems(names)
-        if self._lastsel in names:
-            axis = names.index(self._lastsel)
-        elif len(self._axes) > 2:
-            axis = 2
-        else:
-            axis = 0
-        self._wprofile_axis.setCurrentIndex(axis)
-        self.selectAxis(axis, remember=False)
-
-    def selectAxis(self, i, remember=True):
-        if i < len(self._axes):
-            name, iaxis, values, unit = self._axes[i]
-            self._selaxis = iaxis, values
-            self._profplot.setAxisScale(QwtPlot.xBottom, min(values), max(values))
-            title = QwtText("%s, %s" % (name, unit) if unit else name)
-            title.setFont(self._font)
-            self._profplot.setAxisTitle(QwtPlot.xBottom, title)
-            # save selection
-            if remember:
-                self._lastsel = name
-
-    def trackImage(self, image, ix, iy):
-        if not self.isVisible():
-            return
-        nx, ny = image.imageDims()
-        inrange = ix < nx and ix >= 0 and iy < ny and iy >= 0
-        if inrange:
-            # check if image has changed
-            self.setImage(image)
-            # make profile slice
-            iaxis, xval = self._selaxis
-            slicer = image.currentSlice()
-            slicer[self._xaxis] = ix
-            slicer[self._yaxis] = iy
-            slicer[iaxis] = slice(None)
-            yval = image.data()[tuple(slicer)]
-            i0, i1 = 0, len(xval)
-            # if X or Y profile, set axis scale to match that of window
-            if iaxis == 0:
-                rect = image.currentRectPix()
-                i0 = rect.topLeft().x()
-                i1 = i0 + rect.width()
-                self._profplot.setAxisScale(QwtPlot.xBottom, xval[i0], xval[i1 - 1])
-            elif iaxis == 1:
-                rect = image.currentRectPix()
-                i0 = rect.topLeft().y()
-                i1 = i0 + rect.height()
-                self._profplot.setAxisScale(QwtPlot.xBottom, xval[i0], xval[i1 - 1])
-            self._profcurve.setData(xval[i0:i1], yval[i0:i1])
-        self._profcurve.setVisible(inrange)
-        # update plots
-        self._profplot.replot()
-
-
-class SkyModelPlotter(QWidget):
-    # Selection modes for the various selector functions below.
-    # Default is usually Clear+Add
-    SelectionClear = 1  # clear previous selection
-    SelectionAdd = 2  # add to selection
-    SelectionRemove = 4  # remove from selection
-
-    # Mouse pointer modes
-    MouseZoom = 0
-    MouseMeasure = 1
-    MouseSubset = 2
-    MouseSelect = 3
-    MouseDeselect = 4
-
-    imagesChanged = pyqtSignal()
-    showErrorMessage = pyqtSignal()
-
-    class Plot(QwtPlot):
-        """
-        Augments QwtPlot with additional functions, including a cache of QPoints that's cleared whenever a plot
-        layout is updated of the plot is zoomed
-        """
-
-        updateLayoutEvent = pyqtSignal()
-        updateCurrentPlot = pyqtSignal()
-
-        def __init__(self, mainwin, skymodelplotter, parent):
-            QwtPlot.__init__(self, parent)
-            self._skymodelplotter = skymodelplotter
-            self.setAcceptDrops(True)
-            self.clearCaches()
-            self._mainwin = mainwin
-            self._drawing_key = None
-            self.updateCurrentPlot.connect(self.updatePlot)
-
-        def getUpdateSignal(self):
-            return self.updateLayoutEvent
-
-        def dragEnterEvent(self, event):
-            return self._mainwin.dragEnterEvent(event)
-
-        def dropEvent(self, event):
-            return self._mainwin.dropEvent(event)
-
-        def lmPosToScreen(self, fpos):
-            return QPoint(self.transform(QwtPlot.xBottom, fpos.x()), self.transform(QwtPlot.yLeft, fpos.y()))
-
-        def lmRectToScreen(self, frect):
-            return QRect(self.lmPosToScreen(frect.topLeft()), self.lmPosToScreen(frect.bottomRight()))
-
-        def screenPosToLm(self, pos):
-            return QPointF(self.invTransform(QwtPlot.xBottom, pos.x()), self.invTransform(QwtPlot.yLeft, pos.y()))
-
-        def screenRectToLm(self, rect):
-            return QRectF(self.screenPosToLm(rect.topLeft()), self.screenPosToLm(rect.bottomRight()))
-
-        def getMarkerPosition(self, marker):
-            """Returns QPoint associated with the given marker. Caches coordinate conversion by marker ID."""
-            mid = id(marker)
-            pos = self._coord_cache.get(mid)
-            if pos is None:
-                self._coord_cache[mid] = pos = self.lmPosToScreen(marker.lmQPointF())
-            return pos
-
-        def drawCanvas(self, painter):
-            dprint(5, "drawCanvas", time.time() % 60)
-            if self._drawing_key is None:
-                dprint(5, "drawCanvas: key not set, redrawing")
-                return QwtPlot.drawCanvas(self, painter)
-            else:
-                dprint(5, "drawCanvas: current key is", self._drawing_key)
-                pm = self._draw_cache.get(self._drawing_key)
-                if pm:
-                    dprint(5, "drawCanvas: found pixmap in cache, drawing")
-                else:
-                    width, height = painter.device().width(), painter.device().height()
-                    dprint(5, "drawCanvas: not in cache, redrawing %dx%d pixmap" % (width, height))
-                    self._draw_cache[self._drawing_key] = pm = QPixmap(width, height)
-                    pm.fill(self.canvasBackground().color())
-                    QwtPlot.drawCanvas(self, QPainter(pm))
-                painter.drawPixmap(0, 0, pm)
-                dprint(5, "drawCanvas done", time.time() % 60)
-                return
-
-        def clear(self):
-            """Override clear() to provide a saner interface."""
-            self.clearCaches()
-            self.detachItems(QwtPlotItem.Rtti_PlotItem, False)
-
-        def updateLayout(self):
-            # if an update event is pending, skip our internal stuff
-            if self._skymodelplotter.isUpdatePending():
-                dprint(5, "updateLayout: ignoring, since a plot update is pending")
-                QwtPlot.updateLayout(self)
-            else:
-                dprint(5, "updateLayout")
-                self.clearCaches()
-                QwtPlot.updateLayout(self)
-                self.updateLayoutEvent.emit()
-
-        def setDrawingKey(self, key=None):
-            """Sets the current drawing key. If key is set to not None, then drawCanvas() will look in the draw cache
-      for a pixmap matching the key, instead of redrawing the canvas. It will also cache the results of the draw.
-      """
-            dprint(2, "setting drawing key", key)
-            self._drawing_key = key
-
-        def clearCaches(self):
-            dprint(2, "clearing plot caches")
-            self._coord_cache = {}
-            self._draw_cache = {}
-
-        def clearDrawCache(self):
-            self._draw_cache = {}
-
-        def updatePlot(self):
-            self.replot()
-
-    class PlotZoomer(QwtPlotZoomer):
-        provisionalZoom = pyqtSignal(float, float, int, int)
-
-        def __init__(self, canvas, updateLayoutEvent, track_callback=None, label=None):
-            QwtPlotZoomer.__init__(self, canvas)
-            self.setMaxStackDepth(1000)
-            self._use_wheel = True
-            self._track_callback = track_callback
-            if track_callback is not None:
-                self.moved[QPointF].connect(self._track_callback)
-
-            if label:
-                self._label = QwtText(label)
-            else:
-                self._label = QwtText("")
-            self._fixed_aspect = False
-            self._dczoom_button = self._dczoom_modifiers = None
-            # maintain a separate stack of  "desired" (as opposed to actual) zoom rects. When a resize of the plot happens,
-            # we recompute the actual zoom rect based on the aspect ratio and the desired rect.
-            self._zoomrects = []
-            # watch plot for changes: if resized, aspect ratios need to be checked
-            self._updateLayoutEvent = updateLayoutEvent
-            self._updateLayoutEvent.connect(self._checkAspects)
-
-        def isFixedAspect(self):
-            return self._fixed_aspect
-
-        def setFixedAspect(self, fixed):
-            self._fixed_aspect = fixed
-            self._checkAspects()
-
-        def setDoubleClickZoom(self, button, modifiers):
-            self._dczoom_button, self._dczoom_modifiers = button, modifiers
-
-        def _checkAspects(self):
-            """If fixed-aspect mode is in effect, goes through zoom rects and adjusts them to the plot aspect"""
-            if self._fixed_aspect:
-                dprint(2, "plot canvas size is", self.plot().size())
-                dprint(2, "zoom rects are", self._zoomrects)
-                self._resetZoomStack(self.zoomRectIndex())
-
-        def setZoomStack(self, stack, index=0):
-            self._zoomrects = stack
-            self._resetZoomStack(index)
-
-        def _resetZoomStack(self, index):
-            stack = list(map(self.adjustRect, self._zoomrects))
-            if stack:
-                dprint(2, f"index is {index} stack size is {len(stack)}")
-                zs = stack[index]
-                dprint(2, "resetting plot limits to", zs)
-                self.plot().setAxisScale(QwtPlot.yLeft, zs.top(), zs.bottom())
-                self.plot().setAxisScale(QwtPlot.xBottom, zs.right(), zs.left())
-                self.plot().axisScaleEngine(QwtPlot.xBottom).setAttribute(QwtScaleEngine.Inverted, True)
-                QwtPlotZoomer.setZoomBase(self)
-                dprint(2, "reset limits, zoom stack is now", self.zoomRectIndex())
-            dprint(2, "setting zoom stack", stack, index)
-            # Fixed below using PyQt-Qwt repo-based install (issue #18 PR #19)
-            # Also available from https://github.com/razman786/PyQt-Qwt/tree/ubuntu_zoomstack
-            QwtPlotZoomer.setZoomStack(self, stack, index)
-            dprint(2, "zoom stack is now", self.zoomRectIndex(), self.maxStackDepth())
-
-        def adjustRect(self, rect):
-            """Adjusts rectangle w.r.t. aspect ratio settings. That is, if a fixed aspect ratio is in effect, adjusts the rectangle to match
-      the aspect ratio of the plot canvas. Returns adjusted version."""
-            if self._fixed_aspect:
-                dprint(2, "adjusting rect to canvas size:", self.canvas().size(), rect)
-                aspect0 = self.canvas().width() / float(self.canvas().height()) if self.canvas().height() else 1
-                aspect = rect.width() / float(rect.height())
-                # increase rectangle, if needed to match the aspect
-                if aspect < aspect0:
-                    dx = rect.width() * (aspect0 / aspect - 1) / 2
-                    return rect.adjusted(-dx, 0, dx, 0)
-                elif aspect0 and aspect > aspect0:
-                    dy = rect.height() * (aspect / aspect0 - 1) / 2
-                    return rect.adjusted(0, -dy, 0, dy)
-            return rect
-
-        def rescale(self):
-            self.plot().clearCaches()
-            return QwtPlotZoomer.rescale(self)
-
-        def zoom(self, rect):
-            if not isinstance(rect, int):
-                rect = rect.intersected(self.zoomBase())
-                # check that it's not too small, ignore if it is
-                x1, y1, x2, y2 = rect.getCoords()
-                x1 = self.plot().transform(self.xAxis(), x1)
-                y1 = self.plot().transform(self.yAxis(), y1)
-                x2 = self.plot().transform(self.xAxis(), x2)
-                y2 = self.plot().transform(self.yAxis(), y2)
-                dprint(2, "zoom by", abs(x1 - x2), abs(y1 - y2))
-                if abs(x1 - x2) <= 20 and abs(y1 - y2) <= 20:
-                    return
-            if isinstance(rect, int) or rect.isValid():
-                dprint(2, "zoom", rect)
-                if not isinstance(rect, int):
-                    self._zoomrects[self.zoomRectIndex() + 1:] = [QRectF(rect)]
-                    rect = self.adjustRect(rect)
-                    dprint(2, "zooming to", rect)
-                QwtPlotZoomer.zoom(self, rect)
-                dprint(2, "zoom stack is now", self.zoomRectIndex())
-            else:
-                dprint(2, "invalid zoom selected, ignoring", rect)
-
-        def trackerText(self, pos):
-            return (self._track_callback and self._track_callback(pos)) or (
-                self._label if self.isActive() else QwtText(""))
-
-        def enableWheel(self, enable):
-            self._use_wheel = enable
-
-        def widgetMouseDoubleClickEvent(self, ev):
-            x = self.plot().invTransform(self.xAxis(), ev.x())
-            y = self.plot().invTransform(self.yAxis(), ev.y())
-            if int(ev.button()) == self._dczoom_button and int(ev.modifiers()) == self._dczoom_modifiers:
-                self.provisionalZoom.emit(x, y, 1, 10)
-
-        def widgetWheelEvent(self, ev):
-            x = self.plot().invTransform(self.xAxis(), ev.x())
-            y = self.plot().invTransform(self.yAxis(), ev.y())
-            if self._use_wheel:
-                self.provisionalZoom.emit(x, y, (1 if ev.angleDelta().y() > 0 else -1), 200)
-            QwtPlotPicker.widgetWheelEvent(self, ev)
-
-    class PlotPicker(QwtPlotPicker):
-        """Auguments QwtPlotPicker with functions for selecting objects"""
-
-        def __init__(self, canvas, label, color="red", select_callback=None, track_callback=None,
-                     mode=QwtPickerClickRectMachine(), rubber_band=QwtPicker.RectRubberBand,
-                     text_bg=None):
-            QwtPlotPicker.__init__(self, QwtPlot.xBottom, QwtPlot.yLeft, rubber_band, QwtPicker.AlwaysOff,
-                                       canvas)
-            self.installEventFilter(self)
-            self.setRubberBand(rubber_band)
-            # setup appearance
-            self._text = QwtText(label)
-            self._color = None
-            #      self._text_inactive = QwtText()
-            self.setLabel(label, color)
-            if isinstance(text_bg, QColor):
-                text_bg = QBrush(text_bg)
-            self._text_bg = text_bg
-            if text_bg:
-                self._text.setBackgroundBrush(text_bg)
-                self._text_inactive.setBackgroundBrush(text_bg)
-            # setup track_callbacks
-            if track_callback is not None:
-                dprint(2, f"PlotPicker track_callback {track_callback.__name__}")
-                self._track_callback = track_callback
-                if track_callback.__name__ == "_trackRulerStartPoint":
-                    dprint(2, "PlotPicker adding _trackRuler")
-                    self.appended.connect(self._track_callback)
-                elif track_callback.__name__ == "_trackCoordinates":
-                    dprint(2, "PlotPicker adding _trackCoordinates")
-                    self.moved[QPointF].connect(self._track_callback)
-            # setup select_callbacks
-            if select_callback:
-                dprint(2, f"PlotPicker select_callback {select_callback.__name__}")
-                dprint(2, f"PlotPicker mode {mode}")
-                self._select_callback = select_callback
-                if select_callback.__name__ == '_measureRuler':
-                    self.setStateMachine(mode)
-                    self.moved.connect(select_callback)
-                    dprint(2, f"PlotPicker mode PickerPolygon _measureRuler")
-                elif isinstance(mode, QwtPickerClickRectMachine):
-                    self.setStateMachine(mode)
-                    self.selected[QRectF].connect(select_callback)
-                    dprint(2, f"PlotPicker mode PickerClickRect")
-                elif isinstance(mode, QwtPickerClickPointMachine):
-                    self.setStateMachine(mode)
-                    self.selected[QPointF].connect(select_callback)
-                    dprint(2, f"PlotPicker mode PickerClickPoint")
-                else:
-                    # handle unrecognised state machine modes
-                    self.setStateMachine(mode)
-                    self.selected[QPointF].connect(select_callback)
-                    dprint(2, f"PlotPicker mode unknown")
-            else:
-                # handle pickers that have no callbacks
-                self.setStateMachine(mode)
-
-        def eventFilter(self, source, event):
-            """This is how to check for Qwt mouse patterns
-            if event.type() == QwtEventPattern.MouseSelect4:
-                print("Qwt mouse pattern for shift + left click")"""
-            # If key is released when using a picker, end picker process
-            # exception is the ruler, which only needs SHIFT+click to initiate and click to end.
-            if event.type() == QEvent.KeyRelease:
-                self.reset()
-            return super(QwtPlotPicker, self).eventFilter(source, event)
-
-        def setLabel(self, label, color=None):
-            if color:
-                self.setRubberBandPen(makeDualColorPen(color, "white"))
-                self._color = QColor(color)
-                self._text.setColor(self._color)
-            self._label = label
-            self._text.setText(label)
-
-        def trackerText(self, pos):
-            text = self._track_callback and self._track_callback(pos)
-            if text is None:
-                self._text.setText(self._label)
-                return self._text  # if self.isActive() else self._text_inactive
-            else:
-                if not isinstance(text, QwtText):
-                    if self._label:
-                        text = "%s %s" % (self._label, text)
-                    text = QwtText(text)
-                    self._text.setText(self._label)
-                    text = self._text
-                if self._text_bg:
-                    text.setBackgroundBrush(self._text_bg)
-                if self._color is not None:
-                    text.setColor(self._color)
-                return text
-
-    # this is __init__ for SkyModelPlotter
-    def __init__(self, parent, mainwin, *args):
-        QWidget.__init__(self, parent, *args)
-        self._mainwin = mainwin
-        self.tigToolTip = TigToolTip()
-        self._ruler_timer = QTimer()
-        self._ruler_timer.timeout.connect(self._measureRulerCompleted)
-        # plot update logic -- handle updates via the event loop
-        self._updates_enabled = False  # updates ignored until this is True
-        self._update_pending = 0  # serial number of most recently posted update event
-        self._update_done = 0  # serial number of most recently processed update event
-        self._update_what = 0  # mask of updates ('what' arguments to _updateLayout) accumulated since last update was done
-        # create currier
-        self._currier = PersistentCurrier()
-        # init widgetry
-        lo = QHBoxLayout(self)
-        lo.setSpacing(0)
-        lo.setContentsMargins(0, 0, 0, 0)
-        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
-        self.plot = self.Plot(mainwin, self, self)
-        self.plot.setAutoDelete(False)
-        self.plot.setEnabled(False)
-        self.plot.enableAxis(QwtPlot.yLeft, False)
-        self.plot.enableAxis(QwtPlot.xBottom, False)
-        lo.addWidget(self.plot)
-        # setup plot groupings
-        self._bg_color = QColor("#808080")
-        self.plot.setCanvasBackground(self._bg_color)
-        self._bg_brush = QBrush(self._bg_color)
-        color = QColor("white")
-        color.setAlpha(128)
-        self._coord_bg_brush = QBrush(color)
-        self._grid_color = QColor("navy")
-        self._grid_pen = QPen(self._grid_color)
-        self._grid_pen.setStyle(Qt.DotLine)
-        self._image_pen = QPen(self._grid_color)
-        self._image_pen.setStyle(Qt.DashLine)
-        # init plot pickers
-        self._initPickers()
-        # init markup symbols and colors and pens
-        self._plot_markup = []
-        self._stats_color = QColor("red")
-        self._stats_pen = QPen(self._stats_color, 1)
-        #    self._stats_pen.setStyle(Qt.DotLine)
-        self._subset_color = QColor("lightblue")
-        self._subset_pen = QPen(self._subset_color, 1)
-        self._markup_color = QColor("cyan")
-        self._markup_pen = QPen(self._markup_color, 1)
-        self._markup_pen.setStyle(Qt.DotLine)
-        self._markup_symbol_pen = QPen(self._markup_color, 1)
-        self._markup_brush = QBrush(Qt.NoBrush)
-        self._markup_xsymbol = QwtSymbol(QwtSymbol.XCross, self._markup_brush, self._markup_symbol_pen, QSize(16, 16))
-        self._markup_absymbol = QwtSymbol(QwtSymbol.Ellipse, self._markup_brush, self._markup_symbol_pen, QSize(4, 4))
-        self._markup_a_label = QwtText("A")
-        self._markup_a_label.setColor(self._markup_color)
-        self._markup_b_label = QwtText("B")
-        self._markup_b_label.setColor(self._markup_color)
-        # init live zoomers
-        self._livezoom = LiveImageZoom(self)
-        self._livezoom.setObjectName('livezoom')
-        self._liveprofile = LiveProfile(self)
-        self._liveprofile.setObjectName('liveprofile')
-        # get current sizeHints()
-        self.live_zoom_size = self._livezoom.sizeHint()
-        self.live_profile_size = self._liveprofile.sizeHint()
-        # setup dockable widgets
-        self._dockable_liveprofile = TDockWidget(title="Profiles", parent=mainwin, bind_widget=self._liveprofile,
-                                                 close_slot=self.liveprofile_dockwidget_closed,
-                                                 toggle_slot=self.liveprofile_dockwidget_toggled)
-        self._dockable_livezoom = TDockWidget(title="Zoom & Cross-sections", parent=mainwin, bind_widget=self._livezoom,
-                                              close_slot=self.livezoom_dockwidget_closed,
-                                              toggle_slot=self.livezoom_dockwidget_toggled)
-        # add dock widgets to main window and set to hidden
-        self._mainwin.addDockWidget(Qt.LeftDockWidgetArea, self._dockable_livezoom)
-        self._mainwin.addDockWidget(Qt.LeftDockWidgetArea, self._dockable_liveprofile)
-        self._livezoom.setVisible(False)
-        self._liveprofile.setVisible(False)
-        self._dockable_livezoom.setVisible(False)
-        self._dockable_liveprofile.setVisible(False)
-
-        # other internal init
-        self.projection = None
-        self.model = None
-        self._zoomrect = None
-        self._text_no_source = QwtText("")
-        self._text_no_source.setColor(QColor("red"))
-        # image controller
-        self._imgman = self._image = None
-        self._markers = {}
-        self._source_lm = {}
-        self._export_png_dialog = None
-        # menu and toolbar
-        self._menu = QMenu("&Plot", self)
-        self._wtoolbar = QToolBar(self)
-        self._wtoolbar.setIconSize(QSize(16, 16))
-        self._wtoolbar.setOrientation(Qt.Vertical)
-        lo.insertWidget(0, self._wtoolbar)
-        self._qag_mousemode = QActionGroup(self)
-        self._qa_unzoom = self._wtoolbar.addAction(pixmaps.zoom_out.icon(), "Unzoom plot",
-                                                   self._currier.curry(self._zoomer.zoom, 0))
-        self._qa_unzoom.setToolTip("""<P>Click to unzoom the plot all the way out to its full size.</P>""")
-        self._qa_unzoom.setShortcut(Qt.ALT + Qt.Key_Minus)
-        self._wtoolbar.addSeparator()
-        self._menu.addAction(self._qa_unzoom)
-        # mouse mode controls
-        mouse_menu = self._menu.addMenu("Mouse mode")
-        # init top of menu
-        mouse_menu.addAction("Show quick mouse reference", self._showMouseModeTooltip, Qt.Key_F1)
-        self._qa_mwzoom = qa = mouse_menu.addAction("Use mouse wheel zoom")
-        qa.setCheckable(True)
-        qa.toggled[bool].connect(self._zoomer.enableWheel)
-        qa.triggered[bool].connect(self._currier.curry(Config.set, "mouse-wheel-zoom"))
-        qa.setChecked(Config.getbool("mouse-wheel-zoom", True))
-        self._zoomer.enableWheel(qa.isChecked())
-        mouse_menu.addSeparator()
-        self._mousemodes = MouseModes.MouseModeManager(self, mouse_menu, self._wtoolbar)
-        self._mousemodes.setMouseMode.connect(self._setMouseMode)
-        self._setMouseMode(self._mousemodes.currentMode())
-        self._qa_colorzoom = self._wtoolbar.addAction(pixmaps.zoom_colours.icon(), "Zoom colourmap into subset",
-                                                      self._colourZoomIntoSubset)
-        self._qa_colorzoom.setShortcut(Qt.SHIFT + Qt.Key_F4)
-        self._qa_colorzoom.setVisible(False)
-        self._menu.addAction(self._qa_colorzoom)
-        # hide/show tools
-        self._menu.addAction(self._dockable_liveprofile.widget().getShowQAction())
-        self._menu.addAction(self._dockable_livezoom.widget().getShowQAction())
-        # fixed aspect
-        qa = self._menu.addAction("Fix aspect ratio")
-        qa.setCheckable(True)
-        qa.setChecked(Config.getbool("fix-aspect-ratio", True))
-        qa.toggled[bool].connect(self._zoomer.setFixedAspect)
-        qa.triggered[bool].connect(self._currier.curry(Config.set, "fix-aspect-ratio"))
-        self._zoomer.setFixedAspect(qa.isChecked())
-        qa.setToolTip("""<P>Enable this to maintain a fixed aspect ratio in the plot.</P>""")
-        # beam
-        self._qa_show_psf = self._menu.addAction("Show PSF (aka beam)")
-        self._qa_show_psf.setCheckable(True)
-        self._qa_show_psf.setChecked(True)
-        self._psf_marker = TiggerPlotCurve()
-        self._psf_marker.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._psf_marker.setPen(QPen(QColor("lightgreen")))
-        self._psf_marker.setZ(Z_Grid)
-        self._qa_show_psf.toggled[bool].connect(self._showPsfMarker)
-        # grid stepping
-        self._grid_step_arcsec = DefaultGridStep_ArcSec
-        gridmenu = self._menu.addMenu("Show grid circles")
-        qag = QActionGroup(gridmenu)
-        gridsteps = [None, 1, 2, 5, 10, 30, 60, 120, 300, 600]
-        for step in gridsteps:
-            if step is None:
-                text = "None"
-            elif step < 60:
-                text = "%d'" % step
-            else:
-                text = "%d\u00B0" % (step / 60)
-            qa = gridmenu.addAction(text, self._currier.curry(self._setGridCircleStepping, step and step * 60))
-            qa.setCheckable(True)
-            qa.setChecked(step == self._grid_step_arcsec)
-            qag.addAction(qa)
-        qa = self._qa_custom_grid = gridmenu.addAction("Custom...", self._setCustomGridCircleStepping)
-        qa.setCheckable(True)
-        qag.addAction(qa)
-        self._grid_step_arcsec_str = ""
-        if self._grid_step_arcsec / 60 not in gridsteps:
-            self._setCustomGridCircleSteppingLabel()
-            qa.setChecked(True)
-        # save as PNG file
-        self._menu.addAction("Export plot to PNG file...", self._exportPlotToPNG, Qt.CTRL + Qt.Key_F12)
-        self.plotShowMessage = None
-        self.plotShowErrorMessage = None
-
-    def close(self):
-        self._menu.clear()
-        self._wtoolbar.clear()
-        self._livezoom.close()
-        self._liveprofile.close()
-
-    def livezoom_dockwidget_closed(self):
-        list_of_actions = self._menu.actions()
-        for ea_action in list_of_actions:
-            if ea_action.text() == 'Show live zoom && cross-sections':
-                self._dockable_livezoom.setVisible(False)
-                if self._mainwin.windowState() != Qt.WindowMaximized:
-                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_livezoom.width())
-                ea_action.setChecked(False)
-
-    def liveprofile_dockwidget_closed(self):
-        list_of_actions = self._menu.actions()
-        for ea_action in list_of_actions:
-            if ea_action.text() == 'Show profiles':
-                self._dockable_liveprofile.setVisible(False)
-                if self._mainwin.windowState() != Qt.WindowMaximized:
-                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_liveprofile.width())
-                ea_action.setChecked(False)
-
-    def liveprofile_dockwidget_toggled(self):
-        if self._dockable_liveprofile.isVisible():
-            if self._dockable_liveprofile.isWindow():
-                self._dockable_liveprofile.setFloating(False)
-            else:
-                self._dockable_liveprofile.setFloating(True)
-                if self._mainwin.windowState() != Qt.WindowMaximized:
-                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_liveprofile.width())
-
-    def livezoom_dockwidget_toggled(self):
-        if self._dockable_livezoom.isVisible():
-            if self._dockable_livezoom.isWindow():
-                self._dockable_livezoom.setFloating(False)
-            else:
-                self._dockable_livezoom.setFloating(True)
-                if self._mainwin.windowState() != Qt.WindowMaximized:
-                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_livezoom.width())
-
-    def setupShowMessages(self, _signal):
-        self.plotShowMessage = _signal
-
-    def setupShowErrorMessages(self, _signal):
-        self.plotShowErrorMessage = _signal
-
-    def getMenu(self):
-        return self._menu
-
-    def enableUpdates(self, enable=True):
-        self._updates_enabled = enable
-        if enable:
-            self.postUpdateEvent()
-
-    # extra flag for updateContents() -- used when image content or projection has changed
-    UpdateImages = 1 << 16
-
-    def setImageManager(self, im):
-        """Attaches an image manager."""
-        self._imgman = im
-        im.setZ0(Z_Image)
-        im.enableImageBorders(self._image_pen, self._grid_color, self._bg_brush)
-        im.imagesChanged.connect(self._currier.curry(self.postUpdateEvent, self.UpdateImages))
-        im.imagePlotRaised.connect(self._imageRaised)
-
-    class UpdateEvent(QEvent):
-        def __init__(self, serial):
-            QEvent.__init__(self, QEvent.User)
-            self.serial = serial
-
-    def isUpdatePending(self):
-        return self._update_pending > self._update_done
-
-    def postUpdateEvent(self, what=SkyModel.UpdateAll, origin=None):
-        """Posts an update event. Since plot updates are somewhat expensive, and certain operations can cause multiple updates,
-    we handle them through the event loop."""
-        dprintf(3, "postUpdateEvent(what=%x,origin=%s)\n", what, origin)
-        self._update_what |= what
-        self._update_pending += 1
-        dprintf(3, "posting update event, serial %d, new mask %x\n", self._update_pending, self._update_what)
-        QCoreApplication.postEvent(self, self.UpdateEvent(self._update_pending))
-
-    def event(self, ev):
-        if isinstance(ev, self.UpdateEvent):
-            if ev.serial < self._update_pending:
-                dprintf(3, "ignoring update event %d since a more recent one is already posted\n", ev.serial)
-            else:
-                dprintf(3, "received update event %d, updating contents with mask %x\n", ev.serial, self._update_what)
-                self._updateContents(self._update_what)
-                self._update_what = 0
-                self._update_done = ev.serial
-        return QWidget.event(self, ev)
-
-    def _initPickers(self):
-        """Called from __init__ to create the various plot pickers for support of mouse modes."""
-        # this picker is invisible -- it is just there to make sure _trackCoordinates is always called
-        # it provides the live zoom and main mouse pointer
-        self._tracker = self.PlotPicker(self.plot.canvas(), "", mode=QwtPickerTrackerMachine(),
-                                        track_callback=self._trackCoordinates)
-        self._tracker.setTrackerMode(QwtPicker.AlwaysOn)
-        self._tracker.setTrackerPen(QColor('white'))  # TODO - adjust the colour of the coordinate tracker according to image colour map.
-        # this pricker provides the profile on click
-        self._tracker_profile = self.PlotPicker(self.plot.canvas(), "", mode=QwtPickerClickPointMachine(),
-                                        select_callback=self._trackCoordinatesProfile)
-        # zoom picker
-        self._zoomer = self.PlotZoomer(self.plot.canvas(), self.plot.getUpdateSignal(), label="zoom")
-        self._zoomer_pen = makeDualColorPen("navy", "yellow")
-        self._zoomer.setRubberBandPen(self._zoomer_pen)
-        self._zoomer.setTrackerPen(QColor("yellow"))
-        self._zoomer.zoomed[QRectF].connect(self._plotZoomed)
-        self._zoomer.provisionalZoom.connect(self._plotProvisionalZoom)
-        self._zoomer_box = TiggerPlotCurve()
-        self._zoomer_box.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._zoomer_box.setPen(self._zoomer_pen)
-        self._zoomer_label = TiggerPlotMarker()
-        self._zoomer_label.setRenderHint(QwtPlotItem.RenderAntialiased)
-        self._zoomer_label_text = QwtText("")
-        self._zoomer_label_text.setColor(QColor("yellow"))
-        self._zoomer_label.setLabel(self._zoomer_label_text)
-        self._zoomer_label.setLabelAlignment(Qt.AlignBottom | Qt.AlignRight)
-        for item in self._zoomer_label, self._zoomer_box:
-            item.setZ(Z_Markup)
-        self._provisional_zoom_timer = QTimer(self)
-        self._provisional_zoom_timer.setSingleShot(True)
-        self._provisional_zoom_timer.timeout.connect(self._finalizeProvisionalZoom)
-        self._provisional_zoom = None
-
-        # previous version of Qwt had Rect or Drag selection modes.
-        # self._zoomer.setSelectionFlags(QwtPicker.RectSelection | QwtPicker.DragSelection)
-        self._zoomer.setStateMachine(QwtPickerDragRectMachine())
-
-        # ruler picker for measurement mode
-        self._ruler = self.PlotPicker(self.plot.canvas(), "measure", "cyan", select_callback=self._measureRuler,
-                                     mode=QwtPickerDragLineMachine(),
-                                     rubber_band=QwtPicker.PolygonRubberBand,
-                                     track_callback=self._trackRulerStartPoint)
-
-        # this is the initial position of the ruler -- None if ruler is not tracking
-        self._ruler_start_point = None
-        # stats picker
-        self._picker_stats = self.PlotPicker(self.plot.canvas(), "stats", "red", self._selectRectStats)
-        # model selection pickers
-        self._picker1 = self.PlotPicker(self.plot.canvas(), "select", "green", self._selectRect)
-        self._picker2 = self.PlotPicker(self.plot.canvas(), "+select", "green",
-                                        curry(self._selectRect, mode=self.SelectionAdd))
-        self._picker3 = self.PlotPicker(self.plot.canvas(), "-select", "red",
-                                        curry(self._selectRect, mode=self.SelectionRemove))
-        self._picker4 = self.PlotPicker(self.plot.canvas(), "", "green", self._selectNearestSource,
-                                        mode=QwtPickerClickPointMachine())
-        for picker in self._zoomer, self._ruler, self._picker1, self._picker2, self._picker3, self._picker4:
-            for sel in QwtEventPattern.MouseSelect1, QwtEventPattern.MouseSelect2, QwtEventPattern.MouseSelect3, QwtEventPattern.MouseSelect4:
-                picker.setMousePattern(sel, 0)
-            picker.setTrackerMode(QwtPicker.AlwaysOff)
-
-    #    for picker in self._ruler,self._picker1,self._picker2,self._picker3:  # TODO - check why this code is commented out
-    #      QObject.connect(picker,pyqtSignal("wheelEvent"),self._zoomer.widgetWheelEvent)
-
-    def _showMouseModeTooltip(self):
-        tooltip = self._mousemodes.currentMode().tooltip
-        if self._qa_mwzoom.isChecked():
-            tooltip += """<P>You also have mouse-wheel zoom enabled. Rolling the wheel up will zoom in at the current zoom point.
-      Rolling the wheel down will zoom back out.</P>"""
-        QMessageBox.information(self, "Quick mouse reference", tooltip)
-
-    #    self._showCoordinateToolTip(self._mousemodes.currentMode().tooltip,rect=False)  # TODO - check why commented out
-
-    @staticmethod
-    def _setPickerPattern(picker, patt, func, mousemode, auto_disable=True):
-        """Helper function, sets mouse/key pattern for picker from the mode patterns dict"""
-        mpat, kpat = mousemode.patterns.get(func, ((0, 0), (0, 0)))
-        if auto_disable:
-            picker.setEnabled(mpat[0] or kpat[0])
-        elif mpat[0] or kpat[0]:
-            picker.setEnabled(True)
-        mouse_button, mouse_mod = mpat
-        picker.setMousePattern(patt, mouse_button, Qt.KeyboardModifier(mouse_mod))
-        key_button, key_mod = kpat
-        picker.setKeyPattern(QwtEventPattern.KeyPatternCode(patt), key_button, Qt.KeyboardModifier(key_mod))
-
-    def _setMouseMode(self, mode):
-        """Sets the current mouse mode from patterns (see MouseModes), updates action shortcuts.
-    'mode' is MouseModes.MouseModeManager.MouseMode object. This has a patterns dict.
-    For each MM_xx function defined in MouseModes, patterns[MM_xx] = (mouse_patt,key_patt)
-    Each pattern is either None, or a (button,state) pair. If MM_xx is not in the dict, then thatfunction is
-    disabled."""
-        dprint(1, "setting mouse mode", mode.id)
-        self._mouse_mode = mode.id
-        # remove markup
-        self._removePlotMarkup()
-        # disable/enable pickers accordingly
-        self._zoomer.setEnabled(True)
-        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect1, MouseModes.MM_ZWIN, mode,
-                               auto_disable=False)
-        if MouseModes.MM_ZWIN in mode.patterns:
-            self._zoomer.setDoubleClickZoom(*mode.patterns[MouseModes.MM_ZWIN][0])
-        else:
-            self._zoomer.setDoubleClickZoom(0, 0)
-        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect2, MouseModes.MM_UNZOOM, mode,
-                               auto_disable=False)
-        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect3, MouseModes.MM_ZUNDO, mode,
-                               auto_disable=False)
-        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect6, MouseModes.MM_ZREDO, mode,
-                               auto_disable=False)
-        self._setPickerPattern(self._ruler, QwtEventPattern.MouseSelect1, MouseModes.MM_MEAS, mode)
-        self._setPickerPattern(self._picker_stats, QwtEventPattern.MouseSelect1, MouseModes.MM_STATS, mode)
-        self._setPickerPattern(self._picker1, QwtEventPattern.MouseSelect1, MouseModes.MM_SELWIN, mode)
-        self._setPickerPattern(self._picker2, QwtEventPattern.MouseSelect1, MouseModes.MM_SELWINPLUS, mode)
-        self._setPickerPattern(self._picker3, QwtEventPattern.MouseSelect1, MouseModes.MM_DESEL, mode)
-        self._setPickerPattern(self._picker4, QwtEventPattern.MouseSelect1, MouseModes.MM_SELSRC, mode)
-        dprint(2, "picker4 pattern:", mode.patterns.get(MouseModes.MM_SELSRC, None))
-
-    def findNearestSource(self, pos, world=True, range=10):
-        """Returns source object nearest to the specified point (within range, in pixels), or None if nothing is in range.
-        'pos' is a QPointF/QwtDoublePoint object in lm coordinates if world=True, else a QPoint object."""
-        if world:
-            pos = self.plot.lmPosToScreen(pos)
-        dists = [((pos - self.plot.getMarkerPosition(marker)).manhattanLength(), marker) for marker in
-                 self._markers.values() if marker.isVisible()]
-        if dists:
-            mindist = min(dists, key=lambda x: x[0])
-            if mindist[0] < 10:
-                return mindist[1].src
-        return None
-
-    def _convertCoordinatesRuler(self, _pos):
-        # get ra/dec coordinates of point
-        pos = self.plot.screenPosToLm(_pos)
-        l, m = pos.x(), pos.y()
-        ra, dec = self.projection.radec(l, m)
-        rh, rm, rs = ModelClasses.Position.ra_hms_static(ra)
-        dsign, dd, dm, ds = ModelClasses.Position.dec_sdms_static(dec)
-        dist, pa = Coordinates.angular_dist_pos_angle(self.projection.ra0, self.projection.dec0, ra, dec)
-        Rd, Rm, Rs = ModelClasses.Position.dec_dms_static(dist)
-        PAd = pa * 180 / math.pi
-        if PAd < 0:
-            PAd += 360
-        # if we have an image, add pixel coordinates
-        x = y = val = flag = None
-        image = self._imgman and self._imgman.getTopImage()
-        if image:
-            x, y = list(map(int, list(map(round, image.lmToPix(l, m)))))
-            nx, ny = image.imageDims()
-            if x >= 0 and x < nx and y >= 0 and y < ny:
-                #        text += "<BR>x=%d y=%d"%(round(x),round(y))
-                val, flag = image.imagePixel(x, y)
-            else:
-                x = y = None
-        return l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag
-
-    def _convertCoordinates(self, _pos):
-        """This method is used to calculate coordinates from the GUI position."""
-        # get ra/dec coordinates of point
-        l, m = _pos.x(), _pos.y()
-        ra, dec = self.projection.radec(l, m)
-        rh, rm, rs = ModelClasses.Position.ra_hms_static(ra)
-        dsign, dd, dm, ds = ModelClasses.Position.dec_sdms_static(dec)
-        dist, pa = Coordinates.angular_dist_pos_angle(self.projection.ra0, self.projection.dec0, ra, dec)
-        Rd, Rm, Rs = ModelClasses.Position.dec_dms_static(dist)
-        PAd = pa * 180 / math.pi
-        if PAd < 0:
-            PAd += 360
-        # if we have an image, add pixel coordinates
-        x = y = val = flag = None
-        image = self._imgman and self._imgman.getTopImage()
-        if image:
-            x, y = list(map(int, list(map(round, image.lmToPix(l, m)))))
-            nx, ny = image.imageDims()
-            if x >= 0 and x < nx and y >= 0 and y < ny:
-                #        text += "<BR>x=%d y=%d"%(round(x),round(y))
-                val, flag = image.imagePixel(x, y)
-            else:
-                x = y = None
-        return l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag
-
-    def _trackRulerStartPoint(self, pos):
-        if not self.projection and not pos:
-            return
-        # store first point when ruler-drag is initiated
-        pos0 = pos
-        if pos0 != self._ruler_start_point:
-            self._ruler_start_point = pos0
-            if (self._ruler_start_point - pos0).manhattanLength() <= 1:
-                l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
-                    self._ruler_start_point)
-                # make tooltip text with HTML, make console (and cliboard) text w/o HTML
-                tiptext = "<NOBR>"
-                msgtext = ""
-                if self.projection.has_projection():
-                    tiptext += "X: %02dh%02dm%05.2fs %s%02d&deg;%02d'%05.2f\"  &nbsp;  r<sub>0</sub>=%d&deg;%02d'%05.2f\"   &nbsp;  PA<sub>0</sub>=%06.2f&deg;" % (
-                        rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
-                    msgtext += "X: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
-                        rh, rm, rs, dsign, dd, dm, ds, ra * 180 / math.pi, dec * 180 / math.pi, Rd, Rm, Rs,
-                        dist * 180 / math.pi, PAd)
-                if x is not None:
-                    tiptext += " &nbsp;  x=%d y=%d value=blank" % (x, y) if flag else " &nbsp;  x=%d y=%d value=%g" % (
-                        x, y, val)
-                    msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
-                tiptext += "</NOBR>"
-                # make marker
-                marker = TiggerPlotMarker()
-                marker.setRenderHint(QwtPlotItem.RenderAntialiased)
-                marker.setValue(l, m)
-                marker.setSymbol(self._markup_xsymbol)
-                markup_items = []
-                markup_items.append(marker)
-                self._qa_colorzoom.setVisible(False)
-                # calling QToolTip.showText() directly from here doesn't work, so set a timer on it
-                QTimer.singleShot(10, self._currier.curry(self._showCoordinateToolTip, msgtext))
-                # same deal for markup items
-                for item in markup_items:
-                    item.setZ(Z_Markup)
-                QTimer.singleShot(10, self._currier.curry(self._addPlotMarkup, markup_items))
-                # show in statusbar
-                self.plotShowMessage.emit(msgtext, 10000)
-                # copy to clipbaord
-                QApplication.clipboard().setText(msgtext + "\n")
-                QApplication.clipboard().setText(msgtext + "\n", QClipboard.Selection)
-                # output to terminal
-                print(msgtext)
-                return QwtText(msgtext)
-
-    """def _trackRuler(self, pos):
-        if not self.projection and self._ruler_start_point is None:
-            return None
-        if self._ruler_start_point is not None and (pos - self._ruler_start_point).manhattanLength() > 1:
-            # find first point details
-            l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinatesRuler(self._ruler_start_point)
-            # find second point details
-            l1, m1, ra1, dec1, dist1, pa1, rh1, rm1, rs1, dsign1, dd1, dm1, ds1, Rd1, Rm1, Rs1, PAd1, x1, y1, val1, flag1 = self._convertCoordinates(pos)
-            # distance measurement
-            dist2, pa2 = Coordinates.angular_dist_pos_angle(ra, dec, ra1, dec1)
-            Rd2, Rm2, Rs2 = ModelClasses.Position.dec_dms_static(dist2)
-            pa2 *= 180 / math.pi
-            pa2 += 360 * (pa2 < 0)
-            # send current point B and ruler length AB to GUI display
-            msgtext = ""
-            msgtext += "\nB: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
-                rh1, rm1, rs1, dsign1, dd1, dm1, ds1, ra1 * 180 / math.pi, dec1 * 180 / math.pi, Rd1, Rm1, Rs1,
-                dist1 * 180 / math.pi, PAd1)
-            msgtext += "\n|AB|=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
-                Rd2, Rm2, Rs2, dist2 * 180 / math.pi, pa2)
-            self.plotShowMessage.emit(msgtext, 3000)"""
-
-    def _measureRuler(self, pos):
-        if not self.projection or pos is None or self._ruler_start_point is None:
-            return
-        # get distance between points, if <=1, report coordinates rather than a measurement
-        pos0 = self._ruler_start_point
-        pos1 = pos
-        # get point coords
-        if pos0 != pos1:
-            l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
-                pos0)
-            l1, m1, ra1, dec1, dist1, pa1, rh1, rm1, rs1, dsign1, dd1, dm1, ds1, Rd1, Rm1, Rs1, PAd1, x1, y1, val1, flag1 = self._convertCoordinates(
-                pos1)
-            # make tooltip text with HTML, and console/clipboard text without HTML
-            tiptext = "<NOBR>"
-            msgtext = ""
-            statustext = ""
-            if self.projection.has_projection():
-                tiptext += "A: %02dh%02dm%05.2fs %s%02d&deg;%02d'%05.2f\"  &nbsp; r<sub>0</sub>=%d&deg;%02d'%05.2f\"   &nbsp;  PA<sub>0</sub>=%06.2f&deg;" % (
-                    rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
-                msgtext += "A: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%06.2f\u00B0" % (
-                    rh, rm, rs, dsign, dd, dm, ds, ra * 180 / math.pi, dec * 180 / math.pi, Rd, Rm, Rs,
-                    dist * 180 / math.pi, PAd)
-            if x is not None:
-                tiptext += " &nbsp; x=%d y=%d value=blank" % (x, y) if flag else " &nbsp; x=%d y=%d value=%g" % (
-                    x, y, val)
-                msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
-            tiptext += "</NOBR><BR><NOBR>"
-            if self.projection.has_projection():
-                tiptext += "B: %02dh%02dm%05.2fs %s%02d&deg;%02d'%05.2f\" &nbsp;  r<sub>0</sub>=%d&deg;%02d'%05.2f\"  &nbsp;  PA<sub>0</sub>=%06.2f&deg;" % (
-                rh1, rm1, rs1, dsign1, dd1, dm1, ds1, Rd1, Rm1, Rs1, PAd1)
-                msgtext += "\nB: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
-                    rh1, rm1, rs1, dsign1, dd1, dm1, ds1, ra1 * 180 / math.pi, dec1 * 180 / math.pi, Rd1, Rm1, Rs1,
-                    dist1 * 180 / math.pi, PAd1)
-            if x1 is not None:
-                tiptext += " &nbsp; x=%d y=%d value=blank" % (x1, y1) if flag1 else " &nbsp; x=%d y=%d value=%g" % (
-                x1, y1, val1)
-                msgtext += "   x=%d y=%d value=blank" % (x1, y1) if flag1 else "   x=%d y=%d value=%g" % (
-                x1, y1, val1)
-            tiptext += "</NOBR><BR>"
-            # distance measurement
-            dist2, pa2 = Coordinates.angular_dist_pos_angle(ra, dec, ra1, dec1)
-            Rd2, Rm2, Rs2 = ModelClasses.Position.dec_dms_static(dist2)
-            pa2 *= 180 / math.pi
-            pa2 += 360 * (pa2 < 0)
-            tiptext += "<NOBR>|AB|=%d&deg;%02d'%05.2f\" &nbsp; PA<sub>AB</sub>=%06.2f&deg;</NOBR>" % (
-            Rd2, Rm2, Rs2, pa2)
-            msgtext += "\n|AB|=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
-                Rd2, Rm2, Rs2, dist2 * 180 / math.pi, pa2)
-            statustext += "\n|AB|=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
-                Rd2, Rm2, Rs2, dist2 * 180 / math.pi, pa2)
-            # make markers
-            marka, markb = TiggerPlotMarker(), TiggerPlotMarker()
-            marka.setRenderHint(QwtPlotItem.RenderAntialiased)
-            markb.setRenderHint(QwtPlotItem.RenderAntialiased)
-            marka.setValue(l, m)
-            markb.setValue(l1, m1)
-            marka.setLabel(self._markup_a_label)
-            markb.setLabel(self._markup_b_label)
-            marka.setSymbol(self._markup_absymbol)
-            markb.setSymbol(self._markup_absymbol)
-            # work out optimal label alignment
-            aligna = Qt.AlignRight if pos1.x() > pos0.x() else Qt.AlignLeft
-            alignb = Qt.AlignLeft if pos1.x() > pos0.x() else Qt.AlignRight
-            aligna |= Qt.AlignBottom if pos1.y() > pos0.y() else Qt.AlignTop
-            alignb |= Qt.AlignTop if pos1.y() > pos0.y() else Qt.AlignBottom
-            marka.setLabelAlignment(aligna)
-            markb.setLabelAlignment(alignb)
-            marka.setSpacing(0)
-            markb.setSpacing(0)
-            line = TiggerPlotCurve()
-            line.setRenderHint(QwtPlotItem.RenderAntialiased)
-            line.setData([l, l1], [m, m1])
-            line.setBrush(self._markup_brush)
-            line.setPen(self._markup_pen)
-            markup_items = [marka, markb, line]
-            # since this is going to hide the stats box, hide the colour zoom button too
-            self._qa_colorzoom.setVisible(False)
-            # calling QToolTip.showText() directly from here doesn't work, so set a timer on it
-            QTimer.singleShot(10, self._currier.curry(self._showCoordinateToolTip, tiptext))
-            # same deal for markup items
-            for item in markup_items:
-                item.setZ(Z_Markup)
-            QTimer.singleShot(10, self._currier.curry(self._addPlotMarkup, markup_items))
-            if len(msgtext) > 0:
-                self.plotShowMessage.emit(statustext, 10000)
-                self._rulerCompleteMsgText = msgtext
-                self._ruler_timer.start(1000)
-
-    def _measureRulerCompleted(self):
-        # this is called from self._ruler_timer for _measureRuler()
-        self._ruler_timer.stop()
-        # output to terminal
-        print(self._rulerCompleteMsgText)
-        # save to clipboard
-        QApplication.clipboard().setText(self._rulerCompleteMsgText + "\n")
-        QApplication.clipboard().setText(self._rulerCompleteMsgText + "\n", QClipboard.Selection)
-
-    def _showCoordinateToolTip(self, text, rect=True):
-        dprint(2, text)
-        location = self.plot.mapToGlobal((QPoint(0, 0)))
-        if rect:
-            # old line
-            # QToolTip.showText(self.plot.mapToGlobal(QPoint(0, 0)), text, self.plot, self.plot.rect(), 30000)
-            self.tigToolTip.showText(location=location, text=text)
-        else:
-            self.tigToolTip.showText(location=location, text=text)
-
-    def _imageRaised(self):
-        """This is called when an image is raised to the top"""
-        self._updatePsfMarker(None, replot=True)
-        self._removePlotMarkup()
-        self._image_subset = None
-
-    def _showPsfMarker(self, show):
-        self._psf_marker.setVisible(show)
-        self.plot.clearDrawCache()
-        self.plot.replot()
-
-    def _updatePsfMarker(self, rect=None, replot=False):
-        # show PSF if asked to
-        topimage = self._imgman and self._imgman.getTopImage()
-        pmaj, pmin, ppa = topimage.getPsfSize() if topimage else (0, 0, 0)
-        self._qa_show_psf.setVisible(bool(topimage and pmaj != 0))
-        self._psf_marker.setVisible(bool(topimage and pmaj != 0 and self._qa_show_psf.isChecked()))
-        if self._qa_show_psf.isVisible():
-            rect = rect or self._zoomer.zoomBase()
-            rect &= topimage.boundingRect()
-            dprint(1, "updating PSF for zoom rect", rect)
-            lm = rect.bottomLeft()
-            l00 = lm.x() + pmaj / 1.2
-            m00 = lm.y() - pmaj / 1.2
-            dprint(1, "drawing PSF at", l00, m00, "z", self._psf_marker.z())
-            arg = numpy.arange(0, 1.02, .02) * math.pi * 2
-            mp0, lp0 = pmaj * numpy.cos(arg) / 2, pmin * numpy.sin(arg) / 2  # angle 0 is m direction
-            c, s = numpy.cos(ppa), numpy.sin(ppa)
-            lp = lp0 * c + mp0 * s
-            mp = - lp0 * s + mp0 * c
-            self._psf_marker.setData(lp + l00, mp + m00)
-            if replot and self._psf_marker.isVisible():
-                self._replot()
-
-    def _replot(self):
-        dprint(1, "replot")
-        self.plot.clearDrawCache()
-        self.plot.replot()
-
-    def _addPlotMarkup(self, items):
-        """Adds a list of QwtPlotItems to the markup"""
-        self._removePlotMarkup(replot=False)
-        for item in items:
-            item.attach(self.plot)
-        self._plot_markup = items
-        self._replot()
-
-    def _removePlotMarkup(self, replot=True):
-        """Removes all markup items, and refreshes the plot if replot=True"""
-        for item in self._plot_markup:
-            item.detach()
-        if self._plot_markup and replot:
-            self.tigToolTip.hideText()
-            self._replot()
-        self._plot_markup = []
-
-    def _trackCoordinates(self, pos):
-        if not self.projection:
-            return None
-        # if Ctrl is pushed, get nearest source and make it "current"
-        if QApplication.keyboardModifiers() & (Qt.ControlModifier | Qt.ShiftModifier):
-            src = self.findNearestSource(pos, world=False, range=range)
-            if src:
-                self.model.setCurrentSource(src)
-        # get ra/dec coordinates of point
-        l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
-            pos)
-        #    text = "<P align=\"right\">%2dh%02dm%05.2fs %+2d&deg;%02d'%05.2f\""%(rh,rm,rs,dd,dm,ds)
-        # emit message as well
-        msgtext = ""
-        if self.projection.has_projection():
-            msgtext = "%02dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\"  r=%d\u00B0%02d'%05.2f\"  PA=%.2f\u00B0" % (
-                rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
-        # if we have an image, add pixel coordinates
-        image = self._imgman and self._imgman.getTopImage()
-        if image and x is not None:
-            msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
-            self._livezoom.trackImage(image, x, y)
-        self.plotShowMessage[str, int].emit(msgtext, 10000)
-        return msgtext
-
-    def _trackCoordinatesProfile(self, pos):
-        if not self.projection:
-            return None
-        # disabled as it is enabled in _trackCoordinates above.
-        # if Ctrl is pushed, get nearest source and make it "current"
-        #if QApplication.keyboardModifiers() & (Qt.ControlModifier | Qt.ShiftModifier):
-        #    src = self.findNearestSource(pos, world=False, range=range)
-        #    if src:
-        #        self.model.setCurrentSource(src)
-        # get ra/dec coordinates of point
-        l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
-            pos)
-        #    text = "<P align=\"right\">%2dh%02dm%05.2fs %+2d&deg;%02d'%05.2f\""%(rh,rm,rs,dd,dm,ds)
-        # emit message as well
-        # leaving commented out as _trackCoordinates already has this
-        msgtext = ""
-        #if self.projection.has_projection():
-        #    msgtext = "%02dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\"  r=%d\u00B0%02d'%05.2f\"  PA=%.2f\u00B0" % (
-        #        rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
-        # if we have an image, add pixel coordinates
-        image = self._imgman and self._imgman.getTopImage()
-        if image and x is not None:
-            # msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
-            self._liveprofile.trackImage(image, x, y)
-
-    def _selectSources(self, sources, mode):
-        """Helper function to select sources in list"""
-        # turn list into set of ids
-        subset = set(map(id, sources))
-        updated = False
-        for src in self.model.sources:
-            newsel = src.selected
-            if id(src) in subset:
-                dprint(3, "selecting", src.name)
-                if mode & self.SelectionAdd:
-                    newsel = True
-                elif mode & self.SelectionRemove:
-                    newsel = False
-            elif mode & self.SelectionClear:
-                newsel = False
-            updated |= (newsel != src.selected)
-            src.selected = newsel
-        # emit signal if changed
-        if updated:
-            self.model.emitSelection(origin=self)
-
-    def _selectNearestSource(self, pos, world=True, range=10, mode=SelectionAdd):
-        """Selects or deselects source object nearest to the specified point (within range, in pixels).
-        Note that _mouse_mode == MouseDeselect will force mode=SelectionRemove.
-        'pos' is a QPointF/QwtDoublePoint object in lm coordinates if world=True, else a QPoint object."""
-        dprint(1, "selectNearestSource", pos)
-        # deselect mouse mode implies removing from selection, in all other modes we add
-        if self._mouse_mode == self.MouseDeselect:
-            mode = self.SelectionRemove
-        src = self.findNearestSource(pos, world=world, range=range)
-        if src:
-            self._selectSources([src], mode)
-
-    def _makeRectMarker(self, rect, pen):
-        x1, y1, x2, y2 = rect.getCoords()
-        line = TiggerPlotCurve()
-        line.setRenderHint(QwtPlotItem.RenderAntialiased)
-        line.setData([x1, x1, x2, x2, x1], [y1, y2, y2, y1, y1])
-        #      line.setBrush(self._stats_brush)
-        line.setPen(pen)
-        label = TiggerPlotMarker()
-        label.setRenderHint(QwtPlotItem.RenderAntialiased)
-        label.setValue(max(x1, x2), max(y1, y2))
-        text = QwtText("stats")
-        text.setColor(pen.color())
-        label.setLabel(text)
-        label.setLabelAlignment(Qt.AlignBottom | Qt.AlignRight)
-        return [line, label]
-
-    def _selectImageSubset(self, rect, image=None):
-        # make zoom button visible if subset is selected
-        self._qa_colorzoom.setVisible(bool(rect))
-        self._image_subset = rect
-        if rect is None:
-            self._removePlotMarkup()
-        else:
-            # get image stats
-            busy = BusyIndicator()
-            stats = self._imgman.getLMRectStats(self._image_subset)
-            busy.reset_cursor()
-            if stats is None:
-                self._removePlotMarkup()
-                self._image_subset = None
-                return
-            # make tooltip
-            DataValueFormat = "%.4g"
-            stats = list(stats)
-            stats1 = tuple(stats[:4] + [DataValueFormat % s for s in stats[4:9]] + stats[9:])
-            msgtext = "[%d:%d,%d:%d] min %s, max %s, mean %s, std %s, sum %s, np %d" % stats1
-            tiptext = """<P><NOBR>Region: [%d:%d,%d:%d]</NOBR><BR>
-        <NOBR>Stats: min %s, max %s, mean %s, std %s, sum %s, np %d</NOBR></BR>
-        Use the "Colour zoom" button on the left (or press Shift+F4) to set the current data subset and
-        intensity range to this image region.</P>""" % stats1
-            # make markup on plot to indicate current subset
-            markup_items = self._makeRectMarker(rect, self._stats_pen)
-            # calling QToolTip.showText() directly from here doesn't work, so set a timer on it
-            QTimer.singleShot(0, self._currier.curry(self._showCoordinateToolTip, tiptext))
-            # same deal for markup items
-            for item in markup_items:
-                item.setZ(Z_Markup)
-            QTimer.singleShot(10, self._currier.curry(self._addPlotMarkup, markup_items))
-            QApplication.clipboard().setText(msgtext + "\n")
-            QApplication.clipboard().setText(msgtext + "\n", QClipboard.Selection)
-            print(msgtext)
-
-    def _colourZoomIntoSubset(self):
-        # zoom into current image subset (if any), and hide the zoom button
-        dprint(1, self._image_subset)
-        if self._image_subset is not None:
-            self._imgman.setLMRectSubset(self._image_subset)
-            self._removePlotMarkup()
-            self._image_subset = None
-        self._qa_colorzoom.setVisible(False)
-
-    def _selectRectStats(self, rect):
-        image = self._imgman and self._imgman.getTopImage()
-        dprint(1, "subset selection", rect, "image:", image and image.boundingRect())
-        if not image or not rect.intersects(image.boundingRect()):
-            self._selectImageSubset(None)
-            return
-        zoomrect = image.boundingRect().intersected(rect)
-        dprint(1, "selecting image subset", zoomrect)
-        self._selectImageSubset(zoomrect, image)
-
-    def _selectRect(self, rect, world=True, mode=SelectionClear | SelectionAdd):
-        """Selects sources within the specified rectangle. For meaning of 'mode', see flags above.
-        'rect' is a QRectF/QwtDoubleRect object in lm coordinates if world=True, else a QRect object in screen coordinates."""
-        dprint(1, "selectRect", rect)
-        if not world:
-            rect = self.plot.screenRectToLm(rect)
-        sources = [marker.source() for marker in self._markers.values() if
-                   marker.isVisible() and rect.contains(marker.lmQPointF())]
-        if sources:
-            self._selectSources(sources, mode)
-
-    def _finalizeProvisionalZoom(self):
-        if self._provisional_zoom is not None:
-            self._zoomer.zoom(self._provisional_zoom)
-
-    def _plotProvisionalZoom(self, x, y, level, timeout=200):
-        """Called when mouse wheel is used to zoom in our out"""
-        self._provisional_zoom_level += level
-        self._zoomer_box.setVisible(False)
-        self._zoomer_label.setVisible(False)
-        if self._provisional_zoom_level > 0:
-            # make zoom box of size 2^level smaller than current screen
-            x1, y1, x2, y2 = self._zoomer.zoomRect().getCoords()
-            w = (x2 - x1) / 2 ** self._provisional_zoom_level
-            h = (y2 - y1) / 2 ** self._provisional_zoom_level
-            self._provisional_zoom = QRectF(x - w / 2, y - h / 2, w, h)
-            x1, y1, x2, y2 = self._provisional_zoom.getCoords()
-            self._zoomer_box.setData([x1, x2, x2, x1, x1], [y1, y1, y2, y2, y1])
-            self._zoomer_label.setValue(max(x1, x2), max(y1, y2))
-            self._zoomer_label_text.setText("zoom")
-            self._zoomer_label.setLabel(self._zoomer_label_text)
-            self._zoomer_box.setVisible(True)
-            self._zoomer_label.setVisible(True)
-        else:
-            maxout = -self._zoomer.zoomRectIndex()
-            self._provisional_zoom_level = level = max(self._provisional_zoom_level, maxout)
-            if self._provisional_zoom_level < 0:
-                self._zoomer_label.setValue(x, y)
-                self._zoomer_label_text.setText("zoom out %d" % abs(level) if level != maxout else "zoom out full")
-                self._zoomer_label.setLabel(self._zoomer_label_text)
-                self._zoomer_label.setVisible(True)
-                self._provisional_zoom = int(self._provisional_zoom_level)
-            else:
-                self._provisional_zoom = None
-        QTimer.singleShot(5, self._replot)
-        self._provisional_zoom_timer.start(timeout)
-
-    def _plotZoomed(self, rect):
-        dprint(2, "zoomed to", rect)
-        self._zoomer_box.setVisible(False)
-        self._zoomer_label.setVisible(False)
-        self._provisional_zoom = None
-        self._provisional_zoom_level = 0
-        self._zoomrect = QRectF(rect)  # make copy
-        self._qa_unzoom.setEnabled(rect != self._zoomer.zoomBase())
-        self._updatePsfMarker(rect, replot=True)
-
-    def _setGridCircleStepping(self, arcsec=DefaultGridStep_ArcSec):
-        """Changes the visible grid circles. None to disable."""
-        self._grid_step_arcsec = arcsec
-        self._updateContents()
-
-    def _setCustomGridCircleStepping(self):
-        """Opens dialog to get a custom grid step."""
-        text, ok = QInputDialog.getText(self, "Set custom grid step", """<P>
-      Specify a custom grid stepping as a value and a unit string.<BR>Recognized unit strings are
-      d or deg, ' (single quote) or arcmin, and " (double quote) or arcsec.<BR>Default is arcmin.</P>""",
-                                        text=self._grid_step_arcsec_str)
-        if text:
-            match = re.match("([-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)(d|deg|['\"]|arcmin)?$", text, re.I)
-            try:
-                value = float(match.group(1))
-            except:
-                QMessageBox.warning(self, "Invalid input", "Invalid input: \"%s\"" % text)
-                return
-            if round(value) == value:
-                value = int(value)
-            unit = match.group(5)
-            if unit in ("d", "deg"):
-                value *= 3600
-            elif not unit or unit in ("'", "arcmin"):
-                value *= 60
-        self._setGridCircleStepping(value or None)
-        self._setCustomGridCircleSteppingLabel()
-
-    def _setCustomGridCircleSteppingLabel(self):
-        """Changes the label of the custom grid step action."""
-        step = self._grid_step_arcsec
-        if not step:
-            self._grid_step_arcsec_str = ""
-        elif step < 60:
-            self._grid_step_arcsec_str = ("%f\"" if isinstance(step, float) else "%d\"") % step
-        elif step < 3600:
-            self._grid_step_arcsec_str = ("%f'" if step % 60 else "%d'") % (step / 60.)
-        else:
-            self._grid_step_arcsec_str = ("%fdeg" if step % 3600 else "%ddeg") % (step / 3600.)
-        if self._grid_step_arcsec_str:
-            self._qa_custom_grid.setText("Custom (%s)..." % self._grid_step_arcsec_str)
-        else:
-            self._qa_custom_grid.setText("Custom...")
-
-    def _updateContents(self, what=SkyModel.UpdateAll, origin=None):
-        # do nothing if updates are disabled (this is possible on startup, or when multiple
-        # things are being loaded), or if update is of no concern to us
-        if not self._updates_enabled or not what & (
-                SkyModel.UpdateSourceList | SkyModel.UpdateSourceContent | self.UpdateImages):
-            return
-        # clear any plot markup
-        dprint(2, "clearing plot markup")
-        for item in self._plot_markup:
-            item.detach()
-        self._plot_markup = []
-        self._image_subset = None
-        # clear plot, but do not delete items
-        self.projection = None
-        self.plot.clear()
-        self._psf_marker.attach(self.plot)
-        self._zoomer_box.attach(self.plot)
-        self._zoomer_label.attach(self.plot)
-        self._zoomer_box.setVisible(False)
-        self._zoomer_label.setVisible(False)
-        # get current image (None if no images)
-        self._image = self._imgman and self._imgman.getCenterImage()
-        # show/hide live zoomer with image
-        if self._image:
-            for tool in self._livezoom, self._liveprofile:
-                tool.makeAvailable(bool(self._image))
-        # enable or disable mouse modes as appropriate
-        self._mousemodes.setContext(has_image=bool(self._image), has_model=bool(self.model))
-        # do nothing if no image and no model
-        if not self._image and not self.model:
-            self.plot.setEnabled(False)
-            return
-        self.plot.setEnabled(True)
-        # Use projection of first image, or 'Sin' by default
-        if self._image:
-            self.projection = self._image.projection
-            dprint(1, "using projection from image", self._image.name)
-            ra, dec = self.projection.radec(0, 0)
-        else:
-            self.projection = Projection.FITSWCS_static(*self.model.fieldCenter())
-            dprint(1, "using default Sin projection")
-        # compute lm: dict from source ID to l,m tuple
-        if self.model:
-            self._source_lm = dict(
-                [(id(src), self.projection.lm(src.pos.ra, src.pos.dec)) for src in self.model.sources])
-        # now find plot extents
-        extent = [[0, 0], [0, 0]]
-        for iext in 0, 1:
-            if self._source_lm:
-                xmin = extent[iext][0] = min([lm[iext] for lm in self._source_lm.values()])
-                xmax = extent[iext][1] = max([lm[iext] for lm in self._source_lm.values()])
-                # add 5% on either side
-                margin = .05 * (xmax - xmin)
-                extent[iext][0] -= margin
-                extent[iext][1] += margin
-                dprint(2, "plot extents for model", extent)
-        # account for bounding rects of images
-        for img in ((self._imgman and self._imgman.getImages()) or []):
-            ext = img.getExtents()
-            dprint(2, "image extents", ext)
-            for i in 0, 1:
-                extent[i][0] = min(extent[i][0], ext[i][0])
-                extent[i][1] = max(extent[i][1], ext[i][1])
-        # if margins still not set, force them to 1x1 degree
-        for i in 0, 1:
-            if extent[i][0] == extent[i][1]:
-                extent[i] = [-DEG * 0.5, DEG * 0.5]
-        dprint(2, "plot extents for model & images", extent)
-        (lmin, lmax), (mmin, mmax) = extent
-        # adjust plot limits, if a fixed ratio is in effect, and set the zoom base
-        zbase = QRectF(QPointF(lmin, mmin), QPointF(lmax, mmax))
-        #    zbase = self._zoomer.adjustRect(zbase)
-        zooms = [zbase]
-        dprint(2, "zoom base, adjusted for aspect:", zbase)
-        # zooms = [ self._zoomer.adjustRect(zbase) ]
-        # if previously set zoom rect intersects the zoom base at all (and is not a superset), try to restore it
-        dprint(2, "previous zoom area:", self._zoomrect)
-        if self._zoomrect and self._zoomrect.intersects(zbase):
-            rect = self._zoomrect.intersected(zbase)
-            #      rect = self._zoomer.adjustRect(self._zoomrect.intersected(zbase))
-            if rect != zbase:
-                dprint(2, "will restore zoomed area", rect)
-                zooms.append(rect)
-        self._qa_unzoom.setEnabled(len(zooms) > 1)
-        self._provisional_zoom_level = 0
-        #    dprint(2,"adjusted for aspect ratio",lmin,lmax,mmin,mmax)
-        # reset plot limits   -- X axis inverted (L increases to left)
-        #    lmin,lmax,mmin,mmax = zbase.left(),zbase.right(),zbase.top(),zbase.bottom()
-        #    self.plot.setAxisScale(QwtPlot.yLeft,mmin,mmax)
-        #    self.plot.setAxisScale(QwtPlot.xBottom,lmax,lmin)
-        #    self.plot.axisScaleEngine(QwtPlot.xBottom).setAttribute(QwtScaleEngine.Inverted, True)
-        #    dprint(2,"setting zoom base",zbase)
-        #    self._zoomer.setZoomBase(zbase)
-        dprint(5, "drawing grid")
-        # add grid lines & circles
-        circstep = self._grid_step_arcsec
-        if circstep:
-            self._grid = [TiggerPlotCurve(), TiggerPlotCurve()]
-            self._grid[0].setRenderHint(QwtPlotItem.RenderAntialiased)
-            self._grid[1].setRenderHint(QwtPlotItem.RenderAntialiased)
-            self._grid[0].setData([lmin, lmax], [0, 0])
-            self._grid[1].setData([0, 0], [mmin, mmax])
-            # see how many units (of arcminute) fit in max diagonal direction
-            maxr = int(round(math.sqrt(lmax ** 2 + mmax ** 2) / (DEG / 3600)))
-            # cache sines and cosines of curve argument
-            angles = numpy.array(list(range(0, 361, 5))) * DEG
-            sines = numpy.sin(angles)
-            cosines = numpy.cos(angles)
-            # make circles
-            for r in numpy.arange(circstep, maxr, circstep):
-                # find radius in each direction, by projecting a point
-                rl, dum = self.projection.offset(r * DEG / 3600, 0)
-                dum, rm = self.projection.offset(0, r * DEG / 3600)
-                # make curve
-                curve = TiggerPlotCurve()
-                curve.setRenderHint(QwtPlotItem.RenderAntialiased)
-                x, y = rl * cosines, rm * sines
-                curve.setData(x, y)
-                curve.setCurveAttribute(QwtPlotCurve.Fitted, True)
-                self._grid.append(curve)
-                # make a text label and marker
-                marker = TiggerPlotMarker()
-                marker.setRenderHint(QwtPlotItem.RenderAntialiased)
-                m, s = divmod(r, 60)
-                d, m = divmod(m, 60)
-                if d:
-                    label = "%d&deg;%02d'%02d\"" % (d, m, s) if s else (
-                        "%d&deg;%02d'" % (d, m) if m else "%d&deg;" % d)
-                elif m:
-                    label = "%d'%02d\"" % (m, s) if s else "%d'" % m
-                else:
-                    label = "%d\"" % s
-                text = QwtText(label, QwtText.RichText)
-                text.setColor(self._grid_color)
-                marker.setValue(x[0], y[0])
-                marker.setLabel(text)
-                marker.setLabelAlignment(Qt.AlignRight | Qt.AlignBottom)
-                marker.setZ(Z_Grid)
-                marker.attach(self.plot)
-            for gr in self._grid:
-                gr.setPen(self._grid_pen)
-                gr.setZ(Z_Grid)
-                gr.attach(self.plot)
-        # make a new set of source markers, since either the image or the model may have been updated
-        if self.model:
-            dprint(5, "making skymodel markers")
-            # compute min/max brightness
-            # brightnesses <=1e-20 are specifically excluded (as they're probably "dummy" sources, etc.)
-            b = [abs(src.brightness()) for src in self.model.sources if abs(src.brightness()) > 1e-20]
-            self._min_bright = min(b) if b else 0
-            self._max_bright = max(b) if b else 0
-            # make items for every object in the model
-            self._markers = {}
-            for isrc, src in enumerate(self.model.sources):
-                l, m = self._source_lm[id(src)]
-                self._markers[src.name] = marker = makeSourceMarker(src, l, m, self.getSymbolSize(src), self.model,
-                                                                    self._imgman)
-        # now (re)attach the source markers, since the plot has been cleared
-        for marker in self._markers.values():
-            marker.attach(self.plot)
-        # attach images to plot
-        if self._imgman:
-            dprint(5, "attaching images")
-            self._imgman.attachImagesToPlot(self.plot)
-        # update the PlotZoomer with our set of zooms. This implictly causes a plot update
-        dprint(5, "updating zoomer")
-        self._zoomer.setZoomStack(zooms, len(zooms) - 1)
-        self._updatePsfMarker(None, replot=True)
-        #  self.plot.replot()  # this shouldn't be needed as it is handled in the line above.
-
-    def setModel(self, model):
-        self._source_lm = {}
-        self._markers = {}
-        self.model = model
-        dprint(2, "setModel", model)
-        if model:
-            # connect signals
-            self.model.connect("updated", self.postUpdateEvent)
-            self.model.connect("selected", self.updateModelSelection)
-            self.model.connect("changeCurrentSource", self.setCurrentSource)
-            self.model.connect("changeGroupingStyle", self.changeGroupingStyle)
-        # update plot
-        self.postUpdateEvent(SkyModel.UpdateAll)
-
-    def _exportPlotToPNG(self, filename=None):
-        if not filename:
-            if not self._export_png_dialog:
-                dialog = self._export_png_dialog = QFileDialog(self, "Export plot to PNG", ".", "*.png")
-                dialog.setDefaultSuffix("png")
-                dialog.setFileMode(QFileDialog.AnyFile)
-                dialog.setAcceptMode(QFileDialog.AcceptSave)
-                dialog.setModal(True)
-                dialog.filesSelected.connect(self._exportPlotToPNG)
-            return self._export_png_dialog.exec_() == QDialog.Accepted
-        busy = BusyIndicator()
-        if isinstance(filename, QStringList):
-            filename = filename[0]
-        filename = str(filename)
-        # make QPixmap
-        pixmap = self.plot.grab()  # Qt 5 method
-        # old method below
-        """pixmap = QPixmap(self.plot.width(), self.plot.height())
-        pixmap.fill(self._bg_color)
-        painter = QPainter(pixmap)
-        # use QwtPlot implementation of draw canvas, since we want to avoid caching
-        QwtPlot.drawCanvas(self.plot, painter)
-        painter.end()"""
-        # save to file
-        try:
-            pixmap.save(filename, "PNG")
-        except Exception as exc:
-            self.plotShowErrorMessage.emit("Error writing %s: %s" % (filename, str(exc)))
-            busy.reset_cursor()
-        else:
-            busy.reset_cursor()
-            self.plotShowMessage[str].emit("Exported plot to file %s" % filename)
-
-    def setCurrentSource(self, src, src0=None, origin=None):
-        dprint(2, "setCurrentSource", src and src.name, src0 and src0.name, origin)
-        if self.model and self.model.curgroup.style.apply:
-            for s in src, src0:
-                marker = s and self._markers.get(s.name)
-                marker and marker.resetStyle()
-            self.plot.clearDrawCache()
-            self.plot.replot()
-
-    def updateModelSelection(self, nsel=0, origin=None):
-        """This is callled when something changes the set of selected model sources"""
-        # call checkSelected() on all plot markers, replot if any return True
-        if [marker for marker in iter(self._markers.values()) if marker.checkSelected()]:
-            self.plot.clearDrawCache()
-            self.plot.replot()
-
-    def changeGroupingStyle(self, group, origin=None):
-        # call changeStyle() on all plot markers, replot if any return True
-        if [marker for marker in iter(self._markers.values()) if marker.changeStyle(group)]:
-            self.plot.clearDrawCache()
-            self.plot.replot()
-
-    def getSymbolSize(self, src):
-        return (max(math.log10(abs(src.brightness())) - math.log10(self._min_bright) + 1, 1)) * 3
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+import re
+import time
+
+import numpy
+from PyQt5 import QtGui
+from PyQt5.Qt import QWidget, QHBoxLayout, QFileDialog, QComboBox, QLabel, \
+    QDialog, QToolButton, QVBoxLayout, QAction, QEvent, QSize, QMouseEvent, \
+    QSizePolicy, QApplication, QColor, QImage, QPixmap, QPainter, QToolTip, \
+    QBrush, QTimer, QCheckBox, QMenu, QPen, QRect, QClipboard, \
+    QInputDialog, QActionGroup, QRectF, QPointF, QPoint, QMessageBox, QTransform, QToolBar, QCoreApplication
+from PyQt5.QtCore import *
+from PyQt5.QtCore import Qt
+from PyQt5.QtCore import pyqtSignal
+from PyQt5.QtGui import QPolygon, QFont, QPalette
+from PyQt5.QtWidgets import QDockWidget, QPushButton, QStyle, QSpacerItem
+from PyQt5.Qwt import QwtPlot, QwtPlotPicker, QwtText, QwtPlotItem, QwtPlotCurve, QwtPicker, QwtEventPattern, \
+    QwtSymbol, QwtPlotZoomer, QwtScaleEngine, QwtPickerMachine, QwtPickerClickRectMachine, QwtPickerClickPointMachine, \
+    QwtPickerPolygonMachine, QwtPickerDragRectMachine, QwtPickerDragLineMachine, QwtPlotCanvas, QwtPickerTrackerMachine
+
+import TigGUI.kitties.utils
+from TigGUI.kitties.utils import curry, PersistentCurrier
+from TigGUI.kitties.widgets import BusyIndicator
+
+QStringList = list
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="plot")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+from TigGUI.init import pixmaps, Config
+from Tigger.Models import ModelClasses
+from Tigger import Coordinates
+from Tigger.Coordinates import Projection
+from Tigger.Models.SkyModel import SkyModel
+from TigGUI.Widgets import TiggerPlotCurve, TiggerPlotMarker, TDockWidget, TigToolTip
+from TigGUI.Plot import MouseModes
+
+# plot Z depths for various classes of objects
+Z_Image = 1000
+Z_Grid = 9000
+Z_Source = 10000
+Z_SelectedSource = 10001
+Z_CurrentSource = 10002
+Z_Markup = 10010
+
+# default stepping of grid circles
+DefaultGridStep_ArcSec = 30 * 60
+
+DEG = math.pi / 180
+
+
+class SourceMarker:
+    """SourceMarker implements a source marker corresponding to a SkyModel source.
+  The base class implements a marker at the centre.
+  """
+    QwtSymbolStyles = dict(none=QwtSymbol.NoSymbol,
+                           cross=QwtSymbol.XCross,
+                           plus=QwtSymbol.Cross,
+                           dot=QwtSymbol.Ellipse,
+                           circle=QwtSymbol.Ellipse,
+                           square=QwtSymbol.Rect,
+                           diamond=QwtSymbol.Diamond,
+                           triangle=QwtSymbol.Triangle,
+                           dtriangle=QwtSymbol.DTriangle,
+                           utriangle=QwtSymbol.UTriangle,
+                           ltriangle=QwtSymbol.LTriangle,
+                           rtriangle=QwtSymbol.RTriangle,
+                           hline=QwtSymbol.HLine,
+                           vline=QwtSymbol.VLine,
+                           star1=QwtSymbol.Star1,
+                           star2=QwtSymbol.Star2,
+                           hexagon=QwtSymbol.Hexagon)
+
+    def __init__(self, src, l, m, size, model):
+        self.src = src
+        self._lm, self._size = (l, m), size
+        self.plotmarker = TiggerPlotMarker()
+        self.plotmarker.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self.plotmarker.setValue(l, m)
+        self._symbol = QwtSymbol()
+        self._font = QApplication.font()
+        self._model = model
+        self.resetStyle()
+
+    def lm(self):
+        """Returns plot coordinates of marker, as an l,m tuple"""
+        return self._lm
+
+    def lmQPointF(self):
+        """Returns plot coordinates of marker, as a QPointF"""
+        return self.plotmarker.value()
+
+    def source(self):
+        """Returns model source associated with marker"""
+        return self.src
+
+    def attach(self, plot):
+        """Attaches to plot"""
+        self.plotmarker.attach(plot)
+
+    def isVisible(self):
+        return self.plotmarker.isVisible()
+
+    def setZ(self, z):
+        self.plotmarker.setZ(z)
+
+    def resetStyle(self):
+        """Sets the source style based on current model settings"""
+        self.style, self.label = self._model.getSourcePlotStyle(self.src)
+        self._selected = getattr(self.src, 'selected', False)
+        # setup marker components
+        self._setupMarker(self.style, self.label)
+        # setup depth
+        if self._model.currentSource() is self.src:
+            self.setZ(Z_CurrentSource)
+        elif self._selected:
+            self.setZ(Z_SelectedSource)
+        else:
+            self.setZ(Z_Source)
+
+    def _setupMarker(self, style, label):
+        """Sets up the plot marker (self.plotmarker) based on style object and label string.
+    If style=None, makes marker invisible."""
+        if not style:
+            self.plotmarker.setVisible(False)
+            return
+        self.plotmarker.setVisible(True)
+        self._symbol.setStyle(self.QwtSymbolStyles.get(style.symbol, QwtSymbol.Cross))
+        self._font.setPointSize(style.label_size)
+        symbol_color = QColor(style.symbol_color)
+        label_color = QColor(style.label_color)
+        # dots have a fixed size
+        if style.symbol == "dot":
+            self._symbol.setSize(2)
+        else:
+            self._symbol.setSize(self._size)
+        self._symbol.setPen(QPen(symbol_color, style.symbol_linewidth))
+        self._symbol.setBrush(QBrush(Qt.NoBrush))
+        lab_pen = QPen(Qt.NoPen)
+        lab_brush = QBrush(Qt.NoBrush)
+        self._label = label or ""
+        self.plotmarker.setSymbol(self._symbol)
+        txt = QwtText(self._label)
+        txt.setColor(label_color)
+        txt.setFont(self._font)
+        txt.setBorderPen(lab_pen)
+        txt.setBackgroundBrush(lab_brush)
+        self.plotmarker.setLabel(txt)
+        self.plotmarker.setLabelAlignment(Qt.AlignBottom | Qt.AlignRight)
+
+    def checkSelected(self):
+        """Checks the src.selected attribute, resets marker if it has changed.
+    Returns True is something has changed."""
+        sel = getattr(self.src, 'selected', False)
+        if self._selected == sel:
+            return False
+        self._selected = sel
+        self.resetStyle()
+        return True
+
+    def changeStyle(self, group):
+        if group.func(self.src):
+            self.resetStyle()
+            return True
+        return False
+
+
+class ImageSourceMarker(SourceMarker):
+    """This auguments SourceMarker with a FITS image."""
+
+    def __init__(self, src, l, m, size, model, imgman):
+        # load image if needed
+        self.imgman = imgman
+        dprint(2, "loading Image source", src.shape.filename)
+        self.imagecon = imgman.loadImage(src.shape.filename, duplicate=False, to_top=False, model=src.name)
+        # this will return None if the image fails to load, in which case we still produce a marker,
+        # but nothing else
+        if self.imagecon:
+            self.imagecon.setMarkersZ(Z_Source)
+        # init base class
+        SourceMarker.__init__(self, src, l, m, size, model)
+
+    def attach(self, plot):
+        SourceMarker.attach(self, plot)
+        if self.imagecon:
+            self.imagecon.attachToPlot(plot)
+
+    def _setupMarker(self, style, label):
+        SourceMarker._setupMarker(self, style, label)
+        if not style:
+            return
+        symbol_color = QColor(style.symbol_color)
+        label_color = QColor(style.label_color)
+        if self.imagecon:
+            self.imagecon.setPlotBorderStyle(border_color=symbol_color, label_color=label_color)
+
+
+def makeSourceMarker(src, l, m, size, model, imgman):
+    """Creates source marker based on source type"""
+    shape = getattr(src, 'shape', None)
+    #  print type(shape),isinstance(shape,ModelClasses.FITSImage),shape.__class__,ModelClasses.FITSImage
+    if isinstance(shape, ModelClasses.FITSImage):
+        return ImageSourceMarker(src, l, m, size, model, imgman)
+    else:
+        return SourceMarker(src, l, m, size, model)
+
+
+def makeDualColorPen(color1, color2, width=3):
+    c1, c2 = QColor(color1).rgb(), QColor(color2).rgb()
+    texture = QImage(2, 2, QImage.Format_RGB32)
+    texture.setPixel(0, 0, c1)
+    texture.setPixel(1, 1, c1)
+    texture.setPixel(0, 1, c2)
+    texture.setPixel(1, 0, c2)
+    return QPen(QBrush(texture), width)
+
+
+class ToolDialog(QDialog):
+    signalIsVisible = pyqtSignal(bool)
+
+    def __init__(self, parent, configname, menuname, show_shortcut=None):
+        QDialog.__init__(self, parent)
+        self.setModal(False)
+        self.setFocusPolicy(Qt.NoFocus)
+        self.hide()
+        self._configname = configname
+        self._geometry = None
+        # make hide/show qaction
+        self._qa_show = qa = QAction("Show %s" % menuname.replace("&", "&&"), self)
+        if show_shortcut:
+            qa.setShortcut(show_shortcut)
+        qa.setCheckable(True)
+        qa.setChecked(Config.getbool("%s-show" % configname, False))
+        qa.setVisible(False)
+        qa.setToolTip("""<P>The quick zoom & cross-sections window shows a zoom of the current image area
+      under the mose pointer, and X/Y cross-sections through that area.</P>""")
+        qa.triggered[bool].connect(self.setVisible)
+        self._closing = False
+        self._write_config = curry(Config.set, "%s-show" % configname)
+        qa.triggered[bool].connect(self._write_config)
+        self.signalIsVisible.connect(qa.setChecked)
+
+    def getShowQAction(self):
+        return self._qa_show
+
+    def makeAvailable(self, available=True):
+        """Makes the tool available (or unavailable)-- shows/hides the "show" control, and shows/hides the dialog according to this control."""
+        self._qa_show.setVisible(available)
+        self.setVisible(self._qa_show.isChecked() if available else False)
+
+    def initGeometry(self):
+        x0 = Config.getint('%s-x0' % self._configname, 0)
+        y0 = Config.getint('%s-y0' % self._configname, 0)
+        w = Config.getint('%s-width' % self._configname, 0)
+        h = Config.getint('%s-height' % self._configname, 0)
+        if w and h:
+            self.resize(w, h)
+            self.move(x0, y0)
+            return True
+        return False
+
+    def _saveGeometry(self):
+        Config.set('%s-x0' % self._configname, self.pos().x())
+        Config.set('%s-y0' % self._configname, self.pos().y())
+        Config.set('%s-width' % self._configname, self.width())
+        Config.set('%s-height' % self._configname, self.height())
+
+    def close(self):
+        self._closing = True
+        QDialog.close(self)
+
+    def closeEvent(self, event):
+        QDialog.closeEvent(self, event)
+        if not self._closing:
+            self._write_config(False)
+
+    def moveEvent(self, event):
+        self._saveGeometry()
+        QDialog.moveEvent(self, event)
+
+    def resizeEvent(self, event):
+        self._saveGeometry()
+        QDialog.resizeEvent(self, event)
+
+    def setVisible(self, visible, emit=True):
+        if not visible:
+            self._geometry = self.geometry()
+        else:
+            if self._geometry:
+                self.setGeometry(self._geometry)
+        if emit:
+            self.signalIsVisible.emit(visible)
+        QDialog.setVisible(self, visible)
+        # This section aligns the dockwidget with its subqwidget's visibility
+        if visible and not self.parent().isVisible():
+            self.parent().setGeometry(self.geometry())
+            self.parent().setVisible(True)
+        elif not visible and self.parent().isVisible():
+            self.parent().setVisible(False)
+
+
+class LiveImageZoom(ToolDialog):
+    livezoom_resize_signal = pyqtSignal(QSize)
+
+    def __init__(self, parent, radius=10, factor=12):
+        ToolDialog.__init__(self, parent, configname="livezoom", menuname="live zoom & cross-sections",
+                            show_shortcut=Qt.Key_F2)
+        self.setWindowTitle("Zoom & Cross-sections")
+        radius = Config.getint("livezoom-radius", radius)
+        # create size polixy for livezoom
+        livezoom_policy = QSizePolicy()
+        livezoom_policy.setWidthForHeight(True)
+        livezoom_policy.setHeightForWidth(True)
+        self.setSizePolicy(livezoom_policy)
+        # add plots
+        self._lo0 = lo0 = QVBoxLayout(self)
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo1.setSpacing(0)
+        lo0.addLayout(lo1)
+        # control checkboxes
+        self._showzoom = QCheckBox("show zoom", self)
+        self._showcs = QCheckBox("show cross-sections", self)
+        self._showzoom.setChecked(True)
+        self._showcs.setChecked(True)
+        self._showzoom.toggled[bool].connect(self._showZoom)
+        self._showcs.toggled[bool].connect(self._showCrossSections)
+        lo1.addWidget(self._showzoom, 0)
+        lo1.addSpacing(5)
+        lo1.addWidget(self._showcs, 0)
+        lo1.addStretch(1)
+        self._smaller = QToolButton(self)
+        self._smaller.setIcon(pixmaps.window_smaller.icon())
+        self._smaller.clicked.connect(self._shrink)
+        self._larger = QToolButton(self)
+        self._larger.setIcon(pixmaps.window_larger.icon())
+        self._larger.clicked.connect(self._enlarge)
+        lo1.addWidget(self._smaller)
+        lo1.addWidget(self._larger)
+        self._has_zoom = self._has_xcs = self._has_ycs = False
+        # setup zoom plot
+        font = QApplication.font()
+        self._zoomplot = QwtPlot(self)
+        #    self._zoomplot.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Fixed)
+        self._zoomplot.setContentsMargins(5, 5, 5, 5)
+        axes = {QwtPlot.xBottom: "X pixel coordinate",
+                QwtPlot.yLeft: "Y pixel coordinate",
+                QwtPlot.xTop: "X cross-section value",
+                QwtPlot.yRight: "Y cross-section value"}
+        for axis, title in axes.items():
+            self._zoomplot.enableAxis(True)
+            self._zoomplot.setAxisScale(axis, 0, 1)
+            self._zoomplot.setAxisFont(axis, font)
+            self._zoomplot.setAxisMaxMajor(axis, 3)
+            self._zoomplot.axisWidget(axis).setMinBorderDist(16, 16)
+            self._zoomplot.axisWidget(axis).show()
+            text = QwtText(title)
+            text.setFont(font)
+            self._zoomplot.axisWidget(axis).setTitle(text.text())
+        self._zoomplot.setAxisLabelRotation(QwtPlot.yLeft, -90)
+        self._zoomplot.setAxisLabelAlignment(QwtPlot.yLeft, Qt.AlignVCenter)
+        self._zoomplot.setAxisLabelRotation(QwtPlot.yRight, 90)
+        self._zoomplot.setAxisLabelAlignment(QwtPlot.yRight, Qt.AlignVCenter)
+        # self._zoomplot.plotLayout().setAlignCanvasToScales(True)
+        lo0.addWidget(self._zoomplot, 0)
+        # setup ZoomItem for zoom plot
+        self._zi = self.ImageItem()
+        self._zi.attach(self._zoomplot)
+        self._zi.setZ(0)
+        # setup targeting reticule for zoom plot
+        self._reticules = TiggerPlotCurve(), TiggerPlotCurve()
+        for curve in self._reticules:
+            curve.setRenderHint(QwtPlotItem.RenderAntialiased)
+            curve.setPen(QPen(QColor("green")))
+            curve.setStyle(QwtPlotCurve.Lines)
+            curve.attach(self._zoomplot)
+            curve.setZ(1)
+        # setup cross-section curves
+        pen = makeDualColorPen("navy", "yellow")
+        self._xcs = TiggerPlotCurve()
+        self._xcs.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._ycs = TiggerPlotCurve()
+        self._ycs.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._xcs.setPen(makeDualColorPen("navy", "yellow"))
+        self._ycs.setPen(makeDualColorPen("black", "cyan"))
+        for curve in self._xcs, self._ycs:
+            curve.setStyle(QwtPlotCurve.Steps)
+            curve.attach(self._zoomplot)
+            curve.setZ(2)
+        self._xcs.setXAxis(QwtPlot.xBottom)
+        self._xcs.setYAxis(QwtPlot.yRight)
+        self._ycs.setXAxis(QwtPlot.xTop)
+        self._ycs.setYAxis(QwtPlot.yLeft)
+        # self._ycs.setCurveType(QwtPlotCurve.Xfy)  # old qwt5
+        self._ycs.setOrientation(Qt.Vertical)  # Qwt 6 version
+        self._xcs.setOrientation(Qt.Horizontal)  # Qwt 6 version
+        # make QTransform for flipping images upside-down
+        self._xform = QTransform()
+        self._xform.scale(1, -1)
+        # init geometry
+        self.setPlotSize(radius, factor)
+        self.initGeometry()
+
+    def _showZoom(self, show):
+        if not show:
+            self._zi.setVisible(False)
+
+    def _showCrossSections(self, show):
+        self._zoomplot.enableAxis(QwtPlot.xTop, show)
+        self._zoomplot.enableAxis(QwtPlot.yRight, show)
+        if not show:
+            self._xcs.setVisible(False)
+            self._ycs.setVisible(False)
+
+    def _enlarge(self):
+        self.setPlotSize(self._radius * 2, self._magfac)
+
+    def _shrink(self):
+        self.setPlotSize(self._radius / 2, self._magfac)
+
+    def setPlotSize(self, radius, factor):
+        Config.set('livezoom-radius', radius)
+        self._radius = radius
+        # enable smaller/larger buttons based on radius
+        self._smaller.setEnabled(radius > 5)
+        self._larger.setEnabled(radius < 40)
+        # compute other sizes
+        self._npix = radius * 2 + 1
+        self._magfac = factor
+        width = height = self._npix * self._magfac
+        self._zoomplot.setMinimumHeight(height + 80)
+        self._zoomplot.setMinimumWidth(width + 80)
+        # set data array
+        self._data = numpy.ma.masked_array(numpy.zeros((int(self._npix), int(self._npix)), float),
+                                           numpy.zeros((int(self._npix), int(self._npix)), bool))
+        # reset window size
+        self._lo0.update()
+        self.resize(self._lo0.minimumSize())
+        self.livezoom_resize_signal.emit(self._lo0.minimumSize())
+
+    def _getZoomSlice(self, ix, nx):
+        ix0, ix1 = ix - self._radius, ix + self._radius + 1
+        zx0 = -min(ix0, 0)
+        ix0 = max(ix0, 0)
+        zx1 = self._npix - max(ix1, nx - 1) + (nx - 1)
+        ix1 = min(ix1, nx - 1)
+        return ix0, ix1, zx0, zx1
+
+    class ImageItem(QwtPlotItem):
+        """ImageItem subclass used by LiveZoomer to display zoomed-in images"""
+
+        def __init__(self):
+            QwtPlotItem.__init__(self)
+            self._qimg = None
+            self.RenderAntialiased
+
+        def setImage(self, qimg):
+            self._qimg = qimg
+
+        def draw(self, painter, xmap, ymap, rect):
+            """Implements QwtPlotItem.draw(), to render the image on the given painter."""
+            self._qimg and painter.drawImage(QRect(xmap.p1(), ymap.p2(), xmap.pDist(), ymap.pDist()), self._qimg)
+
+    def trackImage(self, image, ix, iy):
+        if not self.isVisible():
+            return
+        # update zoomed image
+        # find overlap of zoom window with image, mask invisible pixels
+        nx, ny = image.imageDims()
+        ix0, ix1, zx0, zx1 = self._getZoomSlice(ix, nx)
+        iy0, iy1, zy0, zy1 = self._getZoomSlice(iy, ny)
+        if ix0 < nx and ix1 >= 0 and iy0 < ny and iy1 >= 0:
+            if self._showzoom.isChecked():
+                # There was an error here when using zoom window zoom buttons
+                # (TypeError: slice indices must be integers or None or have an __index__ method).
+                # Therefore indexes have been cast as int()
+                self._data.mask[...] = False
+                self._data.mask[:int(zx0), ...] = True
+                self._data.mask[int(zx1):, ...] = True
+                self._data.mask[..., :int(zy0)] = True
+                self._data.mask[..., int(zy1):] = True
+                # copy & colorize region
+                self._data[int(zx0):int(zx1), int(zy0):int(zy1)] = image.image()[int(ix0):int(ix1), int(iy0):int(iy1)]
+                intensity = image.intensityMap().remap(self._data)
+                self._zi.setImage(
+                    image.colorMap().colorize(image.intensityMap().remap(self._data)).transformed(self._xform))
+                self._zi.setVisible(True)
+            # set cross-sections
+            if self._showcs.isChecked():
+                if iy >= 0 and iy < ny and ix1 > ix0:
+                    xcs = [float(x) for x in image.image()[int(ix0):int(ix1), int(iy)]]
+                    self._xcs.setData(numpy.arange(ix0 - 1, ix1) + .5, [xcs[0]] + xcs)
+                    self._xcs.setVisible(True)
+                    self._zoomplot.setAxisAutoScale(QwtPlot.yRight)
+                    self._has_xcs = True
+                else:
+                    self._xcs.setVisible(False)
+                    self._zoomplot.setAxisScale(QwtPlot.yRight, 0, 1)
+                if ix >= 0 and ix < nx and iy1 > iy0:
+                    ycs = [float(y) for y in image.image()[int(ix), int(iy0):int(iy1)]]
+                    # self._ycs.setData([ycs[0]] + ycs, numpy.arange(iy0 - 1, iy1) + .5)
+                    self._ycs.setData([ycs[0]] + ycs, numpy.arange(iy0 - 1, iy1) + .5)
+                    self._ycs.setVisible(True)
+                    self._zoomplot.setAxisAutoScale(QwtPlot.xTop)
+                    self._has_ycs = True
+                else:
+                    self._ycs.setVisible(False)
+                    self._zoomplot.setAxisScale(QwtPlot.xTop, 0, 1)
+        else:
+            for plotitem in self._zi, self._xcs, self._ycs:
+                plotitem.setVisible(False)
+        # set zoom plot scales
+        x0, x1 = ix - self._radius - .5, ix + self._radius + .5
+        y0, y1 = iy - self._radius - .5, iy + self._radius + .5
+        self._reticules[0].setData([ix, ix], [y0, y1])
+        self._reticules[1].setData([x0, x1], [iy, iy])
+        self._zoomplot.setAxisScale(QwtPlot.xBottom, x0, x1)
+        self._zoomplot.setAxisScale(QwtPlot.yLeft, y0, y1)
+        self._zoomplot.enableAxis(QwtPlot.xTop, self._showcs.isChecked())
+        # update plots
+        self._zoomplot.replot()
+
+
+class LiveProfile(ToolDialog):
+    def __init__(self, parent):
+        ToolDialog.__init__(self, parent, configname="liveprofile", menuname="profiles", show_shortcut=Qt.Key_F3)
+        self.setWindowTitle("Profiles")
+        # create size policy for live profile
+        liveprofile_policy = QSizePolicy()
+        liveprofile_policy.setHorizontalPolicy(QSizePolicy.MinimumExpanding)
+        liveprofile_policy.setVerticalPolicy(QSizePolicy.Fixed)
+        self.setSizePolicy(liveprofile_policy)
+        # add plots
+        lo0 = QVBoxLayout(self)
+        lo0.setSpacing(0)
+        lo1 = QHBoxLayout()
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo0.addLayout(lo1)
+        lab = QLabel("Axis: ", self)
+        self._wprofile_axis = QComboBox(self)
+        self._wprofile_axis.activated[int].connect(self.selectAxis)
+        lo1.addWidget(lab, 0)
+        lo1.addWidget(self._wprofile_axis, 0)
+        lo1.addStretch(1)
+        # add profile plot
+        self._font = font = QApplication.font()
+        self._profplot = QwtPlot(self)
+        self._profplot.setContentsMargins(0, 0, 0, 0)
+        self._profplot.enableAxis(QwtPlot.xBottom)
+        self._profplot.enableAxis(QwtPlot.yLeft)
+        self._profplot.setAxisFont(QwtPlot.xBottom, font)
+        self._profplot.setAxisFont(QwtPlot.yLeft, font)
+        #    self._profplot.setAxisMaxMajor(QwtPlot.xBottom,3)
+        self._profplot.setAxisAutoScale(QwtPlot.yLeft)
+        self._profplot.setAxisMaxMajor(QwtPlot.yLeft, 3)
+        self._profplot.axisWidget(QwtPlot.yLeft).setMinBorderDist(16, 16)
+        self._profplot.setAxisLabelRotation(QwtPlot.yLeft, -90)
+        self._profplot.setAxisLabelAlignment(QwtPlot.yLeft, Qt.AlignVCenter)
+        self._profplot.plotLayout().setAlignCanvasToScales(True)
+        lo0.addWidget(self._profplot, 0)
+        self._profplot.setMaximumHeight(256)
+        self._profplot.setMinimumHeight(56)
+        # self._profplot.setMinimumWidth(256)
+        # self._profplot.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
+        self._profplot.setSizePolicy(liveprofile_policy)
+        # and profile curve
+        self._profcurve = TiggerPlotCurve()
+        self._profcurve.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._ycs = TiggerPlotCurve()
+        self._ycs.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._profcurve.setPen(QPen(QColor("white")))
+        self._profcurve.setStyle(QwtPlotCurve.Lines)
+        self._profcurve.setOrientation(Qt.Horizontal)
+        self._profcurve.attach(self._profplot)
+        # config geometry
+        if not self.initGeometry():
+            self.resize(300, 192)
+        self._axes = []
+        self._lastsel = None
+        self._image_id = None
+
+    def setImage(self, image):
+        if id(image) == self._image_id:
+            return
+        self._image_id = id(image)
+        # build list of axes -- first X and Y
+        self._axes = []
+        for n, label in enumerate(("X", "Y")):
+            iaxis, np = image.getSkyAxis(n)
+            self._axes.append((label, iaxis, list(range(np)), "pixels"))
+        self._xaxis = self._axes[0][1]
+        self._yaxis = self._axes[1][1]
+        # then, extra axes
+        for i in range(image.numExtraAxes()):
+            iaxis, name, labels = image.extraAxisNumberNameLabels(i)
+            if len(labels) > 1 and name.upper() not in ("STOKES", "COMPLEX"):
+                values = image.extraAxisValues(i)
+                unit, scale = image.extraAxisUnitScale(i)
+                self._axes.append((name, iaxis, [x / scale for x in values], unit))
+        # put them into the selector
+        names = [name for name, iaxis, vals, unit in self._axes]
+        self._wprofile_axis.addItems(names)
+        if self._lastsel in names:
+            axis = names.index(self._lastsel)
+        elif len(self._axes) > 2:
+            axis = 2
+        else:
+            axis = 0
+        self._wprofile_axis.setCurrentIndex(axis)
+        self.selectAxis(axis, remember=False)
+
+    def selectAxis(self, i, remember=True):
+        if i < len(self._axes):
+            name, iaxis, values, unit = self._axes[i]
+            self._selaxis = iaxis, values
+            self._profplot.setAxisScale(QwtPlot.xBottom, min(values), max(values))
+            title = QwtText("%s, %s" % (name, unit) if unit else name)
+            title.setFont(self._font)
+            self._profplot.setAxisTitle(QwtPlot.xBottom, title)
+            # save selection
+            if remember:
+                self._lastsel = name
+
+    def trackImage(self, image, ix, iy):
+        if not self.isVisible():
+            return
+        nx, ny = image.imageDims()
+        inrange = ix < nx and ix >= 0 and iy < ny and iy >= 0
+        if inrange:
+            # check if image has changed
+            self.setImage(image)
+            # make profile slice
+            iaxis, xval = self._selaxis
+            slicer = image.currentSlice()
+            slicer[self._xaxis] = ix
+            slicer[self._yaxis] = iy
+            slicer[iaxis] = slice(None)
+            yval = image.data()[tuple(slicer)]
+            i0, i1 = 0, len(xval)
+            # if X or Y profile, set axis scale to match that of window
+            if iaxis == 0:
+                rect = image.currentRectPix()
+                i0 = rect.topLeft().x()
+                i1 = i0 + rect.width()
+                self._profplot.setAxisScale(QwtPlot.xBottom, xval[i0], xval[i1 - 1])
+            elif iaxis == 1:
+                rect = image.currentRectPix()
+                i0 = rect.topLeft().y()
+                i1 = i0 + rect.height()
+                self._profplot.setAxisScale(QwtPlot.xBottom, xval[i0], xval[i1 - 1])
+            self._profcurve.setData(xval[i0:i1], yval[i0:i1])
+        self._profcurve.setVisible(inrange)
+        # update plots
+        self._profplot.replot()
+
+
+class SkyModelPlotter(QWidget):
+    # Selection modes for the various selector functions below.
+    # Default is usually Clear+Add
+    SelectionClear = 1  # clear previous selection
+    SelectionAdd = 2  # add to selection
+    SelectionRemove = 4  # remove from selection
+
+    # Mouse pointer modes
+    MouseZoom = 0
+    MouseMeasure = 1
+    MouseSubset = 2
+    MouseSelect = 3
+    MouseDeselect = 4
+
+    imagesChanged = pyqtSignal()
+    showErrorMessage = pyqtSignal()
+
+    class Plot(QwtPlot):
+        """
+        Augments QwtPlot with additional functions, including a cache of QPoints that's cleared whenever a plot
+        layout is updated of the plot is zoomed
+        """
+
+        updateLayoutEvent = pyqtSignal()
+        updateCurrentPlot = pyqtSignal()
+
+        def __init__(self, mainwin, skymodelplotter, parent):
+            QwtPlot.__init__(self, parent)
+            self._skymodelplotter = skymodelplotter
+            self.setAcceptDrops(True)
+            self.clearCaches()
+            self._mainwin = mainwin
+            self._drawing_key = None
+            self.updateCurrentPlot.connect(self.updatePlot)
+
+        def getUpdateSignal(self):
+            return self.updateLayoutEvent
+
+        def dragEnterEvent(self, event):
+            return self._mainwin.dragEnterEvent(event)
+
+        def dropEvent(self, event):
+            return self._mainwin.dropEvent(event)
+
+        def lmPosToScreen(self, fpos):
+            return QPoint(self.transform(QwtPlot.xBottom, fpos.x()), self.transform(QwtPlot.yLeft, fpos.y()))
+
+        def lmRectToScreen(self, frect):
+            return QRect(self.lmPosToScreen(frect.topLeft()), self.lmPosToScreen(frect.bottomRight()))
+
+        def screenPosToLm(self, pos):
+            return QPointF(self.invTransform(QwtPlot.xBottom, pos.x()), self.invTransform(QwtPlot.yLeft, pos.y()))
+
+        def screenRectToLm(self, rect):
+            return QRectF(self.screenPosToLm(rect.topLeft()), self.screenPosToLm(rect.bottomRight()))
+
+        def getMarkerPosition(self, marker):
+            """Returns QPoint associated with the given marker. Caches coordinate conversion by marker ID."""
+            mid = id(marker)
+            pos = self._coord_cache.get(mid)
+            if pos is None:
+                self._coord_cache[mid] = pos = self.lmPosToScreen(marker.lmQPointF())
+            return pos
+
+        def drawCanvas(self, painter):
+            dprint(5, "drawCanvas", time.time() % 60)
+            if self._drawing_key is None:
+                dprint(5, "drawCanvas: key not set, redrawing")
+                return QwtPlot.drawCanvas(self, painter)
+            else:
+                dprint(5, "drawCanvas: current key is", self._drawing_key)
+                pm = self._draw_cache.get(self._drawing_key)
+                if pm:
+                    dprint(5, "drawCanvas: found pixmap in cache, drawing")
+                else:
+                    width, height = painter.device().width(), painter.device().height()
+                    dprint(5, "drawCanvas: not in cache, redrawing %dx%d pixmap" % (width, height))
+                    self._draw_cache[self._drawing_key] = pm = QPixmap(width, height)
+                    pm.fill(self.canvasBackground().color())
+                    QwtPlot.drawCanvas(self, QPainter(pm))
+                painter.drawPixmap(0, 0, pm)
+                dprint(5, "drawCanvas done", time.time() % 60)
+                return
+
+        def clear(self):
+            """Override clear() to provide a saner interface."""
+            self.clearCaches()
+            self.detachItems(QwtPlotItem.Rtti_PlotItem, False)
+
+        def updateLayout(self):
+            # if an update event is pending, skip our internal stuff
+            if self._skymodelplotter.isUpdatePending():
+                dprint(5, "updateLayout: ignoring, since a plot update is pending")
+                QwtPlot.updateLayout(self)
+            else:
+                dprint(5, "updateLayout")
+                self.clearCaches()
+                QwtPlot.updateLayout(self)
+                self.updateLayoutEvent.emit()
+
+        def setDrawingKey(self, key=None):
+            """Sets the current drawing key. If key is set to not None, then drawCanvas() will look in the draw cache
+      for a pixmap matching the key, instead of redrawing the canvas. It will also cache the results of the draw.
+      """
+            dprint(2, "setting drawing key", key)
+            self._drawing_key = key
+
+        def clearCaches(self):
+            dprint(2, "clearing plot caches")
+            self._coord_cache = {}
+            self._draw_cache = {}
+
+        def clearDrawCache(self):
+            self._draw_cache = {}
+
+        def updatePlot(self):
+            self.replot()
+
+    class PlotZoomer(QwtPlotZoomer):
+        provisionalZoom = pyqtSignal(float, float, int, int)
+
+        def __init__(self, canvas, updateLayoutEvent, track_callback=None, label=None):
+            QwtPlotZoomer.__init__(self, canvas)
+            self.setMaxStackDepth(1000)
+            self._use_wheel = True
+            self._track_callback = track_callback
+            if track_callback is not None:
+                self.moved[QPointF].connect(self._track_callback)
+
+            if label:
+                self._label = QwtText(label)
+            else:
+                self._label = QwtText("")
+            self._fixed_aspect = False
+            self._dczoom_button = self._dczoom_modifiers = None
+            # maintain a separate stack of  "desired" (as opposed to actual) zoom rects. When a resize of the plot happens,
+            # we recompute the actual zoom rect based on the aspect ratio and the desired rect.
+            self._zoomrects = []
+            # watch plot for changes: if resized, aspect ratios need to be checked
+            self._updateLayoutEvent = updateLayoutEvent
+            self._updateLayoutEvent.connect(self._checkAspects)
+
+        def isFixedAspect(self):
+            return self._fixed_aspect
+
+        def setFixedAspect(self, fixed):
+            self._fixed_aspect = fixed
+            self._checkAspects()
+
+        def setDoubleClickZoom(self, button, modifiers):
+            self._dczoom_button, self._dczoom_modifiers = button, modifiers
+
+        def _checkAspects(self):
+            """If fixed-aspect mode is in effect, goes through zoom rects and adjusts them to the plot aspect"""
+            if self._fixed_aspect:
+                dprint(2, "plot canvas size is", self.plot().size())
+                dprint(2, "zoom rects are", self._zoomrects)
+                self._resetZoomStack(self.zoomRectIndex())
+
+        def setZoomStack(self, stack, index=0):
+            self._zoomrects = stack
+            self._resetZoomStack(index)
+
+        def _resetZoomStack(self, index):
+            stack = list(map(self.adjustRect, self._zoomrects))
+            if stack:
+                dprint(2, f"index is {index} stack size is {len(stack)}")
+                zs = stack[index]
+                dprint(2, "resetting plot limits to", zs)
+                self.plot().setAxisScale(QwtPlot.yLeft, zs.top(), zs.bottom())
+                self.plot().setAxisScale(QwtPlot.xBottom, zs.right(), zs.left())
+                self.plot().axisScaleEngine(QwtPlot.xBottom).setAttribute(QwtScaleEngine.Inverted, True)
+                QwtPlotZoomer.setZoomBase(self)
+                dprint(2, "reset limits, zoom stack is now", self.zoomRectIndex())
+            dprint(2, "setting zoom stack", stack, index)
+            # Fixed below using PyQt-Qwt repo-based install (issue #18 PR #19)
+            # Also available from https://github.com/razman786/PyQt-Qwt/tree/ubuntu_zoomstack
+            QwtPlotZoomer.setZoomStack(self, stack, index)
+            dprint(2, "zoom stack is now", self.zoomRectIndex(), self.maxStackDepth())
+
+        def adjustRect(self, rect):
+            """Adjusts rectangle w.r.t. aspect ratio settings. That is, if a fixed aspect ratio is in effect, adjusts the rectangle to match
+      the aspect ratio of the plot canvas. Returns adjusted version."""
+            if self._fixed_aspect:
+                dprint(2, "adjusting rect to canvas size:", self.canvas().size(), rect)
+                aspect0 = self.canvas().width() / float(self.canvas().height()) if self.canvas().height() else 1
+                aspect = rect.width() / float(rect.height())
+                # increase rectangle, if needed to match the aspect
+                if aspect < aspect0:
+                    dx = rect.width() * (aspect0 / aspect - 1) / 2
+                    return rect.adjusted(-dx, 0, dx, 0)
+                elif aspect0 and aspect > aspect0:
+                    dy = rect.height() * (aspect / aspect0 - 1) / 2
+                    return rect.adjusted(0, -dy, 0, dy)
+            return rect
+
+        def rescale(self):
+            self.plot().clearCaches()
+            return QwtPlotZoomer.rescale(self)
+
+        def zoom(self, rect):
+            if not isinstance(rect, int):
+                rect = rect.intersected(self.zoomBase())
+                # check that it's not too small, ignore if it is
+                x1, y1, x2, y2 = rect.getCoords()
+                x1 = self.plot().transform(self.xAxis(), x1)
+                y1 = self.plot().transform(self.yAxis(), y1)
+                x2 = self.plot().transform(self.xAxis(), x2)
+                y2 = self.plot().transform(self.yAxis(), y2)
+                dprint(2, "zoom by", abs(x1 - x2), abs(y1 - y2))
+                if abs(x1 - x2) <= 20 and abs(y1 - y2) <= 20:
+                    return
+            if isinstance(rect, int) or rect.isValid():
+                dprint(2, "zoom", rect)
+                if not isinstance(rect, int):
+                    self._zoomrects[self.zoomRectIndex() + 1:] = [QRectF(rect)]
+                    rect = self.adjustRect(rect)
+                    dprint(2, "zooming to", rect)
+                QwtPlotZoomer.zoom(self, rect)
+                dprint(2, "zoom stack is now", self.zoomRectIndex())
+            else:
+                dprint(2, "invalid zoom selected, ignoring", rect)
+
+        def trackerText(self, pos):
+            return (self._track_callback and self._track_callback(pos)) or (
+                self._label if self.isActive() else QwtText(""))
+
+        def enableWheel(self, enable):
+            self._use_wheel = enable
+
+        def widgetMouseDoubleClickEvent(self, ev):
+            x = self.plot().invTransform(self.xAxis(), ev.x())
+            y = self.plot().invTransform(self.yAxis(), ev.y())
+            if int(ev.button()) == self._dczoom_button and int(ev.modifiers()) == self._dczoom_modifiers:
+                self.provisionalZoom.emit(x, y, 1, 10)
+
+        def widgetWheelEvent(self, ev):
+            x = self.plot().invTransform(self.xAxis(), ev.x())
+            y = self.plot().invTransform(self.yAxis(), ev.y())
+            if self._use_wheel:
+                self.provisionalZoom.emit(x, y, (1 if ev.angleDelta().y() > 0 else -1), 200)
+            QwtPlotPicker.widgetWheelEvent(self, ev)
+
+    class PlotPicker(QwtPlotPicker):
+        """Auguments QwtPlotPicker with functions for selecting objects"""
+
+        def __init__(self, canvas, label, color="red", select_callback=None, track_callback=None,
+                     mode=QwtPickerClickRectMachine(), rubber_band=QwtPicker.RectRubberBand,
+                     text_bg=None):
+            QwtPlotPicker.__init__(self, QwtPlot.xBottom, QwtPlot.yLeft, rubber_band, QwtPicker.AlwaysOff,
+                                       canvas)
+            self.installEventFilter(self)
+            self.setRubberBand(rubber_band)
+            # setup appearance
+            self._text = QwtText(label)
+            self._color = None
+            #      self._text_inactive = QwtText()
+            self.setLabel(label, color)
+            if isinstance(text_bg, QColor):
+                text_bg = QBrush(text_bg)
+            self._text_bg = text_bg
+            if text_bg:
+                self._text.setBackgroundBrush(text_bg)
+                self._text_inactive.setBackgroundBrush(text_bg)
+            # setup track_callbacks
+            if track_callback is not None:
+                dprint(2, f"PlotPicker track_callback {track_callback.__name__}")
+                self._track_callback = track_callback
+                if track_callback.__name__ == "_trackRulerStartPoint":
+                    dprint(2, "PlotPicker adding _trackRuler")
+                    self.appended.connect(self._track_callback)
+                elif track_callback.__name__ == "_trackCoordinates":
+                    dprint(2, "PlotPicker adding _trackCoordinates")
+                    self.moved[QPointF].connect(self._track_callback)
+            # setup select_callbacks
+            if select_callback:
+                dprint(2, f"PlotPicker select_callback {select_callback.__name__}")
+                dprint(2, f"PlotPicker mode {mode}")
+                self._select_callback = select_callback
+                if select_callback.__name__ == '_measureRuler':
+                    self.setStateMachine(mode)
+                    self.moved.connect(select_callback)
+                    dprint(2, f"PlotPicker mode PickerPolygon _measureRuler")
+                elif isinstance(mode, QwtPickerClickRectMachine):
+                    self.setStateMachine(mode)
+                    self.selected[QRectF].connect(select_callback)
+                    dprint(2, f"PlotPicker mode PickerClickRect")
+                elif isinstance(mode, QwtPickerClickPointMachine):
+                    self.setStateMachine(mode)
+                    self.selected[QPointF].connect(select_callback)
+                    dprint(2, f"PlotPicker mode PickerClickPoint")
+                else:
+                    # handle unrecognised state machine modes
+                    self.setStateMachine(mode)
+                    self.selected[QPointF].connect(select_callback)
+                    dprint(2, f"PlotPicker mode unknown")
+            else:
+                # handle pickers that have no callbacks
+                self.setStateMachine(mode)
+
+        def eventFilter(self, source, event):
+            """This is how to check for Qwt mouse patterns
+            if event.type() == QwtEventPattern.MouseSelect4:
+                print("Qwt mouse pattern for shift + left click")"""
+            # If key is released when using a picker, end picker process
+            # exception is the ruler, which only needs SHIFT+click to initiate and click to end.
+            if event.type() == QEvent.KeyRelease:
+                self.reset()
+            return super(QwtPlotPicker, self).eventFilter(source, event)
+
+        def setLabel(self, label, color=None):
+            if color:
+                self.setRubberBandPen(makeDualColorPen(color, "white"))
+                self._color = QColor(color)
+                self._text.setColor(self._color)
+            self._label = label
+            self._text.setText(label)
+
+        def trackerText(self, pos):
+            text = self._track_callback and self._track_callback(pos)
+            if text is None:
+                self._text.setText(self._label)
+                return self._text  # if self.isActive() else self._text_inactive
+            else:
+                if not isinstance(text, QwtText):
+                    if self._label:
+                        text = "%s %s" % (self._label, text)
+                    text = QwtText(text)
+                    self._text.setText(self._label)
+                    text = self._text
+                if self._text_bg:
+                    text.setBackgroundBrush(self._text_bg)
+                if self._color is not None:
+                    text.setColor(self._color)
+                return text
+
+    # this is __init__ for SkyModelPlotter
+    def __init__(self, parent, mainwin, *args):
+        QWidget.__init__(self, parent, *args)
+        self._mainwin = mainwin
+        self.tigToolTip = TigToolTip()
+        self._ruler_timer = QTimer()
+        self._ruler_timer.timeout.connect(self._measureRulerCompleted)
+        # plot update logic -- handle updates via the event loop
+        self._updates_enabled = False  # updates ignored until this is True
+        self._update_pending = 0  # serial number of most recently posted update event
+        self._update_done = 0  # serial number of most recently processed update event
+        self._update_what = 0  # mask of updates ('what' arguments to _updateLayout) accumulated since last update was done
+        # create currier
+        self._currier = PersistentCurrier()
+        # init widgetry
+        lo = QHBoxLayout(self)
+        lo.setSpacing(0)
+        lo.setContentsMargins(0, 0, 0, 0)
+        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
+        self.plot = self.Plot(mainwin, self, self)
+        self.plot.setAutoDelete(False)
+        self.plot.setEnabled(False)
+        self.plot.enableAxis(QwtPlot.yLeft, False)
+        self.plot.enableAxis(QwtPlot.xBottom, False)
+        lo.addWidget(self.plot)
+        # setup plot groupings
+        self._bg_color = QColor("#808080")
+        self.plot.setCanvasBackground(self._bg_color)
+        self._bg_brush = QBrush(self._bg_color)
+        color = QColor("white")
+        color.setAlpha(128)
+        self._coord_bg_brush = QBrush(color)
+        self._grid_color = QColor("navy")
+        self._grid_pen = QPen(self._grid_color)
+        self._grid_pen.setStyle(Qt.DotLine)
+        self._image_pen = QPen(self._grid_color)
+        self._image_pen.setStyle(Qt.DashLine)
+        # init plot pickers
+        self._initPickers()
+        # init markup symbols and colors and pens
+        self._plot_markup = []
+        self._stats_color = QColor("red")
+        self._stats_pen = QPen(self._stats_color, 1)
+        #    self._stats_pen.setStyle(Qt.DotLine)
+        self._subset_color = QColor("lightblue")
+        self._subset_pen = QPen(self._subset_color, 1)
+        self._markup_color = QColor("cyan")
+        self._markup_pen = QPen(self._markup_color, 1)
+        self._markup_pen.setStyle(Qt.DotLine)
+        self._markup_symbol_pen = QPen(self._markup_color, 1)
+        self._markup_brush = QBrush(Qt.NoBrush)
+        self._markup_xsymbol = QwtSymbol(QwtSymbol.XCross, self._markup_brush, self._markup_symbol_pen, QSize(16, 16))
+        self._markup_absymbol = QwtSymbol(QwtSymbol.Ellipse, self._markup_brush, self._markup_symbol_pen, QSize(4, 4))
+        self._markup_a_label = QwtText("A")
+        self._markup_a_label.setColor(self._markup_color)
+        self._markup_b_label = QwtText("B")
+        self._markup_b_label.setColor(self._markup_color)
+        # init live zoomers
+        self._livezoom = LiveImageZoom(self)
+        self._livezoom.setObjectName('livezoom')
+        self._liveprofile = LiveProfile(self)
+        self._liveprofile.setObjectName('liveprofile')
+        # get current sizeHints()
+        self.live_zoom_size = self._livezoom.sizeHint()
+        self.live_profile_size = self._liveprofile.sizeHint()
+        # setup dockable widgets
+        self._dockable_liveprofile = TDockWidget(title="Profiles", parent=mainwin, bind_widget=self._liveprofile,
+                                                 close_slot=self.liveprofile_dockwidget_closed,
+                                                 toggle_slot=self.liveprofile_dockwidget_toggled)
+        self._dockable_livezoom = TDockWidget(title="Zoom & Cross-sections", parent=mainwin, bind_widget=self._livezoom,
+                                              close_slot=self.livezoom_dockwidget_closed,
+                                              toggle_slot=self.livezoom_dockwidget_toggled)
+        # add dock widgets to main window and set to hidden
+        self._mainwin.addDockWidget(Qt.LeftDockWidgetArea, self._dockable_livezoom)
+        self._mainwin.addDockWidget(Qt.LeftDockWidgetArea, self._dockable_liveprofile)
+        self._livezoom.setVisible(False)
+        self._liveprofile.setVisible(False)
+        self._dockable_livezoom.setVisible(False)
+        self._dockable_liveprofile.setVisible(False)
+
+        # other internal init
+        self.projection = None
+        self.model = None
+        self._zoomrect = None
+        self._text_no_source = QwtText("")
+        self._text_no_source.setColor(QColor("red"))
+        # image controller
+        self._imgman = self._image = None
+        self._markers = {}
+        self._source_lm = {}
+        self._export_png_dialog = None
+        # menu and toolbar
+        self._menu = QMenu("&Plot", self)
+        self._wtoolbar = QToolBar(self)
+        self._wtoolbar.setIconSize(QSize(16, 16))
+        self._wtoolbar.setOrientation(Qt.Vertical)
+        lo.insertWidget(0, self._wtoolbar)
+        self._qag_mousemode = QActionGroup(self)
+        self._qa_unzoom = self._wtoolbar.addAction(pixmaps.zoom_out.icon(), "Unzoom plot",
+                                                   self._currier.curry(self._zoomer.zoom, 0))
+        self._qa_unzoom.setToolTip("""<P>Click to unzoom the plot all the way out to its full size.</P>""")
+        self._qa_unzoom.setShortcut(Qt.ALT + Qt.Key_Minus)
+        self._wtoolbar.addSeparator()
+        self._menu.addAction(self._qa_unzoom)
+        # mouse mode controls
+        mouse_menu = self._menu.addMenu("Mouse mode")
+        # init top of menu
+        mouse_menu.addAction("Show quick mouse reference", self._showMouseModeTooltip, Qt.Key_F1)
+        self._qa_mwzoom = qa = mouse_menu.addAction("Use mouse wheel zoom")
+        qa.setCheckable(True)
+        qa.toggled[bool].connect(self._zoomer.enableWheel)
+        qa.triggered[bool].connect(self._currier.curry(Config.set, "mouse-wheel-zoom"))
+        qa.setChecked(Config.getbool("mouse-wheel-zoom", True))
+        self._zoomer.enableWheel(qa.isChecked())
+        mouse_menu.addSeparator()
+        self._mousemodes = MouseModes.MouseModeManager(self, mouse_menu, self._wtoolbar)
+        self._mousemodes.setMouseMode.connect(self._setMouseMode)
+        self._setMouseMode(self._mousemodes.currentMode())
+        self._qa_colorzoom = self._wtoolbar.addAction(pixmaps.zoom_colours.icon(), "Zoom colourmap into subset",
+                                                      self._colourZoomIntoSubset)
+        self._qa_colorzoom.setShortcut(Qt.SHIFT + Qt.Key_F4)
+        self._qa_colorzoom.setVisible(False)
+        self._menu.addAction(self._qa_colorzoom)
+        # hide/show tools
+        self._menu.addAction(self._dockable_liveprofile.widget().getShowQAction())
+        self._menu.addAction(self._dockable_livezoom.widget().getShowQAction())
+        # fixed aspect
+        qa = self._menu.addAction("Fix aspect ratio")
+        qa.setCheckable(True)
+        qa.setChecked(Config.getbool("fix-aspect-ratio", True))
+        qa.toggled[bool].connect(self._zoomer.setFixedAspect)
+        qa.triggered[bool].connect(self._currier.curry(Config.set, "fix-aspect-ratio"))
+        self._zoomer.setFixedAspect(qa.isChecked())
+        qa.setToolTip("""<P>Enable this to maintain a fixed aspect ratio in the plot.</P>""")
+        # beam
+        self._qa_show_psf = self._menu.addAction("Show PSF (aka beam)")
+        self._qa_show_psf.setCheckable(True)
+        self._qa_show_psf.setChecked(True)
+        self._psf_marker = TiggerPlotCurve()
+        self._psf_marker.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._psf_marker.setPen(QPen(QColor("lightgreen")))
+        self._psf_marker.setZ(Z_Grid)
+        self._qa_show_psf.toggled[bool].connect(self._showPsfMarker)
+        # grid stepping
+        self._grid_step_arcsec = DefaultGridStep_ArcSec
+        gridmenu = self._menu.addMenu("Show grid circles")
+        qag = QActionGroup(gridmenu)
+        gridsteps = [None, 1, 2, 5, 10, 30, 60, 120, 300, 600]
+        for step in gridsteps:
+            if step is None:
+                text = "None"
+            elif step < 60:
+                text = "%d'" % step
+            else:
+                text = "%d\u00B0" % (step / 60)
+            qa = gridmenu.addAction(text, self._currier.curry(self._setGridCircleStepping, step and step * 60))
+            qa.setCheckable(True)
+            qa.setChecked(step == self._grid_step_arcsec)
+            qag.addAction(qa)
+        qa = self._qa_custom_grid = gridmenu.addAction("Custom...", self._setCustomGridCircleStepping)
+        qa.setCheckable(True)
+        qag.addAction(qa)
+        self._grid_step_arcsec_str = ""
+        if self._grid_step_arcsec / 60 not in gridsteps:
+            self._setCustomGridCircleSteppingLabel()
+            qa.setChecked(True)
+        # save as PNG file
+        self._menu.addAction("Export plot to PNG file...", self._exportPlotToPNG, Qt.CTRL + Qt.Key_F12)
+        self.plotShowMessage = None
+        self.plotShowErrorMessage = None
+
+    def close(self):
+        self._menu.clear()
+        self._wtoolbar.clear()
+        self._livezoom.close()
+        self._liveprofile.close()
+
+    def livezoom_dockwidget_closed(self):
+        list_of_actions = self._menu.actions()
+        for ea_action in list_of_actions:
+            if ea_action.text() == 'Show live zoom && cross-sections':
+                self._dockable_livezoom.setVisible(False)
+                if self._mainwin.windowState() != Qt.WindowMaximized:
+                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_livezoom.width())
+                ea_action.setChecked(False)
+
+    def liveprofile_dockwidget_closed(self):
+        list_of_actions = self._menu.actions()
+        for ea_action in list_of_actions:
+            if ea_action.text() == 'Show profiles':
+                self._dockable_liveprofile.setVisible(False)
+                if self._mainwin.windowState() != Qt.WindowMaximized:
+                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_liveprofile.width())
+                ea_action.setChecked(False)
+
+    def liveprofile_dockwidget_toggled(self):
+        if self._dockable_liveprofile.isVisible():
+            if self._dockable_liveprofile.isWindow():
+                self._dockable_liveprofile.setFloating(False)
+            else:
+                self._dockable_liveprofile.setFloating(True)
+                if self._mainwin.windowState() != Qt.WindowMaximized:
+                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_liveprofile.width())
+
+    def livezoom_dockwidget_toggled(self):
+        if self._dockable_livezoom.isVisible():
+            if self._dockable_livezoom.isWindow():
+                self._dockable_livezoom.setFloating(False)
+            else:
+                self._dockable_livezoom.setFloating(True)
+                if self._mainwin.windowState() != Qt.WindowMaximized:
+                    self._mainwin.setMaximumWidth(self._mainwin.width() + self._dockable_livezoom.width())
+
+    def setupShowMessages(self, _signal):
+        self.plotShowMessage = _signal
+
+    def setupShowErrorMessages(self, _signal):
+        self.plotShowErrorMessage = _signal
+
+    def getMenu(self):
+        return self._menu
+
+    def enableUpdates(self, enable=True):
+        self._updates_enabled = enable
+        if enable:
+            self.postUpdateEvent()
+
+    # extra flag for updateContents() -- used when image content or projection has changed
+    UpdateImages = 1 << 16
+
+    def setImageManager(self, im):
+        """Attaches an image manager."""
+        self._imgman = im
+        im.setZ0(Z_Image)
+        im.enableImageBorders(self._image_pen, self._grid_color, self._bg_brush)
+        im.imagesChanged.connect(self._currier.curry(self.postUpdateEvent, self.UpdateImages))
+        im.imagePlotRaised.connect(self._imageRaised)
+
+    class UpdateEvent(QEvent):
+        def __init__(self, serial):
+            QEvent.__init__(self, QEvent.User)
+            self.serial = serial
+
+    def isUpdatePending(self):
+        return self._update_pending > self._update_done
+
+    def postUpdateEvent(self, what=SkyModel.UpdateAll, origin=None):
+        """Posts an update event. Since plot updates are somewhat expensive, and certain operations can cause multiple updates,
+    we handle them through the event loop."""
+        dprintf(3, "postUpdateEvent(what=%x,origin=%s)\n", what, origin)
+        self._update_what |= what
+        self._update_pending += 1
+        dprintf(3, "posting update event, serial %d, new mask %x\n", self._update_pending, self._update_what)
+        QCoreApplication.postEvent(self, self.UpdateEvent(self._update_pending))
+
+    def event(self, ev):
+        if isinstance(ev, self.UpdateEvent):
+            if ev.serial < self._update_pending:
+                dprintf(3, "ignoring update event %d since a more recent one is already posted\n", ev.serial)
+            else:
+                dprintf(3, "received update event %d, updating contents with mask %x\n", ev.serial, self._update_what)
+                self._updateContents(self._update_what)
+                self._update_what = 0
+                self._update_done = ev.serial
+        return QWidget.event(self, ev)
+
+    def _initPickers(self):
+        """Called from __init__ to create the various plot pickers for support of mouse modes."""
+        # this picker is invisible -- it is just there to make sure _trackCoordinates is always called
+        # it provides the live zoom and main mouse pointer
+        self._tracker = self.PlotPicker(self.plot.canvas(), "", mode=QwtPickerTrackerMachine(),
+                                        track_callback=self._trackCoordinates)
+        self._tracker.setTrackerMode(QwtPicker.AlwaysOn)
+        self._tracker.setTrackerPen(QColor('white'))  # TODO - adjust the colour of the coordinate tracker according to image colour map.
+        # this pricker provides the profile on click
+        self._tracker_profile = self.PlotPicker(self.plot.canvas(), "", mode=QwtPickerClickPointMachine(),
+                                        select_callback=self._trackCoordinatesProfile)
+        # zoom picker
+        self._zoomer = self.PlotZoomer(self.plot.canvas(), self.plot.getUpdateSignal(), label="zoom")
+        self._zoomer_pen = makeDualColorPen("navy", "yellow")
+        self._zoomer.setRubberBandPen(self._zoomer_pen)
+        self._zoomer.setTrackerPen(QColor("yellow"))
+        self._zoomer.zoomed[QRectF].connect(self._plotZoomed)
+        self._zoomer.provisionalZoom.connect(self._plotProvisionalZoom)
+        self._zoomer_box = TiggerPlotCurve()
+        self._zoomer_box.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._zoomer_box.setPen(self._zoomer_pen)
+        self._zoomer_label = TiggerPlotMarker()
+        self._zoomer_label.setRenderHint(QwtPlotItem.RenderAntialiased)
+        self._zoomer_label_text = QwtText("")
+        self._zoomer_label_text.setColor(QColor("yellow"))
+        self._zoomer_label.setLabel(self._zoomer_label_text)
+        self._zoomer_label.setLabelAlignment(Qt.AlignBottom | Qt.AlignRight)
+        for item in self._zoomer_label, self._zoomer_box:
+            item.setZ(Z_Markup)
+        self._provisional_zoom_timer = QTimer(self)
+        self._provisional_zoom_timer.setSingleShot(True)
+        self._provisional_zoom_timer.timeout.connect(self._finalizeProvisionalZoom)
+        self._provisional_zoom = None
+
+        # previous version of Qwt had Rect or Drag selection modes.
+        # self._zoomer.setSelectionFlags(QwtPicker.RectSelection | QwtPicker.DragSelection)
+        self._zoomer.setStateMachine(QwtPickerDragRectMachine())
+
+        # ruler picker for measurement mode
+        self._ruler = self.PlotPicker(self.plot.canvas(), "measure", "cyan", select_callback=self._measureRuler,
+                                     mode=QwtPickerDragLineMachine(),
+                                     rubber_band=QwtPicker.PolygonRubberBand,
+                                     track_callback=self._trackRulerStartPoint)
+
+        # this is the initial position of the ruler -- None if ruler is not tracking
+        self._ruler_start_point = None
+        # stats picker
+        self._picker_stats = self.PlotPicker(self.plot.canvas(), "stats", "red", self._selectRectStats)
+        # model selection pickers
+        self._picker1 = self.PlotPicker(self.plot.canvas(), "select", "green", self._selectRect)
+        self._picker2 = self.PlotPicker(self.plot.canvas(), "+select", "green",
+                                        curry(self._selectRect, mode=self.SelectionAdd))
+        self._picker3 = self.PlotPicker(self.plot.canvas(), "-select", "red",
+                                        curry(self._selectRect, mode=self.SelectionRemove))
+        self._picker4 = self.PlotPicker(self.plot.canvas(), "", "green", self._selectNearestSource,
+                                        mode=QwtPickerClickPointMachine())
+        for picker in self._zoomer, self._ruler, self._picker1, self._picker2, self._picker3, self._picker4:
+            for sel in QwtEventPattern.MouseSelect1, QwtEventPattern.MouseSelect2, QwtEventPattern.MouseSelect3, QwtEventPattern.MouseSelect4:
+                picker.setMousePattern(sel, 0)
+            picker.setTrackerMode(QwtPicker.AlwaysOff)
+
+    #    for picker in self._ruler,self._picker1,self._picker2,self._picker3:  # TODO - check why this code is commented out
+    #      QObject.connect(picker,pyqtSignal("wheelEvent"),self._zoomer.widgetWheelEvent)
+
+    def _showMouseModeTooltip(self):
+        tooltip = self._mousemodes.currentMode().tooltip
+        if self._qa_mwzoom.isChecked():
+            tooltip += """<P>You also have mouse-wheel zoom enabled. Rolling the wheel up will zoom in at the current zoom point.
+      Rolling the wheel down will zoom back out.</P>"""
+        QMessageBox.information(self, "Quick mouse reference", tooltip)
+
+    #    self._showCoordinateToolTip(self._mousemodes.currentMode().tooltip,rect=False)  # TODO - check why commented out
+
+    @staticmethod
+    def _setPickerPattern(picker, patt, func, mousemode, auto_disable=True):
+        """Helper function, sets mouse/key pattern for picker from the mode patterns dict"""
+        mpat, kpat = mousemode.patterns.get(func, ((0, 0), (0, 0)))
+        if auto_disable:
+            picker.setEnabled(mpat[0] or kpat[0])
+        elif mpat[0] or kpat[0]:
+            picker.setEnabled(True)
+        mouse_button, mouse_mod = mpat
+        picker.setMousePattern(patt, mouse_button, Qt.KeyboardModifier(mouse_mod))
+        key_button, key_mod = kpat
+        picker.setKeyPattern(QwtEventPattern.KeyPatternCode(patt), key_button, Qt.KeyboardModifier(key_mod))
+
+    def _setMouseMode(self, mode):
+        """Sets the current mouse mode from patterns (see MouseModes), updates action shortcuts.
+    'mode' is MouseModes.MouseModeManager.MouseMode object. This has a patterns dict.
+    For each MM_xx function defined in MouseModes, patterns[MM_xx] = (mouse_patt,key_patt)
+    Each pattern is either None, or a (button,state) pair. If MM_xx is not in the dict, then thatfunction is
+    disabled."""
+        dprint(1, "setting mouse mode", mode.id)
+        self._mouse_mode = mode.id
+        # remove markup
+        self._removePlotMarkup()
+        # disable/enable pickers accordingly
+        self._zoomer.setEnabled(True)
+        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect1, MouseModes.MM_ZWIN, mode,
+                               auto_disable=False)
+        if MouseModes.MM_ZWIN in mode.patterns:
+            self._zoomer.setDoubleClickZoom(*mode.patterns[MouseModes.MM_ZWIN][0])
+        else:
+            self._zoomer.setDoubleClickZoom(0, 0)
+        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect2, MouseModes.MM_UNZOOM, mode,
+                               auto_disable=False)
+        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect3, MouseModes.MM_ZUNDO, mode,
+                               auto_disable=False)
+        self._setPickerPattern(self._zoomer, QwtEventPattern.MouseSelect6, MouseModes.MM_ZREDO, mode,
+                               auto_disable=False)
+        self._setPickerPattern(self._ruler, QwtEventPattern.MouseSelect1, MouseModes.MM_MEAS, mode)
+        self._setPickerPattern(self._picker_stats, QwtEventPattern.MouseSelect1, MouseModes.MM_STATS, mode)
+        self._setPickerPattern(self._picker1, QwtEventPattern.MouseSelect1, MouseModes.MM_SELWIN, mode)
+        self._setPickerPattern(self._picker2, QwtEventPattern.MouseSelect1, MouseModes.MM_SELWINPLUS, mode)
+        self._setPickerPattern(self._picker3, QwtEventPattern.MouseSelect1, MouseModes.MM_DESEL, mode)
+        self._setPickerPattern(self._picker4, QwtEventPattern.MouseSelect1, MouseModes.MM_SELSRC, mode)
+        dprint(2, "picker4 pattern:", mode.patterns.get(MouseModes.MM_SELSRC, None))
+
+    def findNearestSource(self, pos, world=True, range=10):
+        """Returns source object nearest to the specified point (within range, in pixels), or None if nothing is in range.
+        'pos' is a QPointF/QwtDoublePoint object in lm coordinates if world=True, else a QPoint object."""
+        if world:
+            pos = self.plot.lmPosToScreen(pos)
+        dists = [((pos - self.plot.getMarkerPosition(marker)).manhattanLength(), marker) for marker in
+                 self._markers.values() if marker.isVisible()]
+        if dists:
+            mindist = min(dists, key=lambda x: x[0])
+            if mindist[0] < 10:
+                return mindist[1].src
+        return None
+
+    def _convertCoordinatesRuler(self, _pos):
+        # get ra/dec coordinates of point
+        pos = self.plot.screenPosToLm(_pos)
+        l, m = pos.x(), pos.y()
+        ra, dec = self.projection.radec(l, m)
+        rh, rm, rs = ModelClasses.Position.ra_hms_static(ra)
+        dsign, dd, dm, ds = ModelClasses.Position.dec_sdms_static(dec)
+        dist, pa = Coordinates.angular_dist_pos_angle(self.projection.ra0, self.projection.dec0, ra, dec)
+        Rd, Rm, Rs = ModelClasses.Position.dec_dms_static(dist)
+        PAd = pa * 180 / math.pi
+        if PAd < 0:
+            PAd += 360
+        # if we have an image, add pixel coordinates
+        x = y = val = flag = None
+        image = self._imgman and self._imgman.getTopImage()
+        if image:
+            x, y = list(map(int, list(map(round, image.lmToPix(l, m)))))
+            nx, ny = image.imageDims()
+            if x >= 0 and x < nx and y >= 0 and y < ny:
+                #        text += "<BR>x=%d y=%d"%(round(x),round(y))
+                val, flag = image.imagePixel(x, y)
+            else:
+                x = y = None
+        return l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag
+
+    def _convertCoordinates(self, _pos):
+        """This method is used to calculate coordinates from the GUI position."""
+        # get ra/dec coordinates of point
+        l, m = _pos.x(), _pos.y()
+        ra, dec = self.projection.radec(l, m)
+        rh, rm, rs = ModelClasses.Position.ra_hms_static(ra)
+        dsign, dd, dm, ds = ModelClasses.Position.dec_sdms_static(dec)
+        dist, pa = Coordinates.angular_dist_pos_angle(self.projection.ra0, self.projection.dec0, ra, dec)
+        Rd, Rm, Rs = ModelClasses.Position.dec_dms_static(dist)
+        PAd = pa * 180 / math.pi
+        if PAd < 0:
+            PAd += 360
+        # if we have an image, add pixel coordinates
+        x = y = val = flag = None
+        image = self._imgman and self._imgman.getTopImage()
+        if image:
+            x, y = list(map(int, list(map(round, image.lmToPix(l, m)))))
+            nx, ny = image.imageDims()
+            if x >= 0 and x < nx and y >= 0 and y < ny:
+                #        text += "<BR>x=%d y=%d"%(round(x),round(y))
+                val, flag = image.imagePixel(x, y)
+            else:
+                x = y = None
+        return l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag
+
+    def _trackRulerStartPoint(self, pos):
+        if not self.projection and not pos:
+            return
+        # store first point when ruler-drag is initiated
+        pos0 = pos
+        if pos0 != self._ruler_start_point:
+            self._ruler_start_point = pos0
+            if (self._ruler_start_point - pos0).manhattanLength() <= 1:
+                l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
+                    self._ruler_start_point)
+                # make tooltip text with HTML, make console (and cliboard) text w/o HTML
+                tiptext = "<NOBR>"
+                msgtext = ""
+                if self.projection.has_projection():
+                    tiptext += "X: %02dh%02dm%05.2fs %s%02d&deg;%02d'%05.2f\"  &nbsp;  r<sub>0</sub>=%d&deg;%02d'%05.2f\"   &nbsp;  PA<sub>0</sub>=%06.2f&deg;" % (
+                        rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
+                    msgtext += "X: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
+                        rh, rm, rs, dsign, dd, dm, ds, ra * 180 / math.pi, dec * 180 / math.pi, Rd, Rm, Rs,
+                        dist * 180 / math.pi, PAd)
+                if x is not None:
+                    tiptext += " &nbsp;  x=%d y=%d value=blank" % (x, y) if flag else " &nbsp;  x=%d y=%d value=%g" % (
+                        x, y, val)
+                    msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
+                tiptext += "</NOBR>"
+                # make marker
+                marker = TiggerPlotMarker()
+                marker.setRenderHint(QwtPlotItem.RenderAntialiased)
+                marker.setValue(l, m)
+                marker.setSymbol(self._markup_xsymbol)
+                markup_items = []
+                markup_items.append(marker)
+                self._qa_colorzoom.setVisible(False)
+                # calling QToolTip.showText() directly from here doesn't work, so set a timer on it
+                QTimer.singleShot(10, self._currier.curry(self._showCoordinateToolTip, msgtext))
+                # same deal for markup items
+                for item in markup_items:
+                    item.setZ(Z_Markup)
+                QTimer.singleShot(10, self._currier.curry(self._addPlotMarkup, markup_items))
+                # show in statusbar
+                self.plotShowMessage.emit(msgtext, 10000)
+                # copy to clipbaord
+                QApplication.clipboard().setText(msgtext + "\n")
+                QApplication.clipboard().setText(msgtext + "\n", QClipboard.Selection)
+                # output to terminal
+                print(msgtext)
+                return QwtText(msgtext)
+
+    """def _trackRuler(self, pos):
+        if not self.projection and self._ruler_start_point is None:
+            return None
+        if self._ruler_start_point is not None and (pos - self._ruler_start_point).manhattanLength() > 1:
+            # find first point details
+            l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinatesRuler(self._ruler_start_point)
+            # find second point details
+            l1, m1, ra1, dec1, dist1, pa1, rh1, rm1, rs1, dsign1, dd1, dm1, ds1, Rd1, Rm1, Rs1, PAd1, x1, y1, val1, flag1 = self._convertCoordinates(pos)
+            # distance measurement
+            dist2, pa2 = Coordinates.angular_dist_pos_angle(ra, dec, ra1, dec1)
+            Rd2, Rm2, Rs2 = ModelClasses.Position.dec_dms_static(dist2)
+            pa2 *= 180 / math.pi
+            pa2 += 360 * (pa2 < 0)
+            # send current point B and ruler length AB to GUI display
+            msgtext = ""
+            msgtext += "\nB: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
+                rh1, rm1, rs1, dsign1, dd1, dm1, ds1, ra1 * 180 / math.pi, dec1 * 180 / math.pi, Rd1, Rm1, Rs1,
+                dist1 * 180 / math.pi, PAd1)
+            msgtext += "\n|AB|=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
+                Rd2, Rm2, Rs2, dist2 * 180 / math.pi, pa2)
+            self.plotShowMessage.emit(msgtext, 3000)"""
+
+    def _measureRuler(self, pos):
+        if not self.projection or pos is None or self._ruler_start_point is None:
+            return
+        # get distance between points, if <=1, report coordinates rather than a measurement
+        pos0 = self._ruler_start_point
+        pos1 = pos
+        # get point coords
+        if pos0 != pos1:
+            l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
+                pos0)
+            l1, m1, ra1, dec1, dist1, pa1, rh1, rm1, rs1, dsign1, dd1, dm1, ds1, Rd1, Rm1, Rs1, PAd1, x1, y1, val1, flag1 = self._convertCoordinates(
+                pos1)
+            # make tooltip text with HTML, and console/clipboard text without HTML
+            tiptext = "<NOBR>"
+            msgtext = ""
+            statustext = ""
+            if self.projection.has_projection():
+                tiptext += "A: %02dh%02dm%05.2fs %s%02d&deg;%02d'%05.2f\"  &nbsp; r<sub>0</sub>=%d&deg;%02d'%05.2f\"   &nbsp;  PA<sub>0</sub>=%06.2f&deg;" % (
+                    rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
+                msgtext += "A: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%06.2f\u00B0" % (
+                    rh, rm, rs, dsign, dd, dm, ds, ra * 180 / math.pi, dec * 180 / math.pi, Rd, Rm, Rs,
+                    dist * 180 / math.pi, PAd)
+            if x is not None:
+                tiptext += " &nbsp; x=%d y=%d value=blank" % (x, y) if flag else " &nbsp; x=%d y=%d value=%g" % (
+                    x, y, val)
+                msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
+            tiptext += "</NOBR><BR><NOBR>"
+            if self.projection.has_projection():
+                tiptext += "B: %02dh%02dm%05.2fs %s%02d&deg;%02d'%05.2f\" &nbsp;  r<sub>0</sub>=%d&deg;%02d'%05.2f\"  &nbsp;  PA<sub>0</sub>=%06.2f&deg;" % (
+                rh1, rm1, rs1, dsign1, dd1, dm1, ds1, Rd1, Rm1, Rs1, PAd1)
+                msgtext += "\nB: %2dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\" (%.6f\u00B0 %.6f\u00B0)  r=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
+                    rh1, rm1, rs1, dsign1, dd1, dm1, ds1, ra1 * 180 / math.pi, dec1 * 180 / math.pi, Rd1, Rm1, Rs1,
+                    dist1 * 180 / math.pi, PAd1)
+            if x1 is not None:
+                tiptext += " &nbsp; x=%d y=%d value=blank" % (x1, y1) if flag1 else " &nbsp; x=%d y=%d value=%g" % (
+                x1, y1, val1)
+                msgtext += "   x=%d y=%d value=blank" % (x1, y1) if flag1 else "   x=%d y=%d value=%g" % (
+                x1, y1, val1)
+            tiptext += "</NOBR><BR>"
+            # distance measurement
+            dist2, pa2 = Coordinates.angular_dist_pos_angle(ra, dec, ra1, dec1)
+            Rd2, Rm2, Rs2 = ModelClasses.Position.dec_dms_static(dist2)
+            pa2 *= 180 / math.pi
+            pa2 += 360 * (pa2 < 0)
+            tiptext += "<NOBR>|AB|=%d&deg;%02d'%05.2f\" &nbsp; PA<sub>AB</sub>=%06.2f&deg;</NOBR>" % (
+            Rd2, Rm2, Rs2, pa2)
+            msgtext += "\n|AB|=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
+                Rd2, Rm2, Rs2, dist2 * 180 / math.pi, pa2)
+            statustext += "\n|AB|=%d\u00B0%02d'%05.2f\" (%.6f\u00B0) PA=%6.2f\u00B0" % (
+                Rd2, Rm2, Rs2, dist2 * 180 / math.pi, pa2)
+            # make markers
+            marka, markb = TiggerPlotMarker(), TiggerPlotMarker()
+            marka.setRenderHint(QwtPlotItem.RenderAntialiased)
+            markb.setRenderHint(QwtPlotItem.RenderAntialiased)
+            marka.setValue(l, m)
+            markb.setValue(l1, m1)
+            marka.setLabel(self._markup_a_label)
+            markb.setLabel(self._markup_b_label)
+            marka.setSymbol(self._markup_absymbol)
+            markb.setSymbol(self._markup_absymbol)
+            # work out optimal label alignment
+            aligna = Qt.AlignRight if pos1.x() > pos0.x() else Qt.AlignLeft
+            alignb = Qt.AlignLeft if pos1.x() > pos0.x() else Qt.AlignRight
+            aligna |= Qt.AlignBottom if pos1.y() > pos0.y() else Qt.AlignTop
+            alignb |= Qt.AlignTop if pos1.y() > pos0.y() else Qt.AlignBottom
+            marka.setLabelAlignment(aligna)
+            markb.setLabelAlignment(alignb)
+            marka.setSpacing(0)
+            markb.setSpacing(0)
+            line = TiggerPlotCurve()
+            line.setRenderHint(QwtPlotItem.RenderAntialiased)
+            line.setData([l, l1], [m, m1])
+            line.setBrush(self._markup_brush)
+            line.setPen(self._markup_pen)
+            markup_items = [marka, markb, line]
+            # since this is going to hide the stats box, hide the colour zoom button too
+            self._qa_colorzoom.setVisible(False)
+            # calling QToolTip.showText() directly from here doesn't work, so set a timer on it
+            QTimer.singleShot(10, self._currier.curry(self._showCoordinateToolTip, tiptext))
+            # same deal for markup items
+            for item in markup_items:
+                item.setZ(Z_Markup)
+            QTimer.singleShot(10, self._currier.curry(self._addPlotMarkup, markup_items))
+            if len(msgtext) > 0:
+                self.plotShowMessage.emit(statustext, 10000)
+                self._rulerCompleteMsgText = msgtext
+                self._ruler_timer.start(1000)
+
+    def _measureRulerCompleted(self):
+        # this is called from self._ruler_timer for _measureRuler()
+        self._ruler_timer.stop()
+        # output to terminal
+        print(self._rulerCompleteMsgText)
+        # save to clipboard
+        QApplication.clipboard().setText(self._rulerCompleteMsgText + "\n")
+        QApplication.clipboard().setText(self._rulerCompleteMsgText + "\n", QClipboard.Selection)
+
+    def _showCoordinateToolTip(self, text, rect=True):
+        dprint(2, text)
+        location = self.plot.mapToGlobal((QPoint(0, 0)))
+        if rect:
+            # old line
+            # QToolTip.showText(self.plot.mapToGlobal(QPoint(0, 0)), text, self.plot, self.plot.rect(), 30000)
+            self.tigToolTip.showText(location=location, text=text)
+        else:
+            self.tigToolTip.showText(location=location, text=text)
+
+    def _imageRaised(self):
+        """This is called when an image is raised to the top"""
+        self._updatePsfMarker(None, replot=True)
+        self._removePlotMarkup()
+        self._image_subset = None
+
+    def _showPsfMarker(self, show):
+        self._psf_marker.setVisible(show)
+        self.plot.clearDrawCache()
+        self.plot.replot()
+
+    def _updatePsfMarker(self, rect=None, replot=False):
+        # show PSF if asked to
+        topimage = self._imgman and self._imgman.getTopImage()
+        pmaj, pmin, ppa = topimage.getPsfSize() if topimage else (0, 0, 0)
+        self._qa_show_psf.setVisible(bool(topimage and pmaj != 0))
+        self._psf_marker.setVisible(bool(topimage and pmaj != 0 and self._qa_show_psf.isChecked()))
+        if self._qa_show_psf.isVisible():
+            rect = rect or self._zoomer.zoomBase()
+            rect &= topimage.boundingRect()
+            dprint(1, "updating PSF for zoom rect", rect)
+            lm = rect.bottomLeft()
+            l00 = lm.x() + pmaj / 1.2
+            m00 = lm.y() - pmaj / 1.2
+            dprint(1, "drawing PSF at", l00, m00, "z", self._psf_marker.z())
+            arg = numpy.arange(0, 1.02, .02) * math.pi * 2
+            mp0, lp0 = pmaj * numpy.cos(arg) / 2, pmin * numpy.sin(arg) / 2  # angle 0 is m direction
+            c, s = numpy.cos(ppa), numpy.sin(ppa)
+            lp = lp0 * c + mp0 * s
+            mp = - lp0 * s + mp0 * c
+            self._psf_marker.setData(lp + l00, mp + m00)
+            if replot and self._psf_marker.isVisible():
+                self._replot()
+
+    def _replot(self):
+        dprint(1, "replot")
+        self.plot.clearDrawCache()
+        self.plot.replot()
+
+    def _addPlotMarkup(self, items):
+        """Adds a list of QwtPlotItems to the markup"""
+        self._removePlotMarkup(replot=False)
+        for item in items:
+            item.attach(self.plot)
+        self._plot_markup = items
+        self._replot()
+
+    def _removePlotMarkup(self, replot=True):
+        """Removes all markup items, and refreshes the plot if replot=True"""
+        for item in self._plot_markup:
+            item.detach()
+        if self._plot_markup and replot:
+            self.tigToolTip.hideText()
+            self._replot()
+        self._plot_markup = []
+
+    def _trackCoordinates(self, pos):
+        if not self.projection:
+            return None
+        # if Ctrl is pushed, get nearest source and make it "current"
+        if QApplication.keyboardModifiers() & (Qt.ControlModifier | Qt.ShiftModifier):
+            src = self.findNearestSource(pos, world=False, range=range)
+            if src:
+                self.model.setCurrentSource(src)
+        # get ra/dec coordinates of point
+        l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
+            pos)
+        #    text = "<P align=\"right\">%2dh%02dm%05.2fs %+2d&deg;%02d'%05.2f\""%(rh,rm,rs,dd,dm,ds)
+        # emit message as well
+        msgtext = ""
+        if self.projection.has_projection():
+            msgtext = "%02dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\"  r=%d\u00B0%02d'%05.2f\"  PA=%.2f\u00B0" % (
+                rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
+        # if we have an image, add pixel coordinates
+        image = self._imgman and self._imgman.getTopImage()
+        if image and x is not None:
+            msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
+            self._livezoom.trackImage(image, x, y)
+        self.plotShowMessage[str, int].emit(msgtext, 10000)
+        return msgtext
+
+    def _trackCoordinatesProfile(self, pos):
+        if not self.projection:
+            return None
+        # disabled as it is enabled in _trackCoordinates above.
+        # if Ctrl is pushed, get nearest source and make it "current"
+        #if QApplication.keyboardModifiers() & (Qt.ControlModifier | Qt.ShiftModifier):
+        #    src = self.findNearestSource(pos, world=False, range=range)
+        #    if src:
+        #        self.model.setCurrentSource(src)
+        # get ra/dec coordinates of point
+        l, m, ra, dec, dist, pa, rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd, x, y, val, flag = self._convertCoordinates(
+            pos)
+        #    text = "<P align=\"right\">%2dh%02dm%05.2fs %+2d&deg;%02d'%05.2f\""%(rh,rm,rs,dd,dm,ds)
+        # emit message as well
+        # leaving commented out as _trackCoordinates already has this
+        msgtext = ""
+        #if self.projection.has_projection():
+        #    msgtext = "%02dh%02dm%05.2fs %s%02d\u00B0%02d'%05.2f\"  r=%d\u00B0%02d'%05.2f\"  PA=%.2f\u00B0" % (
+        #        rh, rm, rs, dsign, dd, dm, ds, Rd, Rm, Rs, PAd)
+        # if we have an image, add pixel coordinates
+        image = self._imgman and self._imgman.getTopImage()
+        if image and x is not None:
+            # msgtext += "   x=%d y=%d value=blank" % (x, y) if flag else "   x=%d y=%d value=%g" % (x, y, val)
+            self._liveprofile.trackImage(image, x, y)
+
+    def _selectSources(self, sources, mode):
+        """Helper function to select sources in list"""
+        # turn list into set of ids
+        subset = set(map(id, sources))
+        updated = False
+        for src in self.model.sources:
+            newsel = src.selected
+            if id(src) in subset:
+                dprint(3, "selecting", src.name)
+                if mode & self.SelectionAdd:
+                    newsel = True
+                elif mode & self.SelectionRemove:
+                    newsel = False
+            elif mode & self.SelectionClear:
+                newsel = False
+            updated |= (newsel != src.selected)
+            src.selected = newsel
+        # emit signal if changed
+        if updated:
+            self.model.emitSelection(origin=self)
+
+    def _selectNearestSource(self, pos, world=True, range=10, mode=SelectionAdd):
+        """Selects or deselects source object nearest to the specified point (within range, in pixels).
+        Note that _mouse_mode == MouseDeselect will force mode=SelectionRemove.
+        'pos' is a QPointF/QwtDoublePoint object in lm coordinates if world=True, else a QPoint object."""
+        dprint(1, "selectNearestSource", pos)
+        # deselect mouse mode implies removing from selection, in all other modes we add
+        if self._mouse_mode == self.MouseDeselect:
+            mode = self.SelectionRemove
+        src = self.findNearestSource(pos, world=world, range=range)
+        if src:
+            self._selectSources([src], mode)
+
+    def _makeRectMarker(self, rect, pen):
+        x1, y1, x2, y2 = rect.getCoords()
+        line = TiggerPlotCurve()
+        line.setRenderHint(QwtPlotItem.RenderAntialiased)
+        line.setData([x1, x1, x2, x2, x1], [y1, y2, y2, y1, y1])
+        #      line.setBrush(self._stats_brush)
+        line.setPen(pen)
+        label = TiggerPlotMarker()
+        label.setRenderHint(QwtPlotItem.RenderAntialiased)
+        label.setValue(max(x1, x2), max(y1, y2))
+        text = QwtText("stats")
+        text.setColor(pen.color())
+        label.setLabel(text)
+        label.setLabelAlignment(Qt.AlignBottom | Qt.AlignRight)
+        return [line, label]
+
+    def _selectImageSubset(self, rect, image=None):
+        # make zoom button visible if subset is selected
+        self._qa_colorzoom.setVisible(bool(rect))
+        self._image_subset = rect
+        if rect is None:
+            self._removePlotMarkup()
+        else:
+            # get image stats
+            busy = BusyIndicator()
+            stats = self._imgman.getLMRectStats(self._image_subset)
+            busy.reset_cursor()
+            if stats is None:
+                self._removePlotMarkup()
+                self._image_subset = None
+                return
+            # make tooltip
+            DataValueFormat = "%.4g"
+            stats = list(stats)
+            stats1 = tuple(stats[:4] + [DataValueFormat % s for s in stats[4:9]] + stats[9:])
+            msgtext = "[%d:%d,%d:%d] min %s, max %s, mean %s, std %s, sum %s, np %d" % stats1
+            tiptext = """<P><NOBR>Region: [%d:%d,%d:%d]</NOBR><BR>
+        <NOBR>Stats: min %s, max %s, mean %s, std %s, sum %s, np %d</NOBR></BR>
+        Use the "Colour zoom" button on the left (or press Shift+F4) to set the current data subset and
+        intensity range to this image region.</P>""" % stats1
+            # make markup on plot to indicate current subset
+            markup_items = self._makeRectMarker(rect, self._stats_pen)
+            # calling QToolTip.showText() directly from here doesn't work, so set a timer on it
+            QTimer.singleShot(0, self._currier.curry(self._showCoordinateToolTip, tiptext))
+            # same deal for markup items
+            for item in markup_items:
+                item.setZ(Z_Markup)
+            QTimer.singleShot(10, self._currier.curry(self._addPlotMarkup, markup_items))
+            QApplication.clipboard().setText(msgtext + "\n")
+            QApplication.clipboard().setText(msgtext + "\n", QClipboard.Selection)
+            print(msgtext)
+
+    def _colourZoomIntoSubset(self):
+        # zoom into current image subset (if any), and hide the zoom button
+        dprint(1, self._image_subset)
+        if self._image_subset is not None:
+            self._imgman.setLMRectSubset(self._image_subset)
+            self._removePlotMarkup()
+            self._image_subset = None
+        self._qa_colorzoom.setVisible(False)
+
+    def _selectRectStats(self, rect):
+        image = self._imgman and self._imgman.getTopImage()
+        dprint(1, "subset selection", rect, "image:", image and image.boundingRect())
+        if not image or not rect.intersects(image.boundingRect()):
+            self._selectImageSubset(None)
+            return
+        zoomrect = image.boundingRect().intersected(rect)
+        dprint(1, "selecting image subset", zoomrect)
+        self._selectImageSubset(zoomrect, image)
+
+    def _selectRect(self, rect, world=True, mode=SelectionClear | SelectionAdd):
+        """Selects sources within the specified rectangle. For meaning of 'mode', see flags above.
+        'rect' is a QRectF/QwtDoubleRect object in lm coordinates if world=True, else a QRect object in screen coordinates."""
+        dprint(1, "selectRect", rect)
+        if not world:
+            rect = self.plot.screenRectToLm(rect)
+        sources = [marker.source() for marker in self._markers.values() if
+                   marker.isVisible() and rect.contains(marker.lmQPointF())]
+        if sources:
+            self._selectSources(sources, mode)
+
+    def _finalizeProvisionalZoom(self):
+        if self._provisional_zoom is not None:
+            self._zoomer.zoom(self._provisional_zoom)
+
+    def _plotProvisionalZoom(self, x, y, level, timeout=200):
+        """Called when mouse wheel is used to zoom in our out"""
+        self._provisional_zoom_level += level
+        self._zoomer_box.setVisible(False)
+        self._zoomer_label.setVisible(False)
+        if self._provisional_zoom_level > 0:
+            # make zoom box of size 2^level smaller than current screen
+            x1, y1, x2, y2 = self._zoomer.zoomRect().getCoords()
+            w = (x2 - x1) / 2 ** self._provisional_zoom_level
+            h = (y2 - y1) / 2 ** self._provisional_zoom_level
+            self._provisional_zoom = QRectF(x - w / 2, y - h / 2, w, h)
+            x1, y1, x2, y2 = self._provisional_zoom.getCoords()
+            self._zoomer_box.setData([x1, x2, x2, x1, x1], [y1, y1, y2, y2, y1])
+            self._zoomer_label.setValue(max(x1, x2), max(y1, y2))
+            self._zoomer_label_text.setText("zoom")
+            self._zoomer_label.setLabel(self._zoomer_label_text)
+            self._zoomer_box.setVisible(True)
+            self._zoomer_label.setVisible(True)
+        else:
+            maxout = -self._zoomer.zoomRectIndex()
+            self._provisional_zoom_level = level = max(self._provisional_zoom_level, maxout)
+            if self._provisional_zoom_level < 0:
+                self._zoomer_label.setValue(x, y)
+                self._zoomer_label_text.setText("zoom out %d" % abs(level) if level != maxout else "zoom out full")
+                self._zoomer_label.setLabel(self._zoomer_label_text)
+                self._zoomer_label.setVisible(True)
+                self._provisional_zoom = int(self._provisional_zoom_level)
+            else:
+                self._provisional_zoom = None
+        QTimer.singleShot(5, self._replot)
+        self._provisional_zoom_timer.start(timeout)
+
+    def _plotZoomed(self, rect):
+        dprint(2, "zoomed to", rect)
+        self._zoomer_box.setVisible(False)
+        self._zoomer_label.setVisible(False)
+        self._provisional_zoom = None
+        self._provisional_zoom_level = 0
+        self._zoomrect = QRectF(rect)  # make copy
+        self._qa_unzoom.setEnabled(rect != self._zoomer.zoomBase())
+        self._updatePsfMarker(rect, replot=True)
+
+    def _setGridCircleStepping(self, arcsec=DefaultGridStep_ArcSec):
+        """Changes the visible grid circles. None to disable."""
+        self._grid_step_arcsec = arcsec
+        self._updateContents()
+
+    def _setCustomGridCircleStepping(self):
+        """Opens dialog to get a custom grid step."""
+        text, ok = QInputDialog.getText(self, "Set custom grid step", """<P>
+      Specify a custom grid stepping as a value and a unit string.<BR>Recognized unit strings are
+      d or deg, ' (single quote) or arcmin, and " (double quote) or arcsec.<BR>Default is arcmin.</P>""",
+                                        text=self._grid_step_arcsec_str)
+        if text:
+            match = re.match("([-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)(d|deg|['\"]|arcmin)?$", text, re.I)
+            try:
+                value = float(match.group(1))
+            except:
+                QMessageBox.warning(self, "Invalid input", "Invalid input: \"%s\"" % text)
+                return
+            if round(value) == value:
+                value = int(value)
+            unit = match.group(5)
+            if unit in ("d", "deg"):
+                value *= 3600
+            elif not unit or unit in ("'", "arcmin"):
+                value *= 60
+        self._setGridCircleStepping(value or None)
+        self._setCustomGridCircleSteppingLabel()
+
+    def _setCustomGridCircleSteppingLabel(self):
+        """Changes the label of the custom grid step action."""
+        step = self._grid_step_arcsec
+        if not step:
+            self._grid_step_arcsec_str = ""
+        elif step < 60:
+            self._grid_step_arcsec_str = ("%f\"" if isinstance(step, float) else "%d\"") % step
+        elif step < 3600:
+            self._grid_step_arcsec_str = ("%f'" if step % 60 else "%d'") % (step / 60.)
+        else:
+            self._grid_step_arcsec_str = ("%fdeg" if step % 3600 else "%ddeg") % (step / 3600.)
+        if self._grid_step_arcsec_str:
+            self._qa_custom_grid.setText("Custom (%s)..." % self._grid_step_arcsec_str)
+        else:
+            self._qa_custom_grid.setText("Custom...")
+
+    def _updateContents(self, what=SkyModel.UpdateAll, origin=None):
+        # do nothing if updates are disabled (this is possible on startup, or when multiple
+        # things are being loaded), or if update is of no concern to us
+        if not self._updates_enabled or not what & (
+                SkyModel.UpdateSourceList | SkyModel.UpdateSourceContent | self.UpdateImages):
+            return
+        # clear any plot markup
+        dprint(2, "clearing plot markup")
+        for item in self._plot_markup:
+            item.detach()
+        self._plot_markup = []
+        self._image_subset = None
+        # clear plot, but do not delete items
+        self.projection = None
+        self.plot.clear()
+        self._psf_marker.attach(self.plot)
+        self._zoomer_box.attach(self.plot)
+        self._zoomer_label.attach(self.plot)
+        self._zoomer_box.setVisible(False)
+        self._zoomer_label.setVisible(False)
+        # get current image (None if no images)
+        self._image = self._imgman and self._imgman.getCenterImage()
+        # show/hide live zoomer with image
+        if self._image:
+            for tool in self._livezoom, self._liveprofile:
+                tool.makeAvailable(bool(self._image))
+        # enable or disable mouse modes as appropriate
+        self._mousemodes.setContext(has_image=bool(self._image), has_model=bool(self.model))
+        # do nothing if no image and no model
+        if not self._image and not self.model:
+            self.plot.setEnabled(False)
+            return
+        self.plot.setEnabled(True)
+        # Use projection of first image, or 'Sin' by default
+        if self._image:
+            self.projection = self._image.projection
+            dprint(1, "using projection from image", self._image.name)
+            ra, dec = self.projection.radec(0, 0)
+        else:
+            self.projection = Projection.FITSWCS_static(*self.model.fieldCenter())
+            dprint(1, "using default Sin projection")
+        # compute lm: dict from source ID to l,m tuple
+        if self.model:
+            self._source_lm = dict(
+                [(id(src), self.projection.lm(src.pos.ra, src.pos.dec)) for src in self.model.sources])
+        # now find plot extents
+        extent = [[0, 0], [0, 0]]
+        for iext in 0, 1:
+            if self._source_lm:
+                xmin = extent[iext][0] = min([lm[iext] for lm in self._source_lm.values()])
+                xmax = extent[iext][1] = max([lm[iext] for lm in self._source_lm.values()])
+                # add 5% on either side
+                margin = .05 * (xmax - xmin)
+                extent[iext][0] -= margin
+                extent[iext][1] += margin
+                dprint(2, "plot extents for model", extent)
+        # account for bounding rects of images
+        for img in ((self._imgman and self._imgman.getImages()) or []):
+            ext = img.getExtents()
+            dprint(2, "image extents", ext)
+            for i in 0, 1:
+                extent[i][0] = min(extent[i][0], ext[i][0])
+                extent[i][1] = max(extent[i][1], ext[i][1])
+        # if margins still not set, force them to 1x1 degree
+        for i in 0, 1:
+            if extent[i][0] == extent[i][1]:
+                extent[i] = [-DEG * 0.5, DEG * 0.5]
+        dprint(2, "plot extents for model & images", extent)
+        (lmin, lmax), (mmin, mmax) = extent
+        # adjust plot limits, if a fixed ratio is in effect, and set the zoom base
+        zbase = QRectF(QPointF(lmin, mmin), QPointF(lmax, mmax))
+        #    zbase = self._zoomer.adjustRect(zbase)
+        zooms = [zbase]
+        dprint(2, "zoom base, adjusted for aspect:", zbase)
+        # zooms = [ self._zoomer.adjustRect(zbase) ]
+        # if previously set zoom rect intersects the zoom base at all (and is not a superset), try to restore it
+        dprint(2, "previous zoom area:", self._zoomrect)
+        if self._zoomrect and self._zoomrect.intersects(zbase):
+            rect = self._zoomrect.intersected(zbase)
+            #      rect = self._zoomer.adjustRect(self._zoomrect.intersected(zbase))
+            if rect != zbase:
+                dprint(2, "will restore zoomed area", rect)
+                zooms.append(rect)
+        self._qa_unzoom.setEnabled(len(zooms) > 1)
+        self._provisional_zoom_level = 0
+        #    dprint(2,"adjusted for aspect ratio",lmin,lmax,mmin,mmax)
+        # reset plot limits   -- X axis inverted (L increases to left)
+        #    lmin,lmax,mmin,mmax = zbase.left(),zbase.right(),zbase.top(),zbase.bottom()
+        #    self.plot.setAxisScale(QwtPlot.yLeft,mmin,mmax)
+        #    self.plot.setAxisScale(QwtPlot.xBottom,lmax,lmin)
+        #    self.plot.axisScaleEngine(QwtPlot.xBottom).setAttribute(QwtScaleEngine.Inverted, True)
+        #    dprint(2,"setting zoom base",zbase)
+        #    self._zoomer.setZoomBase(zbase)
+        dprint(5, "drawing grid")
+        # add grid lines & circles
+        circstep = self._grid_step_arcsec
+        if circstep:
+            self._grid = [TiggerPlotCurve(), TiggerPlotCurve()]
+            self._grid[0].setRenderHint(QwtPlotItem.RenderAntialiased)
+            self._grid[1].setRenderHint(QwtPlotItem.RenderAntialiased)
+            self._grid[0].setData([lmin, lmax], [0, 0])
+            self._grid[1].setData([0, 0], [mmin, mmax])
+            # see how many units (of arcminute) fit in max diagonal direction
+            maxr = int(round(math.sqrt(lmax ** 2 + mmax ** 2) / (DEG / 3600)))
+            # cache sines and cosines of curve argument
+            angles = numpy.array(list(range(0, 361, 5))) * DEG
+            sines = numpy.sin(angles)
+            cosines = numpy.cos(angles)
+            # make circles
+            for r in numpy.arange(circstep, maxr, circstep):
+                # find radius in each direction, by projecting a point
+                rl, dum = self.projection.offset(r * DEG / 3600, 0)
+                dum, rm = self.projection.offset(0, r * DEG / 3600)
+                # make curve
+                curve = TiggerPlotCurve()
+                curve.setRenderHint(QwtPlotItem.RenderAntialiased)
+                x, y = rl * cosines, rm * sines
+                curve.setData(x, y)
+                curve.setCurveAttribute(QwtPlotCurve.Fitted, True)
+                self._grid.append(curve)
+                # make a text label and marker
+                marker = TiggerPlotMarker()
+                marker.setRenderHint(QwtPlotItem.RenderAntialiased)
+                m, s = divmod(r, 60)
+                d, m = divmod(m, 60)
+                if d:
+                    label = "%d&deg;%02d'%02d\"" % (d, m, s) if s else (
+                        "%d&deg;%02d'" % (d, m) if m else "%d&deg;" % d)
+                elif m:
+                    label = "%d'%02d\"" % (m, s) if s else "%d'" % m
+                else:
+                    label = "%d\"" % s
+                text = QwtText(label, QwtText.RichText)
+                text.setColor(self._grid_color)
+                marker.setValue(x[0], y[0])
+                marker.setLabel(text)
+                marker.setLabelAlignment(Qt.AlignRight | Qt.AlignBottom)
+                marker.setZ(Z_Grid)
+                marker.attach(self.plot)
+            for gr in self._grid:
+                gr.setPen(self._grid_pen)
+                gr.setZ(Z_Grid)
+                gr.attach(self.plot)
+        # make a new set of source markers, since either the image or the model may have been updated
+        if self.model:
+            dprint(5, "making skymodel markers")
+            # compute min/max brightness
+            # brightnesses <=1e-20 are specifically excluded (as they're probably "dummy" sources, etc.)
+            b = [abs(src.brightness()) for src in self.model.sources if abs(src.brightness()) > 1e-20]
+            self._min_bright = min(b) if b else 0
+            self._max_bright = max(b) if b else 0
+            # make items for every object in the model
+            self._markers = {}
+            for isrc, src in enumerate(self.model.sources):
+                l, m = self._source_lm[id(src)]
+                self._markers[src.name] = marker = makeSourceMarker(src, l, m, self.getSymbolSize(src), self.model,
+                                                                    self._imgman)
+        # now (re)attach the source markers, since the plot has been cleared
+        for marker in self._markers.values():
+            marker.attach(self.plot)
+        # attach images to plot
+        if self._imgman:
+            dprint(5, "attaching images")
+            self._imgman.attachImagesToPlot(self.plot)
+        # update the PlotZoomer with our set of zooms. This implictly causes a plot update
+        dprint(5, "updating zoomer")
+        self._zoomer.setZoomStack(zooms, len(zooms) - 1)
+        self._updatePsfMarker(None, replot=True)
+        #  self.plot.replot()  # this shouldn't be needed as it is handled in the line above.
+
+    def setModel(self, model):
+        self._source_lm = {}
+        self._markers = {}
+        self.model = model
+        dprint(2, "setModel", model)
+        if model:
+            # connect signals
+            self.model.connect("updated", self.postUpdateEvent)
+            self.model.connect("selected", self.updateModelSelection)
+            self.model.connect("changeCurrentSource", self.setCurrentSource)
+            self.model.connect("changeGroupingStyle", self.changeGroupingStyle)
+        # update plot
+        self.postUpdateEvent(SkyModel.UpdateAll)
+
+    def _exportPlotToPNG(self, filename=None):
+        if not filename:
+            if not self._export_png_dialog:
+                dialog = self._export_png_dialog = QFileDialog(self, "Export plot to PNG", ".", "*.png")
+                dialog.setDefaultSuffix("png")
+                dialog.setFileMode(QFileDialog.AnyFile)
+                dialog.setAcceptMode(QFileDialog.AcceptSave)
+                dialog.setModal(True)
+                dialog.filesSelected.connect(self._exportPlotToPNG)
+            return self._export_png_dialog.exec_() == QDialog.Accepted
+        busy = BusyIndicator()
+        if isinstance(filename, QStringList):
+            filename = filename[0]
+        filename = str(filename)
+        # make QPixmap
+        pixmap = self.plot.grab()  # Qt 5 method
+        # old method below
+        """pixmap = QPixmap(self.plot.width(), self.plot.height())
+        pixmap.fill(self._bg_color)
+        painter = QPainter(pixmap)
+        # use QwtPlot implementation of draw canvas, since we want to avoid caching
+        QwtPlot.drawCanvas(self.plot, painter)
+        painter.end()"""
+        # save to file
+        try:
+            pixmap.save(filename, "PNG")
+        except Exception as exc:
+            self.plotShowErrorMessage.emit("Error writing %s: %s" % (filename, str(exc)))
+            busy.reset_cursor()
+        else:
+            busy.reset_cursor()
+            self.plotShowMessage[str].emit("Exported plot to file %s" % filename)
+
+    def setCurrentSource(self, src, src0=None, origin=None):
+        dprint(2, "setCurrentSource", src and src.name, src0 and src0.name, origin)
+        if self.model and self.model.curgroup.style.apply:
+            for s in src, src0:
+                marker = s and self._markers.get(s.name)
+                marker and marker.resetStyle()
+            self.plot.clearDrawCache()
+            self.plot.replot()
+
+    def updateModelSelection(self, nsel=0, origin=None):
+        """This is callled when something changes the set of selected model sources"""
+        # call checkSelected() on all plot markers, replot if any return True
+        if [marker for marker in iter(self._markers.values()) if marker.checkSelected()]:
+            self.plot.clearDrawCache()
+            self.plot.replot()
+
+    def changeGroupingStyle(self, group, origin=None):
+        # call changeStyle() on all plot markers, replot if any return True
+        if [marker for marker in iter(self._markers.values()) if marker.changeStyle(group)]:
+            self.plot.clearDrawCache()
+            self.plot.replot()
+
+    def getSymbolSize(self, src):
+        return (max(math.log10(abs(src.brightness())) - math.log10(self._min_bright) + 1, 1)) * 3
--- tigger-1.6.0.orig/TigGUI/SkyModelTreeWidget.py
+++ tigger-1.6.0/TigGUI/SkyModelTreeWidget.py
@@ -1,741 +1,741 @@
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-from builtins import chr
-
-from PyQt5.Qt import QWidget, QHBoxLayout, QComboBox, QLabel, QToolButton, QVBoxLayout, \
-    QPushButton, Qt, QTreeWidgetItem, QAbstractItemView, QHeaderView, QTreeWidget, QAction, QEvent, QSize, \
-    QSizePolicy, QTableWidget, QTableWidgetItem, QItemSelectionRange, QItemSelection, QFontMetrics, QFont, \
-    QApplication, QItemSelectionModel
-from Tigger.Models import ModelClasses, PlotStyles
-from Tigger.Models.SkyModel import SkyModel
-
-import TigGUI.kitties.utils
-import TigGUI.kitties.widgets
-from TigGUI.kitties.utils import PersistentCurrier
-from TigGUI.kitties.widgets import BusyIndicator
-
-QString = str
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="tw")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-ViewColumns = ["name", "RA", "RA err", "Dec", "Dec err", "r", "type",
-               "Iapp", "I", "I err", "Q", "Q err", "U", "U err", "V", "V err", "RM", "RM err", "spi", "spi err",
-               "shape", "shape err", "tags"]
-
-# ugly, but better than the global() hack this was before.
-ColumnName = 0
-ColumnRa = 1
-ColumnRa_err = 2
-ColumnDec = 3
-ColumnDec_err = 4
-ColumnR = 5
-ColumnType = 6
-ColumnIapp = 7
-ColumnI = 8
-ColumnI_err = 9
-ColumnQ = 10
-ColumnQ_err = 11
-ColumnU = 12
-ColumnU_err = 13
-ColumnV = 14
-ColumnV_err = 15
-ColumnRm = 16
-ColumnRm_err = 17
-ColumnSpi = 18
-ColumnSpi_err = 19
-ColumnShape = 20
-ColumnShape_err = 21
-ColumnTags = 22
-
-NumColumns = len(ViewColumns)
-
-DEG = math.pi / 180
-
-# Qt-4.6 and up (PyQt 4.7 and up) has very slow QTreeWidgetItem updates, determine version here
-from PyQt5 import QtCore
-
-_SLOW_QTREEWIDGETITEM = QtCore.PYQT_VERSION_STR >= '4.7'
-
-
-class SkyModelTreeWidget(TigGUI.kitties.widgets.ClickableTreeWidget):
-    """This implements a QTreeWidget for sky models"""
-
-    def __init__(self, *args):
-        TigGUI.kitties.widgets.ClickableTreeWidget.__init__(self, *args)
-        self._currier = PersistentCurrier()
-        self.model = None
-        # insert columns
-        self.setHeaderLabels(ViewColumns)
-        self.headerItem().setText(ColumnIapp, "I(app)")
-        self.header().setSectionsMovable(False)
-        self.header().setSectionsClickable(True)
-        self.setSortingEnabled(True)
-        self.setRootIsDecorated(False)
-        self.setEditTriggers(QAbstractItemView.AllEditTriggers)
-        self.setMouseTracking(True)
-        # set column width modes
-        self.header().setStretchLastSection(False)
-        self.header().setSectionResizeMode(QHeaderView.ResizeToContents)
-        ## self.setTextAlignment(ColumnR,Qt.AlignRight)
-        ## self.setTextAlignment(ColumnType,Qt.AlignHCenter)
-        # _column_enabled[i] is True if column is available in the model.
-        # _column_show[i] is True if column is currently being shown (via a view control)
-        self._column_enabled = [True] * NumColumns
-        self._column_shown = [True] * NumColumns
-        # other listview init
-        self.header().show()
-        self.setSelectionMode(QTreeWidget.ExtendedSelection)
-        self.setAllColumnsShowFocus(True)
-        ## self.setShowToolTips(True)
-        self._updating_selection = False
-        self.setRootIsDecorated(False)
-        # connect signals to track selected sources
-        self.itemSelectionChanged.connect(self._selectionChanged)
-        self.itemEntered[QTreeWidgetItem, int].connect(self._itemHighlighted)
-        # add "View" controls for different column categories
-        self._column_views = []
-        self._column_widths = {}
-        self.addColumnCategory("Position", [ColumnRa, ColumnDec])
-        self.addColumnCategory("Position errors", [ColumnRa_err, ColumnDec_err], False)
-        self.addColumnCategory("Type", [ColumnType])
-        self.addColumnCategory("Flux", [ColumnIapp, ColumnI])
-        self.addColumnCategory("Flux errors", [ColumnI_err], False)
-        self.addColumnCategory("Polarization", [ColumnQ, ColumnU, ColumnV, ColumnRm])
-        self.addColumnCategory("Polarization errors", [ColumnQ_err, ColumnU_err, ColumnV_err, ColumnRm_err], False)
-        self.addColumnCategory("Spectrum", [ColumnSpi])
-        self.addColumnCategory("Spectrum errors", [ColumnSpi_err], False)
-        self.addColumnCategory("Shape", [ColumnShape])
-        self.addColumnCategory("Shape errors", [ColumnShape_err], False)
-        self.addColumnCategory("Tags", [ColumnTags])
-
-    def _showColumn(self, col, show=True):
-        """Shows or hides the specified column.
-        (When hiding, saves width of column to internal array so that it can be restored properly.)"""
-        hdr = self.header()
-        hdr.setSectionHidden(col, not show)
-        if show:
-            if not hdr.sectionSize(col):
-                hdr.resizeSection(col, self._column_widths[col])
-                hdr.setResizeMode(col, QHeaderView.ResizeToContents)
-        else:
-            if hdr.sectionSize(col):
-                self._column_widths[col] = hdr.sectionSize(col)
-
-    def _enableColumn(self, column, enable=True):
-        busy = BusyIndicator()
-        self._column_enabled[column] = enable
-        self._showColumn(column, enable and self._column_shown[column])
-        busy.reset_cursor()
-
-    def _showColumnCategory(self, columns, show):
-        busy = BusyIndicator()
-        for col in columns:
-            self._column_shown[col] = show
-            self._showColumn(col, self._column_enabled[col] and show)
-        busy.reset_cursor()
-
-    def _selectionChanged(self):
-        if self._updating_selection:
-            return
-        for item in self.iterator():
-            item._src.select(item.isSelected())
-        self.model.emitSelection(origin=self)
-
-    def _itemHighlighted(self, item, col):
-        dprint(3, "highlighting", item._src.name)
-        self.model.setCurrentSource(item._src, origin=self)
-
-    def viewportEvent(self, event):
-        if event.type() in (QEvent.Leave, QEvent.FocusOut) and self.model:
-            self.model.setCurrentSource(None, origin=self)
-        return QTreeWidget.viewportEvent(self, event)
-
-    def addColumnCategory(self, name, columns, visible=True):
-        qa = QAction(name, self)
-        qa.setCheckable(True)
-        qa.setChecked(visible)
-        if not visible:
-            self._showColumnCategory(columns, False)
-        qa.toggled[bool].connect(self._currier.curry(self._showColumnCategory, columns))
-        self._column_views.append((name, qa, columns))
-
-    def clear(self):
-        TigGUI.kitties.widgets.ClickableTreeWidget.clear(self)
-        self.model = None
-        self._itemdict = {}
-
-    def setModel(self, model):
-        self.model = model
-        self._refreshModel(SkyModel.UpdateAll)
-        self.model.connect("changeCurrentSource", self._updateCurrentSource)
-        self.model.connect("changeGroupingVisibility", self.changeGroupingVisibility)
-        self.model.connect("selected", self._updateModelSelection)
-        self.model.connect("updated", self._refreshModel)
-
-    def _refreshModel(self, what=SkyModel.UpdateAll, origin=None):
-        if origin is self or not what & (SkyModel.UpdateSourceList | SkyModel.UpdateSourceContent):
-            return
-        # if only selection was changed, take shortcut
-        if what & SkyModel.UpdateSelectionOnly:
-            dprint(2, "model update -- selection only")
-            return self._refreshSelectedItems(origin)
-        busy = BusyIndicator()
-        # else repopulate widget completely
-        dprint(2, "model update -- complete")
-        TigGUI.kitties.widgets.ClickableTreeWidget.clear(self)
-        dprint(2, "creating model items")
-        items = [SkyModelTreeWidgetItem(src) for src in self.model.sources]
-        self._itemdict = dict(list(zip([src.name for src in self.model.sources], items)))
-        dprint(2, "adding to tree widget")
-        self.addTopLevelItems(items)
-        self.header().updateGeometry()
-        # show/hide columns based on tag availability
-        self._enableColumn(ColumnIapp, 'Iapp' in self.model.tagnames)
-        self._enableColumn(ColumnR, 'r' in self.model.tagnames)
-        dprint(2, "re-sorting")
-        self.sortItems(('Iapp' in self.model.tagnames and ColumnIapp) or ColumnI, Qt.DescendingOrder)
-        busy.reset_cursor()
-
-    def addColumnViewActionsTo(self, menu):
-        for name, qa, columns in self._column_views:
-            menu.addAction(qa)
-
-    def _updateCurrentSource(self, src, src0=None, origin=None):
-        # if origin is self:
-        # return
-        # dehighlight old item
-        item = src0 and self._itemdict.get(src0.name)
-        if item:
-            item.setHighlighted(False)
-        # scroll to new item, if found
-        item = src and self._itemdict.get(src.name)
-        if item:
-            item.setHighlighted(True, origin is not self)
-            if origin is not self:
-                self.scrollToItem(item)
-
-    def _updateModelSelection(self, nsel, origin=None):
-        """This is called when some other widget (origin!=self) changes the set of selected model sources"""
-        if origin is self:
-            return
-        self._updating_selection = True
-        ## this is very slow because of setSelected()
-        #    for item in self.iterator():
-        #     item.setSelected(item._src.selected)
-        selection = QItemSelection()
-        for item in self.iterator():
-            if item._src.selected:
-                selection.append(
-                    QItemSelectionRange(self.indexFromItem(item, 0), self.indexFromItem(item, self.columnCount() - 1)))
-        self.selectionModel().select(selection, QItemSelectionModel.ClearAndSelect)
-        self.changeGroupingVisibility(None, origin=origin)
-        self._updating_selection = False
-
-    def _refreshSelectedItems(self, origin=None):
-        busy = BusyIndicator()
-        dprint(3, "refreshing selected items")
-        for item in self.iterator():
-            if item.isSelected():
-                dprint(4, "resetting item", item._src.name)
-                item.setSource(item._src)
-        dprint(3, "refreshing selected items done")
-        busy.reset_cursor()
-
-    def changeGroupingVisibility(self, group, origin=None):
-        if origin is self:
-            return
-        for item in self.iterator():
-            # collect show_list values from groupings to which this source belongs (default group excepted)
-            show = [group.style.show_list for group in self.model.groupings if
-                    group is not self.model.defgroup and group.func(item._src)]
-            # if at least one group is showing explicitly, show
-            # else if at least one group is hiding explicitly, hide
-            # else use default setting
-            if max(show) == PlotStyles.ShowAlways:
-                visible = True
-            elif min(show) == PlotStyles.ShowNot:
-                visible = False
-            else:
-                visible = bool(self.model.defgroup.style.show_list)
-            # set visibility accordingly
-            item.setHidden(not visible)
-
-    TagsWithOwnColumn = set(["Iapp", "r"])
-
-
-class SkyModelTreeWidgetItem(QTreeWidgetItem):
-    _fonts = None
-    _fontmetrics = None
-
-    @staticmethod
-    def _initFonts():
-        """Initializes fonts on fitrst call"""
-        if SkyModelTreeWidgetItem._fonts is None:
-            stdfont = QApplication.font()
-            boldfont = QFont(stdfont)
-            boldfont.setBold(True)
-            SkyModelTreeWidgetItem._fonts = [stdfont, boldfont]
-            SkyModelTreeWidgetItem._fontmetrics = QFontMetrics(boldfont)
-
-    def __init__(self, src, *args):
-        QTreeWidgetItem.__init__(self, *args)
-        self._src = src
-        # fonts
-        self._initFonts()
-        # array of actual (i.e. numeric) column values
-        self._values = [0.0] * NumColumns
-        # set text alignment
-        for icol in range(NumColumns):
-            self.setTextAlignment(icol, Qt.AlignLeft)
-        self.setTextAlignment(ColumnR, Qt.AlignRight)
-        self.setTextAlignment(ColumnType, Qt.AlignHCenter)
-        # setup source
-        self._highlighted = self._highlighted_visual = False
-        self.setSource(src)
-
-    def setHighlighted(self, highlighted=True, visual=False):
-        #    global _SLOW_QTREEWIDGETITEM
-        #    if 1: # not _SLOW_QTREEWIDGETITEM:
-        visual = True
-        dprint(3, self._src.name, "highlighted", highlighted, visual)
-        if highlighted != self._highlighted:
-            #      brush = QApplication.palette().alternateBase() if highlighted else QApplication.palette().base()
-            #      for col in range(self.columnCount()):
-            #        self.setBackground(col,brush)
-            if highlighted and visual:
-                self.setFont(0, self._fonts[1])
-            elif not highlighted and self._highlighted_visual:
-                self.setFont(0, self._fonts[0])
-            self._highlighted = highlighted
-            self._highlighted_visual = visual
-
-    @staticmethod
-    def _angErrToStr(value):
-        """helper method: converts angular error to string representation in deg or arcmin or arcsec"""
-        arcsec = (value / DEG) * 3600
-        if arcsec < 60:
-            return chr(0xB1) + "%.2g\"" % arcsec
-        elif arcsec < 3600:
-            return chr(0xB1) + "%.2f'" % (arcsec * 60)
-        else:
-            return chr(0xB1) + "%.2f%s" % (arcsec * 3600, chr(0xB0))
-
-    def setSource(self, src):
-        # name
-        dprint(3, "setSource 1", src.name)
-        self.setColumn(ColumnName, src.name)
-        self.setSizeHint(0, QSize(self._fontmetrics.width("x" + src.name), 0))
-        # coordinates
-        self.setColumn(ColumnRa, src.pos.ra, "%2dh%02dm%05.2fs" % src.pos.ra_hms())
-        self.setColumn(ColumnDec, src.pos.dec, ("%s%2d" + chr(0xB0) + "%02d'%05.2f\"") %
-                       src.pos.dec_sdms())
-        if src.pos.ra_err is not None:
-            self.setColumn(ColumnRa_err, src.pos.ra_err, self._angErrToStr(src.pos.ra_err))
-        if src.pos.dec_err is not None:
-            self.setColumn(ColumnDec_err, src.pos.dec_err, self._angErrToStr(src.pos.dec_err))
-        if hasattr(src, 'r'):
-            self.setColumn(ColumnR, src.r, "%.1f'" % (src.r * 180 * 60 / math.pi))
-        # type
-        self.setColumn(ColumnType, src.typecode)
-        # flux
-        if hasattr(src, 'Iapp'):
-            self.setColumn(ColumnIapp, src.Iapp, "%.3g" % src.Iapp)
-        for stokes in "IQUV":
-            stk = getattr(src.flux, stokes, None)
-            stk_err = getattr(src.flux, stokes + "_err", None)
-            if stk is not None:
-                self.setColumn(globals()['Column' + stokes], stk, "%.3g" % stk)
-            if stk_err is not None:
-                self.setColumn(globals()['Column' + stokes + "_err"], stk_err, chr(0xB1) + "%.2g" % stk_err)
-        if hasattr(src.flux, 'rm'):
-            self.setColumn(ColumnRm, src.flux.rm, "%.2f" % src.flux.rm)
-            if hasattr(src.flux, 'rm_err'):
-                self.setColumn(ColumnRm_err, src.flux.rm_err, chr(0xB1) + "%.2f" % src.flux.rm)
-        # spi
-        if isinstance(src.spectrum, ModelClasses.SpectralIndex):
-            spi = getattr(src.spectrum, 'spi', 0)
-            if not isinstance(spi, (list, tuple)):
-                spi = [spi]
-            spi = ",".join(["%.2f" % x for x in spi])
-            self.setColumn(ColumnSpi, src.spectrum.spi, spi)
-            spierr = getattr(src.spectrum, 'spi_err', None)
-            if spierr is not None:
-                if not isinstance(spierr, (list, tuple)):
-                    spierr = [spierr]
-                spierr = ",".join(["%.2f" % x for x in spierr])
-                self.setColumn(ColumnSpi_err, src.spectrum.spi_err, chr(0xB1) + spierr)
-        # shape
-        shape = getattr(src, 'shape', None)
-        if isinstance(shape, ModelClasses.ModelItem):
-            shapeval = shape.getShape()
-            shapestr = shape.strDesc(delimiters=('"', chr(0xD7), chr(0x21BA), chr(0xB0)))
-            self.setColumn(ColumnShape, shapeval, shapestr)
-            errval = shape.getShapeErr()
-            if errval:
-                errstr = shape.strDescErr(delimiters=('"', chr(0xD7), chr(0x21BA), chr(0xB0)))
-                self.setColumn(ColumnShape_err, errval, chr(0xB1) + errstr)
-        dprint(3, "setSource 3", src.name)
-        # Tags. Tags are all extra attributes that do not have a dedicated column (i.e. not Iapp or r), and do not start
-        # with "_" (which is reserved for internal attributes)
-
-        ## the complexity below seems entirely unnecessary, since sorting the tag strings automatically puts "_" first,
-        ## "-" second, and alphabet afterwards
-
-        # truetags = []
-        # falsetags = []
-        # othertags = []
-        # for attr,val in src.getExtraAttributes():
-        # if attr[0] != "_" and attr not in SkyModelTreeWidget.TagsWithOwnColumn:
-        # if val is False:
-        # falsetags.append("-"+attr)
-        # elif val is True:
-        # truetags.append("+"+attr)
-        # else:
-        # othertags.append("%s=%s"%(attr,str(val)))
-        # for tags in truetags,falsetags,othertags:
-        # tags.sort()
-        # self.setColumn(ColumnTags,tags," ".join(truetags+falsetags+othertags))
-
-        # so instead:
-        tags = ["+" + attr if val is True else "-" + attr if val is False else "%s=%s" % (attr, str(val))
-                for attr, val in src.getExtraAttributes()
-                if attr[0] != "_" and attr not in SkyModelTreeWidget.TagsWithOwnColumn]
-        tagstr = " ".join(sorted(tags))
-        dprint(3, "setSource 4", src.name)
-        self.setColumn(ColumnTags, tags, tagstr)
-        dprint(3, "setSource 5", src.name)
-        dprint(3, "setSource done", src.name)
-
-    def setColumn(self, icol, value, text=None):
-        """helper function to set the value of a column"""
-        if text is None:
-            text = str(value)
-        self.setText(icol, text)
-        self._values[icol] = value
-
-    def __lt__(self, other):
-        icol = self.treeWidget().sortColumn()
-        if icol is not None:
-            if isinstance(other, SkyModelTreeWidgetItem):
-                if self._values[icol] is not None and other._values[icol] is not None:
-                    if isinstance(self._values[icol], type(other._values[icol])):
-                        return self._values[icol] < other._values[icol]
-                    else:
-                        return False
-                else:
-                    return False
-            else:
-                if self._text(icol) is not None and other.text(icol) is not None:
-                    if isinstance(self._text(icol), type(other.text(icol))):
-                        return self.text(icol) < other.text(icol)
-                    else:
-                        return False
-                else:
-                    return False
-        else:
-            return False
-
-    def __ge__(self, other):
-        return other < self
-
-
-class ModelGroupsTable(QWidget):
-    EditableAttrs = [attr for attr in PlotStyles.StyleAttributes if attr in PlotStyles.StyleAttributeOptions]
-    ColList = 3
-    ColPlot = 4
-    ColApply = 5
-    AttrByCol = dict([(i + 6, attr) for i, attr in enumerate(EditableAttrs)])
-
-    def __init__(self, parent, *args):
-        QWidget.__init__(self, parent, *args)
-        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(0, 0, 0, 0)
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lbl = QLabel(QString("<nobr><b>Source groupings:</b></nobr>"), self)
-        lo1.addWidget(lbl, 0)
-        lo1.addStretch(1)
-        # add show/hide button
-        self._showattrbtn = QPushButton(self)
-        self._showattrbtn.setMinimumWidth(256)
-        lo1.addWidget(self._showattrbtn, 0)
-        lo1.addStretch()
-        self._showattrbtn.clicked.connect(self._togglePlotControlsVisibility)
-        # add table
-        self.table = QTableWidget(self)
-        lo.addWidget(self.table)
-        self.table.cellChanged[int, int].connect(self._valueChanged)
-        self.table.setSelectionMode(QTableWidget.NoSelection)
-        # setup basic columns
-        self.table.setColumnCount(6 + len(self.EditableAttrs))
-        for i, label in enumerate(("grouping", "total", "selection", "list", "plot", "style")):
-            self.table.setHorizontalHeaderItem(i, QTableWidgetItem(label))
-        self.table.horizontalHeader().setSectionHidden(self.ColApply, True)
-        # setup columns for editable grouping attributes
-        for i, attr in self.AttrByCol.items():
-            self.table.setHorizontalHeaderItem(i, QTableWidgetItem(PlotStyles.StyleAttributeLabels[attr]))
-            self.table.horizontalHeader().setSectionHidden(i, True)
-        self.table.verticalHeader().hide()
-        # other internal init
-        self._attrs_shown = False
-        self._togglePlotControlsVisibility()
-        self.model = None
-        self._setting_model = False
-        self._currier = PersistentCurrier()
-        # row of 'selected' grouping
-        self._irow_selgroup = 0
-
-    def clear(self):
-        self.table.setRowCount(0)
-        self.model = None
-
-    # setup mappings from the group.show_plot attribute to check state
-    ShowAttrToCheckState = {PlotStyles.ShowNot: Qt.Unchecked,
-                            PlotStyles.ShowDefault: Qt.PartiallyChecked,
-                            PlotStyles.ShowAlways: Qt.Checked}
-    CheckStateToShowAttr = dict([(val, key) for key, val in ShowAttrToCheckState.items()])
-
-    def _makeCheckItem(self, name, group, attr):
-        item = QTableWidgetItem(name)
-        if group is self.model.defgroup:
-            item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsUserCheckable)
-            item.setCheckState(Qt.Checked if getattr(group.style, attr) else Qt.Unchecked)
-        else:
-            item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsUserCheckable | Qt.ItemIsTristate)
-            item.setCheckState(self.ShowAttrToCheckState[getattr(group.style, attr)])
-        return item
-
-    def _updateModel(self, what=SkyModel.UpdateAll, origin=None):
-        if origin is self or not what & (SkyModel.UpdateTags | SkyModel.UpdateGroupStyle):
-            return
-        model = self.model
-        self._setting_model = True  # to ignore cellChanged() signals (in valueChanged())
-        # _item_cb is a dict (with row,col keys) containing the widgets (CheckBoxes ComboBoxes) per each cell
-        self._item_cb = {}
-        # lists of "list" and "plot" checkboxes per each grouping (excepting the default grouping); each entry is an (row,col,item) tuple.
-        # used as argument to self._showControls()
-        self._list_controls = []
-        self._plot_controls = []
-        # list of selection callbacks (to which signals are connected)
-        self._callbacks = []
-        # set requisite number of rows,and start filling
-        self.table.setRowCount(len(model.groupings))
-        for irow, group in enumerate(model.groupings):
-            self.table.setItem(irow, 0, QTableWidgetItem(group.name))
-            if group is model.selgroup:
-                self._irow_selgroup = irow
-            # total # source in group: skip for "current"
-            if group is not model.curgroup:
-                self.table.setItem(irow, 1, QTableWidgetItem(str(group.total)))
-            # selection controls: skip for current and selection
-            if group not in (model.curgroup, model.selgroup):
-                btns = QWidget()
-                lo = QHBoxLayout(btns)
-                lo.setContentsMargins(0, 0, 0, 0)
-                lo.setSpacing(0)
-                # make selector buttons (depending on which group we're in)
-                if group is model.defgroup:
-                    Buttons = (
-                        ("+", lambda src, grp=group: True, "select all sources"),
-                        ("-", lambda src, grp=group: False, "unselect all sources"))
-                else:
-                    Buttons = (
-                        ("=", lambda src, grp=group: grp.func(src), "select only this grouping"),
-                        ("+", lambda src, grp=group: src.selected or grp.func(src), "add grouping to selection"),
-                        ("-", lambda src, grp=group: src.selected and not grp.func(src),
-                         "remove grouping from selection"),
-                        ("&&", lambda src, grp=group: src.selected and grp.func(src),
-                         "intersect selection with grouping"))
-                lo.addStretch(1)
-                for label, predicate, tooltip in Buttons:
-                    btn = QToolButton(btns)
-                    btn.setText(label)
-                    btn.setMinimumWidth(24)
-                    btn.setMaximumWidth(24)
-                    btn.setToolTip(tooltip)
-                    lo.addWidget(btn)
-                    # add callback
-                    btn.clicked.connect(self._currier.curry(self.selectSources, predicate))
-                lo.addStretch(1)
-                self.table.setCellWidget(irow, 2, btns)
-            # "list" checkbox (not for current and selected groupings: these are always listed)
-            if group not in (model.curgroup, model.selgroup):
-                item = self._makeCheckItem("", group, "show_list")
-                self.table.setItem(irow, self.ColList, item)
-                item.setToolTip("""<P>If checked, sources in this grouping will be listed in the source table. If un-checked, sources will be
-            excluded from the table. If partially checked, then the default list/no list setting of "all sources" will be in effect.
-            </P>""")
-            # "plot" checkbox (not for the current grouping, since that's always plotted)
-            if group is not model.curgroup:
-                item = self._makeCheckItem("", group, "show_plot")
-                self.table.setItem(irow, self.ColPlot, item)
-                item.setToolTip("""<P>If checked, sources in this grouping will be included in the plot. If un-checked, sources will be
-            excluded from the plot. If partially checked, then the default plot/no plot setting of "all sources" will be in effect.
-            </P>""")
-            # custom style control
-            # for default, current and selected, this is just a text label
-            if group is model.defgroup:
-                item = QTableWidgetItem("default:")
-                item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
-                item.setToolTip(
-                    """<P>This is the default plot style used for all sources for which a custom grouping style is not selected.</P>""")
-                self.table.setItem(irow, self.ColApply, item)
-            elif group is model.curgroup:
-                item = QTableWidgetItem("")
-                item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
-                item.setToolTip("""<P>This is the plot style used for the highlighted source, if any.</P>""")
-                self.table.setItem(irow, self.ColApply, item)
-            elif group is model.selgroup:
-                item = QTableWidgetItem("")
-                item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
-                item.setToolTip("""<P>This is the plot style used for the currently selected sources.</P>""")
-                self.table.setItem(irow, self.ColApply, item)
-            # for the rest, a combobox with custom priorities
-            else:
-                cb = QComboBox()
-                cb.addItems(["default"] + ["custom %d" % p for p in range(1, 10)])
-                index = max(0, min(group.style.apply, 9))
-                #        dprint(0,group.name,"apply",index)
-                cb.setCurrentIndex(index)
-                cb.activated[int].connect(self._currier.xcurry(self._valueChanged, (irow, self.ColApply)))
-                self.table.setCellWidget(irow, self.ColApply, cb)
-                cb.setToolTip("""<P>This controls whether sources within this group are plotted with a customized
-            plot style. Customized styles have numeric priority; if a source belongs to multiple groups, then
-            the style with the lowest priority takes precedence.<P>""")
-            # attribute comboboxes
-            for icol, attr in self.AttrByCol.items():
-                # get list of options for this style attribute. If dealing with first grouping (i==0), which is
-                # the "all sources" grouping, then remove the "default" option (which is always first in the list)
-                options = PlotStyles.StyleAttributeOptions[attr]
-                if irow == 0:
-                    options = options[1:]
-                # make combobox
-                cb = QComboBox()
-                cb.addItems(list(map(str, options)))
-                # the "label" option is also editable
-                if attr == "label":
-                    cb.setEditable(True)
-                try:
-                    index = options.index(getattr(group.style, attr))
-                    cb.setCurrentIndex(index)
-                except ValueError:
-                    cb.setEditText(str(getattr(group.style, attr)))
-                slot = self._currier.xcurry(self._valueChanged, (irow, icol))
-                cb.activated[int].connect(slot)
-                cb.editTextChanged['QString'].connect(slot)
-                cb.setEnabled(group is model.defgroup or group.style.apply)
-                self.table.setCellWidget(irow, icol, cb)
-                label = attr
-                if irow:
-                    cb.setToolTip("""<P>This is the %s used to plot sources in this group, when a "custom" style for the group
-          is enabled via the style control.<P>""" % label)
-                else:
-                    cb.setToolTip(
-                        "<P>This is the default %s used for all sources for which a custom style is not specified below.<P>" % label)
-        self.table.resizeColumnsToContents()
-        # re-enable processing of cellChanged() signals
-        self._setting_model = False
-
-    def setModel(self, model):
-        self.model = model
-        self.model.connect("updated", self._updateModel)
-        self.model.connect("selected", self.updateModelSelection)
-        self._updateModel(SkyModel.UpdateAll)
-
-    def _valueChanged(self, row, col):
-        """Called when a cell has been edited"""
-        if self._setting_model:
-            return
-        group = self.model.groupings[row]
-        item = self.table.item(row, col)
-        if col == self.ColList:
-            if group is not self.model.defgroup:
-                # tri-state items go from unchecked to checked when user clicks them. Make them partially checked instead.
-                if group.style.show_list == PlotStyles.ShowNot and item.checkState() == Qt.Checked:
-                    item.setCheckState(Qt.PartiallyChecked)
-            group.style.show_list = self.CheckStateToShowAttr[item.checkState()]
-            self.model.emitChangeGroupingVisibility(group, origin=self)
-            return
-        elif col == self.ColPlot:
-            if group is not self.model.defgroup:
-                # tri-state items go from unchecked to checked by default. Make them partially checked instead.
-                if group.style.show_plot == PlotStyles.ShowNot and item.checkState() == Qt.Checked:
-                    item.setCheckState(Qt.PartiallyChecked)
-            group.style.show_plot = self.CheckStateToShowAttr[item.checkState()]
-        elif col == self.ColApply:
-            group.style.apply = self.table.cellWidget(row, col).currentIndex()
-            # enable/disable editable cells
-            for j in list(self.AttrByCol.keys()):
-                item1 = self.table.item(row, j)
-                if item1:
-                    fl = item1.flags() & ~Qt.ItemIsEnabled
-                    if group.style.apply:
-                        fl |= Qt.ItemIsEnabled
-                    item1.setFlags(fl)
-                cw = self.table.cellWidget(row, j)
-                cw and cw.setEnabled(group.style.apply)
-        elif col in self.AttrByCol:
-            cb = self.table.cellWidget(row, col)
-            txt = str(cb.currentText())
-            attr = self.AttrByCol[col]
-            if txt == "default":
-                setattr(group.style, attr, PlotStyles.DefaultValue)
-            else:
-                setattr(group.style, attr, PlotStyles.StyleAttributeTypes.get(attr, str)(txt))
-        # all other columns: return so we don't emit a signal
-        else:
-            return
-        # in all cases emit a signal
-        self.model.emitChangeGroupingStyle(group, origin=self)
-
-    def selectSources(self, predicate, curry=False):
-        """Selects sources according to predicate(src)"""
-        busy = BusyIndicator()
-        for src in self.model.sources:
-            src.selected = predicate(src)
-        self.model.emitSelection(origin=self)
-        busy.reset_cursor()
-
-    def updateModelSelection(self, nsel, origin=None):
-        """This is called when some other widget changes the set of selected model sources"""
-        self.table.clearSelection()
-        if self.model:
-            self.table.item(self._irow_selgroup, 1).setText(str(nsel))
-
-    def _togglePlotControlsVisibility(self):
-        if self._attrs_shown:
-            self._attrs_shown = False
-            self.table.hideColumn(self.ColApply)
-            for col in self.AttrByCol.keys():
-                self.table.hideColumn(col)
-            self._showattrbtn.setText("Show plot styles >>")
-        else:
-            self._attrs_shown = True
-            self.table.showColumn(self.ColApply)
-            for col in self.AttrByCol.keys():
-                self.table.showColumn(col)
-            self._showattrbtn.setText("<< Hide plot styles")
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+from builtins import chr
+
+from PyQt5.Qt import QWidget, QHBoxLayout, QComboBox, QLabel, QToolButton, QVBoxLayout, \
+    QPushButton, Qt, QTreeWidgetItem, QAbstractItemView, QHeaderView, QTreeWidget, QAction, QEvent, QSize, \
+    QSizePolicy, QTableWidget, QTableWidgetItem, QItemSelectionRange, QItemSelection, QFontMetrics, QFont, \
+    QApplication, QItemSelectionModel
+from Tigger.Models import ModelClasses, PlotStyles
+from Tigger.Models.SkyModel import SkyModel
+
+import TigGUI.kitties.utils
+import TigGUI.kitties.widgets
+from TigGUI.kitties.utils import PersistentCurrier
+from TigGUI.kitties.widgets import BusyIndicator
+
+QString = str
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="tw")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+ViewColumns = ["name", "RA", "RA err", "Dec", "Dec err", "r", "type",
+               "Iapp", "I", "I err", "Q", "Q err", "U", "U err", "V", "V err", "RM", "RM err", "spi", "spi err",
+               "shape", "shape err", "tags"]
+
+# ugly, but better than the global() hack this was before.
+ColumnName = 0
+ColumnRa = 1
+ColumnRa_err = 2
+ColumnDec = 3
+ColumnDec_err = 4
+ColumnR = 5
+ColumnType = 6
+ColumnIapp = 7
+ColumnI = 8
+ColumnI_err = 9
+ColumnQ = 10
+ColumnQ_err = 11
+ColumnU = 12
+ColumnU_err = 13
+ColumnV = 14
+ColumnV_err = 15
+ColumnRm = 16
+ColumnRm_err = 17
+ColumnSpi = 18
+ColumnSpi_err = 19
+ColumnShape = 20
+ColumnShape_err = 21
+ColumnTags = 22
+
+NumColumns = len(ViewColumns)
+
+DEG = math.pi / 180
+
+# Qt-4.6 and up (PyQt 4.7 and up) has very slow QTreeWidgetItem updates, determine version here
+from PyQt5 import QtCore
+
+_SLOW_QTREEWIDGETITEM = QtCore.PYQT_VERSION_STR >= '4.7'
+
+
+class SkyModelTreeWidget(TigGUI.kitties.widgets.ClickableTreeWidget):
+    """This implements a QTreeWidget for sky models"""
+
+    def __init__(self, *args):
+        TigGUI.kitties.widgets.ClickableTreeWidget.__init__(self, *args)
+        self._currier = PersistentCurrier()
+        self.model = None
+        # insert columns
+        self.setHeaderLabels(ViewColumns)
+        self.headerItem().setText(ColumnIapp, "I(app)")
+        self.header().setSectionsMovable(False)
+        self.header().setSectionsClickable(True)
+        self.setSortingEnabled(True)
+        self.setRootIsDecorated(False)
+        self.setEditTriggers(QAbstractItemView.AllEditTriggers)
+        self.setMouseTracking(True)
+        # set column width modes
+        self.header().setStretchLastSection(False)
+        self.header().setSectionResizeMode(QHeaderView.ResizeToContents)
+        ## self.setTextAlignment(ColumnR,Qt.AlignRight)
+        ## self.setTextAlignment(ColumnType,Qt.AlignHCenter)
+        # _column_enabled[i] is True if column is available in the model.
+        # _column_show[i] is True if column is currently being shown (via a view control)
+        self._column_enabled = [True] * NumColumns
+        self._column_shown = [True] * NumColumns
+        # other listview init
+        self.header().show()
+        self.setSelectionMode(QTreeWidget.ExtendedSelection)
+        self.setAllColumnsShowFocus(True)
+        ## self.setShowToolTips(True)
+        self._updating_selection = False
+        self.setRootIsDecorated(False)
+        # connect signals to track selected sources
+        self.itemSelectionChanged.connect(self._selectionChanged)
+        self.itemEntered[QTreeWidgetItem, int].connect(self._itemHighlighted)
+        # add "View" controls for different column categories
+        self._column_views = []
+        self._column_widths = {}
+        self.addColumnCategory("Position", [ColumnRa, ColumnDec])
+        self.addColumnCategory("Position errors", [ColumnRa_err, ColumnDec_err], False)
+        self.addColumnCategory("Type", [ColumnType])
+        self.addColumnCategory("Flux", [ColumnIapp, ColumnI])
+        self.addColumnCategory("Flux errors", [ColumnI_err], False)
+        self.addColumnCategory("Polarization", [ColumnQ, ColumnU, ColumnV, ColumnRm])
+        self.addColumnCategory("Polarization errors", [ColumnQ_err, ColumnU_err, ColumnV_err, ColumnRm_err], False)
+        self.addColumnCategory("Spectrum", [ColumnSpi])
+        self.addColumnCategory("Spectrum errors", [ColumnSpi_err], False)
+        self.addColumnCategory("Shape", [ColumnShape])
+        self.addColumnCategory("Shape errors", [ColumnShape_err], False)
+        self.addColumnCategory("Tags", [ColumnTags])
+
+    def _showColumn(self, col, show=True):
+        """Shows or hides the specified column.
+        (When hiding, saves width of column to internal array so that it can be restored properly.)"""
+        hdr = self.header()
+        hdr.setSectionHidden(col, not show)
+        if show:
+            if not hdr.sectionSize(col):
+                hdr.resizeSection(col, self._column_widths[col])
+                hdr.setResizeMode(col, QHeaderView.ResizeToContents)
+        else:
+            if hdr.sectionSize(col):
+                self._column_widths[col] = hdr.sectionSize(col)
+
+    def _enableColumn(self, column, enable=True):
+        busy = BusyIndicator()
+        self._column_enabled[column] = enable
+        self._showColumn(column, enable and self._column_shown[column])
+        busy.reset_cursor()
+
+    def _showColumnCategory(self, columns, show):
+        busy = BusyIndicator()
+        for col in columns:
+            self._column_shown[col] = show
+            self._showColumn(col, self._column_enabled[col] and show)
+        busy.reset_cursor()
+
+    def _selectionChanged(self):
+        if self._updating_selection:
+            return
+        for item in self.iterator():
+            item._src.select(item.isSelected())
+        self.model.emitSelection(origin=self)
+
+    def _itemHighlighted(self, item, col):
+        dprint(3, "highlighting", item._src.name)
+        self.model.setCurrentSource(item._src, origin=self)
+
+    def viewportEvent(self, event):
+        if event.type() in (QEvent.Leave, QEvent.FocusOut) and self.model:
+            self.model.setCurrentSource(None, origin=self)
+        return QTreeWidget.viewportEvent(self, event)
+
+    def addColumnCategory(self, name, columns, visible=True):
+        qa = QAction(name, self)
+        qa.setCheckable(True)
+        qa.setChecked(visible)
+        if not visible:
+            self._showColumnCategory(columns, False)
+        qa.toggled[bool].connect(self._currier.curry(self._showColumnCategory, columns))
+        self._column_views.append((name, qa, columns))
+
+    def clear(self):
+        TigGUI.kitties.widgets.ClickableTreeWidget.clear(self)
+        self.model = None
+        self._itemdict = {}
+
+    def setModel(self, model):
+        self.model = model
+        self._refreshModel(SkyModel.UpdateAll)
+        self.model.connect("changeCurrentSource", self._updateCurrentSource)
+        self.model.connect("changeGroupingVisibility", self.changeGroupingVisibility)
+        self.model.connect("selected", self._updateModelSelection)
+        self.model.connect("updated", self._refreshModel)
+
+    def _refreshModel(self, what=SkyModel.UpdateAll, origin=None):
+        if origin is self or not what & (SkyModel.UpdateSourceList | SkyModel.UpdateSourceContent):
+            return
+        # if only selection was changed, take shortcut
+        if what & SkyModel.UpdateSelectionOnly:
+            dprint(2, "model update -- selection only")
+            return self._refreshSelectedItems(origin)
+        busy = BusyIndicator()
+        # else repopulate widget completely
+        dprint(2, "model update -- complete")
+        TigGUI.kitties.widgets.ClickableTreeWidget.clear(self)
+        dprint(2, "creating model items")
+        items = [SkyModelTreeWidgetItem(src) for src in self.model.sources]
+        self._itemdict = dict(list(zip([src.name for src in self.model.sources], items)))
+        dprint(2, "adding to tree widget")
+        self.addTopLevelItems(items)
+        self.header().updateGeometry()
+        # show/hide columns based on tag availability
+        self._enableColumn(ColumnIapp, 'Iapp' in self.model.tagnames)
+        self._enableColumn(ColumnR, 'r' in self.model.tagnames)
+        dprint(2, "re-sorting")
+        self.sortItems(('Iapp' in self.model.tagnames and ColumnIapp) or ColumnI, Qt.DescendingOrder)
+        busy.reset_cursor()
+
+    def addColumnViewActionsTo(self, menu):
+        for name, qa, columns in self._column_views:
+            menu.addAction(qa)
+
+    def _updateCurrentSource(self, src, src0=None, origin=None):
+        # if origin is self:
+        # return
+        # dehighlight old item
+        item = src0 and self._itemdict.get(src0.name)
+        if item:
+            item.setHighlighted(False)
+        # scroll to new item, if found
+        item = src and self._itemdict.get(src.name)
+        if item:
+            item.setHighlighted(True, origin is not self)
+            if origin is not self:
+                self.scrollToItem(item)
+
+    def _updateModelSelection(self, nsel, origin=None):
+        """This is called when some other widget (origin!=self) changes the set of selected model sources"""
+        if origin is self:
+            return
+        self._updating_selection = True
+        ## this is very slow because of setSelected()
+        #    for item in self.iterator():
+        #     item.setSelected(item._src.selected)
+        selection = QItemSelection()
+        for item in self.iterator():
+            if item._src.selected:
+                selection.append(
+                    QItemSelectionRange(self.indexFromItem(item, 0), self.indexFromItem(item, self.columnCount() - 1)))
+        self.selectionModel().select(selection, QItemSelectionModel.ClearAndSelect)
+        self.changeGroupingVisibility(None, origin=origin)
+        self._updating_selection = False
+
+    def _refreshSelectedItems(self, origin=None):
+        busy = BusyIndicator()
+        dprint(3, "refreshing selected items")
+        for item in self.iterator():
+            if item.isSelected():
+                dprint(4, "resetting item", item._src.name)
+                item.setSource(item._src)
+        dprint(3, "refreshing selected items done")
+        busy.reset_cursor()
+
+    def changeGroupingVisibility(self, group, origin=None):
+        if origin is self:
+            return
+        for item in self.iterator():
+            # collect show_list values from groupings to which this source belongs (default group excepted)
+            show = [group.style.show_list for group in self.model.groupings if
+                    group is not self.model.defgroup and group.func(item._src)]
+            # if at least one group is showing explicitly, show
+            # else if at least one group is hiding explicitly, hide
+            # else use default setting
+            if max(show) == PlotStyles.ShowAlways:
+                visible = True
+            elif min(show) == PlotStyles.ShowNot:
+                visible = False
+            else:
+                visible = bool(self.model.defgroup.style.show_list)
+            # set visibility accordingly
+            item.setHidden(not visible)
+
+    TagsWithOwnColumn = set(["Iapp", "r"])
+
+
+class SkyModelTreeWidgetItem(QTreeWidgetItem):
+    _fonts = None
+    _fontmetrics = None
+
+    @staticmethod
+    def _initFonts():
+        """Initializes fonts on fitrst call"""
+        if SkyModelTreeWidgetItem._fonts is None:
+            stdfont = QApplication.font()
+            boldfont = QFont(stdfont)
+            boldfont.setBold(True)
+            SkyModelTreeWidgetItem._fonts = [stdfont, boldfont]
+            SkyModelTreeWidgetItem._fontmetrics = QFontMetrics(boldfont)
+
+    def __init__(self, src, *args):
+        QTreeWidgetItem.__init__(self, *args)
+        self._src = src
+        # fonts
+        self._initFonts()
+        # array of actual (i.e. numeric) column values
+        self._values = [0.0] * NumColumns
+        # set text alignment
+        for icol in range(NumColumns):
+            self.setTextAlignment(icol, Qt.AlignLeft)
+        self.setTextAlignment(ColumnR, Qt.AlignRight)
+        self.setTextAlignment(ColumnType, Qt.AlignHCenter)
+        # setup source
+        self._highlighted = self._highlighted_visual = False
+        self.setSource(src)
+
+    def setHighlighted(self, highlighted=True, visual=False):
+        #    global _SLOW_QTREEWIDGETITEM
+        #    if 1: # not _SLOW_QTREEWIDGETITEM:
+        visual = True
+        dprint(3, self._src.name, "highlighted", highlighted, visual)
+        if highlighted != self._highlighted:
+            #      brush = QApplication.palette().alternateBase() if highlighted else QApplication.palette().base()
+            #      for col in range(self.columnCount()):
+            #        self.setBackground(col,brush)
+            if highlighted and visual:
+                self.setFont(0, self._fonts[1])
+            elif not highlighted and self._highlighted_visual:
+                self.setFont(0, self._fonts[0])
+            self._highlighted = highlighted
+            self._highlighted_visual = visual
+
+    @staticmethod
+    def _angErrToStr(value):
+        """helper method: converts angular error to string representation in deg or arcmin or arcsec"""
+        arcsec = (value / DEG) * 3600
+        if arcsec < 60:
+            return chr(0xB1) + "%.2g\"" % arcsec
+        elif arcsec < 3600:
+            return chr(0xB1) + "%.2f'" % (arcsec * 60)
+        else:
+            return chr(0xB1) + "%.2f%s" % (arcsec * 3600, chr(0xB0))
+
+    def setSource(self, src):
+        # name
+        dprint(3, "setSource 1", src.name)
+        self.setColumn(ColumnName, src.name)
+        self.setSizeHint(0, QSize(self._fontmetrics.width("x" + src.name), 0))
+        # coordinates
+        self.setColumn(ColumnRa, src.pos.ra, "%2dh%02dm%05.2fs" % src.pos.ra_hms())
+        self.setColumn(ColumnDec, src.pos.dec, ("%s%2d" + chr(0xB0) + "%02d'%05.2f\"") %
+                       src.pos.dec_sdms())
+        if src.pos.ra_err is not None:
+            self.setColumn(ColumnRa_err, src.pos.ra_err, self._angErrToStr(src.pos.ra_err))
+        if src.pos.dec_err is not None:
+            self.setColumn(ColumnDec_err, src.pos.dec_err, self._angErrToStr(src.pos.dec_err))
+        if hasattr(src, 'r'):
+            self.setColumn(ColumnR, src.r, "%.1f'" % (src.r * 180 * 60 / math.pi))
+        # type
+        self.setColumn(ColumnType, src.typecode)
+        # flux
+        if hasattr(src, 'Iapp'):
+            self.setColumn(ColumnIapp, src.Iapp, "%.3g" % src.Iapp)
+        for stokes in "IQUV":
+            stk = getattr(src.flux, stokes, None)
+            stk_err = getattr(src.flux, stokes + "_err", None)
+            if stk is not None:
+                self.setColumn(globals()['Column' + stokes], stk, "%.3g" % stk)
+            if stk_err is not None:
+                self.setColumn(globals()['Column' + stokes + "_err"], stk_err, chr(0xB1) + "%.2g" % stk_err)
+        if hasattr(src.flux, 'rm'):
+            self.setColumn(ColumnRm, src.flux.rm, "%.2f" % src.flux.rm)
+            if hasattr(src.flux, 'rm_err'):
+                self.setColumn(ColumnRm_err, src.flux.rm_err, chr(0xB1) + "%.2f" % src.flux.rm)
+        # spi
+        if isinstance(src.spectrum, ModelClasses.SpectralIndex):
+            spi = getattr(src.spectrum, 'spi', 0)
+            if not isinstance(spi, (list, tuple)):
+                spi = [spi]
+            spi = ",".join(["%.2f" % x for x in spi])
+            self.setColumn(ColumnSpi, src.spectrum.spi, spi)
+            spierr = getattr(src.spectrum, 'spi_err', None)
+            if spierr is not None:
+                if not isinstance(spierr, (list, tuple)):
+                    spierr = [spierr]
+                spierr = ",".join(["%.2f" % x for x in spierr])
+                self.setColumn(ColumnSpi_err, src.spectrum.spi_err, chr(0xB1) + spierr)
+        # shape
+        shape = getattr(src, 'shape', None)
+        if isinstance(shape, ModelClasses.ModelItem):
+            shapeval = shape.getShape()
+            shapestr = shape.strDesc(delimiters=('"', chr(0xD7), chr(0x21BA), chr(0xB0)))
+            self.setColumn(ColumnShape, shapeval, shapestr)
+            errval = shape.getShapeErr()
+            if errval:
+                errstr = shape.strDescErr(delimiters=('"', chr(0xD7), chr(0x21BA), chr(0xB0)))
+                self.setColumn(ColumnShape_err, errval, chr(0xB1) + errstr)
+        dprint(3, "setSource 3", src.name)
+        # Tags. Tags are all extra attributes that do not have a dedicated column (i.e. not Iapp or r), and do not start
+        # with "_" (which is reserved for internal attributes)
+
+        ## the complexity below seems entirely unnecessary, since sorting the tag strings automatically puts "_" first,
+        ## "-" second, and alphabet afterwards
+
+        # truetags = []
+        # falsetags = []
+        # othertags = []
+        # for attr,val in src.getExtraAttributes():
+        # if attr[0] != "_" and attr not in SkyModelTreeWidget.TagsWithOwnColumn:
+        # if val is False:
+        # falsetags.append("-"+attr)
+        # elif val is True:
+        # truetags.append("+"+attr)
+        # else:
+        # othertags.append("%s=%s"%(attr,str(val)))
+        # for tags in truetags,falsetags,othertags:
+        # tags.sort()
+        # self.setColumn(ColumnTags,tags," ".join(truetags+falsetags+othertags))
+
+        # so instead:
+        tags = ["+" + attr if val is True else "-" + attr if val is False else "%s=%s" % (attr, str(val))
+                for attr, val in src.getExtraAttributes()
+                if attr[0] != "_" and attr not in SkyModelTreeWidget.TagsWithOwnColumn]
+        tagstr = " ".join(sorted(tags))
+        dprint(3, "setSource 4", src.name)
+        self.setColumn(ColumnTags, tags, tagstr)
+        dprint(3, "setSource 5", src.name)
+        dprint(3, "setSource done", src.name)
+
+    def setColumn(self, icol, value, text=None):
+        """helper function to set the value of a column"""
+        if text is None:
+            text = str(value)
+        self.setText(icol, text)
+        self._values[icol] = value
+
+    def __lt__(self, other):
+        icol = self.treeWidget().sortColumn()
+        if icol is not None:
+            if isinstance(other, SkyModelTreeWidgetItem):
+                if self._values[icol] is not None and other._values[icol] is not None:
+                    if isinstance(self._values[icol], type(other._values[icol])):
+                        return self._values[icol] < other._values[icol]
+                    else:
+                        return False
+                else:
+                    return False
+            else:
+                if self._text(icol) is not None and other.text(icol) is not None:
+                    if isinstance(self._text(icol), type(other.text(icol))):
+                        return self.text(icol) < other.text(icol)
+                    else:
+                        return False
+                else:
+                    return False
+        else:
+            return False
+
+    def __ge__(self, other):
+        return other < self
+
+
+class ModelGroupsTable(QWidget):
+    EditableAttrs = [attr for attr in PlotStyles.StyleAttributes if attr in PlotStyles.StyleAttributeOptions]
+    ColList = 3
+    ColPlot = 4
+    ColApply = 5
+    AttrByCol = dict([(i + 6, attr) for i, attr in enumerate(EditableAttrs)])
+
+    def __init__(self, parent, *args):
+        QWidget.__init__(self, parent, *args)
+        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(0, 0, 0, 0)
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lbl = QLabel(QString("<nobr><b>Source groupings:</b></nobr>"), self)
+        lo1.addWidget(lbl, 0)
+        lo1.addStretch(1)
+        # add show/hide button
+        self._showattrbtn = QPushButton(self)
+        self._showattrbtn.setMinimumWidth(256)
+        lo1.addWidget(self._showattrbtn, 0)
+        lo1.addStretch()
+        self._showattrbtn.clicked.connect(self._togglePlotControlsVisibility)
+        # add table
+        self.table = QTableWidget(self)
+        lo.addWidget(self.table)
+        self.table.cellChanged[int, int].connect(self._valueChanged)
+        self.table.setSelectionMode(QTableWidget.NoSelection)
+        # setup basic columns
+        self.table.setColumnCount(6 + len(self.EditableAttrs))
+        for i, label in enumerate(("grouping", "total", "selection", "list", "plot", "style")):
+            self.table.setHorizontalHeaderItem(i, QTableWidgetItem(label))
+        self.table.horizontalHeader().setSectionHidden(self.ColApply, True)
+        # setup columns for editable grouping attributes
+        for i, attr in self.AttrByCol.items():
+            self.table.setHorizontalHeaderItem(i, QTableWidgetItem(PlotStyles.StyleAttributeLabels[attr]))
+            self.table.horizontalHeader().setSectionHidden(i, True)
+        self.table.verticalHeader().hide()
+        # other internal init
+        self._attrs_shown = False
+        self._togglePlotControlsVisibility()
+        self.model = None
+        self._setting_model = False
+        self._currier = PersistentCurrier()
+        # row of 'selected' grouping
+        self._irow_selgroup = 0
+
+    def clear(self):
+        self.table.setRowCount(0)
+        self.model = None
+
+    # setup mappings from the group.show_plot attribute to check state
+    ShowAttrToCheckState = {PlotStyles.ShowNot: Qt.Unchecked,
+                            PlotStyles.ShowDefault: Qt.PartiallyChecked,
+                            PlotStyles.ShowAlways: Qt.Checked}
+    CheckStateToShowAttr = dict([(val, key) for key, val in ShowAttrToCheckState.items()])
+
+    def _makeCheckItem(self, name, group, attr):
+        item = QTableWidgetItem(name)
+        if group is self.model.defgroup:
+            item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsUserCheckable)
+            item.setCheckState(Qt.Checked if getattr(group.style, attr) else Qt.Unchecked)
+        else:
+            item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsUserCheckable | Qt.ItemIsTristate)
+            item.setCheckState(self.ShowAttrToCheckState[getattr(group.style, attr)])
+        return item
+
+    def _updateModel(self, what=SkyModel.UpdateAll, origin=None):
+        if origin is self or not what & (SkyModel.UpdateTags | SkyModel.UpdateGroupStyle):
+            return
+        model = self.model
+        self._setting_model = True  # to ignore cellChanged() signals (in valueChanged())
+        # _item_cb is a dict (with row,col keys) containing the widgets (CheckBoxes ComboBoxes) per each cell
+        self._item_cb = {}
+        # lists of "list" and "plot" checkboxes per each grouping (excepting the default grouping); each entry is an (row,col,item) tuple.
+        # used as argument to self._showControls()
+        self._list_controls = []
+        self._plot_controls = []
+        # list of selection callbacks (to which signals are connected)
+        self._callbacks = []
+        # set requisite number of rows,and start filling
+        self.table.setRowCount(len(model.groupings))
+        for irow, group in enumerate(model.groupings):
+            self.table.setItem(irow, 0, QTableWidgetItem(group.name))
+            if group is model.selgroup:
+                self._irow_selgroup = irow
+            # total # source in group: skip for "current"
+            if group is not model.curgroup:
+                self.table.setItem(irow, 1, QTableWidgetItem(str(group.total)))
+            # selection controls: skip for current and selection
+            if group not in (model.curgroup, model.selgroup):
+                btns = QWidget()
+                lo = QHBoxLayout(btns)
+                lo.setContentsMargins(0, 0, 0, 0)
+                lo.setSpacing(0)
+                # make selector buttons (depending on which group we're in)
+                if group is model.defgroup:
+                    Buttons = (
+                        ("+", lambda src, grp=group: True, "select all sources"),
+                        ("-", lambda src, grp=group: False, "unselect all sources"))
+                else:
+                    Buttons = (
+                        ("=", lambda src, grp=group: grp.func(src), "select only this grouping"),
+                        ("+", lambda src, grp=group: src.selected or grp.func(src), "add grouping to selection"),
+                        ("-", lambda src, grp=group: src.selected and not grp.func(src),
+                         "remove grouping from selection"),
+                        ("&&", lambda src, grp=group: src.selected and grp.func(src),
+                         "intersect selection with grouping"))
+                lo.addStretch(1)
+                for label, predicate, tooltip in Buttons:
+                    btn = QToolButton(btns)
+                    btn.setText(label)
+                    btn.setMinimumWidth(24)
+                    btn.setMaximumWidth(24)
+                    btn.setToolTip(tooltip)
+                    lo.addWidget(btn)
+                    # add callback
+                    btn.clicked.connect(self._currier.curry(self.selectSources, predicate))
+                lo.addStretch(1)
+                self.table.setCellWidget(irow, 2, btns)
+            # "list" checkbox (not for current and selected groupings: these are always listed)
+            if group not in (model.curgroup, model.selgroup):
+                item = self._makeCheckItem("", group, "show_list")
+                self.table.setItem(irow, self.ColList, item)
+                item.setToolTip("""<P>If checked, sources in this grouping will be listed in the source table. If un-checked, sources will be
+            excluded from the table. If partially checked, then the default list/no list setting of "all sources" will be in effect.
+            </P>""")
+            # "plot" checkbox (not for the current grouping, since that's always plotted)
+            if group is not model.curgroup:
+                item = self._makeCheckItem("", group, "show_plot")
+                self.table.setItem(irow, self.ColPlot, item)
+                item.setToolTip("""<P>If checked, sources in this grouping will be included in the plot. If un-checked, sources will be
+            excluded from the plot. If partially checked, then the default plot/no plot setting of "all sources" will be in effect.
+            </P>""")
+            # custom style control
+            # for default, current and selected, this is just a text label
+            if group is model.defgroup:
+                item = QTableWidgetItem("default:")
+                item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
+                item.setToolTip(
+                    """<P>This is the default plot style used for all sources for which a custom grouping style is not selected.</P>""")
+                self.table.setItem(irow, self.ColApply, item)
+            elif group is model.curgroup:
+                item = QTableWidgetItem("")
+                item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
+                item.setToolTip("""<P>This is the plot style used for the highlighted source, if any.</P>""")
+                self.table.setItem(irow, self.ColApply, item)
+            elif group is model.selgroup:
+                item = QTableWidgetItem("")
+                item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
+                item.setToolTip("""<P>This is the plot style used for the currently selected sources.</P>""")
+                self.table.setItem(irow, self.ColApply, item)
+            # for the rest, a combobox with custom priorities
+            else:
+                cb = QComboBox()
+                cb.addItems(["default"] + ["custom %d" % p for p in range(1, 10)])
+                index = max(0, min(group.style.apply, 9))
+                #        dprint(0,group.name,"apply",index)
+                cb.setCurrentIndex(index)
+                cb.activated[int].connect(self._currier.xcurry(self._valueChanged, (irow, self.ColApply)))
+                self.table.setCellWidget(irow, self.ColApply, cb)
+                cb.setToolTip("""<P>This controls whether sources within this group are plotted with a customized
+            plot style. Customized styles have numeric priority; if a source belongs to multiple groups, then
+            the style with the lowest priority takes precedence.<P>""")
+            # attribute comboboxes
+            for icol, attr in self.AttrByCol.items():
+                # get list of options for this style attribute. If dealing with first grouping (i==0), which is
+                # the "all sources" grouping, then remove the "default" option (which is always first in the list)
+                options = PlotStyles.StyleAttributeOptions[attr]
+                if irow == 0:
+                    options = options[1:]
+                # make combobox
+                cb = QComboBox()
+                cb.addItems(list(map(str, options)))
+                # the "label" option is also editable
+                if attr == "label":
+                    cb.setEditable(True)
+                try:
+                    index = options.index(getattr(group.style, attr))
+                    cb.setCurrentIndex(index)
+                except ValueError:
+                    cb.setEditText(str(getattr(group.style, attr)))
+                slot = self._currier.xcurry(self._valueChanged, (irow, icol))
+                cb.activated[int].connect(slot)
+                cb.editTextChanged['QString'].connect(slot)
+                cb.setEnabled(group is model.defgroup or group.style.apply)
+                self.table.setCellWidget(irow, icol, cb)
+                label = attr
+                if irow:
+                    cb.setToolTip("""<P>This is the %s used to plot sources in this group, when a "custom" style for the group
+          is enabled via the style control.<P>""" % label)
+                else:
+                    cb.setToolTip(
+                        "<P>This is the default %s used for all sources for which a custom style is not specified below.<P>" % label)
+        self.table.resizeColumnsToContents()
+        # re-enable processing of cellChanged() signals
+        self._setting_model = False
+
+    def setModel(self, model):
+        self.model = model
+        self.model.connect("updated", self._updateModel)
+        self.model.connect("selected", self.updateModelSelection)
+        self._updateModel(SkyModel.UpdateAll)
+
+    def _valueChanged(self, row, col):
+        """Called when a cell has been edited"""
+        if self._setting_model:
+            return
+        group = self.model.groupings[row]
+        item = self.table.item(row, col)
+        if col == self.ColList:
+            if group is not self.model.defgroup:
+                # tri-state items go from unchecked to checked when user clicks them. Make them partially checked instead.
+                if group.style.show_list == PlotStyles.ShowNot and item.checkState() == Qt.Checked:
+                    item.setCheckState(Qt.PartiallyChecked)
+            group.style.show_list = self.CheckStateToShowAttr[item.checkState()]
+            self.model.emitChangeGroupingVisibility(group, origin=self)
+            return
+        elif col == self.ColPlot:
+            if group is not self.model.defgroup:
+                # tri-state items go from unchecked to checked by default. Make them partially checked instead.
+                if group.style.show_plot == PlotStyles.ShowNot and item.checkState() == Qt.Checked:
+                    item.setCheckState(Qt.PartiallyChecked)
+            group.style.show_plot = self.CheckStateToShowAttr[item.checkState()]
+        elif col == self.ColApply:
+            group.style.apply = self.table.cellWidget(row, col).currentIndex()
+            # enable/disable editable cells
+            for j in list(self.AttrByCol.keys()):
+                item1 = self.table.item(row, j)
+                if item1:
+                    fl = item1.flags() & ~Qt.ItemIsEnabled
+                    if group.style.apply:
+                        fl |= Qt.ItemIsEnabled
+                    item1.setFlags(fl)
+                cw = self.table.cellWidget(row, j)
+                cw and cw.setEnabled(group.style.apply)
+        elif col in self.AttrByCol:
+            cb = self.table.cellWidget(row, col)
+            txt = str(cb.currentText())
+            attr = self.AttrByCol[col]
+            if txt == "default":
+                setattr(group.style, attr, PlotStyles.DefaultValue)
+            else:
+                setattr(group.style, attr, PlotStyles.StyleAttributeTypes.get(attr, str)(txt))
+        # all other columns: return so we don't emit a signal
+        else:
+            return
+        # in all cases emit a signal
+        self.model.emitChangeGroupingStyle(group, origin=self)
+
+    def selectSources(self, predicate, curry=False):
+        """Selects sources according to predicate(src)"""
+        busy = BusyIndicator()
+        for src in self.model.sources:
+            src.selected = predicate(src)
+        self.model.emitSelection(origin=self)
+        busy.reset_cursor()
+
+    def updateModelSelection(self, nsel, origin=None):
+        """This is called when some other widget changes the set of selected model sources"""
+        self.table.clearSelection()
+        if self.model:
+            self.table.item(self._irow_selgroup, 1).setText(str(nsel))
+
+    def _togglePlotControlsVisibility(self):
+        if self._attrs_shown:
+            self._attrs_shown = False
+            self.table.hideColumn(self.ColApply)
+            for col in self.AttrByCol.keys():
+                self.table.hideColumn(col)
+            self._showattrbtn.setText("Show plot styles >>")
+        else:
+            self._attrs_shown = True
+            self.table.showColumn(self.ColApply)
+            for col in self.AttrByCol.keys():
+                self.table.showColumn(col)
+            self._showattrbtn.setText("<< Hide plot styles")
--- tigger-1.6.0.orig/TigGUI/Tools/__init__.py
+++ tigger-1.6.0/TigGUI/Tools/__init__.py
@@ -1,34 +1,34 @@
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-_registered_tools = []
-
-
-def getRegisteredTools():
-    return _registered_tools
-
-
-def registerTool(name, callback):
-    _registered_tools.append((name, callback))
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+_registered_tools = []
+
+
+def getRegisteredTools():
+    return _registered_tools
+
+
+def registerTool(name, callback):
+    _registered_tools.append((name, callback))
--- tigger-1.6.0.orig/TigGUI/Tools/add_brick.py
+++ tigger-1.6.0/TigGUI/Tools/add_brick.py
@@ -1,196 +1,196 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-from PyQt5.QtWidgets import *
-
-from PyQt5.Qt import QObject, QHBoxLayout, QFileDialog, pyqtSignal, QLabel, \
-    QLineEdit, QDialog, QDoubleValidator, QVBoxLayout, \
-    QPushButton, Qt, QGridLayout, QMessageBox, QErrorMessage
-
-import TigGUI.kitties.utils
-
-from astropy.io import fits as pyfits
-
-import os.path
-
-from TigGUI.kitties.widgets import BusyIndicator
-from TigGUI.Widgets import FileSelector
-from Tigger.Models import SkyModel, ModelClasses
-
-DEG = math.pi / 180
-
-from astLib.astWCS import WCS
-
-
-class AddBrickDialog(QDialog):
-    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
-        QDialog.__init__(self, parent, flags)
-        self.model = None
-        self._model_dir = None
-        self.setModal(modal)
-        self.setWindowTitle("Add FITS brick")
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # file selector
-        self.wfile = FileSelector(self, label="FITS filename:", dialog_label="FITS file", default_suffix="fits",
-                                  file_types="FITS files (*.fits *.FITS)", file_mode=QFileDialog.ExistingFile)
-        lo.addWidget(self.wfile)
-        # overwrite or add mode
-        lo1 = QGridLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo1.addWidget(QLabel("Padding factor:", self), 0, 0)
-        self.wpad = QLineEdit("2", self)
-        self.wpad.setValidator(QDoubleValidator(self))
-        lo1.addWidget(self.wpad, 0, 1)
-        lo1.addWidget(QLabel("Assign source name:", self), 1, 0)
-        self.wname = QLineEdit(self)
-        lo1.addWidget(self.wname, 1, 1)
-        # OK/cancel buttons
-        lo.addSpacing(10)
-        lo2 = QHBoxLayout()
-        lo.addLayout(lo2)
-        lo2.setContentsMargins(0, 0, 0, 0)
-        lo2.setContentsMargins(5, 5, 5, 5)
-        self.wokbtn = QPushButton("OK", self)
-        self.wokbtn.setMinimumWidth(128)
-        self.wokbtn.clicked.connect(self.accept)
-        self.wokbtn.setEnabled(False)
-        cancelbtn = QPushButton("Cancel", self)
-        cancelbtn.setMinimumWidth(128)
-        cancelbtn.clicked.connect(self.reject)
-        lo2.addWidget(self.wokbtn)
-        lo2.addStretch(1)
-        lo2.addWidget(cancelbtn)
-        self.setMinimumWidth(384)
-        # signals
-        self.wfile.filenameSelected.connect(self._fileSelected)
-        # internal state
-        self.qerrmsg = QErrorMessage(self)
-
-    def setModel(self, model):
-        self.model = model
-        if model.filename():
-            self._model_dir = os.path.dirname(os.path.abspath(model.filename()))
-        else:
-            self._model_dir = os.path.abspath('.')
-        self.wfile.setDirectory(self._model_dir)
-        self._fileSelected(self.wfile.filename(), quiet=True)
-
-    def _fileSelected(self, filename, quiet=False):
-        self.wokbtn.setEnabled(False)
-        if not filename:
-            return None
-        # check that filename matches model
-        if not os.path.samefile(self._model_dir, os.path.dirname(filename)):
-            self.wfile.setFilename('')
-            if not quiet:
-                QMessageBox.warning(self, "Directory mismatch", """<P>The FITS file must reside in the same directory
-          as the current sky model.</P>""")
-            self.wfile.setDirectory(self._model_dir)
-            return None
-        # if filename is not in model already, enable the "add to model" control
-        for src in self.model.sources:
-            if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage):
-                if os.path.exists(src.shape.filename) and os.path.samefile(src.shape.filename, filename):
-                    if not quiet:
-                        QMessageBox.warning(self, "Already in model",
-                                            "This FITS brick is already present in the model.")
-                    self.wfile.setFilename('')
-                    return None
-        if not str(self.wname.text()):
-            self.wname.setText(os.path.splitext(os.path.basename(str(filename)))[0])
-        self.wokbtn.setEnabled(True)
-        return filename
-
-    def accept(self):
-        """Tries to add brick, and closes the dialog if successful."""
-        filename = self.wfile.filename()
-        # read fits file
-        busy = BusyIndicator()
-        try:
-            input_hdu = pyfits.open(filename)[0]
-        except Exception as err:
-            busy.reset_cursor()
-            QMessageBox.warning(self, "Error reading FITS", "Error reading FITS file %s: %s" % (filename, str(err)))
-            return
-        # check name
-        srcname = str(self.wname.text()) or os.path.splitext(os.path.basename(str(filename)))[0]
-        if srcname in set([src.name for src in self.model.sources]):
-            QMessageBox.warning(self, "Already in model",
-                                "<p>The model already contains a source named '%s'. Please select a different name.</p>" % srcname)
-            return
-        # get image parameters
-        hdr = input_hdu.header
-        max_flux = float(input_hdu.data.max())
-        wcs = WCS(hdr, mode='pyfits')
-        # Get reference pixel coordinates
-        # wcs.getCentreWCSCoords() doesn't work, as that gives us the middle of the image
-        # So scan the header to get the CRPIX values
-        ra0 = dec0 = 1
-        for iaxis in range(hdr['NAXIS']):
-            axs = str(iaxis + 1)
-            name = hdr.get('CTYPE' + axs, axs).upper()
-            if name.startswith("RA"):
-                ra0 = hdr.get('CRPIX' + axs, 1) - 1
-            elif name.startswith("DEC"):
-                dec0 = hdr.get('CRPIX' + axs, 1) - 1
-        # convert pixel to degrees
-        #    print ra0,dec0
-        ra0, dec0 = wcs.pix2wcs(ra0, dec0)
-        ra0 *= DEG
-        dec0 *= DEG
-        #    print ModelClasses.Position.ra_hms_static(ra0)
-        #    print ModelClasses.Position.dec_sdms_static(dec0)
-        sx, sy = wcs.getHalfSizeDeg()
-        sx *= DEG
-        sy *= DEG
-        nx, ny = input_hdu.data.shape[-1:-3:-1]
-        pos = ModelClasses.Position(ra0, dec0)
-        flux = ModelClasses.Flux(max_flux)
-        shape = ModelClasses.FITSImage(sx, sy, 0, os.path.basename(filename), nx, ny,
-                                       pad=float(str(self.wpad.text()) or "1"))
-        img_src = SkyModel.Source(srcname, pos, flux, shape=shape)
-        self.model.setSources(self.model.sources + [img_src])
-        self.model.emitUpdate(SkyModel.SkyModel.UpdateAll, origin=self)
-        busy.reset_cursor()
-        return QDialog.accept(self)
-
-
-def add_brick(mainwin, model):
-    dialog = getattr(mainwin, '_add_brick_dialog', None)
-    if not dialog:
-        dialog = mainwin._add_brick_dialog = AddBrickDialog(mainwin)
-    dialog.setModel(model)
-    # show dialog
-    return dialog.exec_()
-
-
-from TigGUI.Tools import registerTool
-
-registerTool("Add FITS brick to model...", add_brick)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+from PyQt5.QtWidgets import *
+
+from PyQt5.Qt import QObject, QHBoxLayout, QFileDialog, pyqtSignal, QLabel, \
+    QLineEdit, QDialog, QDoubleValidator, QVBoxLayout, \
+    QPushButton, Qt, QGridLayout, QMessageBox, QErrorMessage
+
+import TigGUI.kitties.utils
+
+from astropy.io import fits as pyfits
+
+import os.path
+
+from TigGUI.kitties.widgets import BusyIndicator
+from TigGUI.Widgets import FileSelector
+from Tigger.Models import SkyModel, ModelClasses
+
+DEG = math.pi / 180
+
+from astLib.astWCS import WCS
+
+
+class AddBrickDialog(QDialog):
+    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
+        QDialog.__init__(self, parent, flags)
+        self.model = None
+        self._model_dir = None
+        self.setModal(modal)
+        self.setWindowTitle("Add FITS brick")
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # file selector
+        self.wfile = FileSelector(self, label="FITS filename:", dialog_label="FITS file", default_suffix="fits",
+                                  file_types="FITS files (*.fits *.FITS)", file_mode=QFileDialog.ExistingFile)
+        lo.addWidget(self.wfile)
+        # overwrite or add mode
+        lo1 = QGridLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo1.addWidget(QLabel("Padding factor:", self), 0, 0)
+        self.wpad = QLineEdit("2", self)
+        self.wpad.setValidator(QDoubleValidator(self))
+        lo1.addWidget(self.wpad, 0, 1)
+        lo1.addWidget(QLabel("Assign source name:", self), 1, 0)
+        self.wname = QLineEdit(self)
+        lo1.addWidget(self.wname, 1, 1)
+        # OK/cancel buttons
+        lo.addSpacing(10)
+        lo2 = QHBoxLayout()
+        lo.addLayout(lo2)
+        lo2.setContentsMargins(0, 0, 0, 0)
+        lo2.setContentsMargins(5, 5, 5, 5)
+        self.wokbtn = QPushButton("OK", self)
+        self.wokbtn.setMinimumWidth(128)
+        self.wokbtn.clicked.connect(self.accept)
+        self.wokbtn.setEnabled(False)
+        cancelbtn = QPushButton("Cancel", self)
+        cancelbtn.setMinimumWidth(128)
+        cancelbtn.clicked.connect(self.reject)
+        lo2.addWidget(self.wokbtn)
+        lo2.addStretch(1)
+        lo2.addWidget(cancelbtn)
+        self.setMinimumWidth(384)
+        # signals
+        self.wfile.filenameSelected.connect(self._fileSelected)
+        # internal state
+        self.qerrmsg = QErrorMessage(self)
+
+    def setModel(self, model):
+        self.model = model
+        if model.filename():
+            self._model_dir = os.path.dirname(os.path.abspath(model.filename()))
+        else:
+            self._model_dir = os.path.abspath('.')
+        self.wfile.setDirectory(self._model_dir)
+        self._fileSelected(self.wfile.filename(), quiet=True)
+
+    def _fileSelected(self, filename, quiet=False):
+        self.wokbtn.setEnabled(False)
+        if not filename:
+            return None
+        # check that filename matches model
+        if not os.path.samefile(self._model_dir, os.path.dirname(filename)):
+            self.wfile.setFilename('')
+            if not quiet:
+                QMessageBox.warning(self, "Directory mismatch", """<P>The FITS file must reside in the same directory
+          as the current sky model.</P>""")
+            self.wfile.setDirectory(self._model_dir)
+            return None
+        # if filename is not in model already, enable the "add to model" control
+        for src in self.model.sources:
+            if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage):
+                if os.path.exists(src.shape.filename) and os.path.samefile(src.shape.filename, filename):
+                    if not quiet:
+                        QMessageBox.warning(self, "Already in model",
+                                            "This FITS brick is already present in the model.")
+                    self.wfile.setFilename('')
+                    return None
+        if not str(self.wname.text()):
+            self.wname.setText(os.path.splitext(os.path.basename(str(filename)))[0])
+        self.wokbtn.setEnabled(True)
+        return filename
+
+    def accept(self):
+        """Tries to add brick, and closes the dialog if successful."""
+        filename = self.wfile.filename()
+        # read fits file
+        busy = BusyIndicator()
+        try:
+            input_hdu = pyfits.open(filename)[0]
+        except Exception as err:
+            busy.reset_cursor()
+            QMessageBox.warning(self, "Error reading FITS", "Error reading FITS file %s: %s" % (filename, str(err)))
+            return
+        # check name
+        srcname = str(self.wname.text()) or os.path.splitext(os.path.basename(str(filename)))[0]
+        if srcname in set([src.name for src in self.model.sources]):
+            QMessageBox.warning(self, "Already in model",
+                                "<p>The model already contains a source named '%s'. Please select a different name.</p>" % srcname)
+            return
+        # get image parameters
+        hdr = input_hdu.header
+        max_flux = float(input_hdu.data.max())
+        wcs = WCS(hdr, mode='pyfits')
+        # Get reference pixel coordinates
+        # wcs.getCentreWCSCoords() doesn't work, as that gives us the middle of the image
+        # So scan the header to get the CRPIX values
+        ra0 = dec0 = 1
+        for iaxis in range(hdr['NAXIS']):
+            axs = str(iaxis + 1)
+            name = hdr.get('CTYPE' + axs, axs).upper()
+            if name.startswith("RA"):
+                ra0 = hdr.get('CRPIX' + axs, 1) - 1
+            elif name.startswith("DEC"):
+                dec0 = hdr.get('CRPIX' + axs, 1) - 1
+        # convert pixel to degrees
+        #    print ra0,dec0
+        ra0, dec0 = wcs.pix2wcs(ra0, dec0)
+        ra0 *= DEG
+        dec0 *= DEG
+        #    print ModelClasses.Position.ra_hms_static(ra0)
+        #    print ModelClasses.Position.dec_sdms_static(dec0)
+        sx, sy = wcs.getHalfSizeDeg()
+        sx *= DEG
+        sy *= DEG
+        nx, ny = input_hdu.data.shape[-1:-3:-1]
+        pos = ModelClasses.Position(ra0, dec0)
+        flux = ModelClasses.Flux(max_flux)
+        shape = ModelClasses.FITSImage(sx, sy, 0, os.path.basename(filename), nx, ny,
+                                       pad=float(str(self.wpad.text()) or "1"))
+        img_src = SkyModel.Source(srcname, pos, flux, shape=shape)
+        self.model.setSources(self.model.sources + [img_src])
+        self.model.emitUpdate(SkyModel.SkyModel.UpdateAll, origin=self)
+        busy.reset_cursor()
+        return QDialog.accept(self)
+
+
+def add_brick(mainwin, model):
+    dialog = getattr(mainwin, '_add_brick_dialog', None)
+    if not dialog:
+        dialog = mainwin._add_brick_dialog = AddBrickDialog(mainwin)
+    dialog.setModel(model)
+    # show dialog
+    return dialog.exec_()
+
+
+from TigGUI.Tools import registerTool
+
+registerTool("Add FITS brick to model...", add_brick)
--- tigger-1.6.0.orig/TigGUI/Tools/dependency_check.py
+++ tigger-1.6.0/TigGUI/Tools/dependency_check.py
@@ -1,128 +1,128 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2021
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-"""Checks that Tigger-LSM, PyQt5 and PyQt-Qwt are available for Tigger to operate."""
-missing = []  # list of missing dependencies
-
-
-def close_btn(btn):
-    """QMessageBox close button handler to close GUI and print error message to terminal."""
-    msg_box.close()
-    sys.exit(error_msg)
-
-
-try:
-    try:
-        from Tigger.Models import ModelClasses  # check Tigger-LSM is available
-    except ImportError:
-        missing.append("Tigger-LSM")
-        pass
-
-    try:
-        from PyQt5.Qt import Qt  # check PyQt5 is available
-    except ImportError:
-        missing.append("PyQt5")
-        pass
-
-    try:
-        from PyQt5.QtOpenGL import QGLWidget  # check PyQt5 Qt OpenGL is available
-    except ImportError:
-        missing.append("PyQt5.QtOpenGL")
-        pass
-
-    try:
-        from PyQt5.QtSvg import QSvgWidget  # check PyQt5 Qt SVG is available
-    except ImportError:
-        missing.append("PyQt5.QtSvg")
-        pass
-
-    try:
-        from PyQt5.Qwt import QwtPlotZoomer  # check PyQt-Qwt is available
-
-        test_qwt = callable(
-            getattr(QwtPlotZoomer, 'setZoomStack', False))  # check correct version of PyQt-Qwt is installed
-    except ImportError:
-        missing.append("PyQt5.Qwt")
-        test_qwt = False
-        pass
-
-except ImportError:
-    deps_available = False
-    pass
-else:
-    if test_qwt:
-        deps_available = True
-    else:
-        deps_available = False
-        missing.append("PyQt-Qwt>=2.0.0")
-
-if not deps_available:
-    import sys
-
-    error_msg = f"Error: Dependencies have not been met {missing}, please check your installation. \n" \
-                "See https://github.com/ska-sa/tigger for further information."
-
-    # load GUI error message if possible
-    if 'PyQt5' not in missing:
-        from PyQt5.Qt import QMessageBox, QApplication, QPalette, QColor
-
-        # set dark theme palatte
-        palette = QPalette()
-        palette.setColor(QPalette.Window, QColor(53, 53, 53))
-        palette.setColor(QPalette.WindowText, Qt.white)
-        palette.setColor(QPalette.Light, QColor(68, 68, 68))
-        palette.setColor(QPalette.Base, QColor(25, 25, 25))
-        palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
-        palette.setColor(QPalette.ToolTipBase, Qt.white)
-        palette.setColor(QPalette.ToolTipText, Qt.black)
-        palette.setColor(QPalette.Text, Qt.white)
-        palette.setColor(QPalette.Button, QColor(53, 53, 53))
-        palette.setColor(QPalette.ButtonText, Qt.white)
-        palette.setColor(QPalette.BrightText, Qt.red)
-        palette.setColor(QPalette.Link, QColor(42, 130, 218))
-        palette.setColor(QPalette.Highlight, QColor(42, 130, 218, 192))
-        palette.setColor(QPalette.HighlightedText, Qt.white)
-
-        # create default QApp and set dark theme palette
-        app = QApplication(sys.argv)
-        app.setPalette(palette)
-
-        # create GUI dialog window to display error message
-        msg_box = QMessageBox()
-        msg_box.setWindowFlag(Qt.CustomizeWindowHint, True)
-        msg_box.setWindowFlag(Qt.WindowCloseButtonHint, False)
-        msg_box.setTextFormat(Qt.RichText)
-        msg_box.setIcon(QMessageBox.Warning)
-        msg_box.setWindowTitle("Tigger")
-        msg_box.setText(f"<b>Error</b><br/><br/>Dependencies have not been met: <br/><br/>{missing}<br/><br/>"
-                        f"Please check your installation. "
-                        f"<br/><br/>See <a href='https://github.com/ska-sa/tigger'>https://github.com/ska-sa/tigger</a>"
-                        f" for further information.")
-        msg_box.setStandardButtons(QMessageBox.Close)
-        msg_box.buttonClicked.connect(close_btn)
-        msg_box.exec_()
-    else:
-        sys.exit(error_msg)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2021
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+"""Checks that Tigger-LSM, PyQt5 and PyQt-Qwt are available for Tigger to operate."""
+missing = []  # list of missing dependencies
+
+
+def close_btn(btn):
+    """QMessageBox close button handler to close GUI and print error message to terminal."""
+    msg_box.close()
+    sys.exit(error_msg)
+
+
+try:
+    try:
+        from Tigger.Models import ModelClasses  # check Tigger-LSM is available
+    except ImportError:
+        missing.append("Tigger-LSM")
+        pass
+
+    try:
+        from PyQt5.Qt import Qt  # check PyQt5 is available
+    except ImportError:
+        missing.append("PyQt5")
+        pass
+
+    try:
+        from PyQt5.QtOpenGL import QGLWidget  # check PyQt5 Qt OpenGL is available
+    except ImportError:
+        missing.append("PyQt5.QtOpenGL")
+        pass
+
+    try:
+        from PyQt5.QtSvg import QSvgWidget  # check PyQt5 Qt SVG is available
+    except ImportError:
+        missing.append("PyQt5.QtSvg")
+        pass
+
+    try:
+        from PyQt5.Qwt import QwtPlotZoomer  # check PyQt-Qwt is available
+
+        test_qwt = callable(
+            getattr(QwtPlotZoomer, 'setZoomStack', False))  # check correct version of PyQt-Qwt is installed
+    except ImportError:
+        missing.append("PyQt5.Qwt")
+        test_qwt = False
+        pass
+
+except ImportError:
+    deps_available = False
+    pass
+else:
+    if test_qwt:
+        deps_available = True
+    else:
+        deps_available = False
+        missing.append("PyQt-Qwt>=2.0.0")
+
+if not deps_available:
+    import sys
+
+    error_msg = f"Error: Dependencies have not been met {missing}, please check your installation. \n" \
+                "See https://github.com/ska-sa/tigger for further information."
+
+    # load GUI error message if possible
+    if 'PyQt5' not in missing:
+        from PyQt5.Qt import QMessageBox, QApplication, QPalette, QColor
+
+        # set dark theme palatte
+        palette = QPalette()
+        palette.setColor(QPalette.Window, QColor(53, 53, 53))
+        palette.setColor(QPalette.WindowText, Qt.white)
+        palette.setColor(QPalette.Light, QColor(68, 68, 68))
+        palette.setColor(QPalette.Base, QColor(25, 25, 25))
+        palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
+        palette.setColor(QPalette.ToolTipBase, Qt.white)
+        palette.setColor(QPalette.ToolTipText, Qt.black)
+        palette.setColor(QPalette.Text, Qt.white)
+        palette.setColor(QPalette.Button, QColor(53, 53, 53))
+        palette.setColor(QPalette.ButtonText, Qt.white)
+        palette.setColor(QPalette.BrightText, Qt.red)
+        palette.setColor(QPalette.Link, QColor(42, 130, 218))
+        palette.setColor(QPalette.Highlight, QColor(42, 130, 218, 192))
+        palette.setColor(QPalette.HighlightedText, Qt.white)
+
+        # create default QApp and set dark theme palette
+        app = QApplication(sys.argv)
+        app.setPalette(palette)
+
+        # create GUI dialog window to display error message
+        msg_box = QMessageBox()
+        msg_box.setWindowFlag(Qt.CustomizeWindowHint, True)
+        msg_box.setWindowFlag(Qt.WindowCloseButtonHint, False)
+        msg_box.setTextFormat(Qt.RichText)
+        msg_box.setIcon(QMessageBox.Warning)
+        msg_box.setWindowTitle("Tigger")
+        msg_box.setText(f"<b>Error</b><br/><br/>Dependencies have not been met: <br/><br/>{missing}<br/><br/>"
+                        f"Please check your installation. "
+                        f"<br/><br/>See <a href='https://github.com/ska-sa/tigger'>https://github.com/ska-sa/tigger</a>"
+                        f" for further information.")
+        msg_box.setStandardButtons(QMessageBox.Close)
+        msg_box.buttonClicked.connect(close_btn)
+        msg_box.exec_()
+    else:
+        sys.exit(error_msg)
--- tigger-1.6.0.orig/TigGUI/Tools/export_karma.py
+++ tigger-1.6.0/TigGUI/Tools/export_karma.py
@@ -1,161 +1,161 @@
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-from PyQt5.QtWidgets import *
-
-
-import os.path
-from PyQt5.Qt import QObject, QHBoxLayout, pyqtSignal, QDialog, QVBoxLayout, \
-    QPushButton, Qt, QCheckBox, QMessageBox, QErrorMessage
-
-from TigGUI.kitties.widgets import BusyIndicator
-from TigGUI.Widgets import FileSelector
-
-DEG = math.pi / 180
-
-
-class ExportKarmaDialog(QDialog):
-    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
-        QDialog.__init__(self, parent, flags)
-        self.model = None
-        self.setModal(modal)
-        self.setWindowTitle("Export Karma annotations")
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # file selector
-        self.wfile = FileSelector(self, label="Filename:", dialog_label="Karma annotations filename",
-                                  default_suffix="ann", file_types="Karma annotations (*.ann)")
-        lo.addWidget(self.wfile)
-        # selected sources checkbox
-        self.wsel = QCheckBox("selected sources only", self)
-        lo.addWidget(self.wsel)
-        # OK/cancel buttons
-        lo.addSpacing(10)
-        lo2 = QHBoxLayout()
-        lo.addLayout(lo2)
-        lo2.setContentsMargins(5, 5, 5, 5)
-        self.wokbtn = QPushButton("OK", self)
-        self.wokbtn.setMinimumWidth(128)
-        self.wokbtn.clicked.connect(self.accept)
-        self.wokbtn.setEnabled(False)
-        cancelbtn = QPushButton("Cancel", self)
-        cancelbtn.setMinimumWidth(128)
-        cancelbtn.clicked.connect(self.reject)
-        lo2.addWidget(self.wokbtn)
-        lo2.addStretch(1)
-        lo2.addWidget(cancelbtn)
-        self.setMinimumWidth(384)
-        # signals
-        self.wfile.valid.connect(self.wokbtn.setEnabled)
-        # internal state
-        self.qerrmsg = QErrorMessage(self)
-        self._model_filename = None
-
-    def setModel(self, model):
-        self.model = model
-        # set the default annotations filename, whenever a new model filename is set
-        filename = self.model.filename()
-        if filename and filename != self._model_filename:
-            self._model_filename = filename
-            self.wfile.setFilename(os.path.splitext(filename)[0] + ".ann")
-
-    def accept(self):
-        """Tries to export annotations, and closes the dialog if successful."""
-        try:
-            filename = self.wfile.filename()
-            if os.path.exists(filename) and QMessageBox.question(self, "Exporting Karma annotations",
-                                                                 "<P>Overwrite the file %s?</P>" % filename,
-                                                                 QMessageBox.Yes | QMessageBox.No,
-                                                                 QMessageBox.Yes) != QMessageBox.Yes:
-                return
-            f = open(self.wfile.filename(), "wt")
-            f.write('COORD W\nPA STANDARD\nCOLOR GREEN\nFONT hershey12\n')
-            # source list
-            if self.wsel.isChecked():
-                sources = [src for src in self.model.sources if src.selected]
-            else:
-                sources = self.model.sources
-            # calculate basis size for crosses (TODO: replace min_size with something more sensible, as this value is in degrees)
-            brightnesses = [abs(src.brightness()) for src in sources if src.brightness() != 0]
-            min_bright = brightnesses and min(brightnesses)
-            min_size = 0.01
-            # loop over sources
-            busy = BusyIndicator()
-            for src in sources:
-                ra = src.pos.ra / DEG
-                dec = src.pos.dec / DEG
-                # figure out source size
-                if src.brightness() and min_bright:
-                    ysize = (math.log10(abs(src.brightness())) - math.log10(min_bright) + 1) * min_size
-                else:
-                    ysize = min_size
-                xsize = ysize / (math.cos(src.pos.dec) or 1)
-                # figure out source style
-                style, label = self.model.getSourcePlotStyle(src)
-                if style:
-                    f.write('# %s\n' % src.name)
-                    # write symbol for source
-                    f.write('COLOR %s\n' % style.symbol_color)
-                    if style.symbol == "plus":
-                        f.write('CROSS %.12f %.12f %f %f\n' % (ra, dec, xsize, ysize))
-                    elif style.symbol == "cross":
-                        f.write('CROSS %.12f %.12f %f %f 45\n' % (ra, dec, ysize, ysize))
-                    elif style.symbol == "circle":
-                        f.write('CIRCLE %.12f %.12f %f\n' % (ra, dec, ysize))
-                    elif style.symbol == "dot":
-                        f.write('DOT %.12f %.12f\n' % (ra, dec))
-                    elif style.symbol == "square":
-                        f.write('CBOX %.12f %.12f %f %f\n' % (ra, dec, xsize, ysize))
-                    elif style.symbol == "diamond":
-                        f.write('CBOX %.12f %.12f %f %f 45\n' % (ra, dec, xsize, ysize))
-                    # write label
-                    if label:
-                        f.write('FONT hershey%d\n' % (style.label_size * 2))
-                        f.write('COLOR %s\n' % style.label_color)
-                        f.write('TEXT %.12f %.12f %s\n' % (ra, dec, label))
-            f.close()
-        except IOError as err:
-            busy.reset_cursor()
-            self.qerrmsg.showMessage("Error writing Karma annotations file %s: %s" % (filename, str(err)))
-            return
-        busy.reset_cursor()
-        self.parent().showMessage("Wrote Karma annotations for %d sources to file %s" % (len(sources), filename))
-        return QDialog.accept(self)
-
-
-def export_karma_annotations(mainwin, model):
-    dialog = getattr(mainwin, '_export_karma_dialog', None)
-    if not dialog:
-        dialog = mainwin._export_karma_dialog = ExportKarmaDialog(mainwin)
-    dialog.setModel(model)
-    # show dialog
-    return dialog.exec_()
-
-
-from TigGUI.Tools import registerTool
-
-registerTool("Export Karma annotations...", export_karma_annotations)
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+from PyQt5.QtWidgets import *
+
+
+import os.path
+from PyQt5.Qt import QObject, QHBoxLayout, pyqtSignal, QDialog, QVBoxLayout, \
+    QPushButton, Qt, QCheckBox, QMessageBox, QErrorMessage
+
+from TigGUI.kitties.widgets import BusyIndicator
+from TigGUI.Widgets import FileSelector
+
+DEG = math.pi / 180
+
+
+class ExportKarmaDialog(QDialog):
+    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
+        QDialog.__init__(self, parent, flags)
+        self.model = None
+        self.setModal(modal)
+        self.setWindowTitle("Export Karma annotations")
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # file selector
+        self.wfile = FileSelector(self, label="Filename:", dialog_label="Karma annotations filename",
+                                  default_suffix="ann", file_types="Karma annotations (*.ann)")
+        lo.addWidget(self.wfile)
+        # selected sources checkbox
+        self.wsel = QCheckBox("selected sources only", self)
+        lo.addWidget(self.wsel)
+        # OK/cancel buttons
+        lo.addSpacing(10)
+        lo2 = QHBoxLayout()
+        lo.addLayout(lo2)
+        lo2.setContentsMargins(5, 5, 5, 5)
+        self.wokbtn = QPushButton("OK", self)
+        self.wokbtn.setMinimumWidth(128)
+        self.wokbtn.clicked.connect(self.accept)
+        self.wokbtn.setEnabled(False)
+        cancelbtn = QPushButton("Cancel", self)
+        cancelbtn.setMinimumWidth(128)
+        cancelbtn.clicked.connect(self.reject)
+        lo2.addWidget(self.wokbtn)
+        lo2.addStretch(1)
+        lo2.addWidget(cancelbtn)
+        self.setMinimumWidth(384)
+        # signals
+        self.wfile.valid.connect(self.wokbtn.setEnabled)
+        # internal state
+        self.qerrmsg = QErrorMessage(self)
+        self._model_filename = None
+
+    def setModel(self, model):
+        self.model = model
+        # set the default annotations filename, whenever a new model filename is set
+        filename = self.model.filename()
+        if filename and filename != self._model_filename:
+            self._model_filename = filename
+            self.wfile.setFilename(os.path.splitext(filename)[0] + ".ann")
+
+    def accept(self):
+        """Tries to export annotations, and closes the dialog if successful."""
+        try:
+            filename = self.wfile.filename()
+            if os.path.exists(filename) and QMessageBox.question(self, "Exporting Karma annotations",
+                                                                 "<P>Overwrite the file %s?</P>" % filename,
+                                                                 QMessageBox.Yes | QMessageBox.No,
+                                                                 QMessageBox.Yes) != QMessageBox.Yes:
+                return
+            f = open(self.wfile.filename(), "wt")
+            f.write('COORD W\nPA STANDARD\nCOLOR GREEN\nFONT hershey12\n')
+            # source list
+            if self.wsel.isChecked():
+                sources = [src for src in self.model.sources if src.selected]
+            else:
+                sources = self.model.sources
+            # calculate basis size for crosses (TODO: replace min_size with something more sensible, as this value is in degrees)
+            brightnesses = [abs(src.brightness()) for src in sources if src.brightness() != 0]
+            min_bright = brightnesses and min(brightnesses)
+            min_size = 0.01
+            # loop over sources
+            busy = BusyIndicator()
+            for src in sources:
+                ra = src.pos.ra / DEG
+                dec = src.pos.dec / DEG
+                # figure out source size
+                if src.brightness() and min_bright:
+                    ysize = (math.log10(abs(src.brightness())) - math.log10(min_bright) + 1) * min_size
+                else:
+                    ysize = min_size
+                xsize = ysize / (math.cos(src.pos.dec) or 1)
+                # figure out source style
+                style, label = self.model.getSourcePlotStyle(src)
+                if style:
+                    f.write('# %s\n' % src.name)
+                    # write symbol for source
+                    f.write('COLOR %s\n' % style.symbol_color)
+                    if style.symbol == "plus":
+                        f.write('CROSS %.12f %.12f %f %f\n' % (ra, dec, xsize, ysize))
+                    elif style.symbol == "cross":
+                        f.write('CROSS %.12f %.12f %f %f 45\n' % (ra, dec, ysize, ysize))
+                    elif style.symbol == "circle":
+                        f.write('CIRCLE %.12f %.12f %f\n' % (ra, dec, ysize))
+                    elif style.symbol == "dot":
+                        f.write('DOT %.12f %.12f\n' % (ra, dec))
+                    elif style.symbol == "square":
+                        f.write('CBOX %.12f %.12f %f %f\n' % (ra, dec, xsize, ysize))
+                    elif style.symbol == "diamond":
+                        f.write('CBOX %.12f %.12f %f %f 45\n' % (ra, dec, xsize, ysize))
+                    # write label
+                    if label:
+                        f.write('FONT hershey%d\n' % (style.label_size * 2))
+                        f.write('COLOR %s\n' % style.label_color)
+                        f.write('TEXT %.12f %.12f %s\n' % (ra, dec, label))
+            f.close()
+        except IOError as err:
+            busy.reset_cursor()
+            self.qerrmsg.showMessage("Error writing Karma annotations file %s: %s" % (filename, str(err)))
+            return
+        busy.reset_cursor()
+        self.parent().showMessage("Wrote Karma annotations for %d sources to file %s" % (len(sources), filename))
+        return QDialog.accept(self)
+
+
+def export_karma_annotations(mainwin, model):
+    dialog = getattr(mainwin, '_export_karma_dialog', None)
+    if not dialog:
+        dialog = mainwin._export_karma_dialog = ExportKarmaDialog(mainwin)
+    dialog.setModel(model)
+    # show dialog
+    return dialog.exec_()
+
+
+from TigGUI.Tools import registerTool
+
+registerTool("Export Karma annotations...", export_karma_annotations)
--- tigger-1.6.0.orig/TigGUI/Tools/make_brick.py
+++ tigger-1.6.0/TigGUI/Tools/make_brick.py
@@ -1,329 +1,329 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-from PyQt5.QtWidgets import *
-
-from PyQt5.Qt import QObject, QHBoxLayout, QFileDialog, pyqtSignal, QLabel, \
-    QLineEdit, QDialog, QDoubleValidator, QVBoxLayout, \
-    QPushButton, Qt, QCheckBox, QMessageBox, QErrorMessage, \
-    QRadioButton
-
-# import TigGUI.kitties.utils
-
-from astropy.io import fits as pyfits
-
-import os.path
-import traceback
-
-from TigGUI.kitties.widgets import BusyIndicator
-from TigGUI.Widgets import FileSelector
-from Tigger.Models import SkyModel, ModelClasses
-from Tigger.Tools import Imaging
-
-DEG = math.pi / 180
-
-from astLib.astWCS import WCS
-
-
-class MakeBrickDialog(QDialog):
-    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
-        QDialog.__init__(self, parent, flags)
-        self.model = None
-        self._model_dir = None
-        self.setModal(modal)
-        self.setWindowTitle("Convert sources to FITS brick")
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # file selector
-        self.wfile = FileSelector(self, label="FITS filename:", dialog_label="Output FITS file", default_suffix="fits",
-                                  file_types="FITS files (*.fits *.FITS)", file_mode=QFileDialog.ExistingFile)
-        lo.addWidget(self.wfile)
-        # reference frequency
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        label = QLabel("Frequency, MHz:", self)
-        lo1.addWidget(label)
-        tip = """<P>If your sky model contains spectral information (such as spectral indices), then a brick may be generated
-    for a specific frequency. If a frequency is not specified here, the reference frequency of the model sources will be assumed.</P>"""
-        self.wfreq = QLineEdit(self)
-        self.wfreq.setValidator(QDoubleValidator(self))
-        label.setToolTip(tip)
-        self.wfreq.setToolTip(tip)
-        lo1.addWidget(self.wfreq)
-        # beam gain
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        self.wpb_apply = QCheckBox("Apply primary beam expression:", self)
-        self.wpb_apply.setChecked(True)
-        lo1.addWidget(self.wpb_apply)
-        tip = """<P>If this option is specified, a primary power beam gain will be applied to the sources before inserting
-    them into the brick. This can be any valid Python expression making use of the variables 'r' (corresponding
-    to distance from field centre, in radians) and 'fq' (corresponding to frequency.)</P>"""
-        self.wpb_exp = QLineEdit(self)
-        self.wpb_apply.setToolTip(tip)
-        self.wpb_exp.setToolTip(tip)
-        lo1.addWidget(self.wpb_exp)
-        # overwrite or add mode
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        self.woverwrite = QRadioButton("overwrite image", self)
-        self.woverwrite.setChecked(True)
-        lo1.addWidget(self.woverwrite)
-        self.waddinto = QRadioButton("add into image", self)
-        lo1.addWidget(self.waddinto)
-        # add to model
-        self.wadd = QCheckBox("Add resulting brick to sky model as a FITS image component", self)
-        lo.addWidget(self.wadd)
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        self.wpad = QLineEdit(self)
-        self.wpad.setValidator(QDoubleValidator(self))
-        self.wpad.setText("1.1")
-        lab = QLabel("...with padding factor:", self)
-        lab.setToolTip("""<P>The padding factor determines the amount of null padding inserted around the image during
-      the prediction stage. Padding alleviates the effects of tapering and detapering in the uv-brick, which can show
-      up towards the edges of the image. For a factor of N, the image will be padded out to N times its original size.
-      This increases memory use, so if you have no flux at the edges of the image anyway, then a pad factor of 1 is
-      perfectly fine.</P>""")
-        self.wpad.setToolTip(lab.toolTip())
-        self.wadd.toggled[bool].connect(self.wpad.setEnabled)
-        self.wadd.toggled[bool].connect(lab.setEnabled)
-        self.wpad.setEnabled(False)
-        lab.setEnabled(False)
-        lo1.addStretch(1)
-        lo1.addWidget(lab, 0)
-        lo1.addWidget(self.wpad, 1)
-        self.wdel = QCheckBox("Remove from the sky model sources that go into the brick", self)
-        lo.addWidget(self.wdel)
-        # OK/cancel buttons
-        lo.addSpacing(10)
-        lo2 = QHBoxLayout()
-        lo.addLayout(lo2)
-        lo2.setContentsMargins(5, 5, 5, 5)
-        self.wokbtn = QPushButton("OK", self)
-        self.wokbtn.setMinimumWidth(128)
-        self.wokbtn.clicked.connect(self.accept)
-        self.wokbtn.setEnabled(False)
-        cancelbtn = QPushButton("Cancel", self)
-        cancelbtn.setMinimumWidth(128)
-        cancelbtn.clicked.connect(self.reject)
-        lo2.addWidget(self.wokbtn)
-        lo2.addStretch(1)
-        lo2.addWidget(cancelbtn)
-        self.setMinimumWidth(384)
-        # signals
-        self.wfile.filenameSelected.connect(self._fileSelected)
-        # internal state
-        self.qerrmsg = QErrorMessage(self)
-
-    def setModel(self, model):
-        self.model = model
-        pb = self.model.primaryBeam()
-        if pb:
-            self.wpb_exp.setText(pb)
-        else:
-            self.wpb_apply.setChecked(False)
-            self.wpb_exp.setText("")
-        if model.filename():
-            self._model_dir = os.path.dirname(os.path.abspath(model.filename()))
-        else:
-            self._model_dir = os.path.abspath('.')
-        self.wfile.setDirectory(self._model_dir)
-        self._fileSelected(self.wfile.filename(), quiet=True)
-
-    def _fileSelected(self, filename, quiet=False):
-        self.wokbtn.setEnabled(False)
-        if not filename:
-            return None
-        # check that filename matches model
-        if not os.path.samefile(self._model_dir, os.path.dirname(filename)):
-            self.wfile.setFilename('')
-            if not quiet:
-                QMessageBox.warning(self, "Directory mismatch", """<P>The FITS file must reside in the same directory
-          as the current sky model.</P>""")
-            self.wfile.setDirectory(self._model_dir)
-            return None
-        # read fits file
-        busy = BusyIndicator()
-        try:
-            input_hdu = pyfits.open(filename)[0]
-            hdr = input_hdu.header
-            # get frequency, if specified
-            for axis in range(1, hdr['NAXIS'] + 1):
-                if hdr['CTYPE%d' % axis].upper() == 'FREQ':
-                    self.wfreq.setText(str(hdr['CRVAL%d' % axis] / 1e+6))
-                    break
-        except Exception as err:
-            busy.reset_cursor()
-            self.wfile.setFilename('')
-            if not quiet:
-                QMessageBox.warning(self, "Error reading FITS",
-                                    "Error reading FITS file %s: %s" % (filename, str(err)))
-            return None
-        self.wokbtn.setEnabled(True)
-        # if filename is not in model already, enable the "add to model" control
-        for src in self.model.sources:
-            if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage) \
-                    and os.path.exists(src.shape.filename) and os.path.exists(filename) \
-                    and os.path.samefile(src.shape.filename, filename):
-                self.wadd.setChecked(True)
-                self.wadd.setEnabled(False)
-                self.wadd.setText("image already in sky model")
-                break
-        else:
-            self.wadd.setText("add image to sky model")
-        busy.reset_cursor()
-        return filename
-
-    def accept(self):
-        """Tries to make a brick, and closes the dialog if successful."""
-        sources = [src for src in self.model.sources if src.selected and src.typecode == 'pnt']
-        filename = self.wfile.filename()
-        if not self._fileSelected(filename):
-            return
-        # get PB expression
-        pbfunc = None
-        if self.wpb_apply.isChecked():
-            pbexp = str(self.wpb_exp.text())
-            try:
-                pbfunc = eval("lambda r,fq:" + pbexp)
-            except Exception as err:
-                QMessageBox.warning(self, "Error parsing PB experssion",
-                                    "Error parsing primary beam expression %s: %s" % (pbexp, str(err)))
-                return
-        # get frequency
-        freq = str(self.wfreq.text())
-        freq = float(freq) * 1e+6 if freq else None
-        # get pad factor
-        pad = str(self.wpad.text())
-        pad = max(float(pad), 1) if pad else 1
-        # read fits file
-        busy = BusyIndicator()
-        try:
-            input_hdu = pyfits.open(filename)[0]
-        except Exception as err:
-            busy.reset_cursor()
-            QMessageBox.warning(self, "Error reading FITS", "Error reading FITS file %s: %s" % (filename, str(err)))
-            return
-        # reset data if asked to
-        if self.woverwrite.isChecked():
-            input_hdu.data[...] = 0
-        # insert sources
-        Imaging.restoreSources(input_hdu, sources, 0, primary_beam=pbfunc, freq=freq)
-        # save fits file
-        try:
-            # pyfits seems to produce an exception:
-            #         TypeError: formatwarning() takes exactly 4 arguments (5 given)
-            # when attempting to overwrite a file. As a workaround, remove the file first.
-            if os.path.exists(filename):
-                os.remove(filename)
-            input_hdu.writeto(filename)
-        except Exception as err:
-            traceback.print_exc()
-            busy.reset_cursor()
-            QMessageBox.warning(self, "Error writing FITS", "Error writing FITS file %s: %s" % (filename, str(err)))
-            return
-        changed = False
-        sources = self.model.sources
-        # remove sources from model if asked to
-        if self.wdel.isChecked():
-            sources = [src for src in sources if not (src.selected and src.typecode == 'pnt')]
-            changed = True
-        # add image to model if asked to
-        if self.wadd.isChecked():
-            hdr = input_hdu.header
-            # get image parameters
-            max_flux = float(input_hdu.data.max())
-            wcs = WCS(hdr, mode='pyfits')
-            # Get reference pixel coordinates
-            # wcs.getCentreWCSCoords() doesn't work, as that gives us the middle of the image
-            # So scan the header to get the CRPIX values
-            ra0 = dec0 = 1
-            for iaxis in range(hdr['NAXIS']):
-                axs = str(iaxis + 1)
-                name = hdr.get('CTYPE' + axs, axs).upper()
-                if name.startswith("RA"):
-                    ra0 = hdr.get('CRPIX' + axs, 1) - 1
-                elif name.startswith("DEC"):
-                    dec0 = hdr.get('CRPIX' + axs, 1) - 1
-            # convert pixel to degrees
-            ra0, dec0 = wcs.pix2wcs(ra0, dec0)
-            ra0 *= DEG
-            dec0 *= DEG
-            sx, sy = wcs.getHalfSizeDeg()
-            sx *= DEG
-            sy *= DEG
-            nx, ny = input_hdu.data.shape[-1:-3:-1]
-            # check if this image is already contained in the model
-            for src in sources:
-                if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage) and os.path.samefile(
-                        src.shape.filename, filename):
-                    # update source parameters
-                    src.pos.ra, src.pos.dec = ra0, dec0
-                    src.flux.I = max_flux
-                    src.shape.ex, src.shape.ey = sx, sy
-                    src.shape.nx, src.shape.ny = nx, ny
-                    src.shape.pad = pad
-                    break
-            # not contained, make new source object
-            else:
-                pos = ModelClasses.Position(ra0, dec0)
-                flux = ModelClasses.Flux(max_flux)
-                shape = ModelClasses.FITSImage(sx, sy, 0, os.path.basename(filename), nx, ny, pad=pad)
-                img_src = SkyModel.Source(os.path.splitext(os.path.basename(filename))[0], pos, flux, shape=shape)
-                sources.append(img_src)
-            changed = True
-        if changed:
-            self.model.setSources(sources)
-            self.model.emitUpdate(SkyModel.SkyModel.UpdateAll, origin=self)
-        self.parent().showMessage("Wrote %d sources to FITS file %s" % (len(sources), filename))
-        busy.reset_cursor()
-        return QDialog.accept(self)
-
-
-def make_brick(mainwin, model):
-    # check that something is selected
-    if not [src for src in model.sources if src.selected]:
-        mainwin.signalshowErrorMessage.emit(
-            "Cannot make FITS brick without a source selection. Please select some sources first.")
-        return
-    dialog = getattr(mainwin, '_make_brick_dialog', None)
-    if not dialog:
-        dialog = mainwin._make_brick_dialog = MakeBrickDialog(mainwin)
-    dialog.setModel(model)
-    # show dialog
-    return dialog.exec_()
-
-
-from TigGUI.Tools import registerTool
-
-registerTool("Make FITS brick from selected sources...", make_brick)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+from PyQt5.QtWidgets import *
+
+from PyQt5.Qt import QObject, QHBoxLayout, QFileDialog, pyqtSignal, QLabel, \
+    QLineEdit, QDialog, QDoubleValidator, QVBoxLayout, \
+    QPushButton, Qt, QCheckBox, QMessageBox, QErrorMessage, \
+    QRadioButton
+
+# import TigGUI.kitties.utils
+
+from astropy.io import fits as pyfits
+
+import os.path
+import traceback
+
+from TigGUI.kitties.widgets import BusyIndicator
+from TigGUI.Widgets import FileSelector
+from Tigger.Models import SkyModel, ModelClasses
+from Tigger.Tools import Imaging
+
+DEG = math.pi / 180
+
+from astLib.astWCS import WCS
+
+
+class MakeBrickDialog(QDialog):
+    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
+        QDialog.__init__(self, parent, flags)
+        self.model = None
+        self._model_dir = None
+        self.setModal(modal)
+        self.setWindowTitle("Convert sources to FITS brick")
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # file selector
+        self.wfile = FileSelector(self, label="FITS filename:", dialog_label="Output FITS file", default_suffix="fits",
+                                  file_types="FITS files (*.fits *.FITS)", file_mode=QFileDialog.ExistingFile)
+        lo.addWidget(self.wfile)
+        # reference frequency
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        label = QLabel("Frequency, MHz:", self)
+        lo1.addWidget(label)
+        tip = """<P>If your sky model contains spectral information (such as spectral indices), then a brick may be generated
+    for a specific frequency. If a frequency is not specified here, the reference frequency of the model sources will be assumed.</P>"""
+        self.wfreq = QLineEdit(self)
+        self.wfreq.setValidator(QDoubleValidator(self))
+        label.setToolTip(tip)
+        self.wfreq.setToolTip(tip)
+        lo1.addWidget(self.wfreq)
+        # beam gain
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        self.wpb_apply = QCheckBox("Apply primary beam expression:", self)
+        self.wpb_apply.setChecked(True)
+        lo1.addWidget(self.wpb_apply)
+        tip = """<P>If this option is specified, a primary power beam gain will be applied to the sources before inserting
+    them into the brick. This can be any valid Python expression making use of the variables 'r' (corresponding
+    to distance from field centre, in radians) and 'fq' (corresponding to frequency.)</P>"""
+        self.wpb_exp = QLineEdit(self)
+        self.wpb_apply.setToolTip(tip)
+        self.wpb_exp.setToolTip(tip)
+        lo1.addWidget(self.wpb_exp)
+        # overwrite or add mode
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        self.woverwrite = QRadioButton("overwrite image", self)
+        self.woverwrite.setChecked(True)
+        lo1.addWidget(self.woverwrite)
+        self.waddinto = QRadioButton("add into image", self)
+        lo1.addWidget(self.waddinto)
+        # add to model
+        self.wadd = QCheckBox("Add resulting brick to sky model as a FITS image component", self)
+        lo.addWidget(self.wadd)
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        self.wpad = QLineEdit(self)
+        self.wpad.setValidator(QDoubleValidator(self))
+        self.wpad.setText("1.1")
+        lab = QLabel("...with padding factor:", self)
+        lab.setToolTip("""<P>The padding factor determines the amount of null padding inserted around the image during
+      the prediction stage. Padding alleviates the effects of tapering and detapering in the uv-brick, which can show
+      up towards the edges of the image. For a factor of N, the image will be padded out to N times its original size.
+      This increases memory use, so if you have no flux at the edges of the image anyway, then a pad factor of 1 is
+      perfectly fine.</P>""")
+        self.wpad.setToolTip(lab.toolTip())
+        self.wadd.toggled[bool].connect(self.wpad.setEnabled)
+        self.wadd.toggled[bool].connect(lab.setEnabled)
+        self.wpad.setEnabled(False)
+        lab.setEnabled(False)
+        lo1.addStretch(1)
+        lo1.addWidget(lab, 0)
+        lo1.addWidget(self.wpad, 1)
+        self.wdel = QCheckBox("Remove from the sky model sources that go into the brick", self)
+        lo.addWidget(self.wdel)
+        # OK/cancel buttons
+        lo.addSpacing(10)
+        lo2 = QHBoxLayout()
+        lo.addLayout(lo2)
+        lo2.setContentsMargins(5, 5, 5, 5)
+        self.wokbtn = QPushButton("OK", self)
+        self.wokbtn.setMinimumWidth(128)
+        self.wokbtn.clicked.connect(self.accept)
+        self.wokbtn.setEnabled(False)
+        cancelbtn = QPushButton("Cancel", self)
+        cancelbtn.setMinimumWidth(128)
+        cancelbtn.clicked.connect(self.reject)
+        lo2.addWidget(self.wokbtn)
+        lo2.addStretch(1)
+        lo2.addWidget(cancelbtn)
+        self.setMinimumWidth(384)
+        # signals
+        self.wfile.filenameSelected.connect(self._fileSelected)
+        # internal state
+        self.qerrmsg = QErrorMessage(self)
+
+    def setModel(self, model):
+        self.model = model
+        pb = self.model.primaryBeam()
+        if pb:
+            self.wpb_exp.setText(pb)
+        else:
+            self.wpb_apply.setChecked(False)
+            self.wpb_exp.setText("")
+        if model.filename():
+            self._model_dir = os.path.dirname(os.path.abspath(model.filename()))
+        else:
+            self._model_dir = os.path.abspath('.')
+        self.wfile.setDirectory(self._model_dir)
+        self._fileSelected(self.wfile.filename(), quiet=True)
+
+    def _fileSelected(self, filename, quiet=False):
+        self.wokbtn.setEnabled(False)
+        if not filename:
+            return None
+        # check that filename matches model
+        if not os.path.samefile(self._model_dir, os.path.dirname(filename)):
+            self.wfile.setFilename('')
+            if not quiet:
+                QMessageBox.warning(self, "Directory mismatch", """<P>The FITS file must reside in the same directory
+          as the current sky model.</P>""")
+            self.wfile.setDirectory(self._model_dir)
+            return None
+        # read fits file
+        busy = BusyIndicator()
+        try:
+            input_hdu = pyfits.open(filename)[0]
+            hdr = input_hdu.header
+            # get frequency, if specified
+            for axis in range(1, hdr['NAXIS'] + 1):
+                if hdr['CTYPE%d' % axis].upper() == 'FREQ':
+                    self.wfreq.setText(str(hdr['CRVAL%d' % axis] / 1e+6))
+                    break
+        except Exception as err:
+            busy.reset_cursor()
+            self.wfile.setFilename('')
+            if not quiet:
+                QMessageBox.warning(self, "Error reading FITS",
+                                    "Error reading FITS file %s: %s" % (filename, str(err)))
+            return None
+        self.wokbtn.setEnabled(True)
+        # if filename is not in model already, enable the "add to model" control
+        for src in self.model.sources:
+            if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage) \
+                    and os.path.exists(src.shape.filename) and os.path.exists(filename) \
+                    and os.path.samefile(src.shape.filename, filename):
+                self.wadd.setChecked(True)
+                self.wadd.setEnabled(False)
+                self.wadd.setText("image already in sky model")
+                break
+        else:
+            self.wadd.setText("add image to sky model")
+        busy.reset_cursor()
+        return filename
+
+    def accept(self):
+        """Tries to make a brick, and closes the dialog if successful."""
+        sources = [src for src in self.model.sources if src.selected and src.typecode == 'pnt']
+        filename = self.wfile.filename()
+        if not self._fileSelected(filename):
+            return
+        # get PB expression
+        pbfunc = None
+        if self.wpb_apply.isChecked():
+            pbexp = str(self.wpb_exp.text())
+            try:
+                pbfunc = eval("lambda r,fq:" + pbexp)
+            except Exception as err:
+                QMessageBox.warning(self, "Error parsing PB experssion",
+                                    "Error parsing primary beam expression %s: %s" % (pbexp, str(err)))
+                return
+        # get frequency
+        freq = str(self.wfreq.text())
+        freq = float(freq) * 1e+6 if freq else None
+        # get pad factor
+        pad = str(self.wpad.text())
+        pad = max(float(pad), 1) if pad else 1
+        # read fits file
+        busy = BusyIndicator()
+        try:
+            input_hdu = pyfits.open(filename)[0]
+        except Exception as err:
+            busy.reset_cursor()
+            QMessageBox.warning(self, "Error reading FITS", "Error reading FITS file %s: %s" % (filename, str(err)))
+            return
+        # reset data if asked to
+        if self.woverwrite.isChecked():
+            input_hdu.data[...] = 0
+        # insert sources
+        Imaging.restoreSources(input_hdu, sources, 0, primary_beam=pbfunc, freq=freq)
+        # save fits file
+        try:
+            # pyfits seems to produce an exception:
+            #         TypeError: formatwarning() takes exactly 4 arguments (5 given)
+            # when attempting to overwrite a file. As a workaround, remove the file first.
+            if os.path.exists(filename):
+                os.remove(filename)
+            input_hdu.writeto(filename)
+        except Exception as err:
+            traceback.print_exc()
+            busy.reset_cursor()
+            QMessageBox.warning(self, "Error writing FITS", "Error writing FITS file %s: %s" % (filename, str(err)))
+            return
+        changed = False
+        sources = self.model.sources
+        # remove sources from model if asked to
+        if self.wdel.isChecked():
+            sources = [src for src in sources if not (src.selected and src.typecode == 'pnt')]
+            changed = True
+        # add image to model if asked to
+        if self.wadd.isChecked():
+            hdr = input_hdu.header
+            # get image parameters
+            max_flux = float(input_hdu.data.max())
+            wcs = WCS(hdr, mode='pyfits')
+            # Get reference pixel coordinates
+            # wcs.getCentreWCSCoords() doesn't work, as that gives us the middle of the image
+            # So scan the header to get the CRPIX values
+            ra0 = dec0 = 1
+            for iaxis in range(hdr['NAXIS']):
+                axs = str(iaxis + 1)
+                name = hdr.get('CTYPE' + axs, axs).upper()
+                if name.startswith("RA"):
+                    ra0 = hdr.get('CRPIX' + axs, 1) - 1
+                elif name.startswith("DEC"):
+                    dec0 = hdr.get('CRPIX' + axs, 1) - 1
+            # convert pixel to degrees
+            ra0, dec0 = wcs.pix2wcs(ra0, dec0)
+            ra0 *= DEG
+            dec0 *= DEG
+            sx, sy = wcs.getHalfSizeDeg()
+            sx *= DEG
+            sy *= DEG
+            nx, ny = input_hdu.data.shape[-1:-3:-1]
+            # check if this image is already contained in the model
+            for src in sources:
+                if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage) and os.path.samefile(
+                        src.shape.filename, filename):
+                    # update source parameters
+                    src.pos.ra, src.pos.dec = ra0, dec0
+                    src.flux.I = max_flux
+                    src.shape.ex, src.shape.ey = sx, sy
+                    src.shape.nx, src.shape.ny = nx, ny
+                    src.shape.pad = pad
+                    break
+            # not contained, make new source object
+            else:
+                pos = ModelClasses.Position(ra0, dec0)
+                flux = ModelClasses.Flux(max_flux)
+                shape = ModelClasses.FITSImage(sx, sy, 0, os.path.basename(filename), nx, ny, pad=pad)
+                img_src = SkyModel.Source(os.path.splitext(os.path.basename(filename))[0], pos, flux, shape=shape)
+                sources.append(img_src)
+            changed = True
+        if changed:
+            self.model.setSources(sources)
+            self.model.emitUpdate(SkyModel.SkyModel.UpdateAll, origin=self)
+        self.parent().showMessage("Wrote %d sources to FITS file %s" % (len(sources), filename))
+        busy.reset_cursor()
+        return QDialog.accept(self)
+
+
+def make_brick(mainwin, model):
+    # check that something is selected
+    if not [src for src in model.sources if src.selected]:
+        mainwin.signalshowErrorMessage.emit(
+            "Cannot make FITS brick without a source selection. Please select some sources first.")
+        return
+    dialog = getattr(mainwin, '_make_brick_dialog', None)
+    if not dialog:
+        dialog = mainwin._make_brick_dialog = MakeBrickDialog(mainwin)
+    dialog.setModel(model)
+    # show dialog
+    return dialog.exec_()
+
+
+from TigGUI.Tools import registerTool
+
+registerTool("Make FITS brick from selected sources...", make_brick)
--- tigger-1.6.0.orig/TigGUI/Tools/restore_image.py
+++ tigger-1.6.0/TigGUI/Tools/restore_image.py
@@ -1,228 +1,228 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-from PyQt5.QtWidgets import *
-
-from PyQt5.Qt import QObject, QHBoxLayout, QFileDialog, pyqtSignal, QLabel, \
-    QLineEdit, QDialog, QDoubleValidator, QVBoxLayout, \
-    QPushButton, Qt, QCheckBox, QMessageBox, QErrorMessage
-
-import TigGUI.kitties.utils
-
-from astropy.io import fits as pyfits
-
-from TigGUI.kitties.widgets import BusyIndicator
-from TigGUI.Widgets import FileSelector
-from Tigger.Tools import Imaging
-
-DEG = math.pi / 180
-
-
-class RestoreImageDialog(QDialog):
-    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
-        QDialog.__init__(self, parent, flags)
-        self.model = None
-        self.setModal(modal)
-        self.setWindowTitle("Restore model into image")
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # file selector
-        self.wfile_in = FileSelector(self, label="Input FITS file:", dialog_label="Input FITS file",
-                                     default_suffix="fits", file_types="FITS files (*.fits *.FITS)",
-                                     file_mode=QFileDialog.ExistingFile)
-        lo.addWidget(self.wfile_in)
-        self.wfile_out = FileSelector(self, label="Output FITS file:", dialog_label="Output FITS file",
-                                      default_suffix="fits", file_types="FITS files (*.fits *.FITS)",
-                                      file_mode=QFileDialog.AnyFile)
-        lo.addWidget(self.wfile_out)
-        # beam size
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        lo1.addWidget(QLabel("Restoring beam FWHM, major axis:", self))
-        self.wbmaj = QLineEdit(self)
-        lo1.addWidget(self.wbmaj)
-        lo1.addWidget(QLabel("\"     minor axis:", self))
-        self.wbmin = QLineEdit(self)
-        lo1.addWidget(self.wbmin)
-        lo1.addWidget(QLabel("\"     P.A.:", self))
-        self.wbpa = QLineEdit(self)
-        lo1.addWidget(self.wbpa)
-        lo1.addWidget(QLabel("\u00B0", self))
-        for w in self.wbmaj, self.wbmin, self.wbpa:
-            w.setValidator(QDoubleValidator(self))
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        self.wfile_psf = FileSelector(self, label="Set restoring beam by fitting PSF image:",
-                                      dialog_label="PSF FITS file", default_suffix="fits",
-                                      file_types="FITS files (*.fits *.FITS)", file_mode=QFileDialog.ExistingFile)
-        lo1.addSpacing(32)
-        lo1.addWidget(self.wfile_psf)
-        # selection only
-        self.wselonly = QCheckBox("restore selected model sources only", self)
-        lo.addWidget(self.wselonly)
-        # OK/cancel buttons
-        lo.addSpacing(10)
-        lo2 = QHBoxLayout()
-        lo.addLayout(lo2)
-        lo2.setContentsMargins(0, 0, 0, 0)
-        lo2.setContentsMargins(5, 5, 5, 5)
-        self.wokbtn = QPushButton("OK", self)
-        self.wokbtn.setMinimumWidth(128)
-        self.wokbtn.clicked.connect(self.accept)
-        self.wokbtn.setEnabled(False)
-        cancelbtn = QPushButton("Cancel", self)
-        cancelbtn.setMinimumWidth(128)
-        cancelbtn.clicked.connect(self.reject)
-        lo2.addWidget(self.wokbtn)
-        lo2.addStretch(1)
-        lo2.addWidget(cancelbtn)
-        self.setMinimumWidth(384)
-        # signals
-        self.wfile_in.filenameSelected.connect(self._fileSelected)
-        self.wfile_in.filenameSelected.connect(self._inputFileSelected)
-        self.wfile_out.filenameSelected.connect(self._fileSelected)
-        self.wfile_psf.filenameSelected.connect(self._psfFileSelected)
-        # internal state
-        self.qerrmsg = QErrorMessage(self)
-
-    def setModel(self, model):
-        nsel = len([src for src in model.sources if src.selected])
-        self.wselonly.setVisible(nsel > 0 and nsel < len(model.sources))
-        self.model = model
-        self._fileSelected(None)
-
-    def _fileSelected(self, filename):
-        self.wokbtn.setEnabled(bool(self.wfile_in.filename() and self.wfile_out.filename()))
-
-    def _inputFileSelected(self, filename):
-        if filename:
-            try:
-                header = pyfits.open(filename)[0].header
-            except Exception as err:
-                self.qerrmsg.showMessage("Error reading FITS file %s: %s" % (filename, str(err)))
-                self.wfile_in.setFilename("")
-                return
-            # try to get beam extents
-            gx, gy, grot = [header.get(x, None) for x in ('BMAJ', 'BMIN', 'BPA')]
-            if all([x is not None for x in (gx, gy, grot)]):
-                # if beam size is already set, ask before overwriting
-                print([str(x.text()) for x in (self.wbmaj, self.wbmin, self.wbpa)])
-                if any([bool(str(x.text())) for x in (self.wbmaj, self.wbmin, self.wbpa)]) and \
-                        QMessageBox.question(self, "Set restoring beam",
-                                             "Also reset restoring beam size from this FITS file?",
-                                             QMessageBox.Yes | QMessageBox.No) != QMessageBox.Yes:
-                    return
-                self.wbmaj.setText("%.2f" % (gx * 3600))
-                self.wbmin.setText("%.2f" % (gy * 3600))
-                self.wbpa.setText("%.2f" % grot)
-
-    def _psfFileSelected(self, filename):
-        busy = BusyIndicator()
-        filename = str(filename)
-        self.parent().showMessage("Fitting gaussian to PSF file %s" % filename)
-        try:
-            bmaj, bmin, pa = [x / DEG for x in Imaging.fitPsf(filename)]
-        except Exception as err:
-            busy.reset_cursor()
-            self.qerrmsg.showMessage("Error fitting PSF file %s: %s" % (filename, str(err)))
-            return
-        bmaj *= 3600 * Imaging.FWHM
-        bmin *= 3600 * Imaging.FWHM
-        self.wbmaj.setText(str(bmaj))
-        self.wbmin.setText(str(bmin))
-        self.wbpa.setText(str(pa))
-        busy.reset_cursor()
-
-    def accept(self):
-        """Tries to restore the image, and closes the dialog if successful."""
-        # get list of sources to restore
-        sources = self.model.sources
-        sel_sources = [src for src in sources if src.selected]
-        if len(sel_sources) > 0 and len(sel_sources) < len(sources) and self.wselonly.isChecked():
-            sources = sel_sources
-        if not sources:
-            self.qerrmsg.showMessage("No sources to restore.")
-            return
-        busy = BusyIndicator()
-        # get filenames
-        infile = self.wfile_in.filename()
-        outfile = self.wfile_out.filename()
-        self.parent().showMessage(
-            "Restoring %d model sources to image %s, writing to %s" % (len(sources), infile, outfile))
-        # read fits file
-        try:
-            input_hdu = pyfits.open(infile)[0]
-        except Exception as err:
-            busy.reset_cursor()
-            self.qerrmsg.showMessage("Error reading FITS file %s: %s" % (infile, str(err)))
-            return
-        # get beam sizes
-        try:
-            bmaj = float(str(self.wbmaj.text()))
-            bmin = float(str(self.wbmin.text()))
-            pa = float(str(self.wbpa.text()) or "0")
-        except Exception as err:
-            busy.reset_cursor()
-            self.qerrmsg.showMessage("Invalid beam size specified")
-            return
-        bmaj = bmaj / (Imaging.FWHM * 3600) * DEG
-        bmin = bmin / (Imaging.FWHM * 3600) * DEG
-        pa = pa * DEG
-        # restore
-        try:
-            Imaging.restoreSources(input_hdu, sources, bmaj, bmin, pa)
-        except Exception as err:
-            busy.reset_cursor()
-            self.qerrmsg.showMessage("Error restoring model into image: %s" % str(err))
-            return
-        # save fits file
-        try:
-            input_hdu.writeto(outfile, overwrite=True)
-        except Exception as err:
-            busy.reset_cursor()
-            self.qerrmsg.showMessage("Error writing FITS file %s: %s" % (outfile, str(err)))
-            return
-        self.parent().loadImage(outfile)
-        busy.reset_cursor()
-        return QDialog.accept(self)
-
-
-def restore_into_image(mainwin, model):
-    dialog = getattr(mainwin, '_restore_into_image_dialog', None)
-    if not dialog:
-        dialog = mainwin._restore_into_image_dialog = RestoreImageDialog(mainwin)
-    dialog.setModel(model)
-    # show dialog
-    return dialog.exec_()
-
-
-from TigGUI.Tools import registerTool
-
-registerTool("Restore model into image...", restore_into_image)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+from PyQt5.QtWidgets import *
+
+from PyQt5.Qt import QObject, QHBoxLayout, QFileDialog, pyqtSignal, QLabel, \
+    QLineEdit, QDialog, QDoubleValidator, QVBoxLayout, \
+    QPushButton, Qt, QCheckBox, QMessageBox, QErrorMessage
+
+import TigGUI.kitties.utils
+
+from astropy.io import fits as pyfits
+
+from TigGUI.kitties.widgets import BusyIndicator
+from TigGUI.Widgets import FileSelector
+from Tigger.Tools import Imaging
+
+DEG = math.pi / 180
+
+
+class RestoreImageDialog(QDialog):
+    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
+        QDialog.__init__(self, parent, flags)
+        self.model = None
+        self.setModal(modal)
+        self.setWindowTitle("Restore model into image")
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # file selector
+        self.wfile_in = FileSelector(self, label="Input FITS file:", dialog_label="Input FITS file",
+                                     default_suffix="fits", file_types="FITS files (*.fits *.FITS)",
+                                     file_mode=QFileDialog.ExistingFile)
+        lo.addWidget(self.wfile_in)
+        self.wfile_out = FileSelector(self, label="Output FITS file:", dialog_label="Output FITS file",
+                                      default_suffix="fits", file_types="FITS files (*.fits *.FITS)",
+                                      file_mode=QFileDialog.AnyFile)
+        lo.addWidget(self.wfile_out)
+        # beam size
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        lo1.addWidget(QLabel("Restoring beam FWHM, major axis:", self))
+        self.wbmaj = QLineEdit(self)
+        lo1.addWidget(self.wbmaj)
+        lo1.addWidget(QLabel("\"     minor axis:", self))
+        self.wbmin = QLineEdit(self)
+        lo1.addWidget(self.wbmin)
+        lo1.addWidget(QLabel("\"     P.A.:", self))
+        self.wbpa = QLineEdit(self)
+        lo1.addWidget(self.wbpa)
+        lo1.addWidget(QLabel("\u00B0", self))
+        for w in self.wbmaj, self.wbmin, self.wbpa:
+            w.setValidator(QDoubleValidator(self))
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        self.wfile_psf = FileSelector(self, label="Set restoring beam by fitting PSF image:",
+                                      dialog_label="PSF FITS file", default_suffix="fits",
+                                      file_types="FITS files (*.fits *.FITS)", file_mode=QFileDialog.ExistingFile)
+        lo1.addSpacing(32)
+        lo1.addWidget(self.wfile_psf)
+        # selection only
+        self.wselonly = QCheckBox("restore selected model sources only", self)
+        lo.addWidget(self.wselonly)
+        # OK/cancel buttons
+        lo.addSpacing(10)
+        lo2 = QHBoxLayout()
+        lo.addLayout(lo2)
+        lo2.setContentsMargins(0, 0, 0, 0)
+        lo2.setContentsMargins(5, 5, 5, 5)
+        self.wokbtn = QPushButton("OK", self)
+        self.wokbtn.setMinimumWidth(128)
+        self.wokbtn.clicked.connect(self.accept)
+        self.wokbtn.setEnabled(False)
+        cancelbtn = QPushButton("Cancel", self)
+        cancelbtn.setMinimumWidth(128)
+        cancelbtn.clicked.connect(self.reject)
+        lo2.addWidget(self.wokbtn)
+        lo2.addStretch(1)
+        lo2.addWidget(cancelbtn)
+        self.setMinimumWidth(384)
+        # signals
+        self.wfile_in.filenameSelected.connect(self._fileSelected)
+        self.wfile_in.filenameSelected.connect(self._inputFileSelected)
+        self.wfile_out.filenameSelected.connect(self._fileSelected)
+        self.wfile_psf.filenameSelected.connect(self._psfFileSelected)
+        # internal state
+        self.qerrmsg = QErrorMessage(self)
+
+    def setModel(self, model):
+        nsel = len([src for src in model.sources if src.selected])
+        self.wselonly.setVisible(nsel > 0 and nsel < len(model.sources))
+        self.model = model
+        self._fileSelected(None)
+
+    def _fileSelected(self, filename):
+        self.wokbtn.setEnabled(bool(self.wfile_in.filename() and self.wfile_out.filename()))
+
+    def _inputFileSelected(self, filename):
+        if filename:
+            try:
+                header = pyfits.open(filename)[0].header
+            except Exception as err:
+                self.qerrmsg.showMessage("Error reading FITS file %s: %s" % (filename, str(err)))
+                self.wfile_in.setFilename("")
+                return
+            # try to get beam extents
+            gx, gy, grot = [header.get(x, None) for x in ('BMAJ', 'BMIN', 'BPA')]
+            if all([x is not None for x in (gx, gy, grot)]):
+                # if beam size is already set, ask before overwriting
+                print([str(x.text()) for x in (self.wbmaj, self.wbmin, self.wbpa)])
+                if any([bool(str(x.text())) for x in (self.wbmaj, self.wbmin, self.wbpa)]) and \
+                        QMessageBox.question(self, "Set restoring beam",
+                                             "Also reset restoring beam size from this FITS file?",
+                                             QMessageBox.Yes | QMessageBox.No) != QMessageBox.Yes:
+                    return
+                self.wbmaj.setText("%.2f" % (gx * 3600))
+                self.wbmin.setText("%.2f" % (gy * 3600))
+                self.wbpa.setText("%.2f" % grot)
+
+    def _psfFileSelected(self, filename):
+        busy = BusyIndicator()
+        filename = str(filename)
+        self.parent().showMessage("Fitting gaussian to PSF file %s" % filename)
+        try:
+            bmaj, bmin, pa = [x / DEG for x in Imaging.fitPsf(filename)]
+        except Exception as err:
+            busy.reset_cursor()
+            self.qerrmsg.showMessage("Error fitting PSF file %s: %s" % (filename, str(err)))
+            return
+        bmaj *= 3600 * Imaging.FWHM
+        bmin *= 3600 * Imaging.FWHM
+        self.wbmaj.setText(str(bmaj))
+        self.wbmin.setText(str(bmin))
+        self.wbpa.setText(str(pa))
+        busy.reset_cursor()
+
+    def accept(self):
+        """Tries to restore the image, and closes the dialog if successful."""
+        # get list of sources to restore
+        sources = self.model.sources
+        sel_sources = [src for src in sources if src.selected]
+        if len(sel_sources) > 0 and len(sel_sources) < len(sources) and self.wselonly.isChecked():
+            sources = sel_sources
+        if not sources:
+            self.qerrmsg.showMessage("No sources to restore.")
+            return
+        busy = BusyIndicator()
+        # get filenames
+        infile = self.wfile_in.filename()
+        outfile = self.wfile_out.filename()
+        self.parent().showMessage(
+            "Restoring %d model sources to image %s, writing to %s" % (len(sources), infile, outfile))
+        # read fits file
+        try:
+            input_hdu = pyfits.open(infile)[0]
+        except Exception as err:
+            busy.reset_cursor()
+            self.qerrmsg.showMessage("Error reading FITS file %s: %s" % (infile, str(err)))
+            return
+        # get beam sizes
+        try:
+            bmaj = float(str(self.wbmaj.text()))
+            bmin = float(str(self.wbmin.text()))
+            pa = float(str(self.wbpa.text()) or "0")
+        except Exception as err:
+            busy.reset_cursor()
+            self.qerrmsg.showMessage("Invalid beam size specified")
+            return
+        bmaj = bmaj / (Imaging.FWHM * 3600) * DEG
+        bmin = bmin / (Imaging.FWHM * 3600) * DEG
+        pa = pa * DEG
+        # restore
+        try:
+            Imaging.restoreSources(input_hdu, sources, bmaj, bmin, pa)
+        except Exception as err:
+            busy.reset_cursor()
+            self.qerrmsg.showMessage("Error restoring model into image: %s" % str(err))
+            return
+        # save fits file
+        try:
+            input_hdu.writeto(outfile, overwrite=True)
+        except Exception as err:
+            busy.reset_cursor()
+            self.qerrmsg.showMessage("Error writing FITS file %s: %s" % (outfile, str(err)))
+            return
+        self.parent().loadImage(outfile)
+        busy.reset_cursor()
+        return QDialog.accept(self)
+
+
+def restore_into_image(mainwin, model):
+    dialog = getattr(mainwin, '_restore_into_image_dialog', None)
+    if not dialog:
+        dialog = mainwin._restore_into_image_dialog = RestoreImageDialog(mainwin)
+    dialog.setModel(model)
+    # show dialog
+    return dialog.exec_()
+
+
+from TigGUI.Tools import registerTool
+
+registerTool("Restore model into image...", restore_into_image)
--- tigger-1.6.0.orig/TigGUI/Tools/source_selector.py
+++ tigger-1.6.0/TigGUI/Tools/source_selector.py
@@ -1,312 +1,312 @@
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-import numpy as np
-import operator
-
-from PyQt5.QtWidgets import *
-import traceback
-
-from PyQt5.Qt import QObject, QHBoxLayout, QComboBox, QLabel, QLineEdit, QDialog, QVBoxLayout, Qt, QErrorMessage,\
-    QSlider
-
-import TigGUI.kitties.utils
-from TigGUI.kitties.utils import curry
-from TigGUI.kitties.widgets import BusyIndicator
-
-QString = str
-
-_verbosity = TigGUI.kitties.utils.verbosity(name="source_selector")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-# list of standard tags to be sorted by
-StandardTags = ["ra", "dec", "r", "Iapp", "I", "Q", "U", "V", "rm", "spi"]
-
-# dict of accessors for nested source attributes
-TagAccessors = dict()
-for tag in "ra", "dec":
-    TagAccessors[tag] = lambda src, t=tag: getattr(src.pos, t)
-for tag in list("IQUV") + ["rm"]:
-    TagAccessors[tag] = lambda src, t=tag: getattr(src.flux, t, 0.0)
-for tag in ["spi"]:
-    TagAccessors[tag] = lambda src, t=tag: getattr(src.spectrum, t, 0.0)
-
-# tags for which sorting is not available
-NonSortingTags = set(["name", "typecode"])
-
-
-class SourceSelectorDialog(QDialog):
-    def __init__(self, parent, flags=Qt.WindowFlags()):
-        QDialog.__init__(self, parent, flags)
-        self.setModal(False)
-        self.setWindowTitle("Select sources by...")
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # select by
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setContentsMargins(0, 0, 0, 0)
-        #    lab = QLabel("Select:")
-        #   lo1.addWidget(lab)
-        self.wselby = QComboBox(self)
-        lo1.addWidget(self.wselby, 0)
-        self.wselby.activated[str].connect(self._setup_selection_by)
-        # under/over
-        self.wgele = QComboBox(self)
-        lo1.addWidget(self.wgele, 0)
-        self.wgele.addItems([">", ">=", "<=", "<", "sum<=", "sum>", "=="])
-        self.wgele.activated[str].connect(self._select_threshold)
-        # threshold value
-        self.wthreshold = QLineEdit(self)
-        self.wthreshold.editingFinished.connect(self._select_threshold)
-        lo1.addWidget(self.wthreshold, 1)
-        # min and max label
-        self.wminmax = QLabel(self)
-        lo.addWidget(self.wminmax)
-        # selection slider
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        self.wpercent = QSlider(self)
-        self.wpercent.setTracking(False)
-        self.wpercent.valueChanged[int].connect(self._select_percentile)
-        self.wpercent.sliderMoved[int].connect(self._select_percentile_threshold)
-        self.wpercent.setRange(0, 100)
-        self.wpercent.setOrientation(Qt.Horizontal)
-        lo1.addWidget(self.wpercent)
-        self.wpercent_lbl = QLabel("0%", self)
-        self.wpercent_lbl.setMinimumWidth(64)
-        lo1.addWidget(self.wpercent_lbl)
-        #    # hide button
-        #    lo.addSpacing(10)
-        #    lo2 = QHBoxLayout()
-        #    lo.addLayout(lo2)
-        #    lo2.setContentsMargins(0,0,0,0)
-        #    hidebtn = QPushButton("Close",self)
-        #    hidebtn.setMinimumWidth(128)
-        #    QObject.connect(hidebtn,pyqtSignal("clicked()"),self.hide)
-        #    lo2.addStretch(1)
-        #    lo2.addWidget(hidebtn)
-        #    lo2.addStretch(1)
-        #    self.setMinimumWidth(384)
-        self._in_select_threshold = False
-        self._sort_index = None
-        self.qerrmsg = QErrorMessage(self)
-
-    def resetModel(self):
-        """Resets dialog based on current model."""
-        if not self.model:
-            return
-        # getset of model tags, and remove the non-sorting tags
-        alltags = set(self.model.tagnames)
-        alltags -= NonSortingTags
-        # make list of tags from StandardTags that are present in model
-        self.sorttags = [tag for tag in StandardTags if tag in alltags or tag in TagAccessors]
-        # append model tags that were not in StandardTags
-        self.sorttags += list(alltags - set(self.sorttags))
-        # set selector
-        self.wselby.clear()
-        self.wselby.addItems(self.sorttags)
-        for tag in "Iapp", "I":
-            if tag in self.sorttags:
-                self.wselby.setCurrentIndex(self.sorttags.index(tag))
-                break
-        self._setup_selection_by(self.wselby.currentText())
-
-    def _reset_percentile(self):
-        self.wthreshold.setText("")
-        self.wpercent.setValue(50)
-        self.wpercent_lbl.setText("--%")
-
-    def _setup_selection_by(self, tag):
-        tag = str(tag)  # may be QString
-        # clear threshold value and percentiles
-        self._reset_percentile()
-        # get min/max values, and sort indices
-        # _sort_index will be an array of (value,src,cumsum) tuples, sorted by tag value (high to low),
-        # where src is the source, and cumsum is the sum of all values in the list from 0 up to and including the current one
-        self._sort_index = []
-        minval = maxval = value = None
-        for isrc, src in enumerate(self.model.sources):
-            try:
-                if hasattr(src, tag):
-                    # test if item can be cast to float
-                    try:
-                        float(getattr(src, tag))
-                    except:
-                        continue
-                    else:
-                        value = float(getattr(src, tag))
-
-                elif tag in TagAccessors:
-                    value = float(TagAccessors[tag](src))
-                else: # not existant for this source (maybe a tag or something??)
-                    value = np.nan
-            # skip source if failed to access this tag as a float
-            except:
-                traceback.print_exc()
-                continue
-            if value is not None:
-                self._sort_index.append([value if not np.isnan(value) else -np.inf, src, 0.])
-                minval = min(minval, value if not np.isnan(value) else np.inf) if minval is not None else value
-                maxval = max(maxval, value if not np.isnan(value) else -np.inf) if maxval is not None else value
-        # add label
-        if minval is None:
-            self._range = None
-            self.wminmax.setText("<font color=red>'%s' is not a numeric attribute</font>" % tag)
-            for w in self.wgele, self.wthreshold, self.wpercent, self.wpercent_lbl:
-                w.setEnabled(False)
-        else:
-            self._range = (minval, maxval)
-            self.wminmax.setText("min: %g max: %g" % self._range)
-            for w in self.wgele, self.wthreshold, self.wpercent, self.wpercent_lbl:
-                w.setEnabled(True)
-        # sort index by descending values
-        self._sort_index.sort(reverse=True, key=operator.itemgetter(0))
-        # generate cumulative sums
-        cumsum = 0.
-        for entry in self._sort_index:
-            if not np.isneginf(entry[0]):
-                cumsum += entry[0]
-            entry[2] = cumsum
-
-    # Maps comparison operators to callables. Used in _select_threshold.
-    # Each callable takes two arguments: e is a tuple of (value,src,cumsum) (see _sort_index above), and x is a threshold
-    # Second argument is a flag: if False, selection is inverted w.r.t. operator
-    Operators = {
-        "<": ((lambda e, x: e[0] >= x), False),
-        "<=": ((lambda e, x: e[0] > x), False),
-        ">": ((lambda e, x: e[0] > x), True),
-        ">=": ((lambda e, x: e[0] >= x), True),
-        "sum<=": ((lambda e, x: e[2] <= x), True),
-        "sum>": ((lambda e, x: e[2] <= x), False),
-        "==": ((lambda e, x: np.abs(e[0] - x) < 1.0e-8), True),
-    }
-
-    def _select_threshold(self, *dum):
-        dprint(1, "select_threshold", dum)
-        self._in_select_threshold = True
-        busy = BusyIndicator()
-        try:
-            # get threshold, ignore if not set
-            threshold = str(self.wthreshold.text())
-            if not threshold:
-                self._reset_percentile()
-                return
-            # try to parse threshold, ignore if invalid
-            try:
-                threshold = float(threshold)
-            except:
-                self._reset_percentile()
-                return
-            # get comparison operator
-            op, select = self.Operators[str(self.wgele.currentText())]
-            # apply to initial segment (that matches operator)
-            for num, entry in enumerate(self._sort_index):
-                if not op(entry, threshold):
-                    break
-                entry[1].selected = select
-            else:
-                num = len(self._sort_index)
-            # apply to remaining segment
-            for val, src, cumsum in self._sort_index[num:]:
-                src.selected = not select
-            # set percentile
-            percent = round(float(num * 100) / len(self._sort_index))
-            if not select:
-                percent = 100 - percent
-            self.wpercent.setValue(percent)
-            self.wpercent_lbl.setText("%3d%%" % percent)
-            # emit signal
-            self.model.emitSelection(self)
-        finally:
-            self._in_select_threshold = False
-            busy.reset_cursor()
-
-    def _select_percentile(self, percent):
-        self._select_percentile_threshold(percent, do_select=True)
-
-    def _select_percentile_threshold(self, percent, do_select=False):
-        # ignore if no sort index set up, or if _select_threshold() is being called
-        if self._sort_index is None or self._in_select_threshold:
-            return
-        dprint(1, "select_precentile_threshold", percent)
-        busy = BusyIndicator()
-        # number of objects to select
-        nsrc = len(self._sort_index)
-        nsel = int(math.ceil(nsrc * float(percent) / 100))
-        # get comparison operator
-        opstr = str(self.wgele.currentText())
-        op, select = self.Operators[opstr]
-        # select head or tail of list, depending on direction of operator
-        if select:
-            thr = self._sort_index[min(nsel, nsrc - 1)]
-            slc1 = slice(0, nsel)
-            slc2 = slice(nsel, None)
-        else:
-            thr = self._sort_index[-min(nsel + 1, nsrc)]
-            slc1 = slice(nsrc - nsel, None)
-            slc2 = slice(0, nsrc - nsel)
-        if do_select:
-            for val, src, cumsum in self._sort_index[slc1]:
-                src.selected = True
-            for val, src, cumsum in self._sort_index[slc2]:
-                src.selected = False
-            self.model.emitSelection(self)
-        self.wpercent_lbl.setText("%3d%%" % percent)
-        self.wthreshold.setText("%g" % (thr[2] if opstr.startswith("sum") else thr[0]))
-        busy.reset_cursor()
-        return nsel
-
-    def setModel(self, model):
-        """Sets the current model. If dialog is visible, applies the changes"""
-        self.model = model
-        if self.isVisible():
-            self.resetModel()
-        if not model:
-            self.hide()
-
-    def show(self):
-        """Shows dialog, resetting the model if it was invisible."""
-        if not self.isVisible():
-            self.resetModel()
-        QDialog.show(self)
-
-
-def show_source_selector(mainwin, model):
-    dialog = getattr(mainwin, '_source_selector_dialog', None)
-    if not dialog:
-        dialog = mainwin._source_selector_dialog = SourceSelectorDialog(mainwin)
-        mainwin.modelChanged.connect(dialog.setModel)
-        mainwin.closing.connect(dialog.close)
-    dialog.setModel(model)
-    # show dialog
-    dialog.show()
-    dialog.raise_()
-
-# from TigGUI.Tools import registerTool
-# registerTool("Source selector...",show_source_selector)
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+import numpy as np
+import operator
+
+from PyQt5.QtWidgets import *
+import traceback
+
+from PyQt5.Qt import QObject, QHBoxLayout, QComboBox, QLabel, QLineEdit, QDialog, QVBoxLayout, Qt, QErrorMessage,\
+    QSlider
+
+import TigGUI.kitties.utils
+from TigGUI.kitties.utils import curry
+from TigGUI.kitties.widgets import BusyIndicator
+
+QString = str
+
+_verbosity = TigGUI.kitties.utils.verbosity(name="source_selector")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+# list of standard tags to be sorted by
+StandardTags = ["ra", "dec", "r", "Iapp", "I", "Q", "U", "V", "rm", "spi"]
+
+# dict of accessors for nested source attributes
+TagAccessors = dict()
+for tag in "ra", "dec":
+    TagAccessors[tag] = lambda src, t=tag: getattr(src.pos, t)
+for tag in list("IQUV") + ["rm"]:
+    TagAccessors[tag] = lambda src, t=tag: getattr(src.flux, t, 0.0)
+for tag in ["spi"]:
+    TagAccessors[tag] = lambda src, t=tag: getattr(src.spectrum, t, 0.0)
+
+# tags for which sorting is not available
+NonSortingTags = set(["name", "typecode"])
+
+
+class SourceSelectorDialog(QDialog):
+    def __init__(self, parent, flags=Qt.WindowFlags()):
+        QDialog.__init__(self, parent, flags)
+        self.setModal(False)
+        self.setWindowTitle("Select sources by...")
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # select by
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setContentsMargins(0, 0, 0, 0)
+        #    lab = QLabel("Select:")
+        #   lo1.addWidget(lab)
+        self.wselby = QComboBox(self)
+        lo1.addWidget(self.wselby, 0)
+        self.wselby.activated[str].connect(self._setup_selection_by)
+        # under/over
+        self.wgele = QComboBox(self)
+        lo1.addWidget(self.wgele, 0)
+        self.wgele.addItems([">", ">=", "<=", "<", "sum<=", "sum>", "=="])
+        self.wgele.activated[str].connect(self._select_threshold)
+        # threshold value
+        self.wthreshold = QLineEdit(self)
+        self.wthreshold.editingFinished.connect(self._select_threshold)
+        lo1.addWidget(self.wthreshold, 1)
+        # min and max label
+        self.wminmax = QLabel(self)
+        lo.addWidget(self.wminmax)
+        # selection slider
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        self.wpercent = QSlider(self)
+        self.wpercent.setTracking(False)
+        self.wpercent.valueChanged[int].connect(self._select_percentile)
+        self.wpercent.sliderMoved[int].connect(self._select_percentile_threshold)
+        self.wpercent.setRange(0, 100)
+        self.wpercent.setOrientation(Qt.Horizontal)
+        lo1.addWidget(self.wpercent)
+        self.wpercent_lbl = QLabel("0%", self)
+        self.wpercent_lbl.setMinimumWidth(64)
+        lo1.addWidget(self.wpercent_lbl)
+        #    # hide button
+        #    lo.addSpacing(10)
+        #    lo2 = QHBoxLayout()
+        #    lo.addLayout(lo2)
+        #    lo2.setContentsMargins(0,0,0,0)
+        #    hidebtn = QPushButton("Close",self)
+        #    hidebtn.setMinimumWidth(128)
+        #    QObject.connect(hidebtn,pyqtSignal("clicked()"),self.hide)
+        #    lo2.addStretch(1)
+        #    lo2.addWidget(hidebtn)
+        #    lo2.addStretch(1)
+        #    self.setMinimumWidth(384)
+        self._in_select_threshold = False
+        self._sort_index = None
+        self.qerrmsg = QErrorMessage(self)
+
+    def resetModel(self):
+        """Resets dialog based on current model."""
+        if not self.model:
+            return
+        # getset of model tags, and remove the non-sorting tags
+        alltags = set(self.model.tagnames)
+        alltags -= NonSortingTags
+        # make list of tags from StandardTags that are present in model
+        self.sorttags = [tag for tag in StandardTags if tag in alltags or tag in TagAccessors]
+        # append model tags that were not in StandardTags
+        self.sorttags += list(alltags - set(self.sorttags))
+        # set selector
+        self.wselby.clear()
+        self.wselby.addItems(self.sorttags)
+        for tag in "Iapp", "I":
+            if tag in self.sorttags:
+                self.wselby.setCurrentIndex(self.sorttags.index(tag))
+                break
+        self._setup_selection_by(self.wselby.currentText())
+
+    def _reset_percentile(self):
+        self.wthreshold.setText("")
+        self.wpercent.setValue(50)
+        self.wpercent_lbl.setText("--%")
+
+    def _setup_selection_by(self, tag):
+        tag = str(tag)  # may be QString
+        # clear threshold value and percentiles
+        self._reset_percentile()
+        # get min/max values, and sort indices
+        # _sort_index will be an array of (value,src,cumsum) tuples, sorted by tag value (high to low),
+        # where src is the source, and cumsum is the sum of all values in the list from 0 up to and including the current one
+        self._sort_index = []
+        minval = maxval = value = None
+        for isrc, src in enumerate(self.model.sources):
+            try:
+                if hasattr(src, tag):
+                    # test if item can be cast to float
+                    try:
+                        float(getattr(src, tag))
+                    except:
+                        continue
+                    else:
+                        value = float(getattr(src, tag))
+
+                elif tag in TagAccessors:
+                    value = float(TagAccessors[tag](src))
+                else: # not existant for this source (maybe a tag or something??)
+                    value = np.nan
+            # skip source if failed to access this tag as a float
+            except:
+                traceback.print_exc()
+                continue
+            if value is not None:
+                self._sort_index.append([value if not np.isnan(value) else -np.inf, src, 0.])
+                minval = min(minval, value if not np.isnan(value) else np.inf) if minval is not None else value
+                maxval = max(maxval, value if not np.isnan(value) else -np.inf) if maxval is not None else value
+        # add label
+        if minval is None:
+            self._range = None
+            self.wminmax.setText("<font color=red>'%s' is not a numeric attribute</font>" % tag)
+            for w in self.wgele, self.wthreshold, self.wpercent, self.wpercent_lbl:
+                w.setEnabled(False)
+        else:
+            self._range = (minval, maxval)
+            self.wminmax.setText("min: %g max: %g" % self._range)
+            for w in self.wgele, self.wthreshold, self.wpercent, self.wpercent_lbl:
+                w.setEnabled(True)
+        # sort index by descending values
+        self._sort_index.sort(reverse=True, key=operator.itemgetter(0))
+        # generate cumulative sums
+        cumsum = 0.
+        for entry in self._sort_index:
+            if not np.isneginf(entry[0]):
+                cumsum += entry[0]
+            entry[2] = cumsum
+
+    # Maps comparison operators to callables. Used in _select_threshold.
+    # Each callable takes two arguments: e is a tuple of (value,src,cumsum) (see _sort_index above), and x is a threshold
+    # Second argument is a flag: if False, selection is inverted w.r.t. operator
+    Operators = {
+        "<": ((lambda e, x: e[0] >= x), False),
+        "<=": ((lambda e, x: e[0] > x), False),
+        ">": ((lambda e, x: e[0] > x), True),
+        ">=": ((lambda e, x: e[0] >= x), True),
+        "sum<=": ((lambda e, x: e[2] <= x), True),
+        "sum>": ((lambda e, x: e[2] <= x), False),
+        "==": ((lambda e, x: np.abs(e[0] - x) < 1.0e-8), True),
+    }
+
+    def _select_threshold(self, *dum):
+        dprint(1, "select_threshold", dum)
+        self._in_select_threshold = True
+        busy = BusyIndicator()
+        try:
+            # get threshold, ignore if not set
+            threshold = str(self.wthreshold.text())
+            if not threshold:
+                self._reset_percentile()
+                return
+            # try to parse threshold, ignore if invalid
+            try:
+                threshold = float(threshold)
+            except:
+                self._reset_percentile()
+                return
+            # get comparison operator
+            op, select = self.Operators[str(self.wgele.currentText())]
+            # apply to initial segment (that matches operator)
+            for num, entry in enumerate(self._sort_index):
+                if not op(entry, threshold):
+                    break
+                entry[1].selected = select
+            else:
+                num = len(self._sort_index)
+            # apply to remaining segment
+            for val, src, cumsum in self._sort_index[num:]:
+                src.selected = not select
+            # set percentile
+            percent = round(float(num * 100) / len(self._sort_index))
+            if not select:
+                percent = 100 - percent
+            self.wpercent.setValue(percent)
+            self.wpercent_lbl.setText("%3d%%" % percent)
+            # emit signal
+            self.model.emitSelection(self)
+        finally:
+            self._in_select_threshold = False
+            busy.reset_cursor()
+
+    def _select_percentile(self, percent):
+        self._select_percentile_threshold(percent, do_select=True)
+
+    def _select_percentile_threshold(self, percent, do_select=False):
+        # ignore if no sort index set up, or if _select_threshold() is being called
+        if self._sort_index is None or self._in_select_threshold:
+            return
+        dprint(1, "select_precentile_threshold", percent)
+        busy = BusyIndicator()
+        # number of objects to select
+        nsrc = len(self._sort_index)
+        nsel = int(math.ceil(nsrc * float(percent) / 100))
+        # get comparison operator
+        opstr = str(self.wgele.currentText())
+        op, select = self.Operators[opstr]
+        # select head or tail of list, depending on direction of operator
+        if select:
+            thr = self._sort_index[min(nsel, nsrc - 1)]
+            slc1 = slice(0, nsel)
+            slc2 = slice(nsel, None)
+        else:
+            thr = self._sort_index[-min(nsel + 1, nsrc)]
+            slc1 = slice(nsrc - nsel, None)
+            slc2 = slice(0, nsrc - nsel)
+        if do_select:
+            for val, src, cumsum in self._sort_index[slc1]:
+                src.selected = True
+            for val, src, cumsum in self._sort_index[slc2]:
+                src.selected = False
+            self.model.emitSelection(self)
+        self.wpercent_lbl.setText("%3d%%" % percent)
+        self.wthreshold.setText("%g" % (thr[2] if opstr.startswith("sum") else thr[0]))
+        busy.reset_cursor()
+        return nsel
+
+    def setModel(self, model):
+        """Sets the current model. If dialog is visible, applies the changes"""
+        self.model = model
+        if self.isVisible():
+            self.resetModel()
+        if not model:
+            self.hide()
+
+    def show(self):
+        """Shows dialog, resetting the model if it was invisible."""
+        if not self.isVisible():
+            self.resetModel()
+        QDialog.show(self)
+
+
+def show_source_selector(mainwin, model):
+    dialog = getattr(mainwin, '_source_selector_dialog', None)
+    if not dialog:
+        dialog = mainwin._source_selector_dialog = SourceSelectorDialog(mainwin)
+        mainwin.modelChanged.connect(dialog.setModel)
+        mainwin.closing.connect(dialog.close)
+    dialog.setModel(model)
+    # show dialog
+    dialog.show()
+    dialog.raise_()
+
+# from TigGUI.Tools import registerTool
+# registerTool("Source selector...",show_source_selector)
--- tigger-1.6.0.orig/TigGUI/Widgets.py
+++ tigger-1.6.0/TigGUI/Widgets.py
@@ -1,503 +1,503 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import traceback
-import re
-import os
-from PyQt5.Qt import  QValidator, QWidget, QHBoxLayout, QFileDialog, QComboBox, QLabel, \
-    QLineEdit, QDialog, QIntValidator, QDoubleValidator, QToolButton, QListWidget, QVBoxLayout, \
-    QPushButton, QMessageBox
-from PyQt5.QtGui import QMouseEvent, QFont
-from PyQt5.QtWidgets import QDockWidget, QStyle, QSizePolicy, QToolTip, QApplication
-from PyQt5.Qwt import QwtPlotCurve, QwtPlotMarker
-from PyQt5.QtCore import pyqtSignal, Qt, QEvent, QSize, QTimer
-
-from TigGUI.init import pixmaps
-
-QStringList = list
-
-
-class TiggerPlotCurve(QwtPlotCurve):
-    """Wrapper around QwtPlotCurve to make it compatible with numpy float types"""
-
-    def setData(self, x, y):
-        return QwtPlotCurve.setSamples(self, list(map(float, x)), list(map(float, y)))
-
-    def setDataXfy(self, x, y):
-        return QwtPlotCurve.setSamples(self, list(map(float, y)), list(map(float, x)))
-
-
-class TiggerPlotMarker(QwtPlotMarker):
-    """Wrapper around QwtPlotCurve to make it compatible with numpy float types"""
-
-    def setValue(self, x, y):
-        return QwtPlotMarker.setValue(self, float(x), float(y))
-
-
-class FloatValidator(QValidator):
-    """QLineEdit validator for float items in standard or scientific notation"""
-    re_intermediate = re.compile("^-?([0-9]*)\.?([0-9]*)([eE]([+-])?[0-9]*)?$")
-
-    def validate(self, _input, _pos):
-        _input = str(_input)
-        try:
-            x = float(_input)
-            return QValidator.Acceptable, _input, _pos
-        except:
-            pass
-        if not _input or self.re_intermediate.match(_input):
-            return QValidator.Intermediate, _input, _pos
-        # return QValidator.Invalid, pos  # old line
-        return QValidator.Acceptable, _input, _pos
-
-
-class ValueTypeEditor(QWidget):
-    ValueTypes = (bool, int, float, complex, str)
-
-    def __init__(self, *args):
-        QWidget.__init__(self, *args)
-        lo = QHBoxLayout(self)
-        lo.setContentsMargins(0, 0, 0, 0)
-        lo.setSpacing(5)
-        # type selector
-        self.wtypesel = QComboBox(self)
-        for i, tp in enumerate(self.ValueTypes):
-            self.wtypesel.addItem(tp.__name__)
-        self.wtypesel.activated[int].connect(self._selectTypeNum)
-        typesel_lab = QLabel("&Type:", self)
-        typesel_lab.setBuddy(self.wtypesel)
-        lo.addWidget(typesel_lab, 0)
-        lo.addWidget(self.wtypesel, 0)
-        self.wvalue = QLineEdit(self)
-        self.wvalue_lab = QLabel("&Value:", self)
-        self.wvalue_lab.setBuddy(self.wvalue)
-        self.wbool = QComboBox(self)
-        self.wbool.addItems(["false", "true"])
-        self.wbool.setCurrentIndex(1)
-        lo.addWidget(self.wvalue_lab, 0)
-        lo.addWidget(self.wvalue, 1)
-        lo.addWidget(self.wbool, 1)
-        self.wvalue.hide()
-        # make input validators
-        self._validators = {int: QIntValidator(self), float: QDoubleValidator(self)}
-        # select bool type initially
-        self._selectTypeNum(0)
-
-    def _selectTypeNum(self, index):
-        tp = self.ValueTypes[index]
-        self.wbool.setVisible(tp is bool)
-        self.wvalue.setVisible(tp is not bool)
-        self.wvalue_lab.setBuddy(self.wbool if tp is bool else self.wvalue)
-        self.wvalue.setValidator(self._validators.get(tp, None))
-
-    def setValue(self, value):
-        """Sets current value"""
-        for i, tp in enumerate(self.ValueTypes):
-            if isinstance(value, tp):
-                self.wtypesel.setCurrentIndex(i)
-                self._selectTypeNum(i)
-                if tp is bool:
-                    self.wbool.setCurrentIndex(1 if value else 0)
-                else:
-                    self.wvalue.setText(str(value))
-                return
-        # unknown value: set bool
-        self.setValue(True)
-
-    def getValue(self):
-        """Returns current value, or None if no legal value is set"""
-        tp = self.ValueTypes[self.wtypesel.currentIndex()]
-        if tp is bool:
-            return bool(self.wbool.currentIndex())
-        else:
-            try:
-                return tp(self.wvalue.text())
-            except:
-                print("Error converting input to type ", tp.__name__)
-                traceback.print_exc()
-                return None
-
-
-class FileSelector(QWidget):
-    """A FileSelector is a one-line widget for selecting a file."""
-    valid = pyqtSignal()
-    filenameSelected = pyqtSignal()
-
-    def __init__(self, parent, label, filename=None, dialog_label=None, file_types=None, default_suffix=None,
-                 file_mode=QFileDialog.AnyFile):
-        QWidget.__init__(self, parent)
-        lo = QHBoxLayout(self)
-        lo.setContentsMargins(0, 0, 0, 0)
-        lo.setSpacing(5)
-        # label
-        lab = QLabel(label, self)
-        lo.addWidget(lab, 0)
-        # text field
-        self.wfname = QLineEdit(self)
-        self.wfname.setReadOnly(True)
-        self.setFilename(filename)
-        lo.addWidget(self.wfname, 1)
-        # selector
-        wsel = QToolButton(self)
-        wsel.setText("Choose...")
-        wsel.clicked.connect(self._chooseFile)
-        lo.addWidget(wsel, 0)
-        # other init
-        self._file_dialog = None
-        self._dialog_label = dialog_label or label
-        self._file_types = file_types or "All files (*)"
-        self._file_mode = file_mode
-        self._default_suffix = default_suffix
-        self._dir = None
-
-    def _chooseFile(self):
-        if self._file_dialog is None:
-            dialog = self._file_dialog = QFileDialog(self, self._dialog_label, ".", self._file_types)
-            if self._default_suffix:
-                dialog.setDefaultSuffix(self._default_suffix)
-            dialog.setFileMode(self._file_mode)
-            dialog.setModal(True)
-            if self._dir is not None:
-                dialog.setDirectory(self._dir)
-            dialog.filesSelected['QStringList'].connect(self.setFilename)
-        return self._file_dialog.exec_()
-
-    def setFilename(self, filename):
-        if isinstance(filename, QStringList):
-            filename = filename[0]
-        filename = (filename and str(filename)) or ''
-        self.wfname.setText(filename)
-        self.valid.emit(bool(filename))
-        self.filenameSelected.emit(filename)
-
-    def setDirectory(self, directory):
-        self._dir = directory
-        if self._file_dialog is not None:
-            self._file_dialog.setDirectory(directory)
-
-    def filename(self):
-        return str(self.wfname.text())
-
-    def isValid(self):
-        return bool(self.filename())
-
-
-class AddTagDialog(QDialog):
-    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
-        QDialog.__init__(self, parent, flags)
-        self.setModal(modal)
-        self.setWindowTitle("Add Tag")
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # tag selector
-        lo1 = QHBoxLayout()
-        lo.addLayout(lo1)
-        lo1.setSpacing(5)
-        self.wtagsel = QComboBox(self)
-        self.wtagsel.setEditable(True)
-        wtagsel_lbl = QLabel("&Tag:", self)
-        wtagsel_lbl.setBuddy(self.wtagsel)
-        lo1.addWidget(wtagsel_lbl, 0)
-        lo1.addWidget(self.wtagsel, 1)
-        self.wtagsel.activated[int].connect(self._check_tag)
-        self.wtagsel.editTextChanged['QString'].connect(self._check_tag_text)
-        # value editor
-        self.valedit = ValueTypeEditor(self)
-        lo.addWidget(self.valedit)
-        # buttons
-        lo.addSpacing(10)
-        lo2 = QHBoxLayout()
-        lo.addLayout(lo2)
-        lo2.setContentsMargins(0, 0, 0, 0)
-        lo2.setContentsMargins(5, 5, 5, 5)
-        self.wokbtn = QPushButton("OK", self)
-        self.wokbtn.setMinimumWidth(128)
-        self.wokbtn.clicked.connect(self.accept)
-        self.wokbtn.setEnabled(False)
-        cancelbtn = QPushButton("Cancel", self)
-        cancelbtn.setMinimumWidth(128)
-        cancelbtn.clicked.connect(self.reject)
-        lo2.addWidget(self.wokbtn)
-        lo2.addStretch(1)
-        lo2.addWidget(cancelbtn)
-        self.setMinimumWidth(384)
-
-    def setTags(self, tagnames):
-        self.wtagsel.clear()
-        self.wtagsel.addItems(list(tagnames))
-        self.wtagsel.addItem("")
-        self.wtagsel.setCurrentIndex(len(tagnames))
-
-    def setValue(self, value):
-        self.valedit.setValue(value)
-
-    def _check_tag(self, tag):
-        self.wokbtn.setEnabled(True)
-
-    def _check_tag_text(self, text):
-        self.wokbtn.setEnabled(bool(str(text) != ""))
-
-    def accept(self):
-        """When dialog is accepted with a default (bool) tag type,
-        check if the user hasn't entered a name=value entry in the tag name field.
-        This is a common mistake, and should be treated as a shortcut for setting string tags."""
-        if isinstance(self.valedit.getValue(), bool):
-            tagval = str(self.wtagsel.currentText()).split("=", 1)
-            if len(tagval) > 1:
-                #        print tagval
-                if QMessageBox.warning(self,
-                                       "Set a string tag instead?", """<P>You have included an "=" sign in the tag name.
-            Perhaps you actually mean to set tag "%s" to the string value "%s"?</P>""" % tuple(tagval),
-                                       QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes) == QMessageBox.No:
-                    return
-                self.wtagsel.setEditText(tagval[0])
-                self.valedit.setValue(tagval[1])
-        return QDialog.accept(self)
-
-    def getTag(self):
-        return str(self.wtagsel.currentText()), self.valedit.getValue()
-
-
-class SelectTagsDialog(QDialog):
-    def __init__(self, parent, modal=True, flags=Qt.WindowFlags(), caption="Select Tags", ok_button="Select"):
-        QDialog.__init__(self, parent, flags)
-        self.setModal(modal)
-        self.setWindowTitle(caption)
-        lo = QVBoxLayout(self)
-        lo.setContentsMargins(10, 10, 10, 10)
-        lo.setSpacing(5)
-        # tag selector
-        self.wtagsel = QListWidget(self)
-        lo.addWidget(self.wtagsel)
-        #    self.wtagsel.setColumnMode(QListBox.FitToWidth)
-        self.wtagsel.setSelectionMode(QListWidget.MultiSelection)
-        self.wtagsel.itemSelectionChanged.connect(self._check_tag)
-        # buttons
-        lo.addSpacing(10)
-        lo2 = QHBoxLayout()
-        lo.addLayout(lo2)
-        lo2.setContentsMargins(0, 0, 0, 0)
-        lo2.setContentsMargins(5, 5, 5, 5)
-        self.wokbtn = QPushButton(ok_button, self)
-        self.wokbtn.setMinimumWidth(128)
-        self.wokbtn.clicked.connect(self.accept)
-        self.wokbtn.setEnabled(False)
-        cancelbtn = QPushButton("Cancel", self)
-        cancelbtn.setMinimumWidth(128)
-        cancelbtn.clicked.connect(self.reject)
-        lo2.addWidget(self.wokbtn)
-        lo2.addStretch(1)
-        lo2.addWidget(cancelbtn)
-        self.setMinimumWidth(384)
-        self._tagnames = []
-
-    def setTags(self, tagnames):
-        self._tagnames = tagnames
-        self.wtagsel.clear()
-        self.wtagsel.insertItems(0, list(tagnames))
-
-    def _check_tag(self):
-        for i in range(len(self._tagnames)):
-            if self.wtagsel.item(i).isSelected():
-                self.wokbtn.setEnabled(True)
-                return
-        else:
-            self.wokbtn.setEnabled(False)
-
-    def getSelectedTags(self):
-        return [tag for i, tag in enumerate(self._tagnames) if self.wtagsel.item(i).isSelected()]
-
-
-class TDockWidget(QDockWidget):
-
-    def __init__(self, title="", parent=None, flags=Qt.WindowFlags(), bind_widget=None, close_slot=None, toggle_slot=None):
-        QDockWidget.__init__(self, title, parent, flags)
-        self.installEventFilter(self)
-        self.main_win = parent
-        # default stlyesheets for title bars
-        self.title_stylesheet = "QWidget {background: rgb(68,68,68);}"
-        self.button_style = "QPushButton:hover:!pressed {background: grey;}"
-        from TigGUI.Images.ControlDialog import ImageControlDialog
-        from TigGUI.Plot.SkyModelPlot import ToolDialog
-        from TigGUI.Plot.SkyModelPlot import LiveImageZoom
-        if bind_widget is not None:
-            self.bind_widget = bind_widget
-        if bind_widget is not None:
-            if isinstance(bind_widget, ToolDialog):
-                self.tdock_style = "ToolDialog {border: 1.5px solid rgb(68,68,68);}"
-            elif isinstance(bind_widget, ImageControlDialog):
-                self.tdock_style = "ImageControlDialog {border: 1.5px solid rgb(68,68,68);}"
-        # set default sizes for QDockWidgets
-        self.btn_w = 28
-        self.btn_h = 28
-        self.icon_size = QSize(20, 20)
-        self.font_size = 8
-        # setup custom title bar for profiles dockable
-        self.dock_title_bar = QWidget()
-        self.dock_title_bar.setContentsMargins(0, 0, 0, 0)
-        self.dock_title_bar.setStyleSheet(self.title_stylesheet)
-        self.dock_title_bar.setBaseSize(0, 0)
-        self.dock_title_layout = QHBoxLayout()
-        self.dock_title_layout.setContentsMargins(0, 0, 0, 0)
-        self.dock_title_layout.setSpacing(0)
-        self.dock_title_bar.setLayout(self.dock_title_layout)
-        # custom close button
-        self.close_button = QPushButton()
-        self.close_button.setStyleSheet(self.button_style)
-        self.close_button.setMaximumWidth(self.btn_w)
-        self.close_button.setMaximumHeight(self.btn_h)
-        self.close_button.setContentsMargins(0, 0, 0, 0)
-        self.close_button.setBaseSize(0, 0)
-        self.close_icon = self.dock_title_bar.style().standardIcon(QStyle.SP_TitleBarCloseButton)
-        self.close_button.setIcon(self.close_icon)
-        self.close_button.setToolTip("Close")
-        # custom toggle button
-        self.toggle_button = QPushButton()
-        self.toggle_button.setStyleSheet(self.button_style)
-        self.toggle_button.setMaximumWidth(self.btn_w)
-        self.toggle_button.setMaximumHeight(self.btn_h)
-        self.toggle_button.setContentsMargins(0, 0, 0, 0)
-        self.toggle_button.setBaseSize(0, 0)
-        self.toggle_icon = self.dock_title_bar.style().standardIcon(QStyle.SP_TitleBarShadeButton)
-        self.toggle_button.setIcon(self.toggle_icon)
-        self.toggle_button.setToolTip("Dock/float widget")
-        # tigger logo
-        self.image0 = pixmaps.tigger_logo.pm()
-        self.title_icon = QLabel()
-        self.title_icon.setContentsMargins(0, 0, 0, 0)
-        self.title_icon.setBaseSize(0, 0)
-        self.title_icon.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
-        self.title_icon.setScaledContents(True)
-        self.title_icon.setPixmap(self.image0)
-        self.title_icon.setAlignment(Qt.AlignCenter)
-        self.title_icon.setMaximumSize(self.icon_size)
-        # set dock widget title
-        self.title_font = QFont()
-        self.title_font.setBold(True)
-        self.title_font.setPointSize(self.font_size)
-        if bind_widget is not None:
-            if isinstance(bind_widget, ImageControlDialog):
-                self.dock_title = QLabel(f"{title}: Control Dialog")
-            else:
-                self.dock_title = QLabel(title)
-        self.dock_title.setFont(self.title_font)
-        self.dock_title.setAlignment(Qt.AlignCenter)
-        self.dock_title.setContentsMargins(0, 0, 0, 0)
-        self.dock_title.setBaseSize(0, 0)
-        self.dock_title.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Minimum)
-        # add dock widget title items to layout
-        self.dock_title_layout.addWidget(self.title_icon)
-        self.dock_title_layout.addWidget(self.dock_title)
-        self.dock_title_layout.addWidget(self.toggle_button)
-        self.dock_title_layout.addWidget(self.close_button)
-        # set up profiles as dockable
-        self.setStyleSheet(self.tdock_style)
-        self.setWidget(bind_widget)
-        self.setFeatures(QDockWidget.AllDockWidgetFeatures)
-        if bind_widget is not None:
-            if isinstance(bind_widget, ToolDialog):
-                self.setAllowedAreas(Qt.AllDockWidgetAreas)
-            elif isinstance(bind_widget, ImageControlDialog):
-                self.setAllowedAreas(Qt.RightDockWidgetArea | Qt.LeftDockWidgetArea)
-        self.setTitleBarWidget(self.dock_title_bar)
-        self.setFloating(False)
-        # get current sizeHints()
-        if bind_widget is not None:
-            self.setBaseSize(bind_widget.sizeHint())
-            if isinstance(bind_widget, LiveImageZoom):
-                bind_widget.livezoom_resize_signal.connect(self._resizeDockWidget)
-        if close_slot is not None:
-            self.close_button.clicked.connect(close_slot)
-        if toggle_slot is not None:
-            self.toggle_button.clicked.connect(toggle_slot)
-
-    def _resizeDockWidget(self, qsize):
-        # live zoom signal slot to resize dockwidget and dock areas
-        self.setMinimumSize(qsize)
-        self.main_win.resizeDocks([self], [qsize.width()], Qt.Horizontal)
-        self.main_win.resizeDocks([self], [qsize.height()], Qt.Vertical)
-
-    # hack to stop QDockWidget responding to drag events for undocking - work around for Qt bug
-    def eventFilter(self, source, event):
-        # event seq 2, 5, 3 - mouse press, mouse move, mouse release
-        if event.type() == QEvent.MouseButtonPress:
-            label = self.childAt(event.pos())
-            if not label:
-                return super(TDockWidget, self).eventFilter(source, event)
-            if isinstance(label, QLabel):
-                if not self.isFloating():
-                    fake_mouse_event = QMouseEvent(QEvent.MouseButtonRelease, event.pos(), event.button(), event.buttons(), event.modifiers())
-                    super(TDockWidget, self).event(fake_mouse_event)
-                    return True
-        return super(TDockWidget, self).eventFilter(source, event)
-
-
-class TigToolTip(QLabel):
-    """Custom QToolTip type widget based on a QLabel for plot information output."""
-    def __init__(self):
-        QLabel.__init__(self)
-        self.installEventFilter(self)
-        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
-        self.setAttribute(Qt.WA_QuitOnClose)
-        self.setStyleSheet("QLabel {background-color: white; color: black;}")
-        self.setTextFormat(Qt.RichText)
-        self.setWordWrap(True)
-        self._qtimer = QTimer()
-        self._qtimer.timeout.connect(self.hideText)
-
-    def showText(self, location, text, timeout=7000):
-        if self._qtimer.isActive():
-            self._qtimer.start(timeout)
-        self.setText(text)
-        text_size = self.fontMetrics().boundingRect(self.text())
-        # TODO - find a better way for the below sizes
-        if text_size.width() > 900:
-            max_w = 700
-            max_h = text_size.height() * 4
-        else:
-            max_w = 900
-            max_h = text_size.height()
-        self.setGeometry(location.x(), location.y(), max_w, max_h)
-        self.show()
-        self._qtimer.start(timeout)
-
-    def hideText(self):
-        self._qtimer.stop()
-        self.close()
-        # available on Ubuntu by default
-        # disabling for now issue #163
-        # os.system('notify-send "Tigger" "Information copied to clipboard"')
-
-    def eventFilter(self, source, event):
-        # event.type() 25 == QEvent.WindowDeactivate.
-        # In this context, TigToolTip is the top most window and when application has been changed in terms of state,
-        # for example to another application, the TigToolTip needs to be closed, otherwise it will remain on the screen.
-        if event.type() == QEvent.WindowDeactivate:
-            if self._qtimer.isActive():
-                self._qtimer.stop()
-            self.close()
-        return super(TigToolTip, self).eventFilter(source, event)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import traceback
+import re
+import os
+from PyQt5.Qt import  QValidator, QWidget, QHBoxLayout, QFileDialog, QComboBox, QLabel, \
+    QLineEdit, QDialog, QIntValidator, QDoubleValidator, QToolButton, QListWidget, QVBoxLayout, \
+    QPushButton, QMessageBox
+from PyQt5.QtGui import QMouseEvent, QFont
+from PyQt5.QtWidgets import QDockWidget, QStyle, QSizePolicy, QToolTip, QApplication
+from PyQt5.Qwt import QwtPlotCurve, QwtPlotMarker
+from PyQt5.QtCore import pyqtSignal, Qt, QEvent, QSize, QTimer
+
+from TigGUI.init import pixmaps
+
+QStringList = list
+
+
+class TiggerPlotCurve(QwtPlotCurve):
+    """Wrapper around QwtPlotCurve to make it compatible with numpy float types"""
+
+    def setData(self, x, y):
+        return QwtPlotCurve.setSamples(self, list(map(float, x)), list(map(float, y)))
+
+    def setDataXfy(self, x, y):
+        return QwtPlotCurve.setSamples(self, list(map(float, y)), list(map(float, x)))
+
+
+class TiggerPlotMarker(QwtPlotMarker):
+    """Wrapper around QwtPlotCurve to make it compatible with numpy float types"""
+
+    def setValue(self, x, y):
+        return QwtPlotMarker.setValue(self, float(x), float(y))
+
+
+class FloatValidator(QValidator):
+    """QLineEdit validator for float items in standard or scientific notation"""
+    re_intermediate = re.compile("^-?([0-9]*)\.?([0-9]*)([eE]([+-])?[0-9]*)?$")
+
+    def validate(self, _input, _pos):
+        _input = str(_input)
+        try:
+            x = float(_input)
+            return QValidator.Acceptable, _input, _pos
+        except:
+            pass
+        if not _input or self.re_intermediate.match(_input):
+            return QValidator.Intermediate, _input, _pos
+        # return QValidator.Invalid, pos  # old line
+        return QValidator.Acceptable, _input, _pos
+
+
+class ValueTypeEditor(QWidget):
+    ValueTypes = (bool, int, float, complex, str)
+
+    def __init__(self, *args):
+        QWidget.__init__(self, *args)
+        lo = QHBoxLayout(self)
+        lo.setContentsMargins(0, 0, 0, 0)
+        lo.setSpacing(5)
+        # type selector
+        self.wtypesel = QComboBox(self)
+        for i, tp in enumerate(self.ValueTypes):
+            self.wtypesel.addItem(tp.__name__)
+        self.wtypesel.activated[int].connect(self._selectTypeNum)
+        typesel_lab = QLabel("&Type:", self)
+        typesel_lab.setBuddy(self.wtypesel)
+        lo.addWidget(typesel_lab, 0)
+        lo.addWidget(self.wtypesel, 0)
+        self.wvalue = QLineEdit(self)
+        self.wvalue_lab = QLabel("&Value:", self)
+        self.wvalue_lab.setBuddy(self.wvalue)
+        self.wbool = QComboBox(self)
+        self.wbool.addItems(["false", "true"])
+        self.wbool.setCurrentIndex(1)
+        lo.addWidget(self.wvalue_lab, 0)
+        lo.addWidget(self.wvalue, 1)
+        lo.addWidget(self.wbool, 1)
+        self.wvalue.hide()
+        # make input validators
+        self._validators = {int: QIntValidator(self), float: QDoubleValidator(self)}
+        # select bool type initially
+        self._selectTypeNum(0)
+
+    def _selectTypeNum(self, index):
+        tp = self.ValueTypes[index]
+        self.wbool.setVisible(tp is bool)
+        self.wvalue.setVisible(tp is not bool)
+        self.wvalue_lab.setBuddy(self.wbool if tp is bool else self.wvalue)
+        self.wvalue.setValidator(self._validators.get(tp, None))
+
+    def setValue(self, value):
+        """Sets current value"""
+        for i, tp in enumerate(self.ValueTypes):
+            if isinstance(value, tp):
+                self.wtypesel.setCurrentIndex(i)
+                self._selectTypeNum(i)
+                if tp is bool:
+                    self.wbool.setCurrentIndex(1 if value else 0)
+                else:
+                    self.wvalue.setText(str(value))
+                return
+        # unknown value: set bool
+        self.setValue(True)
+
+    def getValue(self):
+        """Returns current value, or None if no legal value is set"""
+        tp = self.ValueTypes[self.wtypesel.currentIndex()]
+        if tp is bool:
+            return bool(self.wbool.currentIndex())
+        else:
+            try:
+                return tp(self.wvalue.text())
+            except:
+                print("Error converting input to type ", tp.__name__)
+                traceback.print_exc()
+                return None
+
+
+class FileSelector(QWidget):
+    """A FileSelector is a one-line widget for selecting a file."""
+    valid = pyqtSignal()
+    filenameSelected = pyqtSignal()
+
+    def __init__(self, parent, label, filename=None, dialog_label=None, file_types=None, default_suffix=None,
+                 file_mode=QFileDialog.AnyFile):
+        QWidget.__init__(self, parent)
+        lo = QHBoxLayout(self)
+        lo.setContentsMargins(0, 0, 0, 0)
+        lo.setSpacing(5)
+        # label
+        lab = QLabel(label, self)
+        lo.addWidget(lab, 0)
+        # text field
+        self.wfname = QLineEdit(self)
+        self.wfname.setReadOnly(True)
+        self.setFilename(filename)
+        lo.addWidget(self.wfname, 1)
+        # selector
+        wsel = QToolButton(self)
+        wsel.setText("Choose...")
+        wsel.clicked.connect(self._chooseFile)
+        lo.addWidget(wsel, 0)
+        # other init
+        self._file_dialog = None
+        self._dialog_label = dialog_label or label
+        self._file_types = file_types or "All files (*)"
+        self._file_mode = file_mode
+        self._default_suffix = default_suffix
+        self._dir = None
+
+    def _chooseFile(self):
+        if self._file_dialog is None:
+            dialog = self._file_dialog = QFileDialog(self, self._dialog_label, ".", self._file_types)
+            if self._default_suffix:
+                dialog.setDefaultSuffix(self._default_suffix)
+            dialog.setFileMode(self._file_mode)
+            dialog.setModal(True)
+            if self._dir is not None:
+                dialog.setDirectory(self._dir)
+            dialog.filesSelected['QStringList'].connect(self.setFilename)
+        return self._file_dialog.exec_()
+
+    def setFilename(self, filename):
+        if isinstance(filename, QStringList):
+            filename = filename[0]
+        filename = (filename and str(filename)) or ''
+        self.wfname.setText(filename)
+        self.valid.emit(bool(filename))
+        self.filenameSelected.emit(filename)
+
+    def setDirectory(self, directory):
+        self._dir = directory
+        if self._file_dialog is not None:
+            self._file_dialog.setDirectory(directory)
+
+    def filename(self):
+        return str(self.wfname.text())
+
+    def isValid(self):
+        return bool(self.filename())
+
+
+class AddTagDialog(QDialog):
+    def __init__(self, parent, modal=True, flags=Qt.WindowFlags()):
+        QDialog.__init__(self, parent, flags)
+        self.setModal(modal)
+        self.setWindowTitle("Add Tag")
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # tag selector
+        lo1 = QHBoxLayout()
+        lo.addLayout(lo1)
+        lo1.setSpacing(5)
+        self.wtagsel = QComboBox(self)
+        self.wtagsel.setEditable(True)
+        wtagsel_lbl = QLabel("&Tag:", self)
+        wtagsel_lbl.setBuddy(self.wtagsel)
+        lo1.addWidget(wtagsel_lbl, 0)
+        lo1.addWidget(self.wtagsel, 1)
+        self.wtagsel.activated[int].connect(self._check_tag)
+        self.wtagsel.editTextChanged['QString'].connect(self._check_tag_text)
+        # value editor
+        self.valedit = ValueTypeEditor(self)
+        lo.addWidget(self.valedit)
+        # buttons
+        lo.addSpacing(10)
+        lo2 = QHBoxLayout()
+        lo.addLayout(lo2)
+        lo2.setContentsMargins(0, 0, 0, 0)
+        lo2.setContentsMargins(5, 5, 5, 5)
+        self.wokbtn = QPushButton("OK", self)
+        self.wokbtn.setMinimumWidth(128)
+        self.wokbtn.clicked.connect(self.accept)
+        self.wokbtn.setEnabled(False)
+        cancelbtn = QPushButton("Cancel", self)
+        cancelbtn.setMinimumWidth(128)
+        cancelbtn.clicked.connect(self.reject)
+        lo2.addWidget(self.wokbtn)
+        lo2.addStretch(1)
+        lo2.addWidget(cancelbtn)
+        self.setMinimumWidth(384)
+
+    def setTags(self, tagnames):
+        self.wtagsel.clear()
+        self.wtagsel.addItems(list(tagnames))
+        self.wtagsel.addItem("")
+        self.wtagsel.setCurrentIndex(len(tagnames))
+
+    def setValue(self, value):
+        self.valedit.setValue(value)
+
+    def _check_tag(self, tag):
+        self.wokbtn.setEnabled(True)
+
+    def _check_tag_text(self, text):
+        self.wokbtn.setEnabled(bool(str(text) != ""))
+
+    def accept(self):
+        """When dialog is accepted with a default (bool) tag type,
+        check if the user hasn't entered a name=value entry in the tag name field.
+        This is a common mistake, and should be treated as a shortcut for setting string tags."""
+        if isinstance(self.valedit.getValue(), bool):
+            tagval = str(self.wtagsel.currentText()).split("=", 1)
+            if len(tagval) > 1:
+                #        print tagval
+                if QMessageBox.warning(self,
+                                       "Set a string tag instead?", """<P>You have included an "=" sign in the tag name.
+            Perhaps you actually mean to set tag "%s" to the string value "%s"?</P>""" % tuple(tagval),
+                                       QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes) == QMessageBox.No:
+                    return
+                self.wtagsel.setEditText(tagval[0])
+                self.valedit.setValue(tagval[1])
+        return QDialog.accept(self)
+
+    def getTag(self):
+        return str(self.wtagsel.currentText()), self.valedit.getValue()
+
+
+class SelectTagsDialog(QDialog):
+    def __init__(self, parent, modal=True, flags=Qt.WindowFlags(), caption="Select Tags", ok_button="Select"):
+        QDialog.__init__(self, parent, flags)
+        self.setModal(modal)
+        self.setWindowTitle(caption)
+        lo = QVBoxLayout(self)
+        lo.setContentsMargins(10, 10, 10, 10)
+        lo.setSpacing(5)
+        # tag selector
+        self.wtagsel = QListWidget(self)
+        lo.addWidget(self.wtagsel)
+        #    self.wtagsel.setColumnMode(QListBox.FitToWidth)
+        self.wtagsel.setSelectionMode(QListWidget.MultiSelection)
+        self.wtagsel.itemSelectionChanged.connect(self._check_tag)
+        # buttons
+        lo.addSpacing(10)
+        lo2 = QHBoxLayout()
+        lo.addLayout(lo2)
+        lo2.setContentsMargins(0, 0, 0, 0)
+        lo2.setContentsMargins(5, 5, 5, 5)
+        self.wokbtn = QPushButton(ok_button, self)
+        self.wokbtn.setMinimumWidth(128)
+        self.wokbtn.clicked.connect(self.accept)
+        self.wokbtn.setEnabled(False)
+        cancelbtn = QPushButton("Cancel", self)
+        cancelbtn.setMinimumWidth(128)
+        cancelbtn.clicked.connect(self.reject)
+        lo2.addWidget(self.wokbtn)
+        lo2.addStretch(1)
+        lo2.addWidget(cancelbtn)
+        self.setMinimumWidth(384)
+        self._tagnames = []
+
+    def setTags(self, tagnames):
+        self._tagnames = tagnames
+        self.wtagsel.clear()
+        self.wtagsel.insertItems(0, list(tagnames))
+
+    def _check_tag(self):
+        for i in range(len(self._tagnames)):
+            if self.wtagsel.item(i).isSelected():
+                self.wokbtn.setEnabled(True)
+                return
+        else:
+            self.wokbtn.setEnabled(False)
+
+    def getSelectedTags(self):
+        return [tag for i, tag in enumerate(self._tagnames) if self.wtagsel.item(i).isSelected()]
+
+
+class TDockWidget(QDockWidget):
+
+    def __init__(self, title="", parent=None, flags=Qt.WindowFlags(), bind_widget=None, close_slot=None, toggle_slot=None):
+        QDockWidget.__init__(self, title, parent, flags)
+        self.installEventFilter(self)
+        self.main_win = parent
+        # default stlyesheets for title bars
+        self.title_stylesheet = "QWidget {background: rgb(68,68,68);}"
+        self.button_style = "QPushButton:hover:!pressed {background: grey;}"
+        from TigGUI.Images.ControlDialog import ImageControlDialog
+        from TigGUI.Plot.SkyModelPlot import ToolDialog
+        from TigGUI.Plot.SkyModelPlot import LiveImageZoom
+        if bind_widget is not None:
+            self.bind_widget = bind_widget
+        if bind_widget is not None:
+            if isinstance(bind_widget, ToolDialog):
+                self.tdock_style = "ToolDialog {border: 1.5px solid rgb(68,68,68);}"
+            elif isinstance(bind_widget, ImageControlDialog):
+                self.tdock_style = "ImageControlDialog {border: 1.5px solid rgb(68,68,68);}"
+        # set default sizes for QDockWidgets
+        self.btn_w = 28
+        self.btn_h = 28
+        self.icon_size = QSize(20, 20)
+        self.font_size = 8
+        # setup custom title bar for profiles dockable
+        self.dock_title_bar = QWidget()
+        self.dock_title_bar.setContentsMargins(0, 0, 0, 0)
+        self.dock_title_bar.setStyleSheet(self.title_stylesheet)
+        self.dock_title_bar.setBaseSize(0, 0)
+        self.dock_title_layout = QHBoxLayout()
+        self.dock_title_layout.setContentsMargins(0, 0, 0, 0)
+        self.dock_title_layout.setSpacing(0)
+        self.dock_title_bar.setLayout(self.dock_title_layout)
+        # custom close button
+        self.close_button = QPushButton()
+        self.close_button.setStyleSheet(self.button_style)
+        self.close_button.setMaximumWidth(self.btn_w)
+        self.close_button.setMaximumHeight(self.btn_h)
+        self.close_button.setContentsMargins(0, 0, 0, 0)
+        self.close_button.setBaseSize(0, 0)
+        self.close_icon = self.dock_title_bar.style().standardIcon(QStyle.SP_TitleBarCloseButton)
+        self.close_button.setIcon(self.close_icon)
+        self.close_button.setToolTip("Close")
+        # custom toggle button
+        self.toggle_button = QPushButton()
+        self.toggle_button.setStyleSheet(self.button_style)
+        self.toggle_button.setMaximumWidth(self.btn_w)
+        self.toggle_button.setMaximumHeight(self.btn_h)
+        self.toggle_button.setContentsMargins(0, 0, 0, 0)
+        self.toggle_button.setBaseSize(0, 0)
+        self.toggle_icon = self.dock_title_bar.style().standardIcon(QStyle.SP_TitleBarShadeButton)
+        self.toggle_button.setIcon(self.toggle_icon)
+        self.toggle_button.setToolTip("Dock/float widget")
+        # tigger logo
+        self.image0 = pixmaps.tigger_logo.pm()
+        self.title_icon = QLabel()
+        self.title_icon.setContentsMargins(0, 0, 0, 0)
+        self.title_icon.setBaseSize(0, 0)
+        self.title_icon.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
+        self.title_icon.setScaledContents(True)
+        self.title_icon.setPixmap(self.image0)
+        self.title_icon.setAlignment(Qt.AlignCenter)
+        self.title_icon.setMaximumSize(self.icon_size)
+        # set dock widget title
+        self.title_font = QFont()
+        self.title_font.setBold(True)
+        self.title_font.setPointSize(self.font_size)
+        if bind_widget is not None:
+            if isinstance(bind_widget, ImageControlDialog):
+                self.dock_title = QLabel(f"{title}: Control Dialog")
+            else:
+                self.dock_title = QLabel(title)
+        self.dock_title.setFont(self.title_font)
+        self.dock_title.setAlignment(Qt.AlignCenter)
+        self.dock_title.setContentsMargins(0, 0, 0, 0)
+        self.dock_title.setBaseSize(0, 0)
+        self.dock_title.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Minimum)
+        # add dock widget title items to layout
+        self.dock_title_layout.addWidget(self.title_icon)
+        self.dock_title_layout.addWidget(self.dock_title)
+        self.dock_title_layout.addWidget(self.toggle_button)
+        self.dock_title_layout.addWidget(self.close_button)
+        # set up profiles as dockable
+        self.setStyleSheet(self.tdock_style)
+        self.setWidget(bind_widget)
+        self.setFeatures(QDockWidget.AllDockWidgetFeatures)
+        if bind_widget is not None:
+            if isinstance(bind_widget, ToolDialog):
+                self.setAllowedAreas(Qt.AllDockWidgetAreas)
+            elif isinstance(bind_widget, ImageControlDialog):
+                self.setAllowedAreas(Qt.RightDockWidgetArea | Qt.LeftDockWidgetArea)
+        self.setTitleBarWidget(self.dock_title_bar)
+        self.setFloating(False)
+        # get current sizeHints()
+        if bind_widget is not None:
+            self.setBaseSize(bind_widget.sizeHint())
+            if isinstance(bind_widget, LiveImageZoom):
+                bind_widget.livezoom_resize_signal.connect(self._resizeDockWidget)
+        if close_slot is not None:
+            self.close_button.clicked.connect(close_slot)
+        if toggle_slot is not None:
+            self.toggle_button.clicked.connect(toggle_slot)
+
+    def _resizeDockWidget(self, qsize):
+        # live zoom signal slot to resize dockwidget and dock areas
+        self.setMinimumSize(qsize)
+        self.main_win.resizeDocks([self], [qsize.width()], Qt.Horizontal)
+        self.main_win.resizeDocks([self], [qsize.height()], Qt.Vertical)
+
+    # hack to stop QDockWidget responding to drag events for undocking - work around for Qt bug
+    def eventFilter(self, source, event):
+        # event seq 2, 5, 3 - mouse press, mouse move, mouse release
+        if event.type() == QEvent.MouseButtonPress:
+            label = self.childAt(event.pos())
+            if not label:
+                return super(TDockWidget, self).eventFilter(source, event)
+            if isinstance(label, QLabel):
+                if not self.isFloating():
+                    fake_mouse_event = QMouseEvent(QEvent.MouseButtonRelease, event.pos(), event.button(), event.buttons(), event.modifiers())
+                    super(TDockWidget, self).event(fake_mouse_event)
+                    return True
+        return super(TDockWidget, self).eventFilter(source, event)
+
+
+class TigToolTip(QLabel):
+    """Custom QToolTip type widget based on a QLabel for plot information output."""
+    def __init__(self):
+        QLabel.__init__(self)
+        self.installEventFilter(self)
+        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
+        self.setAttribute(Qt.WA_QuitOnClose)
+        self.setStyleSheet("QLabel {background-color: white; color: black;}")
+        self.setTextFormat(Qt.RichText)
+        self.setWordWrap(True)
+        self._qtimer = QTimer()
+        self._qtimer.timeout.connect(self.hideText)
+
+    def showText(self, location, text, timeout=7000):
+        if self._qtimer.isActive():
+            self._qtimer.start(timeout)
+        self.setText(text)
+        text_size = self.fontMetrics().boundingRect(self.text())
+        # TODO - find a better way for the below sizes
+        if text_size.width() > 900:
+            max_w = 700
+            max_h = text_size.height() * 4
+        else:
+            max_w = 900
+            max_h = text_size.height()
+        self.setGeometry(location.x(), location.y(), max_w, max_h)
+        self.show()
+        self._qtimer.start(timeout)
+
+    def hideText(self):
+        self._qtimer.stop()
+        self.close()
+        # available on Ubuntu by default
+        # disabling for now issue #163
+        # os.system('notify-send "Tigger" "Information copied to clipboard"')
+
+    def eventFilter(self, source, event):
+        # event.type() 25 == QEvent.WindowDeactivate.
+        # In this context, TigToolTip is the top most window and when application has been changed in terms of state,
+        # for example to another application, the TigToolTip needs to be closed, otherwise it will remain on the screen.
+        if event.type() == QEvent.WindowDeactivate:
+            if self._qtimer.isActive():
+                self._qtimer.stop()
+            self.close()
+        return super(TigToolTip, self).eventFilter(source, event)
--- tigger-1.6.0.orig/TigGUI/__init__.py
+++ tigger-1.6.0/TigGUI/__init__.py
@@ -1,42 +1,42 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import TigGUI.kitties.utils
-
-import pkg_resources
-try:
-    __version__ = pkg_resources.require("astro-tigger")[0].version
-except pkg_resources.DistributionNotFound:
-    __version__ = "dev"
-
-release_string = __version__
-svn_revision_string = __version__
-svn_revision_html = __version__
-
-startup_dprint = startup_dprintf = lambda *dum: None
-_verbosity = TigGUI.kitties.utils.verbosity(name="tiggui")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import TigGUI.kitties.utils
+
+import pkg_resources
+try:
+    __version__ = pkg_resources.require("astro-tigger")[0].version
+except pkg_resources.DistributionNotFound:
+    __version__ = "dev"
+
+release_string = __version__
+svn_revision_string = __version__
+svn_revision_html = __version__
+
+startup_dprint = startup_dprintf = lambda *dum: None
+_verbosity = TigGUI.kitties.utils.verbosity(name="tiggui")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
--- tigger-1.6.0.orig/TigGUI/init.py
+++ tigger-1.6.0/TigGUI/init.py
@@ -1,11 +1,11 @@
-# initializes GUI-related globals. Only called from the viewer
-
-import os.path
-
-import TigGUI.kitties.config
-import TigGUI.kitties.pixmaps
-
-pixmaps = TigGUI.kitties.pixmaps.PixmapCache("TigGUI")
-ConfigFileName = ".tigger.conf"
-ConfigFile = TigGUI.kitties.config.DualConfigParser("tigger.conf", ["/usr/lib/TigGUI", os.path.dirname(__file__)])
-Config = TigGUI.kitties.config.SectionParser(ConfigFile, "Tigger")
+# initializes GUI-related globals. Only called from the viewer
+
+import os.path
+
+import TigGUI.kitties.config
+import TigGUI.kitties.pixmaps
+
+pixmaps = TigGUI.kitties.pixmaps.PixmapCache("TigGUI")
+ConfigFileName = ".tigger.conf"
+ConfigFile = TigGUI.kitties.config.DualConfigParser("tigger.conf", ["/usr/lib/TigGUI", os.path.dirname(__file__)])
+Config = TigGUI.kitties.config.SectionParser(ConfigFile, "Tigger")
--- tigger-1.6.0.orig/TigGUI/kitties/__init__.py
+++ tigger-1.6.0/TigGUI/kitties/__init__.py
@@ -1,2 +1,2 @@
-# this is an import of the Kittens module. We copy this here since we want to port Tigger to QT5, without
-# having to port all other packages that depend on Kittens to QT5.
+# this is an import of the Kittens module. We copy this here since we want to port Tigger to QT5, without
+# having to port all other packages that depend on Kittens to QT5.
--- tigger-1.6.0.orig/TigGUI/kitties/config.py
+++ tigger-1.6.0/TigGUI/kitties/config.py
@@ -1,168 +1,168 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2007
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import os
-import sys
-from configparser import ConfigParser, NoSectionError, NoOptionError, DuplicateSectionError
-
-import os.path
-
-_default_system_paths = [
-    "/usr/local/Timba",
-    "/usr/Timba/",
-    "/etc/"]
-
-_default_user_path = os.path.expanduser("~/")
-
-
-class DualConfigParser:
-    """A dual config parser taking into account both system-wide files
-    and user defaults. Any changes are stored in the user defaults."""
-
-    def __init__(self, filename="timba.conf",
-                 system_paths=_default_system_paths,
-                 user_path=_default_user_path):
-        self.syscp = ConfigParser()
-        system_paths = [os.path.join(path, filename) for path in system_paths]
-        self.syscp.read(system_paths)
-        self.usercp = ConfigParser()
-        self._user_file = os.path.join(user_path, "." + filename)
-        self.usercp.read([self._user_file])
-
-    def add_section(self, _section):
-        if not self.syscp.has_section(_section):
-            self.syscp.add_section(_section)
-        if not self.usercp.has_section(_section):
-            self.usercp.add_section(_section)
-
-    def has_section(self, _section):
-        return self.syscp.has_section(_section) or self.usercp.has_section(_section)
-
-    def _get(self, _method, _section, _option, default=None, init=False, save=False):
-        _section = _section or self.defsection  # TODO - defsection is unresolved for DualConfigParser
-        # try user defaults
-        try:
-            return getattr(self.usercp, _method)(_section, _option)
-        except (NoSectionError, NoOptionError, ValueError):
-            error = sys.exc_info()[1]
-        # try systemwide
-        try:
-            return getattr(self.syscp, _method)(_section, _option)
-        except (NoSectionError, NoOptionError, ValueError):
-            if default is not None and _option is not None:
-                self.syscp.set(_section, _option, str(default))
-                if init or save:
-                    self.usercp.set(_section, _option, str(default))
-                    if save:
-                        self.usercp.write(open(self._user_file, "w"))
-                return default
-            # no default, so re-raise the error
-            raise error
-
-    def set(self, _section, _option, _value, save=True):
-        _value = str(_value)
-        # try to get option first, and do nothing if no change
-        try:
-            if self.get(_section, _option) == _value:
-                return
-        except (NoSectionError, NoOptionError):
-            pass
-        # save to user section
-        try:
-            self.usercp.add_section(_section)
-        except DuplicateSectionError:
-            pass
-        self.usercp.set(_section, _option, _value)
-        if save:
-            with open(self._user_file, "w") as f:
-                self.usercp.write(f)
-
-    def has_option(self, _section, _option):
-        return self.syscp.has_option(_section, _option) or \
-               self.usercp.has_option(_section, _option)
-
-    def get(self, _section, _option, default=None):
-        return self._get('get', _option, default, _section)
-
-
-class SectionParser:
-    """A section parser is basically a ConfigParser with a default section name."""
-
-    def __init__(self, _parser, _section):
-        """Creates a SectionParser from a DualConfigParser and a section name"""
-        self.parser = _parser
-        _parser.add_section(_section)
-        self.section = _section
-
-    def has_option(self, _option, section=None):
-        return self.parser.has_option(section or self.section, _option)
-
-    def get(self, _option, default=None, section=None, init=False, save=False):
-        return self.parser._get('get', section or self.section, _option, default, init=init, save=save)
-
-    def getint(self, _option, default=None, section=None, init=False, save=False):
-        return self.parser._get('getint', section or self.section, _option, default, init=init, save=save)
-
-    def getfloat(self, _option, default=None, section=None, init=False, save=False):
-        return self.parser._get('getfloat', section or self.section, _option, default, init=init, save=save)
-
-    def getbool(self, _option, default=None, section=None, init=False, save=False):
-        return self.parser._get('getboolean', section or self.section, _option, default, init=init, save=save)
-
-    def set(self, _option, _value, section=None, save=True):
-        return self.parser.set(section or self.section, _option, _value, save=save)
-
-
-Config = DualConfigParser()
-_section_parsers = {}
-
-
-def section(name):
-    global _section_parsers
-    return _section_parsers.setdefault(name, SectionParser(Config, name))
-
-
-if __name__ == '__main__':
-    conf = Config('test')
-    print('test1:', conf.get('test1', 1))
-    print('test2:', conf.getint('test2', 2))
-    print('test3:', conf.getfloat('test3', 3.0))
-    try:
-        print('test4:', conf.get('test4'))
-    except:
-        print('test4:', sys.exc_info())
-    try:
-        print('test5:', conf.get('test5'))
-    except:
-        print('test5:', sys.exc_info())
-    conf.set('test6', 'abc')
-    conf.set('test7', 1)
-    conf.set('test8', 1.0)
-    conf.set('test9', True)
-    print('has test1:', conf.has_option('test1'))
-    print('has test4:', conf.has_option('test4'))
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2007
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import os
+import sys
+from configparser import ConfigParser, NoSectionError, NoOptionError, DuplicateSectionError
+
+import os.path
+
+_default_system_paths = [
+    "/usr/local/Timba",
+    "/usr/Timba/",
+    "/etc/"]
+
+_default_user_path = os.path.expanduser("~/")
+
+
+class DualConfigParser:
+    """A dual config parser taking into account both system-wide files
+    and user defaults. Any changes are stored in the user defaults."""
+
+    def __init__(self, filename="timba.conf",
+                 system_paths=_default_system_paths,
+                 user_path=_default_user_path):
+        self.syscp = ConfigParser()
+        system_paths = [os.path.join(path, filename) for path in system_paths]
+        self.syscp.read(system_paths)
+        self.usercp = ConfigParser()
+        self._user_file = os.path.join(user_path, "." + filename)
+        self.usercp.read([self._user_file])
+
+    def add_section(self, _section):
+        if not self.syscp.has_section(_section):
+            self.syscp.add_section(_section)
+        if not self.usercp.has_section(_section):
+            self.usercp.add_section(_section)
+
+    def has_section(self, _section):
+        return self.syscp.has_section(_section) or self.usercp.has_section(_section)
+
+    def _get(self, _method, _section, _option, default=None, init=False, save=False):
+        _section = _section or self.defsection  # TODO - defsection is unresolved for DualConfigParser
+        # try user defaults
+        try:
+            return getattr(self.usercp, _method)(_section, _option)
+        except (NoSectionError, NoOptionError, ValueError):
+            error = sys.exc_info()[1]
+        # try systemwide
+        try:
+            return getattr(self.syscp, _method)(_section, _option)
+        except (NoSectionError, NoOptionError, ValueError):
+            if default is not None and _option is not None:
+                self.syscp.set(_section, _option, str(default))
+                if init or save:
+                    self.usercp.set(_section, _option, str(default))
+                    if save:
+                        self.usercp.write(open(self._user_file, "w"))
+                return default
+            # no default, so re-raise the error
+            raise error
+
+    def set(self, _section, _option, _value, save=True):
+        _value = str(_value)
+        # try to get option first, and do nothing if no change
+        try:
+            if self.get(_section, _option) == _value:
+                return
+        except (NoSectionError, NoOptionError):
+            pass
+        # save to user section
+        try:
+            self.usercp.add_section(_section)
+        except DuplicateSectionError:
+            pass
+        self.usercp.set(_section, _option, _value)
+        if save:
+            with open(self._user_file, "w") as f:
+                self.usercp.write(f)
+
+    def has_option(self, _section, _option):
+        return self.syscp.has_option(_section, _option) or \
+               self.usercp.has_option(_section, _option)
+
+    def get(self, _section, _option, default=None):
+        return self._get('get', _option, default, _section)
+
+
+class SectionParser:
+    """A section parser is basically a ConfigParser with a default section name."""
+
+    def __init__(self, _parser, _section):
+        """Creates a SectionParser from a DualConfigParser and a section name"""
+        self.parser = _parser
+        _parser.add_section(_section)
+        self.section = _section
+
+    def has_option(self, _option, section=None):
+        return self.parser.has_option(section or self.section, _option)
+
+    def get(self, _option, default=None, section=None, init=False, save=False):
+        return self.parser._get('get', section or self.section, _option, default, init=init, save=save)
+
+    def getint(self, _option, default=None, section=None, init=False, save=False):
+        return self.parser._get('getint', section or self.section, _option, default, init=init, save=save)
+
+    def getfloat(self, _option, default=None, section=None, init=False, save=False):
+        return self.parser._get('getfloat', section or self.section, _option, default, init=init, save=save)
+
+    def getbool(self, _option, default=None, section=None, init=False, save=False):
+        return self.parser._get('getboolean', section or self.section, _option, default, init=init, save=save)
+
+    def set(self, _option, _value, section=None, save=True):
+        return self.parser.set(section or self.section, _option, _value, save=save)
+
+
+Config = DualConfigParser()
+_section_parsers = {}
+
+
+def section(name):
+    global _section_parsers
+    return _section_parsers.setdefault(name, SectionParser(Config, name))
+
+
+if __name__ == '__main__':
+    conf = Config('test')
+    print('test1:', conf.get('test1', 1))
+    print('test2:', conf.getint('test2', 2))
+    print('test3:', conf.getfloat('test3', 3.0))
+    try:
+        print('test4:', conf.get('test4'))
+    except:
+        print('test4:', sys.exc_info())
+    try:
+        print('test5:', conf.get('test5'))
+    except:
+        print('test5:', sys.exc_info())
+    conf.set('test6', 'abc')
+    conf.set('test7', 1)
+    conf.set('test8', 1.0)
+    conf.set('test9', True)
+    print('has test1:', conf.has_option('test1'))
+    print('has test4:', conf.has_option('test4'))
--- tigger-1.6.0.orig/TigGUI/kitties/pixmaps.py
+++ tigger-1.6.0/TigGUI/kitties/pixmaps.py
@@ -1,3126 +1,3126 @@
-#!/usr/bin/python
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2007
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-from PyQt5.Qt import QPixmap, QIcon
-
-
-from .utils import verbosity
-
-import sys
-
-_dbg = verbosity(0, name='pixmaps')
-_dprint = _dbg.dprint
-_dprintf = _dbg.dprintf
-
-# define a catch-all case for all missing icons
-_missing_icon_xpm = ["16 16 14 1",
-                     "# c None",
-                     "k c None",
-                     "d c None",
-                     "c c None",
-                     "b c None",
-                     "f c None",
-                     "l c None",
-                     "i c None",
-                     "j c None",
-                     "h c None",
-                     ". c None",
-                     "a c #000000",
-                     "g c #808080",
-                     "e c #ff0000",
-                     "....##aaabb#c#.#",
-                     "##db#aeeea##c###",
-                     "f#gg#aeeeahgg#d#",
-                     ".#gggaeeeaggg#c#",
-                     "c##ggaeeeaggc#.#",
-                     "##hhgaeeeag#c###",
-                     "##h##aeeeahh##f#",
-                     "##hhhaeeeaihhh#.",
-                     ".c#hhaeeeahih#dc",
-                     "#jf#gaaaaagh#dfh",
-                     "##kggg#hbggglchh",
-                     "##gggbaaahggg#d#",
-                     "c.gg#aeeeahgg###",
-                     "###hhaeeea#h####",
-                     "#####aeeea######",
-                     "f#.#.jaaad.cccdj"]
-
-
-class QPixmapWrapper:
-    """QPixmapWrapper can defer initialization of a pixmap until the pixmap
-    is actually retrieved with the pm() or iconset() method for the first time.
-    This gets around the problem of not being able to create QPixmaps until a Qt
-    application has been initialized.
-    """
-
-    def __init__(self, pm=_missing_icon_xpm):
-        """Initialize wrapper with a pixmap or with an xpm string array"""
-        self._xpmstr = None
-        self._pm = None
-        self._icon = None
-        self.assign(pm)
-
-    def assign(self, pm):
-        """Reassign pixmap or xpm string array to wrapper"""
-        if isinstance(pm, QPixmap):
-            self._pm = pm
-        else:  # assume xpm string list to be decoded on-demand
-            self._xpmstr = pm
-            self._pm = None
-        self._icon = None
-
-    def pm(self):
-        """Get QPixmap from wrapper"""
-        if self._pm is None:
-            self._pm = QPixmap(self._xpmstr)
-        return self._pm
-
-    def icon(self):
-        """Get QIcon from wrapper"""
-        if self._icon is None:
-            self._icon = QIcon(self.pm())
-        return self._icon
-
-    # for compatibility with old code
-    iconset = icon
-
-
-exclaim = QPixmapWrapper(["14 14 3 1",
-                          "       c None",
-                          ".      c red",
-                          "X      c yellow",
-                          "              ",
-                          "     ....     ",
-                          "    ......    ",
-                          "    ......    ",
-                          "    ......    ",
-                          "    ......    ",
-                          "    ......    ",
-                          "     ....     ",
-                          "     ....     ",
-                          "      ..      ",
-                          "              ",
-                          "      ..      ",
-                          "     ....     ",
-                          "      ..      "])
-
-cancel = QPixmapWrapper(["16 16 5 1",
-                         "p c #800000",
-                         ". c #400000",
-                         "X c #FF0000",
-                         "o c #C00000",
-                         "  c None",
-                         "                ",
-                         "                ",
-                         "            X   ",
-                         "    XX     Xoo  ",
-                         "   XooXX  Xoo.  ",
-                         "     pooXooo.   ",
-                         "      poooo.    ",
-                         "       XooX     ",
-                         "      XoooX     ",
-                         "     Xo. poX    ",
-                         "     X.   po    ",
-                         "    Xo     po   ",
-                         "    X.      o   ",
-                         "    X           ",
-                         "                ",
-                         "                "])
-
-check = QPixmapWrapper(["16 14 8 1",
-                        "  c #000000",
-                        ". c #400000",
-                        "X c None",
-                        "o c #00C000",
-                        "O c #008000",
-                        "+ c #C0FFC0",
-                        "@ c #004000",
-                        "# c None",
-                        "XXXXXXXXXXXXXXX+",
-                        "XXXXXXXXXXXXXX+o",
-                        "XXXXXXXXXXXXX+oO",
-                        "XXXXXXXXXXXX+oO@",
-                        "XXXXXXXXXXX+oO@ ",
-                        "XX+OXXXXXX+oO@ X",
-                        "X+ooOXXXX+oO@.XX",
-                        " @OooOXX+oO@ XXX",
-                        "X @OooO+oO@.XXXX",
-                        "XX.@OoooO@.XXXXX",
-                        "XXX @OoO@ XXXXXX",
-                        "XXXX @O@ XXXXXXX",
-                        "XXXXX . XXXXXXXX",
-                        "XXXXXXXXXXXXXXXX"])
-
-pause_normal = QPixmapWrapper(["16 16 95 2",
-                               "   c None",
-                               " . c #CDDAF4",
-                               " X c #3A64B3",
-                               " o c #4887FC",
-                               " O c #3B66B7",
-                               " + c #3269CF",
-                               " @ c #6696EE",
-                               " # c #5183E0",
-                               " $ c #6494EC",
-                               " % c #C4D4F1",
-                               " & c #6C94E0",
-                               " * c #3269D2",
-                               " = c #3B80FF",
-                               " - c #90B1EC",
-                               " ; c #3B65B3",
-                               " : c #3472E4",
-                               " > c #656565",
-                               " , c #5E88D5",
-                               " < c #4686FC",
-                               " 1 c #4A7FE2",
-                               " 2 c #A3BCEA",
-                               " 3 c #3569CA",
-                               " 4 c #4987F8",
-                               " 5 c #4E6286",
-                               " 6 c #B8CCEE",
-                               " 7 c #3C81FF",
-                               " 8 c #3471E3",
-                               " 9 c #3C66B6",
-                               " 0 c #A8C2F5",
-                               " q c #3E70CF",
-                               " w c #326CD7",
-                               " e c #486190",
-                               " r c #7EA3E6",
-                               " t c #5789E4",
-                               " y c #3665BD",
-                               " u c #8FADE6",
-                               " i c #3269D0",
-                               " p c #DCE6F6",
-                               " a c #4D648E",
-                               " s c #3D82FF",
-                               " d c #8EADE8",
-                               " f c #4A80E4",
-                               " g c #356ACC",
-                               " h c #3368CA",
-                               " j c #5A8AE3",
-                               " k c #3D64AC",
-                               " l c #4980E6",
-                               " z c #6E95DC",
-                               " x c #3268CC",
-                               " c c #4888FC",
-                               " v c #4686FA",
-                               " b c #3467C4",
-                               " n c #D4E0F4",
-                               " m c #3472E5",
-                               " M c #EBF0FA",
-                               " N c #3776EB",
-                               " B c #8CACE5",
-                               " V c #326AD2",
-                               " C c #A1BAE9",
-                               " Z c #B9CCF0",
-                               " A c #B7CAEE",
-                               " S c #3765B9",
-                               " D c #3B66B6",
-                               " F c #5B88DC",
-                               " G c #6E99E8",
-                               " H c #3E62A5",
-                               " J c #3269CE",
-                               " K c #4687FC",
-                               " L c #4F6184",
-                               " P c #202020",
-                               " I c #3269D1",
-                               " U c #799FE5",
-                               " Y c #E4EBF8",
-                               " T c #326BD4",
-                               " R c #346ACC",
-                               " E c #3268CA",
-                               " W c #658EDB",
-                               " Q c #3572E4",
-                               " ! c #CBD9F3",
-                               " ~ c #3E71CF",
-                               " ^ c #E1E9F8",
-                               " / c #3268CD",
-                               " ( c #4083FF",
-                               " ) c #3766BE",
-                               " _ c #3873E0",
-                               " ` c #97B3E4",
-                               " ' c #8EACE5",
-                               " ] c #447CE5",
-                               " [ c #3676EB",
-                               " { c #F2F5FB",
-                               " } c #749DE9",
-                               " | c #8DACE7",
-                               ".  c #326AD3",
-                               ".. c #3469CB",
-                               ".X c None",
-                               "           I + / x E y          ",
-                               "       I * w m # F : T h S      ",
-                               "     I.  l 0 Y { { M Z t J D    ",
-                               "   i V $ n ^ ^ ^ ^ ^ ^ p U J H  ",
-                               "   + l % u u u . . u u u ! j b >",
-                               " x T - 6 P P P 6 6 P P P A `.  e",
-                               " x _ C 2 P P P 2 2 P P P 4 = 8 X",
-                               " x 1 B u P P P ' ' P P P 7 = [ O",
-                               " x ] G } P P P 7 v P P P 7 7 N 9",
-                               " E Q < < P P P 7 7 P P P s ( : k",
-                               " y T o c P P P 7 7 P P P K o.  L",
-                               "   h f @ P P P @ @ P P P @ f ) >",
-                               "   S R & r r r r r r r r &.. 5 >",
-                               "     ; g W | d d d d | W 3 a >  ",
-                               "       H b ~ , z z , q ) 5 >    ",
-                               "         > e X O 9 k L > >      "])
-
-pause_green = QPixmapWrapper(["16 16 94 2",
-                              "Qt c None",
-                              ".P c #ffff00",
-                              ".d c #3268ca",
-                              ".c c #3268cc",
-                              ".b c #3268cd",
-                              ".w c #3269ce",
-                              ".a c #3269cf",
-                              ".y c #3269d0",
-                              ".# c #3269d1",
-                              ".f c #3269d2",
-                              ".z c #326ad2",
-                              ".o c #326ad3",
-                              ".l c #326bd4",
-                              ".g c #326cd7",
-                              ".m c #3368ca",
-                              ".L c #3467c4",
-                              "#p c #3469cb",
-                              "#m c #346acc",
-                              ".Y c #3471e3",
-                              ".k c #3472e4",
-                              ".h c #3472e5",
-                              "#w c #3569ca",
-                              "#s c #356acc",
-                              "#a c #3572e4",
-                              ".e c #3665bd",
-                              ".4 c #3676eb",
-                              ".n c #3765b9",
-                              "#l c #3766be",
-                              "#. c #3776eb",
-                              ".T c #3873e0",
-                              ".Z c #3a64b3",
-                              "#r c #3b65b3",
-                              ".x c #3b66b6",
-                              ".5 c #3b66b7",
-                              ".X c #3b80ff",
-                              "## c #3c66b6",
-                              ".3 c #3c81ff",
-                              "#e c #3d64ac",
-                              "#c c #3d82ff",
-                              ".F c #3e62a5",
-                              "#B c #3e70cf",
-                              "#y c #3e71cf",
-                              "#d c #4083ff",
-                              ".6 c #447ce5",
-                              ".9 c #4686fa",
-                              "#b c #4686fc",
-                              "#h c #4687fc",
-                              ".S c #486190",
-                              "#f c #4887fc",
-                              "#g c #4888fc",
-                              ".p c #4980e6",
-                              ".W c #4987f8",
-                              ".0 c #4a7fe2",
-                              "#j c #4a80e4",
-                              "#x c #4d648e",
-                              "#q c #4e6286",
-                              "#i c #4f6184",
-                              ".i c #5183e0",
-                              ".v c #5789e4",
-                              ".K c #5a8ae3",
-                              ".j c #5b88dc",
-                              "#z c #5e88d5",
-                              ".A c #6494ec",
-                              ".M c #656565",
-                              "#t c #658edb",
-                              "#k c #6696ee",
-                              "#n c #6c94e0",
-                              "#A c #6e95dc",
-                              ".7 c #6e99e8",
-                              ".8 c #749de9",
-                              ".E c #799fe5",
-                              "#o c #7ea3e6",
-                              ".1 c #8cace5",
-                              "#u c #8dace7",
-                              ".2 c #8eace5",
-                              "#v c #8eade8",
-                              ".H c #8fade6",
-                              ".N c #90b1ec",
-                              ".R c #97b3e4",
-                              ".U c #a1bae9",
-                              ".V c #a3bcea",
-                              ".q c #a8c2f5",
-                              ".Q c #b7caee",
-                              ".O c #b8ccee",
-                              ".u c #b9ccf0",
-                              ".G c #c4d4f1",
-                              ".J c #cbd9f3",
-                              ".I c #cddaf4",
-                              ".B c #d4e0f4",
-                              ".D c #dce6f6",
-                              ".C c #e1e9f8",
-                              ".r c #e4ebf8",
-                              ".t c #ebf0fa",
-                              ".s c #f2f5fb",
-                              "QtQtQtQtQt.#.a.b.c.d.eQtQtQtQtQt",
-                              "QtQtQt.#.f.g.h.i.j.k.l.m.nQtQtQt",
-                              "QtQt.#.o.p.q.r.s.s.t.u.v.w.xQtQt",
-                              "Qt.y.z.A.B.C.C.C.C.C.C.D.E.w.FQt",
-                              "Qt.a.p.G.H.H.H.I.I.H.H.H.J.K.L.M",
-                              ".c.l.N.O.P.P.P.O.O.P.P.P.Q.R.o.S",
-                              ".c.T.U.V.P.P.P.V.V.P.P.P.W.X.Y.Z",
-                              ".c.0.1.H.P.P.P.2.2.P.P.P.3.X.4.5",
-                              ".c.6.7.8.P.P.P.3.9.P.P.P.3.3#.##",
-                              ".d#a#b#b.P.P.P.3.3.P.P.P#c#d.k#e",
-                              ".e.l#f#g.P.P.P.3.3.P.P.P#h#f.o#i",
-                              "Qt.m#j#k.P.P.P#k#k.P.P.P#k#j#l.M",
-                              "Qt.n#m#n#o#o#o#o#o#o#o#o#n#p#q.M",
-                              "QtQt#r#s#t#u#v#v#v#v#u#t#w#x.MQt",
-                              "QtQtQt.F.L#y#z#A#A#z#B#l#q.MQtQt",
-                              "QtQtQtQt.M.S.Z.5###e#i.M.MQtQtQt"])
-
-refresh = QPixmapWrapper(["16 16 7 1",
-                          "  c #000000",
-                          ". c #00FF00",
-                          "X c None",
-                          "o c #00C000",
-                          "O c #008000",
-                          "+ c #004000",
-                          "@ c None",
-                          "XXXXXX     XXXXX",
-                          "XXXX  .oo  + XXX",
-                          "XXX .ooO XX   XX",
-                          "XXX ooO XXXXX XX",
-                          "XX .oO XXXXXXX X",
-                          "XX ooO XXXXXXXXX",
-                          " ..ooooO XX  XXX",
-                          "X .oooO XX    XX",
-                          "XX .oO XX      X",
-                          "XXX O XX        ",
-                          "XXXX XXXXX    XX",
-                          "X XXXXXXXX    XX",
-                          "XX XXXXXX    XXX",
-                          "XX   XX      XXX",
-                          "XXX         XXXX",
-                          "XXXXX     XXXXXX"])
-
-pin_up = QPixmapWrapper(["16 16 5 1",
-                         "  c None",
-                         ". c #A0A0A0",
-                         "X c #707070",
-                         "o c #FFFFFF",
-                         "O c None",
-                         "                ",
-                         "                ",
-                         "                ",
-                         "      XX     X  ",
-                         "      XoX   XX  ",
-                         "      XooXXXoX  ",
-                         "ooooooX.o.o.oX  ",
-                         "......X.o.o.oX  ",
-                         "XXXXXXX..X.X.X  ",
-                         "      X.XXXXXX  ",
-                         "      XXX   XX  ",
-                         "      XX     X  ",
-                         "                ",
-                         "                ",
-                         "                ",
-                         "                "])
-
-pin_down = QPixmapWrapper(["16 16 5 1",
-                           "  c None",
-                           ". c #A0A0A0",
-                           "X c #707070",
-                           "o c #FFFFFF",
-                           "O c None",
-                           "                ",
-                           "                ",
-                           "        XXXX    ",
-                           "      XXooooX   ",
-                           "    XXXooooooX  ",
-                           "    XoXooo...X  ",
-                           "   XooXoo...XX  ",
-                           "   XooXXo..XXX  ",
-                           "   XooooXXXXX   ",
-                           "   Xooo....XX   ",
-                           "    Xo....XXX   ",
-                           "    X....XXX    ",
-                           "     XXXXXX     ",
-                           "                ",
-                           "                ",
-                           "                "])
-
-matrix = QPixmapWrapper(["16 16 4 1",
-                         "  c None",
-                         ". c None",
-                         "X c #800080",
-                         "o c None",
-                         "... ... ....... ",
-                         ".XXXX XXXX.XXXX ",
-                         ".X. X.X .X.X..X ",
-                         " X  X X  X X  X ",
-                         ".XXXX.XXXX.XXXX ",
-                         ". . . . . . . . ",
-                         ".XXXX.XXXX.XXXX ",
-                         " X  X X  X.X  X ",
-                         ".X..X.X..X.X..X ",
-                         ".XXXX XXXX.XXXX.",
-                         "... ... ... ... ",
-                         " XXXX XXXX XXXX ",
-                         ".X. X.X .X.X..X ",
-                         ".X. X.X .X.X. X ",
-                         ".XXXX.XXXX.XXXX ",
-                         "                "
-                         ])
-
-view_right = QPixmapWrapper(["16 16 48 1",
-                             "  c None",
-                             ". c #ADADAD",
-                             "X c #A5A5A5",
-                             "o c #A1A1A1",
-                             "O c #C1C10A",
-                             "+ c #FFFF85",
-                             "@ c #494949",
-                             "# c #FAFAFA",
-                             "$ c #F6F6F6",
-                             "% c #F2F2F2",
-                             "& c #F0F0F0",
-                             "* c #EEEEEE",
-                             "= c #ECECEC",
-                             "- c #EAEAEA",
-                             "; c #E8E8E8",
-                             ": c #E6E6E6",
-                             "> c #E4E4E4",
-                             ", c #E2E2E2",
-                             "< c #E0E0E0",
-                             "1 c #DADADA",
-                             "2 c #D6D6D6",
-                             "3 c #CCCCCC",
-                             "4 c #C8C8C8",
-                             "5 c #C6C6C6",
-                             "6 c #C0C000",
-                             "7 c #AEAEAE",
-                             "8 c #ACACAC",
-                             "9 c #A0A0A0",
-                             "0 c #585858",
-                             "q c #FFFFFF",
-                             "w c #FFFF00",
-                             "e c #FFFFC0",
-                             "r c #F9F9F9",
-                             "t c #F5F5F5",
-                             "y c #F3F3F3",
-                             "u c #F1F1F1",
-                             "i c #EDEDED",
-                             "p c #E9E9E9",
-                             "a c #E5E5E5",
-                             "s c #303030",
-                             "d c #E1E1E1",
-                             "f c #DFDFDF",
-                             "g c #D9D9D9",
-                             "h c #D3D3D3",
-                             "j c #CFCFCF",
-                             "k c #C9C9C9",
-                             "l c #C7C7C7",
-                             "z c None",
-                             "                ",
-                             " 0000000000000@ ",
-                             " 02gg1q0ohj3k5s ",
-                             " 0gyt$q08=;><5s ",
-                             " 0gtr#q0.ipadls ",
-                             " 01$#qq07*-:,4s ",
-                             " 0gtr#q0.ipadls ",
-                             " 0gyt$q08= +<5s ",
-                             " 02&u%q +- wf + ",
-                             " 0h=i*q0 w6w6ws ",
-                             " 0j;p-q0XOe+e6s ",
-                             " 03>a: +ww+q+ww+",
-                             " 0k<d,q096e+e6s ",
-                             " 055l4q0 w6w6ws ",
-                             " @sssss +s ws + ",
-                             "           +    "])
-
-view_split = QPixmapWrapper(["16 16 40 1",
-                             "  c None",
-                             ". c #A1A1A1",
-                             "X c #979797",
-                             "o c #494949",
-                             "O c #FAFAFA",
-                             "+ c #F6F6F6",
-                             "@ c #EEEEEE",
-                             "# c #ECECEC",
-                             "$ c #EAEAEA",
-                             "% c #E8E8E8",
-                             "& c #E6E6E6",
-                             "* c #E4E4E4",
-                             "= c #E2E2E2",
-                             "- c #E0E0E0",
-                             "; c #DEDEDE",
-                             ": c #DCDCDC",
-                             "> c #DADADA",
-                             ", c #D6D6D6",
-                             "< c #CCCCCC",
-                             "1 c #C8C8C8",
-                             "2 c #C6C6C6",
-                             "3 c #ACACAC",
-                             "4 c #585858",
-                             "5 c #FFFFFF",
-                             "6 c #F9F9F9",
-                             "7 c #F5F5F5",
-                             "8 c #F3F3F3",
-                             "9 c #EDEDED",
-                             "0 c #E9E9E9",
-                             "q c #E7E7E7",
-                             "w c #E5E5E5",
-                             "e c #303030",
-                             "r c #E1E1E1",
-                             "t c #DDDDDD",
-                             "y c #D9D9D9",
-                             "u c #D3D3D3",
-                             "i c #CFCFCF",
-                             "p c #C9C9C9",
-                             "a c #C7C7C7",
-                             "s c None",
-                             "                ",
-                             " 4444444444444o ",
-                             " 4,yy>543ui<p2e ",
-                             " 4y87+54.#%*-2e ",
-                             " 4y76O54.90wrae ",
-                             " 4>+O554.@$&=1e ",
-                             " 4555554.55555e ",
-                             " 4444444444444e ",
-                             " 43....4.....3e ",
-                             " 4u#9@54.q*rt2e ",
-                             " 4i%0$54.*r;:2e ",
-                             " 4<*w&54.r;::2e ",
-                             " 4p-r=54.t:::2e ",
-                             " 422a154X22222e ",
-                             " oeeeeeeeeeeeee ",
-                             "                "])
-
-remove = QPixmapWrapper(["16 16 15 1",
-                         "  c #000000",
-                         ". c #E4E4E4",
-                         "X c #DEDEDE",
-                         "o c #D4D4D4",
-                         "O c #CECECE",
-                         "+ c #BEBEBE",
-                         "@ c #6E6E6E",
-                         "# c #FFFFFF",
-                         "$ c #E9E9E9",
-                         "% c #D9D9D9",
-                         "& c #C9C9C9",
-                         "* c #C3C3C3",
-                         "= c #B9B9B9",
-                         "- c #B7B7B7",
-                         "; c None",
-                         "---------------#",
-                         "-@@@@@@@@@@@@@@#",
-                         "-@###########-@#",
-                         "-@#$$$$$$$$$$-@#",
-                         "-@#.. .... ..-@#",
-                         "-@#X   XX   X-@#",
-                         "-@#%%      %%-@#",
-                         "-@#ooo    ooo-@#",
-                         "-@#OOO    OOO-@#",
-                         "-@#&&      &&-@#",
-                         "-@#*   **   *-@#",
-                         "-@#++ ++++ ++-@#",
-                         "-@#==========-@#",
-                         "-@------------@#",
-                         "-@@@@@@@@@@@@@@#",
-                         "################"])
-
-eventnew = QPixmapWrapper(["16 16 7 1",
-                           "  c None",
-                           ". c #87852B",
-                           "X c #918F2E",
-                           "o c #FFFFFF",
-                           "O c #FFFF00",
-                           "+ c #FFFFC0",
-                           "@ c None",
-                           "                ",
-                           "                ",
-                           "        O       ",
-                           "   O    O.   O  ",
-                           "    O. +O. OO   ",
-                           "    OO.XOX+O.   ",
-                           "     +OOOOO.    ",
-                           "   ..XOo+oOX+   ",
-                           "  OOOOO+o+OOOOO ",
-                           "    +XOo+oOX..  ",
-                           "     .OOOOO+    ",
-                           "    .O+XOX.OO   ",
-                           "    OO .O+ .O   ",
-                           "   O   .O    O  ",
-                           "        O       ",
-                           "                "])
-
-view_tree = QPixmapWrapper(["16 16 5 1",
-                            "  c #000000",
-                            ". c None",
-                            "X c #303030",
-                            "o c #FFDCA8",
-                            "O c None",
-                            " ...............",
-                            " ...............",
-                            " ...XXX ........",
-                            " ...X.. ........",
-                            "   .X.o ..  .   ",
-                            " ...    ........",
-                            " ...............",
-                            " ...............",
-                            " ...............",
-                            " ...XXX ........",
-                            " ...X.. ........",
-                            "   .X.o ..  .   ",
-                            "....    ........",
-                            "................",
-                            "................",
-                            "................"])
-
-precplus = QPixmapWrapper(["16 16 3 1",
-                           "# c #000000",
-                           ". c None",
-                           "a c #ffffff",
-                           "........##...##.",
-                           "..#....##.#.##.#",
-                           ".##....##.#.##.#",
-                           "#####..##.#.##.#",
-                           ".##....##.#.##.#",
-                           "..#....##.#.##.#",
-                           "....##..##...##.",
-                           "....##..........",
-                           ".....#..########",
-                           "........#aaaaaaa",
-                           "........#aaa#aaa",
-                           "........#aaa#aaa",
-                           "........#a#####a",
-                           "........#aaa#aaa",
-                           "........#aaa#aaa",
-                           "........#aaaaaaa"])
-
-precminus = QPixmapWrapper(["16 16 3 1",
-                            "# c #000000",
-                            ". c None",
-                            "a c #ffffff",
-                            ".........##.....",
-                            "...#....##.#....",
-                            "...##...##.#....",
-                            "######..##.#....",
-                            "...##...##.#....",
-                            "...#....##.#....",
-                            ".....##..##.....",
-                            ".....##.........",
-                            "......#.########",
-                            "........#aaaaaaa",
-                            "........#aaaaaaa",
-                            "........#aaaaaaa",
-                            "........#a#####a",
-                            "........#aaaaaaa",
-                            "........#aaaaaaa",
-                            "........#aaaaaaa"])
-
-bars3d = QPixmapWrapper(["16 16 6 1",
-                         "# c #000000",
-                         "b c #00d300",
-                         "a c #00ff00",
-                         "d c #9595d6",
-                         "c c #c0c0ff",
-                         ". c None",
-                         "................",
-                         ".......###......",
-                         "......#aa#.###..",
-                         ".....#aa###aa#..",
-                         ".....###b#aa##..",
-                         ".....#a#####b#..",
-                         ".....##cc#a#b###",
-                         ".....#cc##a##aa#",
-                         "...#####d#a#aa##",
-                         "..#cc#c#d#a###b#",
-                         ".#cc##c#d##cc#b#",
-                         ".###d#c#d#cc##b#",
-                         ".#c#d#c#d###d##.",
-                         ".#c#d#c#d#c#d#..",
-                         ".#c#d#c#d#c##...",
-                         ".###########...."])
-
-areas3d = QPixmapWrapper(["16 16 6 1",
-                          "# c #000000",
-                          "a c #00d300",
-                          "b c #00ff00",
-                          "c c #9595d6",
-                          "d c #c0c0ff",
-                          ". c None",
-                          "......#.........",
-                          ".....#a#........",
-                          "....#aaa#.......",
-                          "...#b#aaa###....",
-                          "...#bb#aaaaa##..",
-                          "..#c#bb###aaaa#.",
-                          ".#ccc#bbbb##aa#.",
-                          "#d#ccc#bbbbb#a#.",
-                          "#dd#ccc#bbbb#aa#",
-                          "#ddd#ccc###b#aaa",
-                          "#dddd#ccccc###aa",
-                          "#ddddd###cccc##a",
-                          "#dddddddd##ccc##",
-                          "#dddddddddd#ccc#",
-                          "#ddddddddddd#c#.",
-                          "##############.."])
-
-treeviewoblique = QPixmapWrapper(["16 16 44 1",
-                                  "h c #000000",
-                                  ". c #FAF7F2",
-                                  "X c #E8D4BC",
-                                  "o c #FDFBF8",
-                                  "O c #F0E3D4",
-                                  "+ c #F7F0E8",
-                                  "@ c #EBDAC5",
-                                  "# c #F3E9DD",
-                                  "$ c #FAF6F1",
-                                  "% c #EAD7C0",
-                                  "& c #FDFCFA",
-                                  "* c #EDDDC9",
-                                  "= c #F3E8DC",
-                                  "- c #F9F5EF",
-                                  "; c #E7D2B9",
-                                  ": c #DCDCDC",
-                                  "> c #F6EEE5",
-                                  ", c #EAD8C2",
-                                  "< c #E6CFB4",
-                                  "1 c #F5EBE0",
-                                  "2 c #E9D5BD",
-                                  "3 c #FCFAF7",
-                                  "4 c #A0A0A0",
-                                  "5 c #F2E6D9",
-                                  "6 c #F8F3EC",
-                                  "7 c #808080",
-                                  "8 c #EFE1CF",
-                                  "9 c #F5ECE2",
-                                  "0 c #E5CDB1",
-                                  "q c #FEFDFB",
-                                  "w c #585858",
-                                  "e c #F1E5D7",
-                                  "r c #F8F2EB",
-                                  "t c #FFFFFF",
-                                  "y c #EFE0CE",
-                                  "u c #FBF8F4",
-                                  "i c #303030",
-                                  "p c #EFE2D1",
-                                  "a c #F1E4D6",
-                                  "s c #F7F1E9",
-                                  "d c #FEFEFD",
-                                  "f c #C3C3C3",
-                                  "g c #EEDFCC",
-                                  "  c None",
-                                  "         ii     ",
-                                  "       iw.ri    ",
-                                  "     iwt3-+w    ",
-                                  "   iwttqu6>#i   ",
-                                  " iw:tttous7hw   ",
-                                  "itthtowsshfe8i  ",
-                                  "itt7:hhw1==Ogw  ",
-                                  " wtthhhf+15p*,i ",
-                                  " itt7:u6>#yy7 w ",
-                                  "  wtth$ow#*h4X<i",
-                                  "  itd7:hhwg%%;0i",
-                                  "   w&.hhhfg@2wi ",
-                                  "   i3-+15p*wi   ",
-                                  "    w6>#awi     ",
-                                  "    is9wi       ",
-                                  "     ii         "])
-
-reload_slick = QPixmapWrapper(["16 16 143 2",
-                               "   c None",
-                               " . c #CDDAF4",
-                               " X c #3A64B3",
-                               " o c #E4ECFA",
-                               " O c #4887FC",
-                               " + c #9CB6E8",
-                               " @ c #3B66B7",
-                               " # c #8AACEA",
-                               " $ c #BAD0F8",
-                               " % c #3269CF",
-                               " & c #B4CAF2",
-                               " * c #6696EE",
-                               " = c #5183E0",
-                               " - c #6494EC",
-                               " ; c #E9ECF1",
-                               " : c #C4D4F1",
-                               " > c #6C94E0",
-                               " , c #3269D2",
-                               " < c #D6E0F2",
-                               " 1 c #3B80FF",
-                               " 2 c #90B1EC",
-                               " 3 c #3B65B3",
-                               " 4 c #C6D3EC",
-                               " 5 c #FAFBFE",
-                               " 6 c #CAD4E6",
-                               " 7 c #3472E4",
-                               " 8 c #6C9BF0",
-                               " 9 c #656565",
-                               " 0 c #5E88D5",
-                               " q c #636363",
-                               " w c #5F5F5F",
-                               " e c #C2D4F5",
-                               " r c #4686FC",
-                               " t c #B1CAF8",
-                               " y c #699CFA",
-                               " u c #A3B7DD",
-                               " i c #4A7FE2",
-                               " p c #A3BCEA",
-                               " a c #3569CA",
-                               " s c #4E6286",
-                               " d c #B8CCEE",
-                               " f c #3C81FF",
-                               " g c #3765B8",
-                               " h c #3663B7",
-                               " j c #81A5E6",
-                               " k c #3471E3",
-                               " l c #3C66B6",
-                               " z c #3B66B5",
-                               " x c #A8C2F5",
-                               " c c #92AFE6",
-                               " v c #3E70CF",
-                               " b c #326CD7",
-                               " n c #CBD5E9",
-                               " m c #F6F8FC",
-                               " M c #486190",
-                               " N c #7EA3E6",
-                               " B c #5789E4",
-                               " V c #83ACF8",
-                               " C c #EEF0F4",
-                               " Z c #9ABEFE",
-                               " A c #3269D0",
-                               " S c #DCE6F6",
-                               " D c #4D648E",
-                               " F c #D8E2F2",
-                               " G c #8EADE8",
-                               " H c #4A80E4",
-                               " J c #356ACC",
-                               " K c #D9E4F6",
-                               " L c #3368CA",
-                               " P c #719FF3",
-                               " I c #5A8AE3",
-                               " U c #B5C9ED",
-                               " Y c #3D64AC",
-                               " T c #4980E6",
-                               " R c #3E61A3",
-                               " E c #6E95DC",
-                               " W c #3268CC",
-                               " Q c #4888FC",
-                               " ! c #3467C4",
-                               " ~ c #D4E0F4",
-                               " ^ c #3472E5",
-                               " / c #EBF0FA",
-                               " ( c #7AA6F8",
-                               " ) c #DEE7F7",
-                               " _ c #A4BCE9",
-                               " ` c #3776EB",
-                               " ' c #465D86",
-                               " ] c #8CACE5",
-                               " [ c #FDFEFE",
-                               " { c #A5BEED",
-                               " } c #326AD2",
-                               " | c #3A5FA5",
-                               ".  c #A1BAE9",
-                               ".. c #B9CCF0",
-                               ".X c #A3B9E1",
-                               ".o c #B7CAEE",
-                               ".O c #3765B9",
-                               ".+ c #CEDCF4",
-                               ".@ c #C9D3E5",
-                               ".# c #5B88DC",
-                               ".$ c #6E99E8",
-                               ".% c #9DC0FF",
-                               ".& c #5891FA",
-                               ".* c #3E62A5",
-                               ".= c #3269CE",
-                               ".- c #585858",
-                               ".; c #4F6184",
-                               ".: c #7CA1E5",
-                               ".> c #525252",
-                               "., c #3B63AF",
-                               ".< c #FFFFFF",
-                               ".1 c #3269D1",
-                               ".2 c #84A6E6",
-                               ".3 c #799FE5",
-                               ".4 c #EDF0F7",
-                               ".5 c #B2C5E8",
-                               ".6 c #E4EBF8",
-                               ".7 c #326BD4",
-                               ".8 c #E5E8EF",
-                               ".9 c #346ACC",
-                               ".0 c #3268CA",
-                               ".q c #658EDB",
-                               ".w c #3572E4",
-                               ".e c #D4DEF2",
-                               ".r c #CBD9F3",
-                               ".t c #3E71CF",
-                               ".y c #E1E9F8",
-                               ".u c #F7F9FD",
-                               ".i c #3268CD",
-                               ".p c #4083FF",
-                               ".a c #3766BE",
-                               ".s c #9AB5E7",
-                               ".d c #3873E0",
-                               ".f c #97B3E4",
-                               ".g c #447CE5",
-                               ".h c #3676EB",
-                               ".j c #F2F5FB",
-                               ".k c #6C98EB",
-                               ".l c #8DACE7",
-                               ".z c #326AD3",
-                               ".x c #3469CB",
-                               ".c c #4F8AF6",
-                               ".v c None",
-                               "          .1 %.i W.0 h 9        ",
-                               "      .1 , b ^ =.# 7.7 L g.-    ",
-                               "    .1.z T x.6.j.j /.. B.= z.>  ",
-                               "   A } - ~.y F n < ).y S.3.= R.>",
-                               "   % T : . 6.8.< C.e . ..r I ! 9",
-                               " W.7 2 d.@.<.<.<.< K d d.o.f.z M",
-                               " W.d. .X.< [.o.s _ + p U ( 1 k X",
-                               " W i ].5.<.+ c c u 4.<.<.% 1.h @",
-                               " W.g.$ {.< t.c #.<.<.<.< Z f ` l",
-                               ".0.w r 8.< m y.&.4.<.<.< V.p 7 Y",
-                               " h.7 O Q $.<.< ;.<.<.<.< P O.z.;",
-                               " 9 L H * * &.u.< 5 e o.u.k H.a 9",
-                               "  .O.9 > N N N.2 N N.: j >.x s 9",
-                               "   9 3 J.q.l G G G G.l.q a D 9 9",
-                               "     9.* !.t 0 E E 0 v.a s 9 9  ",
-                               "      .> q ' |., l Y.; w.>.>    "])
-
-publish = QPixmapWrapper(["16 16 13 1",
-                          "j c #000000",
-                          "# c #000000",
-                          "k c #303030",
-                          "a c #404000",
-                          "c c #585858",
-                          "e c #800000",
-                          "h c #808080",
-                          "i c #a0a0a0",
-                          "f c #c00000",
-                          "g c #c3c3c3",
-                          "d c #dcdcdc",
-                          ". c None",
-                          "b c #ffffff",
-                          ".....##.........",
-                          ".....abc#.......",
-                          "....#dbbdc#.....",
-                          "....cbbebbdc#...",
-                          "...#dbbbfebbdc#.",
-                          "..#db##bbbfebbg#",
-                          ".#db#bb##bbbbdh#",
-                          ".cbbb##bb##bbai#",
-                          "#bb##bb##bbbdc#h",
-                          "#dbbb##bb#bbhic#",
-                          "#hgdbbb##bbdcc#j",
-                          ".#cigdbbbbbhhhc#",
-                          "...#cigdbbdcca#.",
-                          ".....#cigdacc#..",
-                          ".......#chk##...",
-                          ".........##....."])
-
-publish_active = QPixmapWrapper(["16 16 13 1",
-                                 "j c #000000",
-                                 "# c #000000",
-                                 "k c #303030",
-                                 "a c #404000",
-                                 "c c #585858",
-                                 "e c #800000",
-                                 "h c #808080",
-                                 "i c #a0a0a0",
-                                 "f c #c00000",
-                                 "g c #c3c3c3",
-                                 "d c #dcdc00",
-                                 ". c None",
-                                 "b c #ffff00",
-                                 ".....##.........",
-                                 ".....abc#.......",
-                                 "....#dbbdc#.....",
-                                 "....cbbebbdc#...",
-                                 "...#dbbbfebbdc#.",
-                                 "..#db##bbbfebbg#",
-                                 ".#db#bb##bbbbdh#",
-                                 ".cbbb##bb##bbai#",
-                                 "#bb##bb##bbbdc#h",
-                                 "#dbbb##bb#bbhic#",
-                                 "#hgdbbb##bbdcc#j",
-                                 ".#cigdbbbbbhhhc#",
-                                 "...#cigdbbdcca#.",
-                                 ".....#cigdacc#..",
-                                 ".......#chk##...",
-                                 ".........##....."])
-
-node_any = QPixmapWrapper(["16 16 5 1",
-                           "  c None",
-                           ". c #808080",
-                           "X c #FFFF00",
-                           "o c #0000FF",
-                           "O c None",
-                           "                ",
-                           " o         o    ",
-                           "  o       o .   ",
-                           "   o     o .    ",
-                           "    o   o .     ",
-                           "   ooooooo      ",
-                           "   oXXXXXo.     ",
-                           "   oXXXXXo.     ",
-                           "   oXXXXXo.     ",
-                           "   ooooooo.     ",
-                           "    ..o....     ",
-                           "      o.        ",
-                           "      o.        ",
-                           "      o.        ",
-                           "       .        ",
-                           "                "])
-
-node_command = QPixmapWrapper(["16 16 7 1",
-                               "  c None",
-                               ". c #00FF00",
-                               "X c #000040",
-                               "o c #808080",
-                               "O c #A8DCFF",
-                               "+ c #0000FF",
-                               "@ c #000000",
-                               "                ",
-                               " +         +    ",
-                               "  +       + o   ",
-                               "   +     + o    ",
-                               "    +   + o     ",
-                               "   +++++++      ",
-                               "   +OOOOO+o     ",
-                               "   +OOOOO+....  ",
-                               "   +OOOOO..@@.. ",
-                               "   ++++++.@@.@.o",
-                               "    oo+oo.@@...o",
-                               "      +o .@@...o",
-                               "      +o .@@.@.o",
-                               "      +o ..@@..o",
-                               "      +o  ....oo",
-                               "       o   oooo "])
-
-node_eval = QPixmapWrapper(["16 16 7 1",
-                            "  c None",
-                            ". c #00FF00",
-                            "X c #000040",
-                            "o c #808080",
-                            "O c #A8DCFF",
-                            "+ c #0000FF",
-                            "@ c None",
-                            "                ",
-                            " +         +    ",
-                            "  +       + o   ",
-                            "   +     + o    ",
-                            "    + XXXXX     ",
-                            "   +++X...Xo    ",
-                            "   +OOX...Xo    ",
-                            "   +OXX...XX    ",
-                            "   +OX.....Xo   ",
-                            "   +++X...Xoo   ",
-                            "    oo+X.Xoo    ",
-                            "      +oXoo     ",
-                            "      +o o      ",
-                            "      +o        ",
-                            "       o        ",
-                            "                "])
-
-node_idle = QPixmapWrapper(["16 16 4 1",
-                            "  c None",
-                            ". c #000040",
-                            "X c #808080",
-                            "o c None",
-                            "                ",
-                            " .         .    ",
-                            "  .       . X   ",
-                            "   .     . X    ",
-                            "    .   . X     ",
-                            "   .......      ",
-                            "   .XXXXX.X     ",
-                            "   .X    .X     ",
-                            "   .X    .X     ",
-                            "   .......X     ",
-                            "    XX.XXXX     ",
-                            "      .X        ",
-                            "      .X        ",
-                            "      .X        ",
-                            "       X        ",
-                            "                "])
-
-node_poll = QPixmapWrapper(["16 16 7 1",
-                            "  c None",
-                            ". c #00FF00",
-                            "X c #000040",
-                            "o c #808080",
-                            "O c #A8DCFF",
-                            "+ c #0000FF",
-                            "@ c None",
-                            "                ",
-                            "XXXXX   XXXXX   ",
-                            "X..Xoo   X..Xo  ",
-                            "X...X   X...Xo  ",
-                            "XX...X X...XXo  ",
-                            "XoX.XX+XX.XoXo  ",
-                            " o XXOOOXXo  o  ",
-                            "   +OOOOO+o     ",
-                            "   +OOOOO+o     ",
-                            "   +++++++o     ",
-                            "    oo+oooo     ",
-                            "      +o        ",
-                            "      +o        ",
-                            "      +o        ",
-                            "       o        ",
-                            "                "])
-
-node_request = QPixmapWrapper(["16 16 7 1",
-                               "  c None",
-                               ". c #00FF00",
-                               "X c #000040",
-                               "o c #808080",
-                               "O c #A8DCFF",
-                               "+ c #0000FF",
-                               "@ c None",
-                               "                ",
-                               " +         +    ",
-                               "  +       + o   ",
-                               "   +     + o    ",
-                               "    +   + o     ",
-                               "   +++++++      ",
-                               "   +OOOOO+o     ",
-                               "   +OOXOO+o     ",
-                               "   +OX.XO+o     ",
-                               "   +X...X+o     ",
-                               "   X.....Xo     ",
-                               "   XX...XXo     ",
-                               "    X...Xoo     ",
-                               "    X...Xo      ",
-                               "    XXXXXo      ",
-                               "     ooooo      "])
-
-##breakpoint = QPixmapWrapper(["16 16 69 1",
-##                             "  c None",
-##                             ". c #D77570",
-##                             "X c #DF7F7B",
-##                             "o c #D27E78",
-##                             "O c #911414",
-##                             "+ c #6A3936",
-##                             "@ c #7D1414",
-##                             "# c #8E1414",
-##                             "$ c #411414",
-##                             "% c #7A1414",
-##                             "& c #B51616",
-##                             "* c #CA7169",
-##                             "= c #541A16",
-##                             "- c #C2271F",
-##                             "; c #D9A8A2",
-##                             ": c #642722",
-##                             "> c #3B1414",
-##                             ", c #B81515",
-##                             "< c #5C1F1A",
-##                             "1 c #EABEB9",
-##                             "2 c #C56460",
-##                             "3 c #961414",
-##                             "4 c #D97570",
-##                             "5 c #F1C8C6",
-##                             "6 c #F3D7D5",
-##                             "7 c #A71414",
-##                             "8 c #DB7975",
-##                             "9 c #D98680",
-##                             "0 c #BE2727",
-##                             "q c #6B1414",
-##                             "w c #1E1414",
-##                             "e c #901414",
-##                             "r c #612621",
-##                             "t c #D46C67",
-##                             "y c #B51414",
-##                             "u c #2F1414",
-##                             "i c #F6ECEB",
-##                             "p c #DA7D7A",
-##                             "a c #EABFBB",
-##                             "s c #AE7269",
-##                             "d c #C56058",
-##                             "f c #CB6661",
-##                             "g c #BB4744",
-##                             "h c #761414",
-##                             "j c #F3D8D7",
-##                             "k c #5C1D18",
-##                             "l c #291414",
-##                             "z c #F6E7E7",
-##                             "x c #E7B8B4",
-##                             "c c #F3DADA",
-##                             "v c #DD7772",
-##                             "b c #DA807C",
-##                             "n c #341414",
-##                             "m c #A61414",
-##                             "M c #A15C54",
-##                             "N c #B71414",
-##                             "B c #6A1414",
-##                             "V c #FFFFFF",
-##                             "C c #E6B9B5",
-##                             "Z c #DF8580",
-##                             "A c #B41414",
-##                             "S c #671414",
-##                             "D c #1A1414",
-##                             "F c #D7A29C",
-##                             "G c #C0231F",
-##                             "H c #672F2A",
-##                             "J c #CA655D",
-##                             "K c #703B36",
-##                             "L c None",
-##                             "    +HKr<k=     ",
-##                             "  V+zc61CFM>    ",
-##                             " V+V8b9o*2gen   ",
-##                             " +V4XvZ----7#l  ",
-##                             "+ip&&&&&&&&&&SD ",
-##                             "+j.VVVVVVVVVV%w ",
-##                             "+5tV--V&V-V&V@w ",
-##                             ":afVV-VAV&VVV@w ",
-##                             "<xJ&V-VAV-V,m@w ",
-##                             "k;dVV-VAOVV-m%w ",
-##                             "=s-&&-&A&&&m3BD ",
-##                             " $e7G-0-NAm3hu  ",
-##                             "  n#7y&ymmOhu   ",
-##                             "   nq%@@@%Bu    ",
-##                             "    DwwwwwD     ",
-##                             "                "])
-##
-##breakpoint_ss = QPixmapWrapper(["16 16 64 1",
-##                                "  c None",
-##                                ". c #D77570",
-##                                "X c #DF7F7B",
-##                                "o c #911414",
-##                                "O c #6A3936",
-##                                "+ c #7D1414",
-##                                "@ c #8E1414",
-##                                "# c #411414",
-##                                "$ c #7A1414",
-##                                "% c #B51616",
-##                                "& c #541A16",
-##                                "* c #C2271F",
-##                                "= c #D9A8A2",
-##                                "- c #642722",
-##                                "; c #3B1414",
-##                                ": c #5C1F1A",
-##                                "> c #EABEB9",
-##                                ", c #C56460",
-##                                "< c #961414",
-##                                "1 c #D97570",
-##                                "2 c #F1C8C6",
-##                                "3 c #F3D7D5",
-##                                "4 c #A71414",
-##                                "5 c #DB7975",
-##                                "6 c #D98680",
-##                                "7 c #BE2727",
-##                                "8 c #6B1414",
-##                                "9 c #1E1414",
-##                                "0 c #901414",
-##                                "q c #612621",
-##                                "w c #D46C67",
-##                                "e c #B51414",
-##                                "r c #2F1414",
-##                                "t c #F6ECEB",
-##                                "y c #DA7D7A",
-##                                "u c #EABFBB",
-##                                "i c #AE7269",
-##                                "p c #C56058",
-##                                "a c #CB6661",
-##                                "s c #BB4744",
-##                                "d c #761414",
-##                                "f c #F3D8D7",
-##                                "g c #5C1D18",
-##                                "h c #291414",
-##                                "j c #F6E7E7",
-##                                "k c #E7B8B4",
-##                                "l c #F3DADA",
-##                                "z c #DA807C",
-##                                "x c #341414",
-##                                "c c #A61414",
-##                                "v c #A15C54",
-##                                "b c #B71414",
-##                                "n c #6A1414",
-##                                "m c #FFFFFF",
-##                                "M c #E6B9B5",
-##                                "N c #B41414",
-##                                "B c #671414",
-##                                "V c #1A1414",
-##                                "C c #D7A29C",
-##                                "Z c #C0231F",
-##                                "A c #672F2A",
-##                                "S c #CA655D",
-##                                "D c #703B36",
-##                                "F c None",
-##                                "    OADq:g&     ",
-##                                "  mOjl3>MCv;    ",
-##                                " mOm5z6pp,s0x   ",
-##                                " Om1Xppp***4@h  ",
-##                                "Otyppp%m%%%%%BV ",
-##                                "Of.ppemmeeeee$9 ",
-##                                "O2wp*eemeee%e+9 ",
-##                                "-uape*emeeeee+9 ",
-##                                ":kS%e*emeZeec+9 ",
-##                                "g=peeemmmZe*c$9 ",
-##                                "&ip%%*%N%%%c<nV ",
-##                                " #04Z*7*bNc<dr  ",
-##                                "  x@4e%eccodr   ",
-##                                "   x8$+++$nr    ",
-##                                "    V99999V     ",
-##                                "                "])
-##
-##breakpoint_delete = QPixmapWrapper(["16 16 68 1",
-##                                    "  c None",
-##                                    ". c #D77570",
-##                                    "X c #DF7F7B",
-##                                    "o c #D27E78",
-##                                    "O c #911414",
-##                                    "+ c #6A3936",
-##                                    "@ c #7D1414",
-##                                    "# c #8E1414",
-##                                    "$ c #411414",
-##                                    "% c #7A1414",
-##                                    "& c #B51616",
-##                                    "* c #CA7169",
-##                                    "= c #541A16",
-##                                    "- c #C2271F",
-##                                    "; c #D9A8A2",
-##                                    ": c #642722",
-##                                    "> c #3B1414",
-##                                    ", c #B81515",
-##                                    "< c #5C1F1A",
-##                                    "1 c #EABEB9",
-##                                    "2 c #C56460",
-##                                    "3 c #961414",
-##                                    "4 c #F1C8C6",
-##                                    "5 c #F3D7D5",
-##                                    "6 c #A71414",
-##                                    "7 c #DB7975",
-##                                    "8 c #D98680",
-##                                    "9 c #BE2727",
-##                                    "0 c #6B1414",
-##                                    "q c #1E1414",
-##                                    "w c #901414",
-##                                    "e c #612621",
-##                                    "r c #D46C67",
-##                                    "t c #B51414",
-##                                    "y c #2F1414",
-##                                    "u c #F6ECEB",
-##                                    "i c #DA7D7A",
-##                                    "p c #EABFBB",
-##                                    "a c #AE7269",
-##                                    "s c #C56058",
-##                                    "d c #CB6661",
-##                                    "f c #BB4744",
-##                                    "g c #761414",
-##                                    "h c #F3D8D7",
-##                                    "j c #5C1D18",
-##                                    "k c #291414",
-##                                    "l c #F6E7E7",
-##                                    "z c #E7B8B4",
-##                                    "x c #F3DADA",
-##                                    "c c #DD7772",
-##                                    "v c #DA807C",
-##                                    "b c #341414",
-##                                    "n c #A61414",
-##                                    "m c #A15C54",
-##                                    "M c #B71414",
-##                                    "N c #6A1414",
-##                                    "B c #FFFFFF",
-##                                    "V c #E6B9B5",
-##                                    "C c #DF8580",
-##                                    "Z c #B41414",
-##                                    "A c #671414",
-##                                    "S c #1A1414",
-##                                    "D c #D7A29C",
-##                                    "F c #C0231F",
-##                                    "G c #672F2A",
-##                                    "H c #CA655D",
-##                                    "J c #703B36",
-##                                    "K c #000000",
-##                                    "K   +GJe<j=   K ",
-##                                    " KB+lx51VDm> K  ",
-##                                    " BKB7v8o*2fwK   ",
-##                                    " +BKXcC----K#k  ",
-##                                    "+ui&K&&&&&K&&AS ",
-##                                    "+h.BBKBBBKBBB%q ",
-##                                    "+4rB--K&K-B&B@q ",
-##                                    ":pdBB-BKB&BBB@q ",
-##                                    "<zH&B-KZK-B,n@q ",
-##                                    "j;sBBKBZOKB-n%q ",
-##                                    "=a-&K-&Z&&Kn3NS ",
-##                                    " $wKF-9-MZnKgy  ",
-##                                    "  K#6t&tnnOgK   ",
-##                                    " K b0%@@@%Ny K  ",
-##                                    "K   SqqqqqS   K ",
-##                                    "                "])
-
-breakpoint = QPixmapWrapper(["16 16 43 1",
-                             ". c None",
-                             "c c #380202",
-                             "K c #410202",
-                             "# c #630000",
-                             "o c #690200",
-                             "O c #810000",
-                             "N c #890400",
-                             "M c #900700",
-                             "L c #980a00",
-                             "G c #9e6864",
-                             "H c #9f0d00",
-                             "E c #a71000",
-                             "D c #ac1404",
-                             "B c #ae1300",
-                             "x c #b41600",
-                             "z c #b51700",
-                             "t c #bb1900",
-                             "C c #bca5a5",
-                             "v c #bd1a00",
-                             "A c #bd2414",
-                             "k c #bfa9a9",
-                             "r c #c41c00",
-                             "p c #c41d00",
-                             "y c #c7b4b4",
-                             "q c #c7b5b5",
-                             "n c #c82004",
-                             "u c #cab8b8",
-                             "m c #cc2000",
-                             "w c #cc3626",
-                             "h c #d22300",
-                             "I c #d2c3c3",
-                             "e c #d32300",
-                             "i c #d83922",
-                             "b c #da2700",
-                             "s c #dd4a3c",
-                             "d c #e0442e",
-                             "F c #e2d7d7",
-                             "f c #e4dddd",
-                             "g c #e8e2e2",
-                             "a c #ea5a4d",
-                             "J c #f4f0f0",
-                             "l c #f5f3f3",
-                             "j c #ffffff",
-                             ".....######.....",
-                             "...##aaaaaa##...",
-                             "..#aabccbbbad#..",
-                             ".#aeccfgcceehi#.",
-                             ".#acjkllkjcmmno.",
-                             "#apcjqllqjcpprp#",
-                             "#stcjullujcvcvv#",
-                             "#wxcjyllyjccjcz#",
-                             "#ABcjyyyCjcjjcB#",
-                             "#DEcyjjjFujjGEE#",
-                             "#HHcjjjIJjjjKHH#",
-                             ".#LcjjjyjjjcLL#.",
-                             ".#MMcjjjjjcMMM#.",
-                             "..#NNcccccNNN#..",
-                             "...##OOOOOO##...",
-                             ".....######....."])
-
-forward_to = QPixmapWrapper(["16 15 52 1",
-                             ". c None",
-                             "a c None",
-                             "X c None",
-                             "W c None",
-                             "T c None",
-                             "Q c None",
-                             "M c None",
-                             "I c None",
-                             "E c None",
-                             "A c None",
-                             "v c None",
-                             "q c None",
-                             "k c None",
-                             "h c None",
-                             "e c None",
-                             "c c None",
-                             "# c #024266",
-                             "U c #034367",
-                             "V c #1b5f8e",
-                             "S c #266995",
-                             "P c #30739c",
-                             "O c #34769f",
-                             "L c #3b7da3",
-                             "R c #3f7fa6",
-                             "K c #4181a7",
-                             "H c #4586aa",
-                             "G c #4c8cad",
-                             "N c #4f8eb2",
-                             "D c #4f90b1",
-                             "J c #5998b9",
-                             "y c #5999b8",
-                             "C c #5a97b5",
-                             "z c #5a9ab8",
-                             "F c #63a2c0",
-                             "u c #64a4bf",
-                             "x c #6aa5be",
-                             "B c #6eabc7",
-                             "p c #6eadc6",
-                             "s c #6faec6",
-                             "o c #6faec7",
-                             "w c #79b5ce",
-                             "j c #79b7cd",
-                             "m c #7cb9ce",
-                             "t c #7db4c8",
-                             "g c #83c1d4",
-                             "r c #87c0d5",
-                             "d c #8ecadc",
-                             "n c #93c6d6",
-                             "l c #94ccdc",
-                             "i c #a1d2e0",
-                             "f c #a9d9e5",
-                             "b c #aedde9",
-                             "..##.aa.........",
-                             ".#bb#cca....aaa.",
-                             ".#bdb#eca..a###a",
-                             ".#fggb#hca.#bbb#",
-                             ".#ijjjb#kca#lmm#",
-                             ".#nopppb#qc#rss#",
-                             ".#tuuuuub#v#wuu#",
-                             ".#xyzzzzz#A#Bzz#",
-                             ".#CDDDDDD#E#FDD#",
-                             ".#GHHHHH#II#JHH#",
-                             ".#KLLLL#MMa#NLL#",
-                             ".#OPPP#QQa.#RPP#",
-                             ".#SSS#TTa..aU##a",
-                             ".#VV#WWa....Xaa.",
-                             "..##.aa........."])
-
-breakpoint_delete = QPixmapWrapper(["16 16 39 1",
-                                    "# c None",
-                                    "d c #380202",
-                                    "G c #410202",
-                                    "a c #630000",
-                                    "m c #690200",
-                                    "K c #810000",
-                                    "J c #890400",
-                                    "I c #900700",
-                                    "H c #980a00",
-                                    "C c #9e6864",
-                                    "D c #9f0d00",
-                                    "B c #a71000",
-                                    "A c #ac1404",
-                                    "z c #ae1300",
-                                    "v c #b41600",
-                                    "x c #b51700",
-                                    "r c #bb1900",
-                                    "t c #bd1a00",
-                                    "y c #bd2414",
-                                    "i c #bfa9a9",
-                                    "p c #c41c00",
-                                    "n c #c41d00",
-                                    "w c #c7b4b4",
-                                    "o c #c7b5b5",
-                                    "l c #c82004",
-                                    "s c #cab8b8",
-                                    "u c #cc3626",
-                                    "E c #d2c3c3",
-                                    "h c #d32300",
-                                    "c c #da2700",
-                                    "q c #dd4a3c",
-                                    "e c #e0442e",
-                                    "f c #e4dddd",
-                                    "g c #e8e2e2",
-                                    "b c #ea5a4d",
-                                    "F c #f4f0f0",
-                                    "j c #f5f3f3",
-                                    ". c #ffff00",
-                                    "k c #ffffff",
-                                    ".####aaaaaa####.",
-                                    "..#aabbbbbbaa#..",
-                                    "#..bbcddcccbe..#",
-                                    "#a..ddfgddhh..a#",
-                                    "#ab..ijjikd..lm#",
-                                    "abnd..jjok..npna",
-                                    "aqrdk..js..tdtta",
-                                    "auvdkw....ddkdxa",
-                                    "ayzdkww..kdkkdza",
-                                    "aABdwk....kkCBBa",
-                                    "aDDdk..EF..kGDDa",
-                                    "#aHd..kwkk..HHa#",
-                                    "#aI..kkkkkd..Ia#",
-                                    "##..JdddddJJ..##",
-                                    "#..aaKKKKKKaa..#",
-                                    "..###aaaaaa###.."])
-
-right_triangle = QPixmapWrapper([
-    "16 15 26 1",
-    ". c None",
-    "# c #024266",
-    "x c #1b5f8e",
-    "w c #266995",
-    "v c #30739c",
-    "u c #34769f",
-    "t c #3b7da3",
-    "s c #4181a7",
-    "r c #4586aa",
-    "q c #4c8cad",
-    "p c #4f90b1",
-    "m c #5999b8",
-    "o c #5a97b5",
-    "n c #5a9ab8",
-    "k c #64a4bf",
-    "l c #6aa5be",
-    "i c #6eadc6",
-    "h c #6faec7",
-    "f c #79b7cd",
-    "j c #7db4c8",
-    "d c #83c1d4",
-    "b c #8ecadc",
-    "g c #93c6d6",
-    "e c #a1d2e0",
-    "c c #a9d9e5",
-    "a c #aedde9",
-    ".....##.........",
-    "....#aa#........",
-    "....#aba#.......",
-    "....#cdda#......",
-    "....#efffa#.....",
-    "....#ghiiia#....",
-    "....#jkkkkka#...",
-    "....#lmnnnnn#...",
-    "....#opppppp#...",
-    "....#qrrrrr#....",
-    "....#stttt#.....",
-    "....#uvvv#......",
-    "....#www#.......",
-    "....#xx#........",
-    ".....##........."])
-
-right_2triangles = QPixmapWrapper([
-    "16 15 21 1",
-    ". c None",
-    "# c #024266",
-    "s c #266995",
-    "r c #30739c",
-    "q c #30739d",
-    "p c #3b7da3",
-    "o c #3c7da4",
-    "n c #4586aa",
-    "m c #4a88aa",
-    "l c #4f90b1",
-    "k c #5994b1",
-    "j c #5a9ab8",
-    "h c #64a4bf",
-    "i c #6ba2ba",
-    "f c #6eadc6",
-    "d c #79b7cd",
-    "g c #7fb3c7",
-    "b c #83c1d4",
-    "e c #94c5d5",
-    "c c #a5d5e2",
-    "a c #aedde9",
-    "................",
-    "..##.....##.....",
-    ".#aa#...#aa#....",
-    ".#aba#..#aba#...",
-    ".#cdda#.#cdda#..",
-    ".#efffa##efffa#.",
-    ".#ghhhha#ghhhha#",
-    ".#ijjjjj#ijjjjj#",
-    ".#klllll#klllll#",
-    ".#mnnnn##mnnnn#.",
-    ".#oppp#.#oppp#..",
-    ".#qrr#..#qrr#...",
-    ".#ss#...#ss#....",
-    "..##.....##.....",
-    "................"])
-
-down_triangle = QPixmapWrapper([
-    "15 16 17 1",
-    ". c None",
-    "# c #024266",
-    "o c #1a5f8e",
-    "n c #256895",
-    "m c #2f729c",
-    "l c #3a7ca3",
-    "k c #4485aa",
-    "j c #4f8fb1",
-    "i c #68a3bf",
-    "h c #79b0ca",
-    "g c #85bbd1",
-    "f c #93c5d7",
-    "e c #9ccedd",
-    "d c #a3d4e0",
-    "c c #a7d7e3",
-    "b c #abdae6",
-    "a c #aedde9",
-    "...............",
-    "...............",
-    "...............",
-    "...............",
-    ".#############.",
-    "#aaaaabcdefghi#",
-    "#jjjjjjjjjjjjj#",
-    ".#kkkkkkkkkkk#.",
-    "..#lllllllll#..",
-    "...#mmmmmmm#...",
-    "....#nnnnn#....",
-    ".....#ooo#.....",
-    "......###......",
-    "...............",
-    "...............",
-    "..............."])
-
-down_2triangles = QPixmapWrapper([
-    "15 16 15 1",
-    ". c None",
-    "# c #024266",
-    "m c #1a5f8e",
-    "l c #256895",
-    "k c #2f729c",
-    "j c #3a7ca3",
-    "i c #4485aa",
-    "h c #79b0ca",
-    "g c #85bbd1",
-    "f c #93c5d7",
-    "e c #9ccedd",
-    "d c #a3d4e0",
-    "c c #a7d7e3",
-    "b c #abdae6",
-    "a c #aedde9",
-    "...............",
-    "..###########..",
-    ".#aaaabcdefgh#.",
-    ".#iiiiiiiiiii#.",
-    "..#jjjjjjjjj#..",
-    "...#kkkkkkk#...",
-    "....#lllll#....",
-    ".....#mmm#.....",
-    "..###########..",
-    ".#aaaabcdefgh#.",
-    ".#iiiiiiiiiii#.",
-    "..#jjjjjjjjj#..",
-    "...#kkkkkkk#...",
-    "....#lllll#....",
-    ".....#mmm#.....",
-    "......###......"])
-
-pause = QPixmapWrapper([
-    "15 15 20 1",
-    ". c None",
-    "# c #024266",
-    "r c #034367",
-    "q c #30739c",
-    "o c #3b7da3",
-    "p c #3f7fa6",
-    "m c #4586aa",
-    "n c #4f8eb2",
-    "k c #4f90b1",
-    "l c #5998b9",
-    "i c #5a9ab8",
-    "j c #63a2c0",
-    "g c #64a4bf",
-    "h c #6eabc7",
-    "e c #6faec6",
-    "f c #79b5ce",
-    "c c #7cb9ce",
-    "d c #87c0d5",
-    "b c #94ccdc",
-    "a c #aedde9",
-    "...............",
-    "...............",
-    "...###...###...",
-    "..#aaa#.#aaa#..",
-    "..#bcc#.#bcc#..",
-    "..#dee#.#dee#..",
-    "..#fgg#.#fgg#..",
-    "..#hii#.#hii#..",
-    "..#jkk#.#jkk#..",
-    "..#lmm#.#lmm#..",
-    "..#noo#.#noo#..",
-    "..#pqq#.#pqq#..",
-    "...r##...r##...",
-    "...............",
-    "..............."])
-
-stop = QPixmapWrapper(["16 16 132 2",
-                       "Qt c None",
-                       ".# c #630000",
-                       ".D c #690200",
-                       "ab c #810000",
-                       "a# c #890300",
-                       "#7 c #890400",
-                       "#8 c #8a0501",
-                       "aa c #8c0804",
-                       "a. c #8c0a07",
-                       "#9 c #8e0e0b",
-                       "#Z c #8f0600",
-                       "#Y c #900700",
-                       "#4 c #920700",
-                       "#N c #930e05",
-                       "#3 c #96110b",
-                       "#D c #971508",
-                       "#s c #971c10",
-                       "#5 c #981a14",
-                       "#0 c #981c16",
-                       "#M c #990b01",
-                       "#X c #9a0e04",
-                       "#T c #9b1f17",
-                       "#i c #9e2011",
-                       "#B c #9f0d00",
-                       "#S c #9f180e",
-                       "#C c #a20e01",
-                       "#L c #a20f01",
-                       "#r c #a51504",
-                       "#2 c #a5332e",
-                       "#1 c #a53d38",
-                       "#A c #a71000",
-                       "#K c #a72114",
-                       "#6 c #a73e39",
-                       "#x c #a92617",
-                       "#q c #aa1100",
-                       "#z c #ab1100",
-                       "#y c #ac1200",
-                       "#p c #ac1404",
-                       "#h c #ad1804",
-                       "#R c #ad3a32",
-                       "#W c #ad4039",
-                       "#o c #ae1300",
-                       ".K c #af2711",
-                       "#H c #af4840",
-                       ".7 c #b02c19",
-                       "#f c #b31500",
-                       "#g c #b31600",
-                       ".y c #b32910",
-                       "#n c #b41600",
-                       "#d c #b51700",
-                       "#m c #b7220e",
-                       ".5 c #bb1900",
-                       "#l c #bb4e40",
-                       ".6 c #bc1a00",
-                       ".U c #bc2b14",
-                       ".3 c #bd1a00",
-                       "#e c #bd2414",
-                       ".J c #be3119",
-                       "#c c #bf230b",
-                       "#G c #bf6860",
-                       ".S c #c01b00",
-                       ".s c #c02407",
-                       "#Q c #c0716b",
-                       ".F c #c12104",
-                       ".T c #c31d01",
-                       ".Q c #c41d00",
-                       ".2 c #c42207",
-                       ".E c #c61f03",
-                       ".i c #c62707",
-                       ".o c #c82908",
-                       "#b c #c84632",
-                       ".C c #ca2205",
-                       ".P c #ca270b",
-                       ".v c #ca3214",
-                       ".x c #cb2504",
-                       ".p c #cc2705",
-                       ".4 c #cc3626",
-                       "#a c #cd6e60",
-                       ".1 c #ce452e",
-                       ".h c #d02301",
-                       ".j c #d02804",
-                       ".B c #d03516",
-                       "#t c #d0a7a3",
-                       ".O c #d15038",
-                       ".q c #d22300",
-                       "#E c #d2aba8",
-                       ".n c #d32904",
-                       ".w c #d62400",
-                       ".0 c #d67b6b",
-                       ".L c #d7aaa3",
-                       ".r c #d83922",
-                       "#j c #d9b7b3",
-                       ".X c #dbb8b3",
-                       ".b c #dc2903",
-                       ".z c #dcafa8",
-                       ".m c #dd2800",
-                       ".k c #dd2801",
-                       ".R c #dd4a3c",
-                       ".l c #de2800",
-                       ".f c #de2901",
-                       ".g c #e0442e",
-                       ".c c #e22a00",
-                       ".e c #e32a00",
-                       "#U c #e4c9c7",
-                       ".d c #e62b00",
-                       "#J c #e6cac7",
-                       ".8 c #e7d0cd",
-                       "#I c #e7d1d0",
-                       ".V c #e8c9c5",
-                       ".W c #e8d0cd",
-                       "#v c #e8d6d4",
-                       "#w c #e9d2d0",
-                       ".a c #ea5a4d",
-                       ".I c #eacac5",
-                       "#k c #ead7d4",
-                       ".G c #ecd1cc",
-                       ".t c #ecd5d1",
-                       ".u c #edd1cc",
-                       "#O c #f2e7e6",
-                       ".9 c #f2eeee",
-                       ".H c #f5f2f2",
-                       ".A c #f6e8e6",
-                       "#F c #f6ecec",
-                       "#. c #f6f2f2",
-                       "#P c #f7efee",
-                       "#u c #f7f4f4",
-                       ".Z c #f8edec",
-                       ".Y c #f8f4f4",
-                       ".M c #f8f6f6",
-                       ".N c #f9f0ee",
-                       "## c #f9f5f5",
-                       "#V c #fcfcfc",
-                       "QtQtQtQtQt.#.#.#.#.#.#QtQtQtQtQt",
-                       "QtQtQt.#.#.a.a.a.a.a.a.#.#QtQtQt",
-                       "QtQt.#.a.a.b.c.d.d.e.f.a.g.#QtQt",
-                       "Qt.#.a.h.i.j.k.l.m.n.o.p.q.r.#Qt",
-                       "Qt.#.a.s.t.u.v.w.x.y.z.A.B.C.DQt",
-                       ".#.a.E.F.G.H.I.J.K.L.M.N.O.P.Q.#",
-                       ".#.R.S.T.U.V.H.W.X.Y.Z.0.1.2.3.#",
-                       ".#.4.5.6.6.7.8.9#.###a#b#c.5#d.#",
-                       ".##e#f#g#h#i#j#..H#k#l#m#n#f#o.#",
-                       ".##p#q#r#s#t#u###v.H#w#x#y#z#A.#",
-                       ".##B#C#D#E.M#F#G#H#I#u#J#K#L#B.#",
-                       "Qt.##M#N#O#P#Q#R#S#T#U#V#W#X.#Qt",
-                       "Qt.##Y#Z#0#1#2#3#4#4#5#6#5#Y.#Qt",
-                       "QtQt.##7#8#9a.a#a#a##8aa#7.#QtQt",
-                       "QtQtQt.#.#abababababab.#.#QtQtQt",
-                       "QtQtQtQtQt.#.#.#.#.#.#QtQtQtQtQt"])
-
-roadsign_nolimit = QPixmapWrapper(["16 16 4 1",
-                                   "b c None",
-                                   ". c None",
-                                   "# c #585858",
-                                   "a c #ffffff",
-                                   ".....######.....",
-                                   "...##########...",
-                                   "..####aaaab###..",
-                                   ".###aaaaaa#a###.",
-                                   ".##aaaaaa#a#a##.",
-                                   "###aaaaa#a#a#b##",
-                                   "##aaaaa#a#a#aa##",
-                                   "##aaaa#a#a#aaa##",
-                                   "##aaa#a#a#aaaa##",
-                                   "##aa#a#a#aaaaa##",
-                                   "##b#a#a#aaaaa###",
-                                   ".##a#a#aaaaaa##.",
-                                   ".###a#aaaaaa###.",
-                                   "..###baaaa####..",
-                                   "...##########...",
-                                   ".....######....."])
-
-eject = QPixmapWrapper(["15 16 25 1",
-                        ". c None",
-                        "h c None",
-                        "# c #024266",
-                        "w c #074769",
-                        "u c #2d7099",
-                        "v c #2f729c",
-                        "s c #3a7ca2",
-                        "r c #3b7da3",
-                        "p c #4486a9",
-                        "o c #4788a9",
-                        "n c #4a8bac",
-                        "t c #4b8bab",
-                        "m c #4e8eaf",
-                        "l c #5292b2",
-                        "k c #5796b5",
-                        "q c #5998b7",
-                        "j c #5a99b7",
-                        "i c #5d9cba",
-                        "g c #5e9dbb",
-                        "f c #67a6c2",
-                        "e c #71afc8",
-                        "d c #7ab8cf",
-                        "c c #84c1d5",
-                        "b c #8ec9dc",
-                        "a c #aedde9",
-                        "...............",
-                        "......###......",
-                        ".....#aaa#.....",
-                        "....#abbbb#....",
-                        "...#acccccc#...",
-                        "..#adddddddd#..",
-                        ".#aeeeeeeeeee#.",
-                        "#affffffffffff#",
-                        "#ggggggggggggg#",
-                        "h#############h",
-                        "hhhhhhhhhhhhhhh",
-                        ".#############.",
-                        "#gijklmnoppppp#",
-                        "#qrsssssssssss#",
-                        "#tuvvvvvvvvvvv#",
-                        ".w############."])
-
-file_open = QPixmapWrapper(["16 16 223 2",
-                            "bB c None",
-                            "bC c None",
-                            "bm c None",
-                            "ba c None",
-                            "aY c None",
-                            ".x c None",
-                            ".y c None",
-                            ".O c None",
-                            ".N c None",
-                            ".w c None",
-                            ".M c None",
-                            ".o c None",
-                            ".d c None",
-                            ".# c None",
-                            ".v c None",
-                            ".m c None",
-                            ".n c None",
-                            ".c c None",
-                            ".e c None",
-                            ".b c None",
-                            ".l c None",
-                            ".a c None",
-                            ".g c None",
-                            ".p c None",
-                            ".f c None",
-                            "Qt c None",
-                            "aI c #0013a9",
-                            "bl c #000ca4",
-                            ".E c #4e64c0",
-                            ".h c #5d68bb",
-                            "#f c #0014ae",
-                            "#g c #001aaf",
-                            ".k c #565fb7",
-                            ".2 c #011daf",
-                            "as c #0016a9",
-                            ".L c #414caf",
-                            ".q c #5d65b8",
-                            "b# c #000da6",
-                            "ac c #0017ac",
-                            "#e c #1a33ac",
-                            "aX c #0011a8",
-                            ".F c #6e75c0",
-                            "#Y c #0016ae",
-                            ".i c #6872c0",
-                            ".u c #5a63bb",
-                            ".D c #114acf",
-                            "bA c #0012a6",
-                            ".z c #215cd3",
-                            "aH c #0012ab",
-                            ".C c #4b83e7",
-                            ".B c #4e84e7",
-                            ".A c #588de8",
-                            "#s c #082ab8",
-                            "#r c #2f58d1",
-                            ".r c #8288cc",
-                            ".1 c #5d6bc3",
-                            "#I c #041fb6",
-                            "ar c #0012b0",
-                            "bk c #0f29ae",
-                            ".j c #727ac5",
-                            "aq c #000bbc",
-                            "aa c #000bbb",
-                            ".U c #6f82cf",
-                            "ab c #0010b5",
-                            "bn c #0431bf",
-                            "aG c #000cb9",
-                            "#q c #3a62d0",
-                            ".G c #a3a8dd",
-                            ".K c #9ba1db",
-                            "bb c #0333c3",
-                            "aZ c #083fca",
-                            "aJ c #2963d7",
-                            "#Z c #447cdd",
-                            "#J c #467fde",
-                            "ad c #4880de",
-                            "at c #4881de",
-                            "#t c #4980e0",
-                            "#h c #4b83e0",
-                            ".3 c #4f86e0",
-                            "b. c #3951bb",
-                            "bz c #1633aa",
-                            "by c #1d3aae",
-                            "bx c #2140b2",
-                            "bw c #2547b8",
-                            "bv c #2b4fbd",
-                            "bu c #3156c4",
-                            "bt c #375dca",
-                            "bo c #3967d3",
-                            "bs c #3c65d0",
-                            "br c #4169d2",
-                            "bq c #416bd5",
-                            "bp c #446ed5",
-                            "#H c #265de7",
-                            "aW c #152bb7",
-                            "#W c #1d59eb",
-                            "ap c #0015c0",
-                            "#X c #0018bc",
-                            "aF c #0019c8",
-                            "ao c #001ec9",
-                            "aE c #0024d2",
-                            "aD c #0029da",
-                            "an c #0630da",
-                            "a# c #0726c9",
-                            "aC c #083ce4",
-                            "a. c #164be3",
-                            "am c #164fed",
-                            "#9 c #2767f6",
-                            "aB c #2864f2",
-                            "#V c #2e7dfc",
-                            "al c #306af3",
-                            "aV c #3148c4",
-                            "#U c #3786fe",
-                            "aU c #3853ce",
-                            "#1 c #3870db",
-                            "#D c #396bdb",
-                            "aT c #3b5eda",
-                            "#8 c #3c80fb",
-                            "aS c #4067e1",
-                            "#o c #4670da",
-                            "#F c #4690fe",
-                            "aA c #4784f9",
-                            ".P c #4981e0",
-                            "#G c #4b96fe",
-                            "ak c #4c88fb",
-                            "#L c #4f8ee7",
-                            "aK c #5288e4",
-                            "au c #5590e3",
-                            "#E c #5798f9",
-                            "aR c #587de8",
-                            "#7 c #5998fc",
-                            "#C c #5a7bd8",
-                            "az c #5e9cfc",
-                            "#p c #6087e2",
-                            "af c #618fe7",
-                            "#M c #648de2",
-                            "ay c #64a4f9",
-                            "#S c #6599f3",
-                            "#T c #65a4fe",
-                            "a0 c #6c96e6",
-                            "#w c #6e8fdd",
-                            "#R c #6fa3f2",
-                            "aj c #6fabfe",
-                            "#n c #7491de",
-                            ".T c #76abee",
-                            "aQ c #789ff3",
-                            "#6 c #7db8fd",
-                            "#Q c #80aff3",
-                            "ae c #85bff5",
-                            "ax c #85ccfe",
-                            "#B c #86a0e7",
-                            "#A c #86a3e8",
-                            "aP c #88aef7",
-                            "#d c #8995d7",
-                            "#z c #89a8e8",
-                            "#y c #8dabeb",
-                            "#P c #8fbcf5",
-                            "#v c #8fbdf1",
-                            "ai c #8fc4fb",
-                            "#x c #92b2f0",
-                            ".6 c #95bbec",
-                            "#j c #97b6e8",
-                            "aO c #97c0fc",
-                            ".S c #9bdafc",
-                            "av c #9fc2f0",
-                            "#O c #9fc5f7",
-                            ".7 c #a1aadd",
-                            "ah c #a2d5f8",
-                            ".R c #a6defc",
-                            "#N c #a7c2f5",
-                            "#5 c #a9defe",
-                            "bj c #aaaaca",
-                            "aN c #afdafe",
-                            ".5 c #afe6fc",
-                            "bc c #b1c5f1",
-                            "bi c #b5b2cf",
-                            "a9 c #b5b2d6",
-                            "aL c #b8d8f8",
-                            ".Q c #b9ecfc",
-                            "aw c #b9edfe",
-                            "a8 c #bbb8da",
-                            "bh c #bfbdd7",
-                            "#0 c #bff2fe",
-                            "#k c #c4c3e4",
-                            "a7 c #c5c3e0",
-                            "#c c #c8cef3",
-                            "aM c #c8edfe",
-                            "#i c #c8fbfe",
-                            ".4 c #cafcfe",
-                            "#u c #cbfdfe",
-                            "bg c #cecae1",
-                            ".s c #ced0f0",
-                            "#K c #cffefe",
-                            "#3 c #d0e4f8",
-                            "a6 c #d1cee6",
-                            ".V c #d1d3ed",
-                            "#4 c #d5fbfd",
-                            "#2 c #daebfc",
-                            "a5 c #dbd7ec",
-                            "bf c #dcd8e9",
-                            ".t c #dcdef7",
-                            ".0 c #dedef7",
-                            "ag c #e1fefe",
-                            "a4 c #e2def1",
-                            "#b c #e3e2f8",
-                            ".Z c #e6e4fb",
-                            ".Y c #e6e6fb",
-                            "#a c #e8e8fb",
-                            ".H c #e9e9fb",
-                            "be c #ebe7f2",
-                            "a3 c #ece9f7",
-                            ".J c #ecebfc",
-                            "## c #eeeefe",
-                            ".8 c #f1f1fb",
-                            ".I c #f2f1fe",
-                            ".X c #f2f2fe",
-                            "a2 c #f6f3fc",
-                            "#. c #f7f7fe",
-                            "bd c #f9f6fb",
-                            "#m c #fbf6fe",
-                            ".W c #fcfcfe",
-                            "#l c #fdf8fe",
-                            "a1 c #fefdfe",
-                            ".9 c #fefefe",
-                            "QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
-                            ".#.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o",
-                            ".#.a.b.c.d.e.p.q.r.s.t.u.v.w.x.y",
-                            ".z.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O",
-                            ".P.Q.R.S.T.U.V.W.X.Y.Z.0.1.2.N.O",
-                            ".3.4.5.6.7.8.9#.###a#b#c#d#e#f#g",
-                            "#h#i#j#k.9.9.9.9#l#m#n#o#p#q#r#s",
-                            "#t#u#v#w#x#y#z#A#B#C#D#E#F#G#H#I",
-                            "#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y",
-                            "#Z#0#1#2#3#4#5#6#7#8#9a.a#aaabac",
-                            "adaeafagahaiajakalamanaoapaqaras",
-                            "atauavawaxayazaAaBaCaDaEaFaGaHaI",
-                            "aJaKaLaMaNaOaPaQaRaSaTaUaVaWaXaY",
-                            "aZa0a1.9a1a2a3a4a5a6a7a8a9b.b#ba",
-                            "bbbc.9.9.9.9bdbebfbgbhbibjbkblbm",
-                            "bnbobpbqbrbsbtbubvbwbxbybzbAbBbC"])
-
-file_save = QPixmapWrapper(["16 16 179 2",
-                            "Qt c None",
-                            ".m c #000028",
-                            "aW c #000028",
-                            "aK c #0e0e47",
-                            ".# c #a3a4c3",
-                            ".l c #101149",
-                            ".v c #070637",
-                            "aV c #000023",
-                            "av c #000028",
-                            "ah c #00002a",
-                            "#5 c #00002c",
-                            "#R c #01012f",
-                            "#D c #020230",
-                            "#r c #040433",
-                            "aU c #050530",
-                            "#d c #060636",
-                            ".1 c #080839",
-                            ".N c #0a0a3b",
-                            "aL c #100f46",
-                            "aT c #10103f",
-                            "aM c #101041",
-                            "aS c #121241",
-                            "aR c #131342",
-                            "aQ c #161643",
-                            "aP c #161645",
-                            "aO c #191947",
-                            "aN c #1b1b49",
-                            "ai c #3d4073",
-                            ".k c #3f4074",
-                            "#6 c #494c7d",
-                            ".j c #515180",
-                            "#S c #545786",
-                            ".i c #5a5a87",
-                            "#E c #5e608e",
-                            ".h c #64648f",
-                            "#s c #696b96",
-                            ".g c #6e6e98",
-                            "#e c #73769f",
-                            ".f c #7979a0",
-                            ".2 c #7f81a8",
-                            ".e c #8585aa",
-                            ".O c #8b8db1",
-                            ".d c #9595b6",
-                            ".F c #9697b9",
-                            ".c c #a1a0bf",
-                            ".w c #a1a2c3",
-                            ".b c #a3a3c3",
-                            ".a c #acaec9",
-                            ".E c #0f0f41",
-                            "aJ c #000025",
-                            "aw c #313267",
-                            ".n c #aeafcb",
-                            "aI c #000224",
-                            "au c #020b32",
-                            "ag c #060f39",
-                            "#4 c #0c1643",
-                            "#Q c #131d4c",
-                            "#C c #1b2756",
-                            "#q c #2b3765",
-                            ".A c #344f85",
-                            "aH c #353a64",
-                            "#c c #394473",
-                            ".0 c #3e4b79",
-                            "#b c #435482",
-                            "at c #454f79",
-                            "#p c #455582",
-                            "#a c #495b88",
-                            ".M c #4c5987",
-                            "af c #4f5880",
-                            ".r c #546b9b",
-                            "#3 c #59628b",
-                            "ax c #5b6690",
-                            "#o c #5b6892",
-                            "## c #5b6e9a",
-                            ".z c #5e75a1",
-                            "#n c #627099",
-                            "#P c #646d96",
-                            ".D c #6878a4",
-                            "aj c #6b7da4",
-                            "#. c #6d83ab",
-                            "#m c #6e7ca4",
-                            "#B c #6f799e",
-                            ".u c #737da8",
-                            "#7 c #7b8db1",
-                            ".9 c #7b8fb7",
-                            "#l c #7c8db1",
-                            "ay c #7f84a7",
-                            "aG c #8180a4",
-                            "aF c #8181a3",
-                            ".Z c #818faf",
-                            ".8 c #8599be",
-                            "ar c #8787b0",
-                            "as c #8988b2",
-                            "aE c #8b8baa",
-                            "#k c #8d9bbe",
-                            ".7 c #8ea1c4",
-                            "#T c #8fa1c3",
-                            "aq c #9191b8",
-                            "aD c #9292b2",
-                            "ad c #9595b9",
-                            "ak c #969fc0",
-                            ".q c #96a6c5",
-                            "ae c #9796bb",
-                            ".6 c #98a9ca",
-                            "ap c #9a9ac0",
-                            "#j c #9baaca",
-                            "aC c #9c9cb9",
-                            ".J c #9caecc",
-                            "ac c #9e9ec2",
-                            "#1 c #9e9ec3",
-                            "#F c #9eaece",
-                            "#2 c #a1a0c4",
-                            "#8 c #a1abca",
-                            ".5 c #a1b1d1",
-                            "ao c #a3a3c8",
-                            "aB c #a6a6c0",
-                            "#i c #a6b6d2",
-                            "ab c #a7a7c9",
-                            ".I c #a7b5d0",
-                            "#t c #a7b7d5",
-                            "#0 c #a8a8ca",
-                            "#N c #ababce",
-                            "#g c #abbbd6",
-                            "an c #acacd0",
-                            ".4 c #acbbd7",
-                            "#O c #afaecf",
-                            "#h c #afbdd8",
-                            "aA c #b0b0c9",
-                            "aa c #b1b1d1",
-                            "#Z c #b2b2d2",
-                            "#U c #b3bdd5",
-                            "#M c #b6b6d5",
-                            "am c #b6b6d7",
-                            "#f c #b7c4de",
-                            ".L c #b8c4d8",
-                            "a# c #bbbbd8",
-                            "#Y c #bcbcda",
-                            "#L c #c0c0dd",
-                            ".Y c #c0c9db",
-                            ".C c #c0cce0",
-                            "#G c #c2cbe0",
-                            "az c #c4c3d7",
-                            "a. c #c4c4e0",
-                            ".3 c #c4d0e7",
-                            "#X c #c5c5e1",
-                            ".B c #c5cee1",
-                            ".s c #c8d1e2",
-                            "#u c #c9d3e3",
-                            "#K c #cac9e4",
-                            "al c #cbcae7",
-                            ".P c #cbd6eb",
-                            ".X c #ccd6e6",
-                            "#A c #cecee2",
-                            "#z c #cecee3",
-                            "#W c #cfcfe9",
-                            ".W c #d1d8e8",
-                            ".Q c #d1daeb",
-                            "#J c #d3d3ec",
-                            ".V c #d3dbe9",
-                            ".t c #d5deed",
-                            ".G c #d5e0f1",
-                            ".U c #d6deec",
-                            "#9 c #dad8ee",
-                            "#y c #dadaeb",
-                            ".T c #dbe2f0",
-                            "#I c #dcdcf1",
-                            ".S c #e0e6f2",
-                            ".x c #e2ebf9",
-                            ".R c #e3e9f5",
-                            "#V c #e4e3f8",
-                            "#x c #e4e4f3",
-                            "#H c #e8e7f7",
-                            ".H c #ebf0f8",
-                            "#w c #eeeefb",
-                            ".K c #f0f3fb",
-                            ".o c #f2f8fe",
-                            ".y c #f5f9fe",
-                            "#v c #fbfbfe",
-                            ".p c #fefefe",
-                            "QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
-                            "Qt.#.a.b.c.d.e.f.g.h.i.j.k.l.mQt",
-                            "Qt.n.o.p.q.r.s.p.p.p.p.p.t.u.vQt",
-                            "Qt.w.x.y.z.A.B.p.p.p.p.p.C.D.EQt",
-                            "Qt.F.G.H.I.J.K.p.p.p.p.p.L.M.NQt",
-                            "Qt.O.P.Q.R.S.T.U.V.W.X.Y.Z.0.1Qt",
-                            "Qt.2.3.4.5.6.7.8.9#.###a#b#c#dQt",
-                            "Qt#e#f#g#h#i#j#k#l#m#n#o#p#q#rQt",
-                            "Qt#s#t#u.p.p#v#w#x#y#z#A#B#C#DQt",
-                            "Qt#E#F#G#H#I#J#K#L#M#N#O#P#Q#RQt",
-                            "Qt#S#T#U#V#W#X#Y#Z#0#1#2#3#4#5Qt",
-                            "Qt#6#7#8#9a.a#aaabacadaeafagahQt",
-                            "QtaiajakalamanaoapaqarasatauavQt",
-                            "QtawaxayazaAaBaCaDaEaFaGaHaIaJQt",
-                            "QtaKaLaMaNaOaPaQaRaSaTaTaUaVaWQt",
-                            "QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt"])
-
-reexecute = QPixmapWrapper(["16 16 23 1",
-                            "b c None",
-                            "d c None",
-                            "a c None",
-                            "# c None",
-                            ". c None",
-                            "c c #024266",
-                            "u c #1b5f8e",
-                            "t c #34769f",
-                            "s c #4182a7",
-                            "r c #4e8eb0",
-                            "o c #5696b5",
-                            "q c #5a9ab9",
-                            "p c #5c9cbb",
-                            "m c #67a6c2",
-                            "k c #74b2ca",
-                            "l c #75b1ca",
-                            "h c #81bed3",
-                            "j c #84bfd3",
-                            "g c #8ac4d7",
-                            "i c #91c8d9",
-                            "n c #98ccdd",
-                            "f c #a3d5e3",
-                            "e c #aedde9",
-                            "................",
-                            ".....##.........",
-                            "...abcccc.......",
-                            "..dcceeeecc.....",
-                            ".acefghhhijc..cc",
-                            ".cekkkkkkkkkccec",
-                            "bclmccccmmmmmnmc",
-                            "copc....cqqqqqqc",
-                            "crc......crrrrrc",
-                            "csc......csssssc",
-                            "acc.....cttttttc",
-                            ".ctc....ccccccc.",
-                            "..cuc..........a",
-                            "...ccc..........",
-                            ".....ccc........",
-                            "................"])
-
-reexecute_loop = QPixmapWrapper(["16 16 24 1",
-                                 "v c None",
-                                 "b c None",
-                                 "d c None",
-                                 "a c None",
-                                 "# c None",
-                                 ". c None",
-                                 "c c #024266",
-                                 "u c #1b5f8e",
-                                 "t c #34769f",
-                                 "s c #4182a7",
-                                 "r c #4e8eb0",
-                                 "o c #5696b5",
-                                 "q c #5a9ab9",
-                                 "p c #5c9cbb",
-                                 "m c #67a6c2",
-                                 "k c #74b2ca",
-                                 "l c #75b1ca",
-                                 "h c #81bed3",
-                                 "j c #84bfd3",
-                                 "g c #8ac4d7",
-                                 "i c #91c8d9",
-                                 "n c #98ccdd",
-                                 "f c #a3d5e3",
-                                 "e c #aedde9",
-                                 "................",
-                                 ".....##.........",
-                                 "...abcccc.......",
-                                 "..dcceeeecc.....",
-                                 ".acefghhhijc..cc",
-                                 ".cekkkkkkkkkccec",
-                                 "bclmccccmmmmmnmc",
-                                 "copc....cqqqqqqc",
-                                 "crc......crrrrrc",
-                                 "csc......csssssc",
-                                 "acc.....cttttttc",
-                                 ".ctc....ccccccc.",
-                                 "..cuc.....vccv.a",
-                                 "...ccc...cccv...",
-                                 ".....cccccvv....",
-                                 "................"])
-
-spigot = QPixmapWrapper(["16 16 177 2",
-                         ".i c None",
-                         ".v c None",
-                         ".u c None",
-                         "aF c None",
-                         "aL c None",
-                         "#c c None",
-                         "#b c None",
-                         ".F c None",
-                         ".G c None",
-                         ".R c None",
-                         ".k c None",
-                         ".j c None",
-                         ".# c None",
-                         "Qt c None",
-                         ".t c #000000",
-                         ".H c #bebfc9",
-                         "aC c #000000",
-                         "#1 c #000000",
-                         "ar c #000000",
-                         ".h c #0d0300",
-                         ".Q c #000000",
-                         "#a c #000000",
-                         "aU c #000000",
-                         "aD c #000000",
-                         "aE c #000000",
-                         ".1 c #000000",
-                         ".w c #170d00",
-                         ".2 c #cacad3",
-                         "aK c #000000",
-                         ".I c #555763",
-                         ".E c #000000",
-                         "aQ c #000000",
-                         "ax c #000000",
-                         ".S c #dbdbe3",
-                         "ay c #1a395b",
-                         ".J c #2c2f40",
-                         "am c #02050c",
-                         ".P c #000000",
-                         "aM c #29537c",
-                         "al c #000000",
-                         ".g c #3c1800",
-                         "aR c #060d23",
-                         "aT c #000000",
-                         ".a c #f9a302",
-                         "#B c #05050d",
-                         "#2 c #131321",
-                         "as c #0b0b13",
-                         "aq c #030203",
-                         "aG c #63bdfe",
-                         ".f c #432502",
-                         "aw c #040407",
-                         "#p c #29293d",
-                         "aS c #020726",
-                         "ae c #202034",
-                         ".x c #4d3100",
-                         ".K c #7d8292",
-                         "#d c #b7b7c5",
-                         "#M c #0d0d18",
-                         ".l c #e9a60b",
-                         "aB c #000326",
-                         "#0 c #0d0d18",
-                         "ad c #0d0d18",
-                         ".d c #7f520b",
-                         "ak c #0b0b13",
-                         "## c #292932",
-                         ".s c #4b2801",
-                         ".e c #af792d",
-                         ".D c #2a1600",
-                         ".y c #513804",
-                         "#N c #4d4d6d",
-                         "ap c #0d0f26",
-                         "at c #1a1a2a",
-                         "av c #161625",
-                         ".O c #16162d",
-                         ".0 c #1f2032",
-                         ".T c #dddde6",
-                         "aP c #000534",
-                         "a# c #19192a",
-                         ".c c #cf8f09",
-                         "au c #1f1f30",
-                         "#q c #a9a9b9",
-                         ".b c #eeaa0f",
-                         "#n c #868699",
-                         "#o c #737392",
-                         "aJ c #030f5d",
-                         "#C c #87879f",
-                         ".3 c #dddde3",
-                         "an c #576da4",
-                         "a. c #363651",
-                         ".z c #aa8e5c",
-                         ".C c #996709",
-                         "az c #a2d8fe",
-                         "#m c #9f9fb1",
-                         "aj c #38385a",
-                         "aN c #649eed",
-                         ".U c #dadae6",
-                         "#A c #7b7b98",
-                         "#9 c #3e3e64",
-                         ".V c #bcbccf",
-                         "af c #57577b",
-                         ".B c #aa925a",
-                         ".W c #c2c2d2",
-                         "aa c #666482",
-                         "#3 c #6c6c90",
-                         "#8 c #3c3c64",
-                         "#7 c #46466a",
-                         "ai c #474770",
-                         "#T c #4e4e72",
-                         "#W c #4f4f74",
-                         "ah c #4f4f76",
-                         "ao c #525b98",
-                         "ac c #55557a",
-                         "aO c #567ddd",
-                         "#Z c #58587b",
-                         ".Z c #58587d",
-                         "#6 c #5a5a7b",
-                         "ag c #5a5a80",
-                         "#U c #606081",
-                         "#L c #626284",
-                         "#5 c #636383",
-                         "#S c #676786",
-                         ".N c #686991",
-                         "aI c #6ba9fc",
-                         "#R c #6c6c8b",
-                         "#V c #727291",
-                         "#4 c #757592",
-                         "#. c #7c7c9a",
-                         "#X c #7d7d98",
-                         "ab c #83839b",
-                         "#P c #8686a0",
-                         "#Q c #8787a1",
-                         "#O c #9292aa",
-                         "#G c #9595ab",
-                         "#K c #9c9cb1",
-                         "aA c #9cb8eb",
-                         "aH c #9fd8fe",
-                         "#Y c #a0a0b3",
-                         ".6 c #a2a2b6",
-                         ".Y c #a4a4b7",
-                         ".9 c #a8a8bc",
-                         "#J c #a9a9bc",
-                         "#F c #aaaabd",
-                         ".7 c #acacbe",
-                         "#k c #afafc0",
-                         "#l c #afafc2",
-                         "#h c #b1b1c2",
-                         "#H c #b2b2c3",
-                         "#u c #b9b9c8",
-                         ".M c #bdc2d8",
-                         "#g c #c3c3d0",
-                         "#E c #c4c4d1",
-                         "#I c #cacad6",
-                         ".5 c #cbcbd7",
-                         "#r c #d0d0db",
-                         "#v c #d2d2dc",
-                         "#z c #d3d3de",
-                         ".A c #d8bd89",
-                         "#s c #dadae1",
-                         "#D c #dadae2",
-                         "#y c #dcdce6",
-                         "#i c #e7e7ec",
-                         "#e c #e7e7ed",
-                         ".4 c #e9e9ed",
-                         "#f c #ebebf0",
-                         ".X c #ececf0",
-                         "#j c #ececf1",
-                         ".L c #f1f6fe",
-                         ".r c #f2aa0f",
-                         ".q c #f3b816",
-                         "#t c #f7f7f8",
-                         "#x c #f7f7f9",
-                         ".8 c #f8f8f9",
-                         ".o c #fbb92a",
-                         ".p c #fdd061",
-                         ".n c #fecf17",
-                         ".m c #fee025",
-                         "#w c #fefefe",
-                         "Qt.#.#.#.a.b.c.d.e.f.g.h.i.i.i.i",
-                         "Qt.j.j.k.l.m.n.o.p.q.r.s.t.i.i.i",
-                         "Qt.u.u.v.w.x.y.z.A.B.C.D.E.i.i.i",
-                         "Qt.F.G.H.I.J.K.L.M.N.O.P.Q.i.i.i",
-                         "Qt.R.S.T.U.V.W.X.Y.Z.0.1.i.i.i.i",
-                         "Qt.2.3.4.5.6.7.8.9#.###a#b#c.i.i",
-                         "Qt#d#e#f#g#h#i#j#k#l#m#n#o#p.i.i",
-                         "Qt#q#r#g#s#t#f#u#v#w#x#y#z#A#B.i",
-                         "Qt#C#h.6#D#E#F#G#H#I#J#K#F#L#M.i",
-                         "Qt#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#0#1",
-                         "Qt#2#3#4#5#6#7#8#9a.a#aaabacad#1",
-                         "Qt.iaeafagahaiajakalamanaoapaqar",
-                         "Qt.i.iasatauavawax.iayazaAaBaC.i",
-                         "Qt.i.i.i.taDaE.Q.iaFaGaHaIaJaK.i",
-                         "Qt.i.i.i.i.i.i.i.iaLaMaNaOaPaQ.i",
-                         "Qt.i.i.i.i.i.i.i.i.i.iaRaSaTaU.i"])
-
-grey_cross = QPixmapWrapper(["16 16 97 2",
-                             "Qt c None",
-                             ".# c #2c2c2c",
-                             ".l c #313131",
-                             "#D c #393939",
-                             "#C c #1a1a1a",
-                             "#E c #1f1f1f",
-                             "#x c #212121",
-                             ".z c #232323",
-                             "#q c #262626",
-                             ".I c #272727",
-                             ".k c #292929",
-                             "#m c #2a2a2a",
-                             ".a c #2b2b2b",
-                             "#i c #2e2e2e",
-                             "#f c #313131",
-                             "#d c #343434",
-                             ".9 c #383838",
-                             ".3 c #3b3b3b",
-                             ".x c #404040",
-                             ".X c #414141",
-                             ".L c #484848",
-                             ".A c #4a4a4a",
-                             ".j c #4b4b4b",
-                             ".i c #4d4d4d",
-                             ".h c #4f4f4f",
-                             ".g c #505050",
-                             ".B c #525252",
-                             ".f c #555555",
-                             ".e c #575757",
-                             ".d c #595959",
-                             ".M c #5a5a5a",
-                             ".c c #5c5c5c",
-                             ".N c #5f5f5f",
-                             ".C c #606060",
-                             ".J c #636363",
-                             ".b c #656565",
-                             ".O c #676767",
-                             ".D c #6b6b6b",
-                             ".n c #6f6f6f",
-                             ".P c #717171",
-                             ".E c #737373",
-                             "#B c #777777",
-                             ".Q c #787878",
-                             ".F c #797979",
-                             ".Y c #7c7c7c",
-                             ".R c #7d7d7d",
-                             ".o c #7e7e7e",
-                             ".G c #7f7f7f",
-                             ".K c #818181",
-                             ".S c #828282",
-                             ".p c #858585",
-                             "#w c #868686",
-                             ".T c #888888",
-                             ".q c #8b8b8b",
-                             ".r c #8d8d8d",
-                             ".U c #8f8f8f",
-                             ".s c #919191",
-                             ".V c #929292",
-                             ".t c #959595",
-                             ".8 c #979797",
-                             ".u c #999999",
-                             "#v c #9c9c9c",
-                             "#a c #9e9e9e",
-                             ".v c #a0a0a0",
-                             "#b c #a4a4a4",
-                             ".W c #a8a8a8",
-                             ".2 c #aaaaaa",
-                             "#e c #ababab",
-                             "#c c #afafaf",
-                             "#k c #b0b0b0",
-                             ".H c #b4b4b4",
-                             "#n c #b9b9b9",
-                             "#h c #bababa",
-                             ".w c #bcbcbc",
-                             "#y c #bdbdbd",
-                             "#l c #bfbfbf",
-                             "#p c #c3c3c3",
-                             "#A c #c6c6c6",
-                             "#u c #c8c8c8",
-                             "#o c #c9c9c9",
-                             ".0 c #cccccc",
-                             "#t c #d2d2d2",
-                             ".1 c #d3d3d3",
-                             ".Z c #d5d5d5",
-                             ".y c #d7d7d7",
-                             ".m c #d9d9d9",
-                             "#z c #dadada",
-                             ".5 c #dcdcdc",
-                             ".7 c #dddddd",
-                             "#. c #dfdfdf",
-                             ".6 c #e2e2e2",
-                             "#r c #e4e4e4",
-                             "## c #e5e5e5",
-                             "#g c #e7e7e7",
-                             "#s c #e8e8e8",
-                             "#j c #ebebeb",
-                             ".4 c #ffffff",
-                             "Qt.#.a.b.c.d.e.f.g.h.i.j.i.k.lQt",
-                             ".#.c.m.n.o.p.p.q.r.s.t.u.v.w.x.l",
-                             ".a.y.z.A.B.e.C.b.D.E.F.G.p.q.H.I",
-                             ".J.K.L.M.N.O.D.P.Q.R.S.T.U.V.W.X",
-                             ".c.Y.B.N.Z.0.P.Q.R.S.m.1.V.u.2.3",
-                             ".d.p.e.O.y.4.5.R.S.6.4.7.8.v.2.9",
-                             ".e.p.C.D.P.5.4#..6.4##.8#a#b#c#d",
-                             ".f.q.b.P.Q.R#..4.4##.8#a.v#e.H#f",
-                             ".g.r.D.Q.R.S.6.4.4#g#a.v.W.H#h#i",
-                             ".h.s.E.R.S.6.4###g.4#j.W#k#l#l#m",
-                             ".i.t.F.S.m.4##.8#a#j.4#j#n#o#p#q",
-                             ".j.u.G.T#r.7.8#a.v.W#j#s#p#t#u.z",
-                             ".i#v#w.U.V.8#a.v.W#k#n#p#o.5#u#x",
-                             ".k#y.q.V.u.v#b#e.H#l#o#t#z.4.F.I",
-                             ".l.x.H.W.2.2#c.H#h#l#p#A#z#B#C#D",
-                             "Qt.l.I.X.3.9#d#f#i#m#q.z#E.I#DQt"])
-
-# Acknowledgement: the following open_lock and close_lock xpm files are
-# conversions from Joseph North's Sweetie BasePack 24-security-lock-open.png 
-# and 24-security-lock.png icons
-
-open_lock = QPixmapWrapper(["24 24 24 1",
-                            " 	c None",
-                            ".	c #838383",
-                            "+	c #6D6D6D",
-                            "@	c #A5A5A5",
-                            "#	c #E9E9E9",
-                            "$	c #EBEBEB",
-                            "%	c #A6A6A6",
-                            "&	c #7E7E7E",
-                            "*	c #B8B7AD",
-                            "=	c #F3F3F3",
-                            "-	c #F1F1F1",
-                            ";	c #EEEEEE",
-                            ">	c #ECECEC",
-                            ",	c #9F9F9F",
-                            "'	c #E7E7E7",
-                            ")	c #B2B2B2",
-                            "!	c #DFDFDF",
-                            "~	c #AEAEAE",
-                            "{	c #DADADA",
-                            "]	c #AAAAAA",
-                            "^	c #D5D5D5",
-                            "/	c #D1D1D1",
-                            "(	c #777777",
-                            "_	c #A4A4A4",
-                            "        .+++++++.       ",
-                            "       .@#######@.      ",
-                            "      .@$$$$$$$$$%.     ",
-                            "      +#$@+++++@$$+     ",
-                            "      &$$&*****+==+     ",
-                            "      &$$&     +--+     ",
-                            "       &&&     +;;+     ",
-                            "               +>>+     ",
-                            "               +##+     ",
-                            "     ++,,+++++++''+     ",
-                            "    +,,++,,,,,,,++,+    ",
-                            "    +))))))))))))))+    ",
-                            "    +!!!!!!!!!!!!!!+    ",
-                            "    +~~~~~~~~~~~~~~+    ",
-                            "    +{{{{{{{{{{{{{{+    ",
-                            "    +]]]]]]]]]]]]]]+    ",
-                            "    +^^^^^^^^^^^^^^+    ",
-                            "    +%%%%%%%%%%%%%%+    ",
-                            "    +//////////////+    ",
-                            "    +(____________(+    ",
-                            "    *++++++++++++++*    ",
-                            "     **************     ",
-                            "                        ",
-                            "                        "])
-
-close_lock = QPixmapWrapper(["24 24 24 1",
-                             " 	c None",
-                             ".	c #838383",
-                             "+	c #6D6D6D",
-                             "@	c #A7A7A7",
-                             "#	c #F8F8F8",
-                             "$	c #EBEBEB",
-                             "%	c #A5A5A5",
-                             "&	c #565656",
-                             "*	c #B8B7AD",
-                             "=	c #EFEFEF",
-                             "-	c #808080",
-                             ";	c #A1A1A1",
-                             ">	c #E9E9E9",
-                             ",	c #656565",
-                             "'	c #B5B5B5",
-                             ")	c #E3E3E3",
-                             "!	c #B1B1B1",
-                             "~	c #DDDDDD",
-                             "{	c #ACACAC",
-                             "]	c #D7D7D7",
-                             "^	c #A8A8A8",
-                             "/	c #D2D2D2",
-                             "(	c #777777",
-                             "_	c #A4A4A4",
-                             "                        ",
-                             "                        ",
-                             "                        ",
-                             "       .++++++++.       ",
-                             "      .@########@.      ",
-                             "     .@$$$$$$$$$$@.     ",
-                             "     +$$.++++++%$$+     ",
-                             "     +$$&******&$$+     ",
-                             "     +=$+      +$$+     ",
-                             "     +$$-@@@@@@-$$+     ",
-                             "    +;>>>,,,,,,>>>;+    ",
-                             "    +'++''''''''++'+    ",
-                             "    +))))))))))))))+    ",
-                             "    +!!!!!!!!!!!!!!+    ",
-                             "    +~~~~~~~~~~~~~~+    ",
-                             "    +{{{{{{{{{{{{{{+    ",
-                             "    +]]]]]]]]]]]]]]+    ",
-                             "    +^^^^^^^^^^^^^^+    ",
-                             "    +//////////////+    ",
-                             "    +(____________(+    ",
-                             "    *++++++++++++++*    ",
-                             "     **************     ",
-                             "                        ",
-                             "                        "])
-
-import os
-import os.path
-
-__icons_loaded = False
-
-
-def load_icons(appname, package=""):
-    """
-    load all icons found in path, subdirs '<package>/icons/<appname>'.
-    Package is optional.
-    """
-    # loop over system path
-    global __icons_loaded
-    if __icons_loaded:
-        return
-    icon_paths = ['/usr/local/share/meqtrees'] + sys.path
-    for path in icon_paths:
-        path = path or '.'
-        # for each entry, try <entry>/icons/<appname>'
-        trydir = os.path.join(path, package, 'icons', appname)
-        _dprint(3, 'trying icon path', trydir)
-        try:
-            files = os.listdir(trydir)
-        except:
-            continue
-        _dprint(3, len(files), 'entries in', trydir)
-        # loop over all files
-        nicons = 0
-        for f in files:
-            (name, ext) = os.path.splitext(f);  # check extension
-            if ext in ('.png', '.xpm', '.gif'):
-                f = os.path.join(trydir, f)
-                try:
-                    pm = QPixmap(f)
-                except:
-                    _dprint(3, 'error loading icon', name, sys.exc_value())
-                    continue
-                # register pixmap as global symbol using the supplied name
-                if name in globals():
-                    globals()[name].assign(pm)
-                else:
-                    globals()[name] = QPixmapWrapper(pm)
-                nicons += 1
-                _dprint(4, 'loaded icon', f)
-            else:
-                _dprint(4, 'ignoring entry', f)
-        _dprint(1, nicons, 'icons loaded from ', trydir)
-        __icons_loaded = True
-
-
-# define a pixmap access hook
-# if name is undefined, it will be inserted into globals 
-# as a default QPixmapWrapper containing the missing icon xpm. This may be overridden
-# later by load_icons() above. This allows apps to refer to icons before they're loaded.
-class __PixmapHook:
-    def __getattr__(self, name):
-        _dprint(4, 'returning icon', name)
-        return globals().setdefault(name, QPixmapWrapper())
-
-
-pixmaps = __PixmapHook()
-
-
-# define a Pixmap cache
-class PixmapCache:
-    def __init__(self, appname):
-        self._appname = appname
-        self._loaded = None
-        self._pixmaps = {}
-        self._pixmaps['_default'] = QPixmapWrapper()
-
-    def __getattr__(self, name):
-        # try to access attribute anyway, to see if we have one
-        try:
-            return dict.__getattr__(self, name)
-        except AttributeError:
-            pass
-        # try to load pixmaps
-        self._load()
-        # try to access pixmap
-        pm = self._pixmaps.get(name, None)
-        if pm:
-            return pm
-        else:
-            return QPixmapWrapper()
-
-    def _load(self):
-        """load all icons found in path, subdirs 'icons/appname'"""
-        # loop over system path
-        if self._loaded:
-            return
-        icon_paths = ['/usr/local/share/meqtrees'] + sys.path
-        for path in icon_paths:
-            path = path or '.'
-            # for each entry, try <entry>/icons/<appname>'
-            for a, b in [('icons', self._appname), (self._appname, 'icons')]:
-                trydir = os.path.join(path, a, b)
-                _dprint(3, 'trying icon path', trydir)
-                try:
-                    files = os.listdir(trydir)
-                except:
-                    continue
-                _dprint(3, len(files), 'entries in', trydir)
-                # loop over all files
-                nicons = 0
-                for f in files:
-                    (name, ext) = os.path.splitext(f)  # check extension
-                    if ext in ('.png', '.xpm', '.gif'):
-                        f = os.path.join(trydir, f)
-                        try:
-                            pm = QPixmap(f)
-                        except:
-                            _dprint(3, 'error loading icon', name, sys.exc_value())
-                            continue
-                        # register pixmap
-                        self._pixmaps[name] = QPixmapWrapper(pm)
-                        nicons += 1
-                        _dprint(4, 'loaded icon', f)
-                    else:
-                        _dprint(4, 'ignoring entry', f)
-                _dprint(1, nicons, 'icons loaded from ', trydir)
-                self._loaded = True
+#!/usr/bin/python
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2007
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+from PyQt5.Qt import QPixmap, QIcon
+
+
+from .utils import verbosity
+
+import sys
+
+_dbg = verbosity(0, name='pixmaps')
+_dprint = _dbg.dprint
+_dprintf = _dbg.dprintf
+
+# define a catch-all case for all missing icons
+_missing_icon_xpm = ["16 16 14 1",
+                     "# c None",
+                     "k c None",
+                     "d c None",
+                     "c c None",
+                     "b c None",
+                     "f c None",
+                     "l c None",
+                     "i c None",
+                     "j c None",
+                     "h c None",
+                     ". c None",
+                     "a c #000000",
+                     "g c #808080",
+                     "e c #ff0000",
+                     "....##aaabb#c#.#",
+                     "##db#aeeea##c###",
+                     "f#gg#aeeeahgg#d#",
+                     ".#gggaeeeaggg#c#",
+                     "c##ggaeeeaggc#.#",
+                     "##hhgaeeeag#c###",
+                     "##h##aeeeahh##f#",
+                     "##hhhaeeeaihhh#.",
+                     ".c#hhaeeeahih#dc",
+                     "#jf#gaaaaagh#dfh",
+                     "##kggg#hbggglchh",
+                     "##gggbaaahggg#d#",
+                     "c.gg#aeeeahgg###",
+                     "###hhaeeea#h####",
+                     "#####aeeea######",
+                     "f#.#.jaaad.cccdj"]
+
+
+class QPixmapWrapper:
+    """QPixmapWrapper can defer initialization of a pixmap until the pixmap
+    is actually retrieved with the pm() or iconset() method for the first time.
+    This gets around the problem of not being able to create QPixmaps until a Qt
+    application has been initialized.
+    """
+
+    def __init__(self, pm=_missing_icon_xpm):
+        """Initialize wrapper with a pixmap or with an xpm string array"""
+        self._xpmstr = None
+        self._pm = None
+        self._icon = None
+        self.assign(pm)
+
+    def assign(self, pm):
+        """Reassign pixmap or xpm string array to wrapper"""
+        if isinstance(pm, QPixmap):
+            self._pm = pm
+        else:  # assume xpm string list to be decoded on-demand
+            self._xpmstr = pm
+            self._pm = None
+        self._icon = None
+
+    def pm(self):
+        """Get QPixmap from wrapper"""
+        if self._pm is None:
+            self._pm = QPixmap(self._xpmstr)
+        return self._pm
+
+    def icon(self):
+        """Get QIcon from wrapper"""
+        if self._icon is None:
+            self._icon = QIcon(self.pm())
+        return self._icon
+
+    # for compatibility with old code
+    iconset = icon
+
+
+exclaim = QPixmapWrapper(["14 14 3 1",
+                          "       c None",
+                          ".      c red",
+                          "X      c yellow",
+                          "              ",
+                          "     ....     ",
+                          "    ......    ",
+                          "    ......    ",
+                          "    ......    ",
+                          "    ......    ",
+                          "    ......    ",
+                          "     ....     ",
+                          "     ....     ",
+                          "      ..      ",
+                          "              ",
+                          "      ..      ",
+                          "     ....     ",
+                          "      ..      "])
+
+cancel = QPixmapWrapper(["16 16 5 1",
+                         "p c #800000",
+                         ". c #400000",
+                         "X c #FF0000",
+                         "o c #C00000",
+                         "  c None",
+                         "                ",
+                         "                ",
+                         "            X   ",
+                         "    XX     Xoo  ",
+                         "   XooXX  Xoo.  ",
+                         "     pooXooo.   ",
+                         "      poooo.    ",
+                         "       XooX     ",
+                         "      XoooX     ",
+                         "     Xo. poX    ",
+                         "     X.   po    ",
+                         "    Xo     po   ",
+                         "    X.      o   ",
+                         "    X           ",
+                         "                ",
+                         "                "])
+
+check = QPixmapWrapper(["16 14 8 1",
+                        "  c #000000",
+                        ". c #400000",
+                        "X c None",
+                        "o c #00C000",
+                        "O c #008000",
+                        "+ c #C0FFC0",
+                        "@ c #004000",
+                        "# c None",
+                        "XXXXXXXXXXXXXXX+",
+                        "XXXXXXXXXXXXXX+o",
+                        "XXXXXXXXXXXXX+oO",
+                        "XXXXXXXXXXXX+oO@",
+                        "XXXXXXXXXXX+oO@ ",
+                        "XX+OXXXXXX+oO@ X",
+                        "X+ooOXXXX+oO@.XX",
+                        " @OooOXX+oO@ XXX",
+                        "X @OooO+oO@.XXXX",
+                        "XX.@OoooO@.XXXXX",
+                        "XXX @OoO@ XXXXXX",
+                        "XXXX @O@ XXXXXXX",
+                        "XXXXX . XXXXXXXX",
+                        "XXXXXXXXXXXXXXXX"])
+
+pause_normal = QPixmapWrapper(["16 16 95 2",
+                               "   c None",
+                               " . c #CDDAF4",
+                               " X c #3A64B3",
+                               " o c #4887FC",
+                               " O c #3B66B7",
+                               " + c #3269CF",
+                               " @ c #6696EE",
+                               " # c #5183E0",
+                               " $ c #6494EC",
+                               " % c #C4D4F1",
+                               " & c #6C94E0",
+                               " * c #3269D2",
+                               " = c #3B80FF",
+                               " - c #90B1EC",
+                               " ; c #3B65B3",
+                               " : c #3472E4",
+                               " > c #656565",
+                               " , c #5E88D5",
+                               " < c #4686FC",
+                               " 1 c #4A7FE2",
+                               " 2 c #A3BCEA",
+                               " 3 c #3569CA",
+                               " 4 c #4987F8",
+                               " 5 c #4E6286",
+                               " 6 c #B8CCEE",
+                               " 7 c #3C81FF",
+                               " 8 c #3471E3",
+                               " 9 c #3C66B6",
+                               " 0 c #A8C2F5",
+                               " q c #3E70CF",
+                               " w c #326CD7",
+                               " e c #486190",
+                               " r c #7EA3E6",
+                               " t c #5789E4",
+                               " y c #3665BD",
+                               " u c #8FADE6",
+                               " i c #3269D0",
+                               " p c #DCE6F6",
+                               " a c #4D648E",
+                               " s c #3D82FF",
+                               " d c #8EADE8",
+                               " f c #4A80E4",
+                               " g c #356ACC",
+                               " h c #3368CA",
+                               " j c #5A8AE3",
+                               " k c #3D64AC",
+                               " l c #4980E6",
+                               " z c #6E95DC",
+                               " x c #3268CC",
+                               " c c #4888FC",
+                               " v c #4686FA",
+                               " b c #3467C4",
+                               " n c #D4E0F4",
+                               " m c #3472E5",
+                               " M c #EBF0FA",
+                               " N c #3776EB",
+                               " B c #8CACE5",
+                               " V c #326AD2",
+                               " C c #A1BAE9",
+                               " Z c #B9CCF0",
+                               " A c #B7CAEE",
+                               " S c #3765B9",
+                               " D c #3B66B6",
+                               " F c #5B88DC",
+                               " G c #6E99E8",
+                               " H c #3E62A5",
+                               " J c #3269CE",
+                               " K c #4687FC",
+                               " L c #4F6184",
+                               " P c #202020",
+                               " I c #3269D1",
+                               " U c #799FE5",
+                               " Y c #E4EBF8",
+                               " T c #326BD4",
+                               " R c #346ACC",
+                               " E c #3268CA",
+                               " W c #658EDB",
+                               " Q c #3572E4",
+                               " ! c #CBD9F3",
+                               " ~ c #3E71CF",
+                               " ^ c #E1E9F8",
+                               " / c #3268CD",
+                               " ( c #4083FF",
+                               " ) c #3766BE",
+                               " _ c #3873E0",
+                               " ` c #97B3E4",
+                               " ' c #8EACE5",
+                               " ] c #447CE5",
+                               " [ c #3676EB",
+                               " { c #F2F5FB",
+                               " } c #749DE9",
+                               " | c #8DACE7",
+                               ".  c #326AD3",
+                               ".. c #3469CB",
+                               ".X c None",
+                               "           I + / x E y          ",
+                               "       I * w m # F : T h S      ",
+                               "     I.  l 0 Y { { M Z t J D    ",
+                               "   i V $ n ^ ^ ^ ^ ^ ^ p U J H  ",
+                               "   + l % u u u . . u u u ! j b >",
+                               " x T - 6 P P P 6 6 P P P A `.  e",
+                               " x _ C 2 P P P 2 2 P P P 4 = 8 X",
+                               " x 1 B u P P P ' ' P P P 7 = [ O",
+                               " x ] G } P P P 7 v P P P 7 7 N 9",
+                               " E Q < < P P P 7 7 P P P s ( : k",
+                               " y T o c P P P 7 7 P P P K o.  L",
+                               "   h f @ P P P @ @ P P P @ f ) >",
+                               "   S R & r r r r r r r r &.. 5 >",
+                               "     ; g W | d d d d | W 3 a >  ",
+                               "       H b ~ , z z , q ) 5 >    ",
+                               "         > e X O 9 k L > >      "])
+
+pause_green = QPixmapWrapper(["16 16 94 2",
+                              "Qt c None",
+                              ".P c #ffff00",
+                              ".d c #3268ca",
+                              ".c c #3268cc",
+                              ".b c #3268cd",
+                              ".w c #3269ce",
+                              ".a c #3269cf",
+                              ".y c #3269d0",
+                              ".# c #3269d1",
+                              ".f c #3269d2",
+                              ".z c #326ad2",
+                              ".o c #326ad3",
+                              ".l c #326bd4",
+                              ".g c #326cd7",
+                              ".m c #3368ca",
+                              ".L c #3467c4",
+                              "#p c #3469cb",
+                              "#m c #346acc",
+                              ".Y c #3471e3",
+                              ".k c #3472e4",
+                              ".h c #3472e5",
+                              "#w c #3569ca",
+                              "#s c #356acc",
+                              "#a c #3572e4",
+                              ".e c #3665bd",
+                              ".4 c #3676eb",
+                              ".n c #3765b9",
+                              "#l c #3766be",
+                              "#. c #3776eb",
+                              ".T c #3873e0",
+                              ".Z c #3a64b3",
+                              "#r c #3b65b3",
+                              ".x c #3b66b6",
+                              ".5 c #3b66b7",
+                              ".X c #3b80ff",
+                              "## c #3c66b6",
+                              ".3 c #3c81ff",
+                              "#e c #3d64ac",
+                              "#c c #3d82ff",
+                              ".F c #3e62a5",
+                              "#B c #3e70cf",
+                              "#y c #3e71cf",
+                              "#d c #4083ff",
+                              ".6 c #447ce5",
+                              ".9 c #4686fa",
+                              "#b c #4686fc",
+                              "#h c #4687fc",
+                              ".S c #486190",
+                              "#f c #4887fc",
+                              "#g c #4888fc",
+                              ".p c #4980e6",
+                              ".W c #4987f8",
+                              ".0 c #4a7fe2",
+                              "#j c #4a80e4",
+                              "#x c #4d648e",
+                              "#q c #4e6286",
+                              "#i c #4f6184",
+                              ".i c #5183e0",
+                              ".v c #5789e4",
+                              ".K c #5a8ae3",
+                              ".j c #5b88dc",
+                              "#z c #5e88d5",
+                              ".A c #6494ec",
+                              ".M c #656565",
+                              "#t c #658edb",
+                              "#k c #6696ee",
+                              "#n c #6c94e0",
+                              "#A c #6e95dc",
+                              ".7 c #6e99e8",
+                              ".8 c #749de9",
+                              ".E c #799fe5",
+                              "#o c #7ea3e6",
+                              ".1 c #8cace5",
+                              "#u c #8dace7",
+                              ".2 c #8eace5",
+                              "#v c #8eade8",
+                              ".H c #8fade6",
+                              ".N c #90b1ec",
+                              ".R c #97b3e4",
+                              ".U c #a1bae9",
+                              ".V c #a3bcea",
+                              ".q c #a8c2f5",
+                              ".Q c #b7caee",
+                              ".O c #b8ccee",
+                              ".u c #b9ccf0",
+                              ".G c #c4d4f1",
+                              ".J c #cbd9f3",
+                              ".I c #cddaf4",
+                              ".B c #d4e0f4",
+                              ".D c #dce6f6",
+                              ".C c #e1e9f8",
+                              ".r c #e4ebf8",
+                              ".t c #ebf0fa",
+                              ".s c #f2f5fb",
+                              "QtQtQtQtQt.#.a.b.c.d.eQtQtQtQtQt",
+                              "QtQtQt.#.f.g.h.i.j.k.l.m.nQtQtQt",
+                              "QtQt.#.o.p.q.r.s.s.t.u.v.w.xQtQt",
+                              "Qt.y.z.A.B.C.C.C.C.C.C.D.E.w.FQt",
+                              "Qt.a.p.G.H.H.H.I.I.H.H.H.J.K.L.M",
+                              ".c.l.N.O.P.P.P.O.O.P.P.P.Q.R.o.S",
+                              ".c.T.U.V.P.P.P.V.V.P.P.P.W.X.Y.Z",
+                              ".c.0.1.H.P.P.P.2.2.P.P.P.3.X.4.5",
+                              ".c.6.7.8.P.P.P.3.9.P.P.P.3.3#.##",
+                              ".d#a#b#b.P.P.P.3.3.P.P.P#c#d.k#e",
+                              ".e.l#f#g.P.P.P.3.3.P.P.P#h#f.o#i",
+                              "Qt.m#j#k.P.P.P#k#k.P.P.P#k#j#l.M",
+                              "Qt.n#m#n#o#o#o#o#o#o#o#o#n#p#q.M",
+                              "QtQt#r#s#t#u#v#v#v#v#u#t#w#x.MQt",
+                              "QtQtQt.F.L#y#z#A#A#z#B#l#q.MQtQt",
+                              "QtQtQtQt.M.S.Z.5###e#i.M.MQtQtQt"])
+
+refresh = QPixmapWrapper(["16 16 7 1",
+                          "  c #000000",
+                          ". c #00FF00",
+                          "X c None",
+                          "o c #00C000",
+                          "O c #008000",
+                          "+ c #004000",
+                          "@ c None",
+                          "XXXXXX     XXXXX",
+                          "XXXX  .oo  + XXX",
+                          "XXX .ooO XX   XX",
+                          "XXX ooO XXXXX XX",
+                          "XX .oO XXXXXXX X",
+                          "XX ooO XXXXXXXXX",
+                          " ..ooooO XX  XXX",
+                          "X .oooO XX    XX",
+                          "XX .oO XX      X",
+                          "XXX O XX        ",
+                          "XXXX XXXXX    XX",
+                          "X XXXXXXXX    XX",
+                          "XX XXXXXX    XXX",
+                          "XX   XX      XXX",
+                          "XXX         XXXX",
+                          "XXXXX     XXXXXX"])
+
+pin_up = QPixmapWrapper(["16 16 5 1",
+                         "  c None",
+                         ". c #A0A0A0",
+                         "X c #707070",
+                         "o c #FFFFFF",
+                         "O c None",
+                         "                ",
+                         "                ",
+                         "                ",
+                         "      XX     X  ",
+                         "      XoX   XX  ",
+                         "      XooXXXoX  ",
+                         "ooooooX.o.o.oX  ",
+                         "......X.o.o.oX  ",
+                         "XXXXXXX..X.X.X  ",
+                         "      X.XXXXXX  ",
+                         "      XXX   XX  ",
+                         "      XX     X  ",
+                         "                ",
+                         "                ",
+                         "                ",
+                         "                "])
+
+pin_down = QPixmapWrapper(["16 16 5 1",
+                           "  c None",
+                           ". c #A0A0A0",
+                           "X c #707070",
+                           "o c #FFFFFF",
+                           "O c None",
+                           "                ",
+                           "                ",
+                           "        XXXX    ",
+                           "      XXooooX   ",
+                           "    XXXooooooX  ",
+                           "    XoXooo...X  ",
+                           "   XooXoo...XX  ",
+                           "   XooXXo..XXX  ",
+                           "   XooooXXXXX   ",
+                           "   Xooo....XX   ",
+                           "    Xo....XXX   ",
+                           "    X....XXX    ",
+                           "     XXXXXX     ",
+                           "                ",
+                           "                ",
+                           "                "])
+
+matrix = QPixmapWrapper(["16 16 4 1",
+                         "  c None",
+                         ". c None",
+                         "X c #800080",
+                         "o c None",
+                         "... ... ....... ",
+                         ".XXXX XXXX.XXXX ",
+                         ".X. X.X .X.X..X ",
+                         " X  X X  X X  X ",
+                         ".XXXX.XXXX.XXXX ",
+                         ". . . . . . . . ",
+                         ".XXXX.XXXX.XXXX ",
+                         " X  X X  X.X  X ",
+                         ".X..X.X..X.X..X ",
+                         ".XXXX XXXX.XXXX.",
+                         "... ... ... ... ",
+                         " XXXX XXXX XXXX ",
+                         ".X. X.X .X.X..X ",
+                         ".X. X.X .X.X. X ",
+                         ".XXXX.XXXX.XXXX ",
+                         "                "
+                         ])
+
+view_right = QPixmapWrapper(["16 16 48 1",
+                             "  c None",
+                             ". c #ADADAD",
+                             "X c #A5A5A5",
+                             "o c #A1A1A1",
+                             "O c #C1C10A",
+                             "+ c #FFFF85",
+                             "@ c #494949",
+                             "# c #FAFAFA",
+                             "$ c #F6F6F6",
+                             "% c #F2F2F2",
+                             "& c #F0F0F0",
+                             "* c #EEEEEE",
+                             "= c #ECECEC",
+                             "- c #EAEAEA",
+                             "; c #E8E8E8",
+                             ": c #E6E6E6",
+                             "> c #E4E4E4",
+                             ", c #E2E2E2",
+                             "< c #E0E0E0",
+                             "1 c #DADADA",
+                             "2 c #D6D6D6",
+                             "3 c #CCCCCC",
+                             "4 c #C8C8C8",
+                             "5 c #C6C6C6",
+                             "6 c #C0C000",
+                             "7 c #AEAEAE",
+                             "8 c #ACACAC",
+                             "9 c #A0A0A0",
+                             "0 c #585858",
+                             "q c #FFFFFF",
+                             "w c #FFFF00",
+                             "e c #FFFFC0",
+                             "r c #F9F9F9",
+                             "t c #F5F5F5",
+                             "y c #F3F3F3",
+                             "u c #F1F1F1",
+                             "i c #EDEDED",
+                             "p c #E9E9E9",
+                             "a c #E5E5E5",
+                             "s c #303030",
+                             "d c #E1E1E1",
+                             "f c #DFDFDF",
+                             "g c #D9D9D9",
+                             "h c #D3D3D3",
+                             "j c #CFCFCF",
+                             "k c #C9C9C9",
+                             "l c #C7C7C7",
+                             "z c None",
+                             "                ",
+                             " 0000000000000@ ",
+                             " 02gg1q0ohj3k5s ",
+                             " 0gyt$q08=;><5s ",
+                             " 0gtr#q0.ipadls ",
+                             " 01$#qq07*-:,4s ",
+                             " 0gtr#q0.ipadls ",
+                             " 0gyt$q08= +<5s ",
+                             " 02&u%q +- wf + ",
+                             " 0h=i*q0 w6w6ws ",
+                             " 0j;p-q0XOe+e6s ",
+                             " 03>a: +ww+q+ww+",
+                             " 0k<d,q096e+e6s ",
+                             " 055l4q0 w6w6ws ",
+                             " @sssss +s ws + ",
+                             "           +    "])
+
+view_split = QPixmapWrapper(["16 16 40 1",
+                             "  c None",
+                             ". c #A1A1A1",
+                             "X c #979797",
+                             "o c #494949",
+                             "O c #FAFAFA",
+                             "+ c #F6F6F6",
+                             "@ c #EEEEEE",
+                             "# c #ECECEC",
+                             "$ c #EAEAEA",
+                             "% c #E8E8E8",
+                             "& c #E6E6E6",
+                             "* c #E4E4E4",
+                             "= c #E2E2E2",
+                             "- c #E0E0E0",
+                             "; c #DEDEDE",
+                             ": c #DCDCDC",
+                             "> c #DADADA",
+                             ", c #D6D6D6",
+                             "< c #CCCCCC",
+                             "1 c #C8C8C8",
+                             "2 c #C6C6C6",
+                             "3 c #ACACAC",
+                             "4 c #585858",
+                             "5 c #FFFFFF",
+                             "6 c #F9F9F9",
+                             "7 c #F5F5F5",
+                             "8 c #F3F3F3",
+                             "9 c #EDEDED",
+                             "0 c #E9E9E9",
+                             "q c #E7E7E7",
+                             "w c #E5E5E5",
+                             "e c #303030",
+                             "r c #E1E1E1",
+                             "t c #DDDDDD",
+                             "y c #D9D9D9",
+                             "u c #D3D3D3",
+                             "i c #CFCFCF",
+                             "p c #C9C9C9",
+                             "a c #C7C7C7",
+                             "s c None",
+                             "                ",
+                             " 4444444444444o ",
+                             " 4,yy>543ui<p2e ",
+                             " 4y87+54.#%*-2e ",
+                             " 4y76O54.90wrae ",
+                             " 4>+O554.@$&=1e ",
+                             " 4555554.55555e ",
+                             " 4444444444444e ",
+                             " 43....4.....3e ",
+                             " 4u#9@54.q*rt2e ",
+                             " 4i%0$54.*r;:2e ",
+                             " 4<*w&54.r;::2e ",
+                             " 4p-r=54.t:::2e ",
+                             " 422a154X22222e ",
+                             " oeeeeeeeeeeeee ",
+                             "                "])
+
+remove = QPixmapWrapper(["16 16 15 1",
+                         "  c #000000",
+                         ". c #E4E4E4",
+                         "X c #DEDEDE",
+                         "o c #D4D4D4",
+                         "O c #CECECE",
+                         "+ c #BEBEBE",
+                         "@ c #6E6E6E",
+                         "# c #FFFFFF",
+                         "$ c #E9E9E9",
+                         "% c #D9D9D9",
+                         "& c #C9C9C9",
+                         "* c #C3C3C3",
+                         "= c #B9B9B9",
+                         "- c #B7B7B7",
+                         "; c None",
+                         "---------------#",
+                         "-@@@@@@@@@@@@@@#",
+                         "-@###########-@#",
+                         "-@#$$$$$$$$$$-@#",
+                         "-@#.. .... ..-@#",
+                         "-@#X   XX   X-@#",
+                         "-@#%%      %%-@#",
+                         "-@#ooo    ooo-@#",
+                         "-@#OOO    OOO-@#",
+                         "-@#&&      &&-@#",
+                         "-@#*   **   *-@#",
+                         "-@#++ ++++ ++-@#",
+                         "-@#==========-@#",
+                         "-@------------@#",
+                         "-@@@@@@@@@@@@@@#",
+                         "################"])
+
+eventnew = QPixmapWrapper(["16 16 7 1",
+                           "  c None",
+                           ". c #87852B",
+                           "X c #918F2E",
+                           "o c #FFFFFF",
+                           "O c #FFFF00",
+                           "+ c #FFFFC0",
+                           "@ c None",
+                           "                ",
+                           "                ",
+                           "        O       ",
+                           "   O    O.   O  ",
+                           "    O. +O. OO   ",
+                           "    OO.XOX+O.   ",
+                           "     +OOOOO.    ",
+                           "   ..XOo+oOX+   ",
+                           "  OOOOO+o+OOOOO ",
+                           "    +XOo+oOX..  ",
+                           "     .OOOOO+    ",
+                           "    .O+XOX.OO   ",
+                           "    OO .O+ .O   ",
+                           "   O   .O    O  ",
+                           "        O       ",
+                           "                "])
+
+view_tree = QPixmapWrapper(["16 16 5 1",
+                            "  c #000000",
+                            ". c None",
+                            "X c #303030",
+                            "o c #FFDCA8",
+                            "O c None",
+                            " ...............",
+                            " ...............",
+                            " ...XXX ........",
+                            " ...X.. ........",
+                            "   .X.o ..  .   ",
+                            " ...    ........",
+                            " ...............",
+                            " ...............",
+                            " ...............",
+                            " ...XXX ........",
+                            " ...X.. ........",
+                            "   .X.o ..  .   ",
+                            "....    ........",
+                            "................",
+                            "................",
+                            "................"])
+
+precplus = QPixmapWrapper(["16 16 3 1",
+                           "# c #000000",
+                           ". c None",
+                           "a c #ffffff",
+                           "........##...##.",
+                           "..#....##.#.##.#",
+                           ".##....##.#.##.#",
+                           "#####..##.#.##.#",
+                           ".##....##.#.##.#",
+                           "..#....##.#.##.#",
+                           "....##..##...##.",
+                           "....##..........",
+                           ".....#..########",
+                           "........#aaaaaaa",
+                           "........#aaa#aaa",
+                           "........#aaa#aaa",
+                           "........#a#####a",
+                           "........#aaa#aaa",
+                           "........#aaa#aaa",
+                           "........#aaaaaaa"])
+
+precminus = QPixmapWrapper(["16 16 3 1",
+                            "# c #000000",
+                            ". c None",
+                            "a c #ffffff",
+                            ".........##.....",
+                            "...#....##.#....",
+                            "...##...##.#....",
+                            "######..##.#....",
+                            "...##...##.#....",
+                            "...#....##.#....",
+                            ".....##..##.....",
+                            ".....##.........",
+                            "......#.########",
+                            "........#aaaaaaa",
+                            "........#aaaaaaa",
+                            "........#aaaaaaa",
+                            "........#a#####a",
+                            "........#aaaaaaa",
+                            "........#aaaaaaa",
+                            "........#aaaaaaa"])
+
+bars3d = QPixmapWrapper(["16 16 6 1",
+                         "# c #000000",
+                         "b c #00d300",
+                         "a c #00ff00",
+                         "d c #9595d6",
+                         "c c #c0c0ff",
+                         ". c None",
+                         "................",
+                         ".......###......",
+                         "......#aa#.###..",
+                         ".....#aa###aa#..",
+                         ".....###b#aa##..",
+                         ".....#a#####b#..",
+                         ".....##cc#a#b###",
+                         ".....#cc##a##aa#",
+                         "...#####d#a#aa##",
+                         "..#cc#c#d#a###b#",
+                         ".#cc##c#d##cc#b#",
+                         ".###d#c#d#cc##b#",
+                         ".#c#d#c#d###d##.",
+                         ".#c#d#c#d#c#d#..",
+                         ".#c#d#c#d#c##...",
+                         ".###########...."])
+
+areas3d = QPixmapWrapper(["16 16 6 1",
+                          "# c #000000",
+                          "a c #00d300",
+                          "b c #00ff00",
+                          "c c #9595d6",
+                          "d c #c0c0ff",
+                          ". c None",
+                          "......#.........",
+                          ".....#a#........",
+                          "....#aaa#.......",
+                          "...#b#aaa###....",
+                          "...#bb#aaaaa##..",
+                          "..#c#bb###aaaa#.",
+                          ".#ccc#bbbb##aa#.",
+                          "#d#ccc#bbbbb#a#.",
+                          "#dd#ccc#bbbb#aa#",
+                          "#ddd#ccc###b#aaa",
+                          "#dddd#ccccc###aa",
+                          "#ddddd###cccc##a",
+                          "#dddddddd##ccc##",
+                          "#dddddddddd#ccc#",
+                          "#ddddddddddd#c#.",
+                          "##############.."])
+
+treeviewoblique = QPixmapWrapper(["16 16 44 1",
+                                  "h c #000000",
+                                  ". c #FAF7F2",
+                                  "X c #E8D4BC",
+                                  "o c #FDFBF8",
+                                  "O c #F0E3D4",
+                                  "+ c #F7F0E8",
+                                  "@ c #EBDAC5",
+                                  "# c #F3E9DD",
+                                  "$ c #FAF6F1",
+                                  "% c #EAD7C0",
+                                  "& c #FDFCFA",
+                                  "* c #EDDDC9",
+                                  "= c #F3E8DC",
+                                  "- c #F9F5EF",
+                                  "; c #E7D2B9",
+                                  ": c #DCDCDC",
+                                  "> c #F6EEE5",
+                                  ", c #EAD8C2",
+                                  "< c #E6CFB4",
+                                  "1 c #F5EBE0",
+                                  "2 c #E9D5BD",
+                                  "3 c #FCFAF7",
+                                  "4 c #A0A0A0",
+                                  "5 c #F2E6D9",
+                                  "6 c #F8F3EC",
+                                  "7 c #808080",
+                                  "8 c #EFE1CF",
+                                  "9 c #F5ECE2",
+                                  "0 c #E5CDB1",
+                                  "q c #FEFDFB",
+                                  "w c #585858",
+                                  "e c #F1E5D7",
+                                  "r c #F8F2EB",
+                                  "t c #FFFFFF",
+                                  "y c #EFE0CE",
+                                  "u c #FBF8F4",
+                                  "i c #303030",
+                                  "p c #EFE2D1",
+                                  "a c #F1E4D6",
+                                  "s c #F7F1E9",
+                                  "d c #FEFEFD",
+                                  "f c #C3C3C3",
+                                  "g c #EEDFCC",
+                                  "  c None",
+                                  "         ii     ",
+                                  "       iw.ri    ",
+                                  "     iwt3-+w    ",
+                                  "   iwttqu6>#i   ",
+                                  " iw:tttous7hw   ",
+                                  "itthtowsshfe8i  ",
+                                  "itt7:hhw1==Ogw  ",
+                                  " wtthhhf+15p*,i ",
+                                  " itt7:u6>#yy7 w ",
+                                  "  wtth$ow#*h4X<i",
+                                  "  itd7:hhwg%%;0i",
+                                  "   w&.hhhfg@2wi ",
+                                  "   i3-+15p*wi   ",
+                                  "    w6>#awi     ",
+                                  "    is9wi       ",
+                                  "     ii         "])
+
+reload_slick = QPixmapWrapper(["16 16 143 2",
+                               "   c None",
+                               " . c #CDDAF4",
+                               " X c #3A64B3",
+                               " o c #E4ECFA",
+                               " O c #4887FC",
+                               " + c #9CB6E8",
+                               " @ c #3B66B7",
+                               " # c #8AACEA",
+                               " $ c #BAD0F8",
+                               " % c #3269CF",
+                               " & c #B4CAF2",
+                               " * c #6696EE",
+                               " = c #5183E0",
+                               " - c #6494EC",
+                               " ; c #E9ECF1",
+                               " : c #C4D4F1",
+                               " > c #6C94E0",
+                               " , c #3269D2",
+                               " < c #D6E0F2",
+                               " 1 c #3B80FF",
+                               " 2 c #90B1EC",
+                               " 3 c #3B65B3",
+                               " 4 c #C6D3EC",
+                               " 5 c #FAFBFE",
+                               " 6 c #CAD4E6",
+                               " 7 c #3472E4",
+                               " 8 c #6C9BF0",
+                               " 9 c #656565",
+                               " 0 c #5E88D5",
+                               " q c #636363",
+                               " w c #5F5F5F",
+                               " e c #C2D4F5",
+                               " r c #4686FC",
+                               " t c #B1CAF8",
+                               " y c #699CFA",
+                               " u c #A3B7DD",
+                               " i c #4A7FE2",
+                               " p c #A3BCEA",
+                               " a c #3569CA",
+                               " s c #4E6286",
+                               " d c #B8CCEE",
+                               " f c #3C81FF",
+                               " g c #3765B8",
+                               " h c #3663B7",
+                               " j c #81A5E6",
+                               " k c #3471E3",
+                               " l c #3C66B6",
+                               " z c #3B66B5",
+                               " x c #A8C2F5",
+                               " c c #92AFE6",
+                               " v c #3E70CF",
+                               " b c #326CD7",
+                               " n c #CBD5E9",
+                               " m c #F6F8FC",
+                               " M c #486190",
+                               " N c #7EA3E6",
+                               " B c #5789E4",
+                               " V c #83ACF8",
+                               " C c #EEF0F4",
+                               " Z c #9ABEFE",
+                               " A c #3269D0",
+                               " S c #DCE6F6",
+                               " D c #4D648E",
+                               " F c #D8E2F2",
+                               " G c #8EADE8",
+                               " H c #4A80E4",
+                               " J c #356ACC",
+                               " K c #D9E4F6",
+                               " L c #3368CA",
+                               " P c #719FF3",
+                               " I c #5A8AE3",
+                               " U c #B5C9ED",
+                               " Y c #3D64AC",
+                               " T c #4980E6",
+                               " R c #3E61A3",
+                               " E c #6E95DC",
+                               " W c #3268CC",
+                               " Q c #4888FC",
+                               " ! c #3467C4",
+                               " ~ c #D4E0F4",
+                               " ^ c #3472E5",
+                               " / c #EBF0FA",
+                               " ( c #7AA6F8",
+                               " ) c #DEE7F7",
+                               " _ c #A4BCE9",
+                               " ` c #3776EB",
+                               " ' c #465D86",
+                               " ] c #8CACE5",
+                               " [ c #FDFEFE",
+                               " { c #A5BEED",
+                               " } c #326AD2",
+                               " | c #3A5FA5",
+                               ".  c #A1BAE9",
+                               ".. c #B9CCF0",
+                               ".X c #A3B9E1",
+                               ".o c #B7CAEE",
+                               ".O c #3765B9",
+                               ".+ c #CEDCF4",
+                               ".@ c #C9D3E5",
+                               ".# c #5B88DC",
+                               ".$ c #6E99E8",
+                               ".% c #9DC0FF",
+                               ".& c #5891FA",
+                               ".* c #3E62A5",
+                               ".= c #3269CE",
+                               ".- c #585858",
+                               ".; c #4F6184",
+                               ".: c #7CA1E5",
+                               ".> c #525252",
+                               "., c #3B63AF",
+                               ".< c #FFFFFF",
+                               ".1 c #3269D1",
+                               ".2 c #84A6E6",
+                               ".3 c #799FE5",
+                               ".4 c #EDF0F7",
+                               ".5 c #B2C5E8",
+                               ".6 c #E4EBF8",
+                               ".7 c #326BD4",
+                               ".8 c #E5E8EF",
+                               ".9 c #346ACC",
+                               ".0 c #3268CA",
+                               ".q c #658EDB",
+                               ".w c #3572E4",
+                               ".e c #D4DEF2",
+                               ".r c #CBD9F3",
+                               ".t c #3E71CF",
+                               ".y c #E1E9F8",
+                               ".u c #F7F9FD",
+                               ".i c #3268CD",
+                               ".p c #4083FF",
+                               ".a c #3766BE",
+                               ".s c #9AB5E7",
+                               ".d c #3873E0",
+                               ".f c #97B3E4",
+                               ".g c #447CE5",
+                               ".h c #3676EB",
+                               ".j c #F2F5FB",
+                               ".k c #6C98EB",
+                               ".l c #8DACE7",
+                               ".z c #326AD3",
+                               ".x c #3469CB",
+                               ".c c #4F8AF6",
+                               ".v c None",
+                               "          .1 %.i W.0 h 9        ",
+                               "      .1 , b ^ =.# 7.7 L g.-    ",
+                               "    .1.z T x.6.j.j /.. B.= z.>  ",
+                               "   A } - ~.y F n < ).y S.3.= R.>",
+                               "   % T : . 6.8.< C.e . ..r I ! 9",
+                               " W.7 2 d.@.<.<.<.< K d d.o.f.z M",
+                               " W.d. .X.< [.o.s _ + p U ( 1 k X",
+                               " W i ].5.<.+ c c u 4.<.<.% 1.h @",
+                               " W.g.$ {.< t.c #.<.<.<.< Z f ` l",
+                               ".0.w r 8.< m y.&.4.<.<.< V.p 7 Y",
+                               " h.7 O Q $.<.< ;.<.<.<.< P O.z.;",
+                               " 9 L H * * &.u.< 5 e o.u.k H.a 9",
+                               "  .O.9 > N N N.2 N N.: j >.x s 9",
+                               "   9 3 J.q.l G G G G.l.q a D 9 9",
+                               "     9.* !.t 0 E E 0 v.a s 9 9  ",
+                               "      .> q ' |., l Y.; w.>.>    "])
+
+publish = QPixmapWrapper(["16 16 13 1",
+                          "j c #000000",
+                          "# c #000000",
+                          "k c #303030",
+                          "a c #404000",
+                          "c c #585858",
+                          "e c #800000",
+                          "h c #808080",
+                          "i c #a0a0a0",
+                          "f c #c00000",
+                          "g c #c3c3c3",
+                          "d c #dcdcdc",
+                          ". c None",
+                          "b c #ffffff",
+                          ".....##.........",
+                          ".....abc#.......",
+                          "....#dbbdc#.....",
+                          "....cbbebbdc#...",
+                          "...#dbbbfebbdc#.",
+                          "..#db##bbbfebbg#",
+                          ".#db#bb##bbbbdh#",
+                          ".cbbb##bb##bbai#",
+                          "#bb##bb##bbbdc#h",
+                          "#dbbb##bb#bbhic#",
+                          "#hgdbbb##bbdcc#j",
+                          ".#cigdbbbbbhhhc#",
+                          "...#cigdbbdcca#.",
+                          ".....#cigdacc#..",
+                          ".......#chk##...",
+                          ".........##....."])
+
+publish_active = QPixmapWrapper(["16 16 13 1",
+                                 "j c #000000",
+                                 "# c #000000",
+                                 "k c #303030",
+                                 "a c #404000",
+                                 "c c #585858",
+                                 "e c #800000",
+                                 "h c #808080",
+                                 "i c #a0a0a0",
+                                 "f c #c00000",
+                                 "g c #c3c3c3",
+                                 "d c #dcdc00",
+                                 ". c None",
+                                 "b c #ffff00",
+                                 ".....##.........",
+                                 ".....abc#.......",
+                                 "....#dbbdc#.....",
+                                 "....cbbebbdc#...",
+                                 "...#dbbbfebbdc#.",
+                                 "..#db##bbbfebbg#",
+                                 ".#db#bb##bbbbdh#",
+                                 ".cbbb##bb##bbai#",
+                                 "#bb##bb##bbbdc#h",
+                                 "#dbbb##bb#bbhic#",
+                                 "#hgdbbb##bbdcc#j",
+                                 ".#cigdbbbbbhhhc#",
+                                 "...#cigdbbdcca#.",
+                                 ".....#cigdacc#..",
+                                 ".......#chk##...",
+                                 ".........##....."])
+
+node_any = QPixmapWrapper(["16 16 5 1",
+                           "  c None",
+                           ". c #808080",
+                           "X c #FFFF00",
+                           "o c #0000FF",
+                           "O c None",
+                           "                ",
+                           " o         o    ",
+                           "  o       o .   ",
+                           "   o     o .    ",
+                           "    o   o .     ",
+                           "   ooooooo      ",
+                           "   oXXXXXo.     ",
+                           "   oXXXXXo.     ",
+                           "   oXXXXXo.     ",
+                           "   ooooooo.     ",
+                           "    ..o....     ",
+                           "      o.        ",
+                           "      o.        ",
+                           "      o.        ",
+                           "       .        ",
+                           "                "])
+
+node_command = QPixmapWrapper(["16 16 7 1",
+                               "  c None",
+                               ". c #00FF00",
+                               "X c #000040",
+                               "o c #808080",
+                               "O c #A8DCFF",
+                               "+ c #0000FF",
+                               "@ c #000000",
+                               "                ",
+                               " +         +    ",
+                               "  +       + o   ",
+                               "   +     + o    ",
+                               "    +   + o     ",
+                               "   +++++++      ",
+                               "   +OOOOO+o     ",
+                               "   +OOOOO+....  ",
+                               "   +OOOOO..@@.. ",
+                               "   ++++++.@@.@.o",
+                               "    oo+oo.@@...o",
+                               "      +o .@@...o",
+                               "      +o .@@.@.o",
+                               "      +o ..@@..o",
+                               "      +o  ....oo",
+                               "       o   oooo "])
+
+node_eval = QPixmapWrapper(["16 16 7 1",
+                            "  c None",
+                            ". c #00FF00",
+                            "X c #000040",
+                            "o c #808080",
+                            "O c #A8DCFF",
+                            "+ c #0000FF",
+                            "@ c None",
+                            "                ",
+                            " +         +    ",
+                            "  +       + o   ",
+                            "   +     + o    ",
+                            "    + XXXXX     ",
+                            "   +++X...Xo    ",
+                            "   +OOX...Xo    ",
+                            "   +OXX...XX    ",
+                            "   +OX.....Xo   ",
+                            "   +++X...Xoo   ",
+                            "    oo+X.Xoo    ",
+                            "      +oXoo     ",
+                            "      +o o      ",
+                            "      +o        ",
+                            "       o        ",
+                            "                "])
+
+node_idle = QPixmapWrapper(["16 16 4 1",
+                            "  c None",
+                            ". c #000040",
+                            "X c #808080",
+                            "o c None",
+                            "                ",
+                            " .         .    ",
+                            "  .       . X   ",
+                            "   .     . X    ",
+                            "    .   . X     ",
+                            "   .......      ",
+                            "   .XXXXX.X     ",
+                            "   .X    .X     ",
+                            "   .X    .X     ",
+                            "   .......X     ",
+                            "    XX.XXXX     ",
+                            "      .X        ",
+                            "      .X        ",
+                            "      .X        ",
+                            "       X        ",
+                            "                "])
+
+node_poll = QPixmapWrapper(["16 16 7 1",
+                            "  c None",
+                            ". c #00FF00",
+                            "X c #000040",
+                            "o c #808080",
+                            "O c #A8DCFF",
+                            "+ c #0000FF",
+                            "@ c None",
+                            "                ",
+                            "XXXXX   XXXXX   ",
+                            "X..Xoo   X..Xo  ",
+                            "X...X   X...Xo  ",
+                            "XX...X X...XXo  ",
+                            "XoX.XX+XX.XoXo  ",
+                            " o XXOOOXXo  o  ",
+                            "   +OOOOO+o     ",
+                            "   +OOOOO+o     ",
+                            "   +++++++o     ",
+                            "    oo+oooo     ",
+                            "      +o        ",
+                            "      +o        ",
+                            "      +o        ",
+                            "       o        ",
+                            "                "])
+
+node_request = QPixmapWrapper(["16 16 7 1",
+                               "  c None",
+                               ". c #00FF00",
+                               "X c #000040",
+                               "o c #808080",
+                               "O c #A8DCFF",
+                               "+ c #0000FF",
+                               "@ c None",
+                               "                ",
+                               " +         +    ",
+                               "  +       + o   ",
+                               "   +     + o    ",
+                               "    +   + o     ",
+                               "   +++++++      ",
+                               "   +OOOOO+o     ",
+                               "   +OOXOO+o     ",
+                               "   +OX.XO+o     ",
+                               "   +X...X+o     ",
+                               "   X.....Xo     ",
+                               "   XX...XXo     ",
+                               "    X...Xoo     ",
+                               "    X...Xo      ",
+                               "    XXXXXo      ",
+                               "     ooooo      "])
+
+##breakpoint = QPixmapWrapper(["16 16 69 1",
+##                             "  c None",
+##                             ". c #D77570",
+##                             "X c #DF7F7B",
+##                             "o c #D27E78",
+##                             "O c #911414",
+##                             "+ c #6A3936",
+##                             "@ c #7D1414",
+##                             "# c #8E1414",
+##                             "$ c #411414",
+##                             "% c #7A1414",
+##                             "& c #B51616",
+##                             "* c #CA7169",
+##                             "= c #541A16",
+##                             "- c #C2271F",
+##                             "; c #D9A8A2",
+##                             ": c #642722",
+##                             "> c #3B1414",
+##                             ", c #B81515",
+##                             "< c #5C1F1A",
+##                             "1 c #EABEB9",
+##                             "2 c #C56460",
+##                             "3 c #961414",
+##                             "4 c #D97570",
+##                             "5 c #F1C8C6",
+##                             "6 c #F3D7D5",
+##                             "7 c #A71414",
+##                             "8 c #DB7975",
+##                             "9 c #D98680",
+##                             "0 c #BE2727",
+##                             "q c #6B1414",
+##                             "w c #1E1414",
+##                             "e c #901414",
+##                             "r c #612621",
+##                             "t c #D46C67",
+##                             "y c #B51414",
+##                             "u c #2F1414",
+##                             "i c #F6ECEB",
+##                             "p c #DA7D7A",
+##                             "a c #EABFBB",
+##                             "s c #AE7269",
+##                             "d c #C56058",
+##                             "f c #CB6661",
+##                             "g c #BB4744",
+##                             "h c #761414",
+##                             "j c #F3D8D7",
+##                             "k c #5C1D18",
+##                             "l c #291414",
+##                             "z c #F6E7E7",
+##                             "x c #E7B8B4",
+##                             "c c #F3DADA",
+##                             "v c #DD7772",
+##                             "b c #DA807C",
+##                             "n c #341414",
+##                             "m c #A61414",
+##                             "M c #A15C54",
+##                             "N c #B71414",
+##                             "B c #6A1414",
+##                             "V c #FFFFFF",
+##                             "C c #E6B9B5",
+##                             "Z c #DF8580",
+##                             "A c #B41414",
+##                             "S c #671414",
+##                             "D c #1A1414",
+##                             "F c #D7A29C",
+##                             "G c #C0231F",
+##                             "H c #672F2A",
+##                             "J c #CA655D",
+##                             "K c #703B36",
+##                             "L c None",
+##                             "    +HKr<k=     ",
+##                             "  V+zc61CFM>    ",
+##                             " V+V8b9o*2gen   ",
+##                             " +V4XvZ----7#l  ",
+##                             "+ip&&&&&&&&&&SD ",
+##                             "+j.VVVVVVVVVV%w ",
+##                             "+5tV--V&V-V&V@w ",
+##                             ":afVV-VAV&VVV@w ",
+##                             "<xJ&V-VAV-V,m@w ",
+##                             "k;dVV-VAOVV-m%w ",
+##                             "=s-&&-&A&&&m3BD ",
+##                             " $e7G-0-NAm3hu  ",
+##                             "  n#7y&ymmOhu   ",
+##                             "   nq%@@@%Bu    ",
+##                             "    DwwwwwD     ",
+##                             "                "])
+##
+##breakpoint_ss = QPixmapWrapper(["16 16 64 1",
+##                                "  c None",
+##                                ". c #D77570",
+##                                "X c #DF7F7B",
+##                                "o c #911414",
+##                                "O c #6A3936",
+##                                "+ c #7D1414",
+##                                "@ c #8E1414",
+##                                "# c #411414",
+##                                "$ c #7A1414",
+##                                "% c #B51616",
+##                                "& c #541A16",
+##                                "* c #C2271F",
+##                                "= c #D9A8A2",
+##                                "- c #642722",
+##                                "; c #3B1414",
+##                                ": c #5C1F1A",
+##                                "> c #EABEB9",
+##                                ", c #C56460",
+##                                "< c #961414",
+##                                "1 c #D97570",
+##                                "2 c #F1C8C6",
+##                                "3 c #F3D7D5",
+##                                "4 c #A71414",
+##                                "5 c #DB7975",
+##                                "6 c #D98680",
+##                                "7 c #BE2727",
+##                                "8 c #6B1414",
+##                                "9 c #1E1414",
+##                                "0 c #901414",
+##                                "q c #612621",
+##                                "w c #D46C67",
+##                                "e c #B51414",
+##                                "r c #2F1414",
+##                                "t c #F6ECEB",
+##                                "y c #DA7D7A",
+##                                "u c #EABFBB",
+##                                "i c #AE7269",
+##                                "p c #C56058",
+##                                "a c #CB6661",
+##                                "s c #BB4744",
+##                                "d c #761414",
+##                                "f c #F3D8D7",
+##                                "g c #5C1D18",
+##                                "h c #291414",
+##                                "j c #F6E7E7",
+##                                "k c #E7B8B4",
+##                                "l c #F3DADA",
+##                                "z c #DA807C",
+##                                "x c #341414",
+##                                "c c #A61414",
+##                                "v c #A15C54",
+##                                "b c #B71414",
+##                                "n c #6A1414",
+##                                "m c #FFFFFF",
+##                                "M c #E6B9B5",
+##                                "N c #B41414",
+##                                "B c #671414",
+##                                "V c #1A1414",
+##                                "C c #D7A29C",
+##                                "Z c #C0231F",
+##                                "A c #672F2A",
+##                                "S c #CA655D",
+##                                "D c #703B36",
+##                                "F c None",
+##                                "    OADq:g&     ",
+##                                "  mOjl3>MCv;    ",
+##                                " mOm5z6pp,s0x   ",
+##                                " Om1Xppp***4@h  ",
+##                                "Otyppp%m%%%%%BV ",
+##                                "Of.ppemmeeeee$9 ",
+##                                "O2wp*eemeee%e+9 ",
+##                                "-uape*emeeeee+9 ",
+##                                ":kS%e*emeZeec+9 ",
+##                                "g=peeemmmZe*c$9 ",
+##                                "&ip%%*%N%%%c<nV ",
+##                                " #04Z*7*bNc<dr  ",
+##                                "  x@4e%eccodr   ",
+##                                "   x8$+++$nr    ",
+##                                "    V99999V     ",
+##                                "                "])
+##
+##breakpoint_delete = QPixmapWrapper(["16 16 68 1",
+##                                    "  c None",
+##                                    ". c #D77570",
+##                                    "X c #DF7F7B",
+##                                    "o c #D27E78",
+##                                    "O c #911414",
+##                                    "+ c #6A3936",
+##                                    "@ c #7D1414",
+##                                    "# c #8E1414",
+##                                    "$ c #411414",
+##                                    "% c #7A1414",
+##                                    "& c #B51616",
+##                                    "* c #CA7169",
+##                                    "= c #541A16",
+##                                    "- c #C2271F",
+##                                    "; c #D9A8A2",
+##                                    ": c #642722",
+##                                    "> c #3B1414",
+##                                    ", c #B81515",
+##                                    "< c #5C1F1A",
+##                                    "1 c #EABEB9",
+##                                    "2 c #C56460",
+##                                    "3 c #961414",
+##                                    "4 c #F1C8C6",
+##                                    "5 c #F3D7D5",
+##                                    "6 c #A71414",
+##                                    "7 c #DB7975",
+##                                    "8 c #D98680",
+##                                    "9 c #BE2727",
+##                                    "0 c #6B1414",
+##                                    "q c #1E1414",
+##                                    "w c #901414",
+##                                    "e c #612621",
+##                                    "r c #D46C67",
+##                                    "t c #B51414",
+##                                    "y c #2F1414",
+##                                    "u c #F6ECEB",
+##                                    "i c #DA7D7A",
+##                                    "p c #EABFBB",
+##                                    "a c #AE7269",
+##                                    "s c #C56058",
+##                                    "d c #CB6661",
+##                                    "f c #BB4744",
+##                                    "g c #761414",
+##                                    "h c #F3D8D7",
+##                                    "j c #5C1D18",
+##                                    "k c #291414",
+##                                    "l c #F6E7E7",
+##                                    "z c #E7B8B4",
+##                                    "x c #F3DADA",
+##                                    "c c #DD7772",
+##                                    "v c #DA807C",
+##                                    "b c #341414",
+##                                    "n c #A61414",
+##                                    "m c #A15C54",
+##                                    "M c #B71414",
+##                                    "N c #6A1414",
+##                                    "B c #FFFFFF",
+##                                    "V c #E6B9B5",
+##                                    "C c #DF8580",
+##                                    "Z c #B41414",
+##                                    "A c #671414",
+##                                    "S c #1A1414",
+##                                    "D c #D7A29C",
+##                                    "F c #C0231F",
+##                                    "G c #672F2A",
+##                                    "H c #CA655D",
+##                                    "J c #703B36",
+##                                    "K c #000000",
+##                                    "K   +GJe<j=   K ",
+##                                    " KB+lx51VDm> K  ",
+##                                    " BKB7v8o*2fwK   ",
+##                                    " +BKXcC----K#k  ",
+##                                    "+ui&K&&&&&K&&AS ",
+##                                    "+h.BBKBBBKBBB%q ",
+##                                    "+4rB--K&K-B&B@q ",
+##                                    ":pdBB-BKB&BBB@q ",
+##                                    "<zH&B-KZK-B,n@q ",
+##                                    "j;sBBKBZOKB-n%q ",
+##                                    "=a-&K-&Z&&Kn3NS ",
+##                                    " $wKF-9-MZnKgy  ",
+##                                    "  K#6t&tnnOgK   ",
+##                                    " K b0%@@@%Ny K  ",
+##                                    "K   SqqqqqS   K ",
+##                                    "                "])
+
+breakpoint = QPixmapWrapper(["16 16 43 1",
+                             ". c None",
+                             "c c #380202",
+                             "K c #410202",
+                             "# c #630000",
+                             "o c #690200",
+                             "O c #810000",
+                             "N c #890400",
+                             "M c #900700",
+                             "L c #980a00",
+                             "G c #9e6864",
+                             "H c #9f0d00",
+                             "E c #a71000",
+                             "D c #ac1404",
+                             "B c #ae1300",
+                             "x c #b41600",
+                             "z c #b51700",
+                             "t c #bb1900",
+                             "C c #bca5a5",
+                             "v c #bd1a00",
+                             "A c #bd2414",
+                             "k c #bfa9a9",
+                             "r c #c41c00",
+                             "p c #c41d00",
+                             "y c #c7b4b4",
+                             "q c #c7b5b5",
+                             "n c #c82004",
+                             "u c #cab8b8",
+                             "m c #cc2000",
+                             "w c #cc3626",
+                             "h c #d22300",
+                             "I c #d2c3c3",
+                             "e c #d32300",
+                             "i c #d83922",
+                             "b c #da2700",
+                             "s c #dd4a3c",
+                             "d c #e0442e",
+                             "F c #e2d7d7",
+                             "f c #e4dddd",
+                             "g c #e8e2e2",
+                             "a c #ea5a4d",
+                             "J c #f4f0f0",
+                             "l c #f5f3f3",
+                             "j c #ffffff",
+                             ".....######.....",
+                             "...##aaaaaa##...",
+                             "..#aabccbbbad#..",
+                             ".#aeccfgcceehi#.",
+                             ".#acjkllkjcmmno.",
+                             "#apcjqllqjcpprp#",
+                             "#stcjullujcvcvv#",
+                             "#wxcjyllyjccjcz#",
+                             "#ABcjyyyCjcjjcB#",
+                             "#DEcyjjjFujjGEE#",
+                             "#HHcjjjIJjjjKHH#",
+                             ".#LcjjjyjjjcLL#.",
+                             ".#MMcjjjjjcMMM#.",
+                             "..#NNcccccNNN#..",
+                             "...##OOOOOO##...",
+                             ".....######....."])
+
+forward_to = QPixmapWrapper(["16 15 52 1",
+                             ". c None",
+                             "a c None",
+                             "X c None",
+                             "W c None",
+                             "T c None",
+                             "Q c None",
+                             "M c None",
+                             "I c None",
+                             "E c None",
+                             "A c None",
+                             "v c None",
+                             "q c None",
+                             "k c None",
+                             "h c None",
+                             "e c None",
+                             "c c None",
+                             "# c #024266",
+                             "U c #034367",
+                             "V c #1b5f8e",
+                             "S c #266995",
+                             "P c #30739c",
+                             "O c #34769f",
+                             "L c #3b7da3",
+                             "R c #3f7fa6",
+                             "K c #4181a7",
+                             "H c #4586aa",
+                             "G c #4c8cad",
+                             "N c #4f8eb2",
+                             "D c #4f90b1",
+                             "J c #5998b9",
+                             "y c #5999b8",
+                             "C c #5a97b5",
+                             "z c #5a9ab8",
+                             "F c #63a2c0",
+                             "u c #64a4bf",
+                             "x c #6aa5be",
+                             "B c #6eabc7",
+                             "p c #6eadc6",
+                             "s c #6faec6",
+                             "o c #6faec7",
+                             "w c #79b5ce",
+                             "j c #79b7cd",
+                             "m c #7cb9ce",
+                             "t c #7db4c8",
+                             "g c #83c1d4",
+                             "r c #87c0d5",
+                             "d c #8ecadc",
+                             "n c #93c6d6",
+                             "l c #94ccdc",
+                             "i c #a1d2e0",
+                             "f c #a9d9e5",
+                             "b c #aedde9",
+                             "..##.aa.........",
+                             ".#bb#cca....aaa.",
+                             ".#bdb#eca..a###a",
+                             ".#fggb#hca.#bbb#",
+                             ".#ijjjb#kca#lmm#",
+                             ".#nopppb#qc#rss#",
+                             ".#tuuuuub#v#wuu#",
+                             ".#xyzzzzz#A#Bzz#",
+                             ".#CDDDDDD#E#FDD#",
+                             ".#GHHHHH#II#JHH#",
+                             ".#KLLLL#MMa#NLL#",
+                             ".#OPPP#QQa.#RPP#",
+                             ".#SSS#TTa..aU##a",
+                             ".#VV#WWa....Xaa.",
+                             "..##.aa........."])
+
+breakpoint_delete = QPixmapWrapper(["16 16 39 1",
+                                    "# c None",
+                                    "d c #380202",
+                                    "G c #410202",
+                                    "a c #630000",
+                                    "m c #690200",
+                                    "K c #810000",
+                                    "J c #890400",
+                                    "I c #900700",
+                                    "H c #980a00",
+                                    "C c #9e6864",
+                                    "D c #9f0d00",
+                                    "B c #a71000",
+                                    "A c #ac1404",
+                                    "z c #ae1300",
+                                    "v c #b41600",
+                                    "x c #b51700",
+                                    "r c #bb1900",
+                                    "t c #bd1a00",
+                                    "y c #bd2414",
+                                    "i c #bfa9a9",
+                                    "p c #c41c00",
+                                    "n c #c41d00",
+                                    "w c #c7b4b4",
+                                    "o c #c7b5b5",
+                                    "l c #c82004",
+                                    "s c #cab8b8",
+                                    "u c #cc3626",
+                                    "E c #d2c3c3",
+                                    "h c #d32300",
+                                    "c c #da2700",
+                                    "q c #dd4a3c",
+                                    "e c #e0442e",
+                                    "f c #e4dddd",
+                                    "g c #e8e2e2",
+                                    "b c #ea5a4d",
+                                    "F c #f4f0f0",
+                                    "j c #f5f3f3",
+                                    ". c #ffff00",
+                                    "k c #ffffff",
+                                    ".####aaaaaa####.",
+                                    "..#aabbbbbbaa#..",
+                                    "#..bbcddcccbe..#",
+                                    "#a..ddfgddhh..a#",
+                                    "#ab..ijjikd..lm#",
+                                    "abnd..jjok..npna",
+                                    "aqrdk..js..tdtta",
+                                    "auvdkw....ddkdxa",
+                                    "ayzdkww..kdkkdza",
+                                    "aABdwk....kkCBBa",
+                                    "aDDdk..EF..kGDDa",
+                                    "#aHd..kwkk..HHa#",
+                                    "#aI..kkkkkd..Ia#",
+                                    "##..JdddddJJ..##",
+                                    "#..aaKKKKKKaa..#",
+                                    "..###aaaaaa###.."])
+
+right_triangle = QPixmapWrapper([
+    "16 15 26 1",
+    ". c None",
+    "# c #024266",
+    "x c #1b5f8e",
+    "w c #266995",
+    "v c #30739c",
+    "u c #34769f",
+    "t c #3b7da3",
+    "s c #4181a7",
+    "r c #4586aa",
+    "q c #4c8cad",
+    "p c #4f90b1",
+    "m c #5999b8",
+    "o c #5a97b5",
+    "n c #5a9ab8",
+    "k c #64a4bf",
+    "l c #6aa5be",
+    "i c #6eadc6",
+    "h c #6faec7",
+    "f c #79b7cd",
+    "j c #7db4c8",
+    "d c #83c1d4",
+    "b c #8ecadc",
+    "g c #93c6d6",
+    "e c #a1d2e0",
+    "c c #a9d9e5",
+    "a c #aedde9",
+    ".....##.........",
+    "....#aa#........",
+    "....#aba#.......",
+    "....#cdda#......",
+    "....#efffa#.....",
+    "....#ghiiia#....",
+    "....#jkkkkka#...",
+    "....#lmnnnnn#...",
+    "....#opppppp#...",
+    "....#qrrrrr#....",
+    "....#stttt#.....",
+    "....#uvvv#......",
+    "....#www#.......",
+    "....#xx#........",
+    ".....##........."])
+
+right_2triangles = QPixmapWrapper([
+    "16 15 21 1",
+    ". c None",
+    "# c #024266",
+    "s c #266995",
+    "r c #30739c",
+    "q c #30739d",
+    "p c #3b7da3",
+    "o c #3c7da4",
+    "n c #4586aa",
+    "m c #4a88aa",
+    "l c #4f90b1",
+    "k c #5994b1",
+    "j c #5a9ab8",
+    "h c #64a4bf",
+    "i c #6ba2ba",
+    "f c #6eadc6",
+    "d c #79b7cd",
+    "g c #7fb3c7",
+    "b c #83c1d4",
+    "e c #94c5d5",
+    "c c #a5d5e2",
+    "a c #aedde9",
+    "................",
+    "..##.....##.....",
+    ".#aa#...#aa#....",
+    ".#aba#..#aba#...",
+    ".#cdda#.#cdda#..",
+    ".#efffa##efffa#.",
+    ".#ghhhha#ghhhha#",
+    ".#ijjjjj#ijjjjj#",
+    ".#klllll#klllll#",
+    ".#mnnnn##mnnnn#.",
+    ".#oppp#.#oppp#..",
+    ".#qrr#..#qrr#...",
+    ".#ss#...#ss#....",
+    "..##.....##.....",
+    "................"])
+
+down_triangle = QPixmapWrapper([
+    "15 16 17 1",
+    ". c None",
+    "# c #024266",
+    "o c #1a5f8e",
+    "n c #256895",
+    "m c #2f729c",
+    "l c #3a7ca3",
+    "k c #4485aa",
+    "j c #4f8fb1",
+    "i c #68a3bf",
+    "h c #79b0ca",
+    "g c #85bbd1",
+    "f c #93c5d7",
+    "e c #9ccedd",
+    "d c #a3d4e0",
+    "c c #a7d7e3",
+    "b c #abdae6",
+    "a c #aedde9",
+    "...............",
+    "...............",
+    "...............",
+    "...............",
+    ".#############.",
+    "#aaaaabcdefghi#",
+    "#jjjjjjjjjjjjj#",
+    ".#kkkkkkkkkkk#.",
+    "..#lllllllll#..",
+    "...#mmmmmmm#...",
+    "....#nnnnn#....",
+    ".....#ooo#.....",
+    "......###......",
+    "...............",
+    "...............",
+    "..............."])
+
+down_2triangles = QPixmapWrapper([
+    "15 16 15 1",
+    ". c None",
+    "# c #024266",
+    "m c #1a5f8e",
+    "l c #256895",
+    "k c #2f729c",
+    "j c #3a7ca3",
+    "i c #4485aa",
+    "h c #79b0ca",
+    "g c #85bbd1",
+    "f c #93c5d7",
+    "e c #9ccedd",
+    "d c #a3d4e0",
+    "c c #a7d7e3",
+    "b c #abdae6",
+    "a c #aedde9",
+    "...............",
+    "..###########..",
+    ".#aaaabcdefgh#.",
+    ".#iiiiiiiiiii#.",
+    "..#jjjjjjjjj#..",
+    "...#kkkkkkk#...",
+    "....#lllll#....",
+    ".....#mmm#.....",
+    "..###########..",
+    ".#aaaabcdefgh#.",
+    ".#iiiiiiiiiii#.",
+    "..#jjjjjjjjj#..",
+    "...#kkkkkkk#...",
+    "....#lllll#....",
+    ".....#mmm#.....",
+    "......###......"])
+
+pause = QPixmapWrapper([
+    "15 15 20 1",
+    ". c None",
+    "# c #024266",
+    "r c #034367",
+    "q c #30739c",
+    "o c #3b7da3",
+    "p c #3f7fa6",
+    "m c #4586aa",
+    "n c #4f8eb2",
+    "k c #4f90b1",
+    "l c #5998b9",
+    "i c #5a9ab8",
+    "j c #63a2c0",
+    "g c #64a4bf",
+    "h c #6eabc7",
+    "e c #6faec6",
+    "f c #79b5ce",
+    "c c #7cb9ce",
+    "d c #87c0d5",
+    "b c #94ccdc",
+    "a c #aedde9",
+    "...............",
+    "...............",
+    "...###...###...",
+    "..#aaa#.#aaa#..",
+    "..#bcc#.#bcc#..",
+    "..#dee#.#dee#..",
+    "..#fgg#.#fgg#..",
+    "..#hii#.#hii#..",
+    "..#jkk#.#jkk#..",
+    "..#lmm#.#lmm#..",
+    "..#noo#.#noo#..",
+    "..#pqq#.#pqq#..",
+    "...r##...r##...",
+    "...............",
+    "..............."])
+
+stop = QPixmapWrapper(["16 16 132 2",
+                       "Qt c None",
+                       ".# c #630000",
+                       ".D c #690200",
+                       "ab c #810000",
+                       "a# c #890300",
+                       "#7 c #890400",
+                       "#8 c #8a0501",
+                       "aa c #8c0804",
+                       "a. c #8c0a07",
+                       "#9 c #8e0e0b",
+                       "#Z c #8f0600",
+                       "#Y c #900700",
+                       "#4 c #920700",
+                       "#N c #930e05",
+                       "#3 c #96110b",
+                       "#D c #971508",
+                       "#s c #971c10",
+                       "#5 c #981a14",
+                       "#0 c #981c16",
+                       "#M c #990b01",
+                       "#X c #9a0e04",
+                       "#T c #9b1f17",
+                       "#i c #9e2011",
+                       "#B c #9f0d00",
+                       "#S c #9f180e",
+                       "#C c #a20e01",
+                       "#L c #a20f01",
+                       "#r c #a51504",
+                       "#2 c #a5332e",
+                       "#1 c #a53d38",
+                       "#A c #a71000",
+                       "#K c #a72114",
+                       "#6 c #a73e39",
+                       "#x c #a92617",
+                       "#q c #aa1100",
+                       "#z c #ab1100",
+                       "#y c #ac1200",
+                       "#p c #ac1404",
+                       "#h c #ad1804",
+                       "#R c #ad3a32",
+                       "#W c #ad4039",
+                       "#o c #ae1300",
+                       ".K c #af2711",
+                       "#H c #af4840",
+                       ".7 c #b02c19",
+                       "#f c #b31500",
+                       "#g c #b31600",
+                       ".y c #b32910",
+                       "#n c #b41600",
+                       "#d c #b51700",
+                       "#m c #b7220e",
+                       ".5 c #bb1900",
+                       "#l c #bb4e40",
+                       ".6 c #bc1a00",
+                       ".U c #bc2b14",
+                       ".3 c #bd1a00",
+                       "#e c #bd2414",
+                       ".J c #be3119",
+                       "#c c #bf230b",
+                       "#G c #bf6860",
+                       ".S c #c01b00",
+                       ".s c #c02407",
+                       "#Q c #c0716b",
+                       ".F c #c12104",
+                       ".T c #c31d01",
+                       ".Q c #c41d00",
+                       ".2 c #c42207",
+                       ".E c #c61f03",
+                       ".i c #c62707",
+                       ".o c #c82908",
+                       "#b c #c84632",
+                       ".C c #ca2205",
+                       ".P c #ca270b",
+                       ".v c #ca3214",
+                       ".x c #cb2504",
+                       ".p c #cc2705",
+                       ".4 c #cc3626",
+                       "#a c #cd6e60",
+                       ".1 c #ce452e",
+                       ".h c #d02301",
+                       ".j c #d02804",
+                       ".B c #d03516",
+                       "#t c #d0a7a3",
+                       ".O c #d15038",
+                       ".q c #d22300",
+                       "#E c #d2aba8",
+                       ".n c #d32904",
+                       ".w c #d62400",
+                       ".0 c #d67b6b",
+                       ".L c #d7aaa3",
+                       ".r c #d83922",
+                       "#j c #d9b7b3",
+                       ".X c #dbb8b3",
+                       ".b c #dc2903",
+                       ".z c #dcafa8",
+                       ".m c #dd2800",
+                       ".k c #dd2801",
+                       ".R c #dd4a3c",
+                       ".l c #de2800",
+                       ".f c #de2901",
+                       ".g c #e0442e",
+                       ".c c #e22a00",
+                       ".e c #e32a00",
+                       "#U c #e4c9c7",
+                       ".d c #e62b00",
+                       "#J c #e6cac7",
+                       ".8 c #e7d0cd",
+                       "#I c #e7d1d0",
+                       ".V c #e8c9c5",
+                       ".W c #e8d0cd",
+                       "#v c #e8d6d4",
+                       "#w c #e9d2d0",
+                       ".a c #ea5a4d",
+                       ".I c #eacac5",
+                       "#k c #ead7d4",
+                       ".G c #ecd1cc",
+                       ".t c #ecd5d1",
+                       ".u c #edd1cc",
+                       "#O c #f2e7e6",
+                       ".9 c #f2eeee",
+                       ".H c #f5f2f2",
+                       ".A c #f6e8e6",
+                       "#F c #f6ecec",
+                       "#. c #f6f2f2",
+                       "#P c #f7efee",
+                       "#u c #f7f4f4",
+                       ".Z c #f8edec",
+                       ".Y c #f8f4f4",
+                       ".M c #f8f6f6",
+                       ".N c #f9f0ee",
+                       "## c #f9f5f5",
+                       "#V c #fcfcfc",
+                       "QtQtQtQtQt.#.#.#.#.#.#QtQtQtQtQt",
+                       "QtQtQt.#.#.a.a.a.a.a.a.#.#QtQtQt",
+                       "QtQt.#.a.a.b.c.d.d.e.f.a.g.#QtQt",
+                       "Qt.#.a.h.i.j.k.l.m.n.o.p.q.r.#Qt",
+                       "Qt.#.a.s.t.u.v.w.x.y.z.A.B.C.DQt",
+                       ".#.a.E.F.G.H.I.J.K.L.M.N.O.P.Q.#",
+                       ".#.R.S.T.U.V.H.W.X.Y.Z.0.1.2.3.#",
+                       ".#.4.5.6.6.7.8.9#.###a#b#c.5#d.#",
+                       ".##e#f#g#h#i#j#..H#k#l#m#n#f#o.#",
+                       ".##p#q#r#s#t#u###v.H#w#x#y#z#A.#",
+                       ".##B#C#D#E.M#F#G#H#I#u#J#K#L#B.#",
+                       "Qt.##M#N#O#P#Q#R#S#T#U#V#W#X.#Qt",
+                       "Qt.##Y#Z#0#1#2#3#4#4#5#6#5#Y.#Qt",
+                       "QtQt.##7#8#9a.a#a#a##8aa#7.#QtQt",
+                       "QtQtQt.#.#abababababab.#.#QtQtQt",
+                       "QtQtQtQtQt.#.#.#.#.#.#QtQtQtQtQt"])
+
+roadsign_nolimit = QPixmapWrapper(["16 16 4 1",
+                                   "b c None",
+                                   ". c None",
+                                   "# c #585858",
+                                   "a c #ffffff",
+                                   ".....######.....",
+                                   "...##########...",
+                                   "..####aaaab###..",
+                                   ".###aaaaaa#a###.",
+                                   ".##aaaaaa#a#a##.",
+                                   "###aaaaa#a#a#b##",
+                                   "##aaaaa#a#a#aa##",
+                                   "##aaaa#a#a#aaa##",
+                                   "##aaa#a#a#aaaa##",
+                                   "##aa#a#a#aaaaa##",
+                                   "##b#a#a#aaaaa###",
+                                   ".##a#a#aaaaaa##.",
+                                   ".###a#aaaaaa###.",
+                                   "..###baaaa####..",
+                                   "...##########...",
+                                   ".....######....."])
+
+eject = QPixmapWrapper(["15 16 25 1",
+                        ". c None",
+                        "h c None",
+                        "# c #024266",
+                        "w c #074769",
+                        "u c #2d7099",
+                        "v c #2f729c",
+                        "s c #3a7ca2",
+                        "r c #3b7da3",
+                        "p c #4486a9",
+                        "o c #4788a9",
+                        "n c #4a8bac",
+                        "t c #4b8bab",
+                        "m c #4e8eaf",
+                        "l c #5292b2",
+                        "k c #5796b5",
+                        "q c #5998b7",
+                        "j c #5a99b7",
+                        "i c #5d9cba",
+                        "g c #5e9dbb",
+                        "f c #67a6c2",
+                        "e c #71afc8",
+                        "d c #7ab8cf",
+                        "c c #84c1d5",
+                        "b c #8ec9dc",
+                        "a c #aedde9",
+                        "...............",
+                        "......###......",
+                        ".....#aaa#.....",
+                        "....#abbbb#....",
+                        "...#acccccc#...",
+                        "..#adddddddd#..",
+                        ".#aeeeeeeeeee#.",
+                        "#affffffffffff#",
+                        "#ggggggggggggg#",
+                        "h#############h",
+                        "hhhhhhhhhhhhhhh",
+                        ".#############.",
+                        "#gijklmnoppppp#",
+                        "#qrsssssssssss#",
+                        "#tuvvvvvvvvvvv#",
+                        ".w############."])
+
+file_open = QPixmapWrapper(["16 16 223 2",
+                            "bB c None",
+                            "bC c None",
+                            "bm c None",
+                            "ba c None",
+                            "aY c None",
+                            ".x c None",
+                            ".y c None",
+                            ".O c None",
+                            ".N c None",
+                            ".w c None",
+                            ".M c None",
+                            ".o c None",
+                            ".d c None",
+                            ".# c None",
+                            ".v c None",
+                            ".m c None",
+                            ".n c None",
+                            ".c c None",
+                            ".e c None",
+                            ".b c None",
+                            ".l c None",
+                            ".a c None",
+                            ".g c None",
+                            ".p c None",
+                            ".f c None",
+                            "Qt c None",
+                            "aI c #0013a9",
+                            "bl c #000ca4",
+                            ".E c #4e64c0",
+                            ".h c #5d68bb",
+                            "#f c #0014ae",
+                            "#g c #001aaf",
+                            ".k c #565fb7",
+                            ".2 c #011daf",
+                            "as c #0016a9",
+                            ".L c #414caf",
+                            ".q c #5d65b8",
+                            "b# c #000da6",
+                            "ac c #0017ac",
+                            "#e c #1a33ac",
+                            "aX c #0011a8",
+                            ".F c #6e75c0",
+                            "#Y c #0016ae",
+                            ".i c #6872c0",
+                            ".u c #5a63bb",
+                            ".D c #114acf",
+                            "bA c #0012a6",
+                            ".z c #215cd3",
+                            "aH c #0012ab",
+                            ".C c #4b83e7",
+                            ".B c #4e84e7",
+                            ".A c #588de8",
+                            "#s c #082ab8",
+                            "#r c #2f58d1",
+                            ".r c #8288cc",
+                            ".1 c #5d6bc3",
+                            "#I c #041fb6",
+                            "ar c #0012b0",
+                            "bk c #0f29ae",
+                            ".j c #727ac5",
+                            "aq c #000bbc",
+                            "aa c #000bbb",
+                            ".U c #6f82cf",
+                            "ab c #0010b5",
+                            "bn c #0431bf",
+                            "aG c #000cb9",
+                            "#q c #3a62d0",
+                            ".G c #a3a8dd",
+                            ".K c #9ba1db",
+                            "bb c #0333c3",
+                            "aZ c #083fca",
+                            "aJ c #2963d7",
+                            "#Z c #447cdd",
+                            "#J c #467fde",
+                            "ad c #4880de",
+                            "at c #4881de",
+                            "#t c #4980e0",
+                            "#h c #4b83e0",
+                            ".3 c #4f86e0",
+                            "b. c #3951bb",
+                            "bz c #1633aa",
+                            "by c #1d3aae",
+                            "bx c #2140b2",
+                            "bw c #2547b8",
+                            "bv c #2b4fbd",
+                            "bu c #3156c4",
+                            "bt c #375dca",
+                            "bo c #3967d3",
+                            "bs c #3c65d0",
+                            "br c #4169d2",
+                            "bq c #416bd5",
+                            "bp c #446ed5",
+                            "#H c #265de7",
+                            "aW c #152bb7",
+                            "#W c #1d59eb",
+                            "ap c #0015c0",
+                            "#X c #0018bc",
+                            "aF c #0019c8",
+                            "ao c #001ec9",
+                            "aE c #0024d2",
+                            "aD c #0029da",
+                            "an c #0630da",
+                            "a# c #0726c9",
+                            "aC c #083ce4",
+                            "a. c #164be3",
+                            "am c #164fed",
+                            "#9 c #2767f6",
+                            "aB c #2864f2",
+                            "#V c #2e7dfc",
+                            "al c #306af3",
+                            "aV c #3148c4",
+                            "#U c #3786fe",
+                            "aU c #3853ce",
+                            "#1 c #3870db",
+                            "#D c #396bdb",
+                            "aT c #3b5eda",
+                            "#8 c #3c80fb",
+                            "aS c #4067e1",
+                            "#o c #4670da",
+                            "#F c #4690fe",
+                            "aA c #4784f9",
+                            ".P c #4981e0",
+                            "#G c #4b96fe",
+                            "ak c #4c88fb",
+                            "#L c #4f8ee7",
+                            "aK c #5288e4",
+                            "au c #5590e3",
+                            "#E c #5798f9",
+                            "aR c #587de8",
+                            "#7 c #5998fc",
+                            "#C c #5a7bd8",
+                            "az c #5e9cfc",
+                            "#p c #6087e2",
+                            "af c #618fe7",
+                            "#M c #648de2",
+                            "ay c #64a4f9",
+                            "#S c #6599f3",
+                            "#T c #65a4fe",
+                            "a0 c #6c96e6",
+                            "#w c #6e8fdd",
+                            "#R c #6fa3f2",
+                            "aj c #6fabfe",
+                            "#n c #7491de",
+                            ".T c #76abee",
+                            "aQ c #789ff3",
+                            "#6 c #7db8fd",
+                            "#Q c #80aff3",
+                            "ae c #85bff5",
+                            "ax c #85ccfe",
+                            "#B c #86a0e7",
+                            "#A c #86a3e8",
+                            "aP c #88aef7",
+                            "#d c #8995d7",
+                            "#z c #89a8e8",
+                            "#y c #8dabeb",
+                            "#P c #8fbcf5",
+                            "#v c #8fbdf1",
+                            "ai c #8fc4fb",
+                            "#x c #92b2f0",
+                            ".6 c #95bbec",
+                            "#j c #97b6e8",
+                            "aO c #97c0fc",
+                            ".S c #9bdafc",
+                            "av c #9fc2f0",
+                            "#O c #9fc5f7",
+                            ".7 c #a1aadd",
+                            "ah c #a2d5f8",
+                            ".R c #a6defc",
+                            "#N c #a7c2f5",
+                            "#5 c #a9defe",
+                            "bj c #aaaaca",
+                            "aN c #afdafe",
+                            ".5 c #afe6fc",
+                            "bc c #b1c5f1",
+                            "bi c #b5b2cf",
+                            "a9 c #b5b2d6",
+                            "aL c #b8d8f8",
+                            ".Q c #b9ecfc",
+                            "aw c #b9edfe",
+                            "a8 c #bbb8da",
+                            "bh c #bfbdd7",
+                            "#0 c #bff2fe",
+                            "#k c #c4c3e4",
+                            "a7 c #c5c3e0",
+                            "#c c #c8cef3",
+                            "aM c #c8edfe",
+                            "#i c #c8fbfe",
+                            ".4 c #cafcfe",
+                            "#u c #cbfdfe",
+                            "bg c #cecae1",
+                            ".s c #ced0f0",
+                            "#K c #cffefe",
+                            "#3 c #d0e4f8",
+                            "a6 c #d1cee6",
+                            ".V c #d1d3ed",
+                            "#4 c #d5fbfd",
+                            "#2 c #daebfc",
+                            "a5 c #dbd7ec",
+                            "bf c #dcd8e9",
+                            ".t c #dcdef7",
+                            ".0 c #dedef7",
+                            "ag c #e1fefe",
+                            "a4 c #e2def1",
+                            "#b c #e3e2f8",
+                            ".Z c #e6e4fb",
+                            ".Y c #e6e6fb",
+                            "#a c #e8e8fb",
+                            ".H c #e9e9fb",
+                            "be c #ebe7f2",
+                            "a3 c #ece9f7",
+                            ".J c #ecebfc",
+                            "## c #eeeefe",
+                            ".8 c #f1f1fb",
+                            ".I c #f2f1fe",
+                            ".X c #f2f2fe",
+                            "a2 c #f6f3fc",
+                            "#. c #f7f7fe",
+                            "bd c #f9f6fb",
+                            "#m c #fbf6fe",
+                            ".W c #fcfcfe",
+                            "#l c #fdf8fe",
+                            "a1 c #fefdfe",
+                            ".9 c #fefefe",
+                            "QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
+                            ".#.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o",
+                            ".#.a.b.c.d.e.p.q.r.s.t.u.v.w.x.y",
+                            ".z.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O",
+                            ".P.Q.R.S.T.U.V.W.X.Y.Z.0.1.2.N.O",
+                            ".3.4.5.6.7.8.9#.###a#b#c#d#e#f#g",
+                            "#h#i#j#k.9.9.9.9#l#m#n#o#p#q#r#s",
+                            "#t#u#v#w#x#y#z#A#B#C#D#E#F#G#H#I",
+                            "#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y",
+                            "#Z#0#1#2#3#4#5#6#7#8#9a.a#aaabac",
+                            "adaeafagahaiajakalamanaoapaqaras",
+                            "atauavawaxayazaAaBaCaDaEaFaGaHaI",
+                            "aJaKaLaMaNaOaPaQaRaSaTaUaVaWaXaY",
+                            "aZa0a1.9a1a2a3a4a5a6a7a8a9b.b#ba",
+                            "bbbc.9.9.9.9bdbebfbgbhbibjbkblbm",
+                            "bnbobpbqbrbsbtbubvbwbxbybzbAbBbC"])
+
+file_save = QPixmapWrapper(["16 16 179 2",
+                            "Qt c None",
+                            ".m c #000028",
+                            "aW c #000028",
+                            "aK c #0e0e47",
+                            ".# c #a3a4c3",
+                            ".l c #101149",
+                            ".v c #070637",
+                            "aV c #000023",
+                            "av c #000028",
+                            "ah c #00002a",
+                            "#5 c #00002c",
+                            "#R c #01012f",
+                            "#D c #020230",
+                            "#r c #040433",
+                            "aU c #050530",
+                            "#d c #060636",
+                            ".1 c #080839",
+                            ".N c #0a0a3b",
+                            "aL c #100f46",
+                            "aT c #10103f",
+                            "aM c #101041",
+                            "aS c #121241",
+                            "aR c #131342",
+                            "aQ c #161643",
+                            "aP c #161645",
+                            "aO c #191947",
+                            "aN c #1b1b49",
+                            "ai c #3d4073",
+                            ".k c #3f4074",
+                            "#6 c #494c7d",
+                            ".j c #515180",
+                            "#S c #545786",
+                            ".i c #5a5a87",
+                            "#E c #5e608e",
+                            ".h c #64648f",
+                            "#s c #696b96",
+                            ".g c #6e6e98",
+                            "#e c #73769f",
+                            ".f c #7979a0",
+                            ".2 c #7f81a8",
+                            ".e c #8585aa",
+                            ".O c #8b8db1",
+                            ".d c #9595b6",
+                            ".F c #9697b9",
+                            ".c c #a1a0bf",
+                            ".w c #a1a2c3",
+                            ".b c #a3a3c3",
+                            ".a c #acaec9",
+                            ".E c #0f0f41",
+                            "aJ c #000025",
+                            "aw c #313267",
+                            ".n c #aeafcb",
+                            "aI c #000224",
+                            "au c #020b32",
+                            "ag c #060f39",
+                            "#4 c #0c1643",
+                            "#Q c #131d4c",
+                            "#C c #1b2756",
+                            "#q c #2b3765",
+                            ".A c #344f85",
+                            "aH c #353a64",
+                            "#c c #394473",
+                            ".0 c #3e4b79",
+                            "#b c #435482",
+                            "at c #454f79",
+                            "#p c #455582",
+                            "#a c #495b88",
+                            ".M c #4c5987",
+                            "af c #4f5880",
+                            ".r c #546b9b",
+                            "#3 c #59628b",
+                            "ax c #5b6690",
+                            "#o c #5b6892",
+                            "## c #5b6e9a",
+                            ".z c #5e75a1",
+                            "#n c #627099",
+                            "#P c #646d96",
+                            ".D c #6878a4",
+                            "aj c #6b7da4",
+                            "#. c #6d83ab",
+                            "#m c #6e7ca4",
+                            "#B c #6f799e",
+                            ".u c #737da8",
+                            "#7 c #7b8db1",
+                            ".9 c #7b8fb7",
+                            "#l c #7c8db1",
+                            "ay c #7f84a7",
+                            "aG c #8180a4",
+                            "aF c #8181a3",
+                            ".Z c #818faf",
+                            ".8 c #8599be",
+                            "ar c #8787b0",
+                            "as c #8988b2",
+                            "aE c #8b8baa",
+                            "#k c #8d9bbe",
+                            ".7 c #8ea1c4",
+                            "#T c #8fa1c3",
+                            "aq c #9191b8",
+                            "aD c #9292b2",
+                            "ad c #9595b9",
+                            "ak c #969fc0",
+                            ".q c #96a6c5",
+                            "ae c #9796bb",
+                            ".6 c #98a9ca",
+                            "ap c #9a9ac0",
+                            "#j c #9baaca",
+                            "aC c #9c9cb9",
+                            ".J c #9caecc",
+                            "ac c #9e9ec2",
+                            "#1 c #9e9ec3",
+                            "#F c #9eaece",
+                            "#2 c #a1a0c4",
+                            "#8 c #a1abca",
+                            ".5 c #a1b1d1",
+                            "ao c #a3a3c8",
+                            "aB c #a6a6c0",
+                            "#i c #a6b6d2",
+                            "ab c #a7a7c9",
+                            ".I c #a7b5d0",
+                            "#t c #a7b7d5",
+                            "#0 c #a8a8ca",
+                            "#N c #ababce",
+                            "#g c #abbbd6",
+                            "an c #acacd0",
+                            ".4 c #acbbd7",
+                            "#O c #afaecf",
+                            "#h c #afbdd8",
+                            "aA c #b0b0c9",
+                            "aa c #b1b1d1",
+                            "#Z c #b2b2d2",
+                            "#U c #b3bdd5",
+                            "#M c #b6b6d5",
+                            "am c #b6b6d7",
+                            "#f c #b7c4de",
+                            ".L c #b8c4d8",
+                            "a# c #bbbbd8",
+                            "#Y c #bcbcda",
+                            "#L c #c0c0dd",
+                            ".Y c #c0c9db",
+                            ".C c #c0cce0",
+                            "#G c #c2cbe0",
+                            "az c #c4c3d7",
+                            "a. c #c4c4e0",
+                            ".3 c #c4d0e7",
+                            "#X c #c5c5e1",
+                            ".B c #c5cee1",
+                            ".s c #c8d1e2",
+                            "#u c #c9d3e3",
+                            "#K c #cac9e4",
+                            "al c #cbcae7",
+                            ".P c #cbd6eb",
+                            ".X c #ccd6e6",
+                            "#A c #cecee2",
+                            "#z c #cecee3",
+                            "#W c #cfcfe9",
+                            ".W c #d1d8e8",
+                            ".Q c #d1daeb",
+                            "#J c #d3d3ec",
+                            ".V c #d3dbe9",
+                            ".t c #d5deed",
+                            ".G c #d5e0f1",
+                            ".U c #d6deec",
+                            "#9 c #dad8ee",
+                            "#y c #dadaeb",
+                            ".T c #dbe2f0",
+                            "#I c #dcdcf1",
+                            ".S c #e0e6f2",
+                            ".x c #e2ebf9",
+                            ".R c #e3e9f5",
+                            "#V c #e4e3f8",
+                            "#x c #e4e4f3",
+                            "#H c #e8e7f7",
+                            ".H c #ebf0f8",
+                            "#w c #eeeefb",
+                            ".K c #f0f3fb",
+                            ".o c #f2f8fe",
+                            ".y c #f5f9fe",
+                            "#v c #fbfbfe",
+                            ".p c #fefefe",
+                            "QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
+                            "Qt.#.a.b.c.d.e.f.g.h.i.j.k.l.mQt",
+                            "Qt.n.o.p.q.r.s.p.p.p.p.p.t.u.vQt",
+                            "Qt.w.x.y.z.A.B.p.p.p.p.p.C.D.EQt",
+                            "Qt.F.G.H.I.J.K.p.p.p.p.p.L.M.NQt",
+                            "Qt.O.P.Q.R.S.T.U.V.W.X.Y.Z.0.1Qt",
+                            "Qt.2.3.4.5.6.7.8.9#.###a#b#c#dQt",
+                            "Qt#e#f#g#h#i#j#k#l#m#n#o#p#q#rQt",
+                            "Qt#s#t#u.p.p#v#w#x#y#z#A#B#C#DQt",
+                            "Qt#E#F#G#H#I#J#K#L#M#N#O#P#Q#RQt",
+                            "Qt#S#T#U#V#W#X#Y#Z#0#1#2#3#4#5Qt",
+                            "Qt#6#7#8#9a.a#aaabacadaeafagahQt",
+                            "QtaiajakalamanaoapaqarasatauavQt",
+                            "QtawaxayazaAaBaCaDaEaFaGaHaIaJQt",
+                            "QtaKaLaMaNaOaPaQaRaSaTaTaUaVaWQt",
+                            "QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt"])
+
+reexecute = QPixmapWrapper(["16 16 23 1",
+                            "b c None",
+                            "d c None",
+                            "a c None",
+                            "# c None",
+                            ". c None",
+                            "c c #024266",
+                            "u c #1b5f8e",
+                            "t c #34769f",
+                            "s c #4182a7",
+                            "r c #4e8eb0",
+                            "o c #5696b5",
+                            "q c #5a9ab9",
+                            "p c #5c9cbb",
+                            "m c #67a6c2",
+                            "k c #74b2ca",
+                            "l c #75b1ca",
+                            "h c #81bed3",
+                            "j c #84bfd3",
+                            "g c #8ac4d7",
+                            "i c #91c8d9",
+                            "n c #98ccdd",
+                            "f c #a3d5e3",
+                            "e c #aedde9",
+                            "................",
+                            ".....##.........",
+                            "...abcccc.......",
+                            "..dcceeeecc.....",
+                            ".acefghhhijc..cc",
+                            ".cekkkkkkkkkccec",
+                            "bclmccccmmmmmnmc",
+                            "copc....cqqqqqqc",
+                            "crc......crrrrrc",
+                            "csc......csssssc",
+                            "acc.....cttttttc",
+                            ".ctc....ccccccc.",
+                            "..cuc..........a",
+                            "...ccc..........",
+                            ".....ccc........",
+                            "................"])
+
+reexecute_loop = QPixmapWrapper(["16 16 24 1",
+                                 "v c None",
+                                 "b c None",
+                                 "d c None",
+                                 "a c None",
+                                 "# c None",
+                                 ". c None",
+                                 "c c #024266",
+                                 "u c #1b5f8e",
+                                 "t c #34769f",
+                                 "s c #4182a7",
+                                 "r c #4e8eb0",
+                                 "o c #5696b5",
+                                 "q c #5a9ab9",
+                                 "p c #5c9cbb",
+                                 "m c #67a6c2",
+                                 "k c #74b2ca",
+                                 "l c #75b1ca",
+                                 "h c #81bed3",
+                                 "j c #84bfd3",
+                                 "g c #8ac4d7",
+                                 "i c #91c8d9",
+                                 "n c #98ccdd",
+                                 "f c #a3d5e3",
+                                 "e c #aedde9",
+                                 "................",
+                                 ".....##.........",
+                                 "...abcccc.......",
+                                 "..dcceeeecc.....",
+                                 ".acefghhhijc..cc",
+                                 ".cekkkkkkkkkccec",
+                                 "bclmccccmmmmmnmc",
+                                 "copc....cqqqqqqc",
+                                 "crc......crrrrrc",
+                                 "csc......csssssc",
+                                 "acc.....cttttttc",
+                                 ".ctc....ccccccc.",
+                                 "..cuc.....vccv.a",
+                                 "...ccc...cccv...",
+                                 ".....cccccvv....",
+                                 "................"])
+
+spigot = QPixmapWrapper(["16 16 177 2",
+                         ".i c None",
+                         ".v c None",
+                         ".u c None",
+                         "aF c None",
+                         "aL c None",
+                         "#c c None",
+                         "#b c None",
+                         ".F c None",
+                         ".G c None",
+                         ".R c None",
+                         ".k c None",
+                         ".j c None",
+                         ".# c None",
+                         "Qt c None",
+                         ".t c #000000",
+                         ".H c #bebfc9",
+                         "aC c #000000",
+                         "#1 c #000000",
+                         "ar c #000000",
+                         ".h c #0d0300",
+                         ".Q c #000000",
+                         "#a c #000000",
+                         "aU c #000000",
+                         "aD c #000000",
+                         "aE c #000000",
+                         ".1 c #000000",
+                         ".w c #170d00",
+                         ".2 c #cacad3",
+                         "aK c #000000",
+                         ".I c #555763",
+                         ".E c #000000",
+                         "aQ c #000000",
+                         "ax c #000000",
+                         ".S c #dbdbe3",
+                         "ay c #1a395b",
+                         ".J c #2c2f40",
+                         "am c #02050c",
+                         ".P c #000000",
+                         "aM c #29537c",
+                         "al c #000000",
+                         ".g c #3c1800",
+                         "aR c #060d23",
+                         "aT c #000000",
+                         ".a c #f9a302",
+                         "#B c #05050d",
+                         "#2 c #131321",
+                         "as c #0b0b13",
+                         "aq c #030203",
+                         "aG c #63bdfe",
+                         ".f c #432502",
+                         "aw c #040407",
+                         "#p c #29293d",
+                         "aS c #020726",
+                         "ae c #202034",
+                         ".x c #4d3100",
+                         ".K c #7d8292",
+                         "#d c #b7b7c5",
+                         "#M c #0d0d18",
+                         ".l c #e9a60b",
+                         "aB c #000326",
+                         "#0 c #0d0d18",
+                         "ad c #0d0d18",
+                         ".d c #7f520b",
+                         "ak c #0b0b13",
+                         "## c #292932",
+                         ".s c #4b2801",
+                         ".e c #af792d",
+                         ".D c #2a1600",
+                         ".y c #513804",
+                         "#N c #4d4d6d",
+                         "ap c #0d0f26",
+                         "at c #1a1a2a",
+                         "av c #161625",
+                         ".O c #16162d",
+                         ".0 c #1f2032",
+                         ".T c #dddde6",
+                         "aP c #000534",
+                         "a# c #19192a",
+                         ".c c #cf8f09",
+                         "au c #1f1f30",
+                         "#q c #a9a9b9",
+                         ".b c #eeaa0f",
+                         "#n c #868699",
+                         "#o c #737392",
+                         "aJ c #030f5d",
+                         "#C c #87879f",
+                         ".3 c #dddde3",
+                         "an c #576da4",
+                         "a. c #363651",
+                         ".z c #aa8e5c",
+                         ".C c #996709",
+                         "az c #a2d8fe",
+                         "#m c #9f9fb1",
+                         "aj c #38385a",
+                         "aN c #649eed",
+                         ".U c #dadae6",
+                         "#A c #7b7b98",
+                         "#9 c #3e3e64",
+                         ".V c #bcbccf",
+                         "af c #57577b",
+                         ".B c #aa925a",
+                         ".W c #c2c2d2",
+                         "aa c #666482",
+                         "#3 c #6c6c90",
+                         "#8 c #3c3c64",
+                         "#7 c #46466a",
+                         "ai c #474770",
+                         "#T c #4e4e72",
+                         "#W c #4f4f74",
+                         "ah c #4f4f76",
+                         "ao c #525b98",
+                         "ac c #55557a",
+                         "aO c #567ddd",
+                         "#Z c #58587b",
+                         ".Z c #58587d",
+                         "#6 c #5a5a7b",
+                         "ag c #5a5a80",
+                         "#U c #606081",
+                         "#L c #626284",
+                         "#5 c #636383",
+                         "#S c #676786",
+                         ".N c #686991",
+                         "aI c #6ba9fc",
+                         "#R c #6c6c8b",
+                         "#V c #727291",
+                         "#4 c #757592",
+                         "#. c #7c7c9a",
+                         "#X c #7d7d98",
+                         "ab c #83839b",
+                         "#P c #8686a0",
+                         "#Q c #8787a1",
+                         "#O c #9292aa",
+                         "#G c #9595ab",
+                         "#K c #9c9cb1",
+                         "aA c #9cb8eb",
+                         "aH c #9fd8fe",
+                         "#Y c #a0a0b3",
+                         ".6 c #a2a2b6",
+                         ".Y c #a4a4b7",
+                         ".9 c #a8a8bc",
+                         "#J c #a9a9bc",
+                         "#F c #aaaabd",
+                         ".7 c #acacbe",
+                         "#k c #afafc0",
+                         "#l c #afafc2",
+                         "#h c #b1b1c2",
+                         "#H c #b2b2c3",
+                         "#u c #b9b9c8",
+                         ".M c #bdc2d8",
+                         "#g c #c3c3d0",
+                         "#E c #c4c4d1",
+                         "#I c #cacad6",
+                         ".5 c #cbcbd7",
+                         "#r c #d0d0db",
+                         "#v c #d2d2dc",
+                         "#z c #d3d3de",
+                         ".A c #d8bd89",
+                         "#s c #dadae1",
+                         "#D c #dadae2",
+                         "#y c #dcdce6",
+                         "#i c #e7e7ec",
+                         "#e c #e7e7ed",
+                         ".4 c #e9e9ed",
+                         "#f c #ebebf0",
+                         ".X c #ececf0",
+                         "#j c #ececf1",
+                         ".L c #f1f6fe",
+                         ".r c #f2aa0f",
+                         ".q c #f3b816",
+                         "#t c #f7f7f8",
+                         "#x c #f7f7f9",
+                         ".8 c #f8f8f9",
+                         ".o c #fbb92a",
+                         ".p c #fdd061",
+                         ".n c #fecf17",
+                         ".m c #fee025",
+                         "#w c #fefefe",
+                         "Qt.#.#.#.a.b.c.d.e.f.g.h.i.i.i.i",
+                         "Qt.j.j.k.l.m.n.o.p.q.r.s.t.i.i.i",
+                         "Qt.u.u.v.w.x.y.z.A.B.C.D.E.i.i.i",
+                         "Qt.F.G.H.I.J.K.L.M.N.O.P.Q.i.i.i",
+                         "Qt.R.S.T.U.V.W.X.Y.Z.0.1.i.i.i.i",
+                         "Qt.2.3.4.5.6.7.8.9#.###a#b#c.i.i",
+                         "Qt#d#e#f#g#h#i#j#k#l#m#n#o#p.i.i",
+                         "Qt#q#r#g#s#t#f#u#v#w#x#y#z#A#B.i",
+                         "Qt#C#h.6#D#E#F#G#H#I#J#K#F#L#M.i",
+                         "Qt#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#0#1",
+                         "Qt#2#3#4#5#6#7#8#9a.a#aaabacad#1",
+                         "Qt.iaeafagahaiajakalamanaoapaqar",
+                         "Qt.i.iasatauavawax.iayazaAaBaC.i",
+                         "Qt.i.i.i.taDaE.Q.iaFaGaHaIaJaK.i",
+                         "Qt.i.i.i.i.i.i.i.iaLaMaNaOaPaQ.i",
+                         "Qt.i.i.i.i.i.i.i.i.i.iaRaSaTaU.i"])
+
+grey_cross = QPixmapWrapper(["16 16 97 2",
+                             "Qt c None",
+                             ".# c #2c2c2c",
+                             ".l c #313131",
+                             "#D c #393939",
+                             "#C c #1a1a1a",
+                             "#E c #1f1f1f",
+                             "#x c #212121",
+                             ".z c #232323",
+                             "#q c #262626",
+                             ".I c #272727",
+                             ".k c #292929",
+                             "#m c #2a2a2a",
+                             ".a c #2b2b2b",
+                             "#i c #2e2e2e",
+                             "#f c #313131",
+                             "#d c #343434",
+                             ".9 c #383838",
+                             ".3 c #3b3b3b",
+                             ".x c #404040",
+                             ".X c #414141",
+                             ".L c #484848",
+                             ".A c #4a4a4a",
+                             ".j c #4b4b4b",
+                             ".i c #4d4d4d",
+                             ".h c #4f4f4f",
+                             ".g c #505050",
+                             ".B c #525252",
+                             ".f c #555555",
+                             ".e c #575757",
+                             ".d c #595959",
+                             ".M c #5a5a5a",
+                             ".c c #5c5c5c",
+                             ".N c #5f5f5f",
+                             ".C c #606060",
+                             ".J c #636363",
+                             ".b c #656565",
+                             ".O c #676767",
+                             ".D c #6b6b6b",
+                             ".n c #6f6f6f",
+                             ".P c #717171",
+                             ".E c #737373",
+                             "#B c #777777",
+                             ".Q c #787878",
+                             ".F c #797979",
+                             ".Y c #7c7c7c",
+                             ".R c #7d7d7d",
+                             ".o c #7e7e7e",
+                             ".G c #7f7f7f",
+                             ".K c #818181",
+                             ".S c #828282",
+                             ".p c #858585",
+                             "#w c #868686",
+                             ".T c #888888",
+                             ".q c #8b8b8b",
+                             ".r c #8d8d8d",
+                             ".U c #8f8f8f",
+                             ".s c #919191",
+                             ".V c #929292",
+                             ".t c #959595",
+                             ".8 c #979797",
+                             ".u c #999999",
+                             "#v c #9c9c9c",
+                             "#a c #9e9e9e",
+                             ".v c #a0a0a0",
+                             "#b c #a4a4a4",
+                             ".W c #a8a8a8",
+                             ".2 c #aaaaaa",
+                             "#e c #ababab",
+                             "#c c #afafaf",
+                             "#k c #b0b0b0",
+                             ".H c #b4b4b4",
+                             "#n c #b9b9b9",
+                             "#h c #bababa",
+                             ".w c #bcbcbc",
+                             "#y c #bdbdbd",
+                             "#l c #bfbfbf",
+                             "#p c #c3c3c3",
+                             "#A c #c6c6c6",
+                             "#u c #c8c8c8",
+                             "#o c #c9c9c9",
+                             ".0 c #cccccc",
+                             "#t c #d2d2d2",
+                             ".1 c #d3d3d3",
+                             ".Z c #d5d5d5",
+                             ".y c #d7d7d7",
+                             ".m c #d9d9d9",
+                             "#z c #dadada",
+                             ".5 c #dcdcdc",
+                             ".7 c #dddddd",
+                             "#. c #dfdfdf",
+                             ".6 c #e2e2e2",
+                             "#r c #e4e4e4",
+                             "## c #e5e5e5",
+                             "#g c #e7e7e7",
+                             "#s c #e8e8e8",
+                             "#j c #ebebeb",
+                             ".4 c #ffffff",
+                             "Qt.#.a.b.c.d.e.f.g.h.i.j.i.k.lQt",
+                             ".#.c.m.n.o.p.p.q.r.s.t.u.v.w.x.l",
+                             ".a.y.z.A.B.e.C.b.D.E.F.G.p.q.H.I",
+                             ".J.K.L.M.N.O.D.P.Q.R.S.T.U.V.W.X",
+                             ".c.Y.B.N.Z.0.P.Q.R.S.m.1.V.u.2.3",
+                             ".d.p.e.O.y.4.5.R.S.6.4.7.8.v.2.9",
+                             ".e.p.C.D.P.5.4#..6.4##.8#a#b#c#d",
+                             ".f.q.b.P.Q.R#..4.4##.8#a.v#e.H#f",
+                             ".g.r.D.Q.R.S.6.4.4#g#a.v.W.H#h#i",
+                             ".h.s.E.R.S.6.4###g.4#j.W#k#l#l#m",
+                             ".i.t.F.S.m.4##.8#a#j.4#j#n#o#p#q",
+                             ".j.u.G.T#r.7.8#a.v.W#j#s#p#t#u.z",
+                             ".i#v#w.U.V.8#a.v.W#k#n#p#o.5#u#x",
+                             ".k#y.q.V.u.v#b#e.H#l#o#t#z.4.F.I",
+                             ".l.x.H.W.2.2#c.H#h#l#p#A#z#B#C#D",
+                             "Qt.l.I.X.3.9#d#f#i#m#q.z#E.I#DQt"])
+
+# Acknowledgement: the following open_lock and close_lock xpm files are
+# conversions from Joseph North's Sweetie BasePack 24-security-lock-open.png 
+# and 24-security-lock.png icons
+
+open_lock = QPixmapWrapper(["24 24 24 1",
+                            " 	c None",
+                            ".	c #838383",
+                            "+	c #6D6D6D",
+                            "@	c #A5A5A5",
+                            "#	c #E9E9E9",
+                            "$	c #EBEBEB",
+                            "%	c #A6A6A6",
+                            "&	c #7E7E7E",
+                            "*	c #B8B7AD",
+                            "=	c #F3F3F3",
+                            "-	c #F1F1F1",
+                            ";	c #EEEEEE",
+                            ">	c #ECECEC",
+                            ",	c #9F9F9F",
+                            "'	c #E7E7E7",
+                            ")	c #B2B2B2",
+                            "!	c #DFDFDF",
+                            "~	c #AEAEAE",
+                            "{	c #DADADA",
+                            "]	c #AAAAAA",
+                            "^	c #D5D5D5",
+                            "/	c #D1D1D1",
+                            "(	c #777777",
+                            "_	c #A4A4A4",
+                            "        .+++++++.       ",
+                            "       .@#######@.      ",
+                            "      .@$$$$$$$$$%.     ",
+                            "      +#$@+++++@$$+     ",
+                            "      &$$&*****+==+     ",
+                            "      &$$&     +--+     ",
+                            "       &&&     +;;+     ",
+                            "               +>>+     ",
+                            "               +##+     ",
+                            "     ++,,+++++++''+     ",
+                            "    +,,++,,,,,,,++,+    ",
+                            "    +))))))))))))))+    ",
+                            "    +!!!!!!!!!!!!!!+    ",
+                            "    +~~~~~~~~~~~~~~+    ",
+                            "    +{{{{{{{{{{{{{{+    ",
+                            "    +]]]]]]]]]]]]]]+    ",
+                            "    +^^^^^^^^^^^^^^+    ",
+                            "    +%%%%%%%%%%%%%%+    ",
+                            "    +//////////////+    ",
+                            "    +(____________(+    ",
+                            "    *++++++++++++++*    ",
+                            "     **************     ",
+                            "                        ",
+                            "                        "])
+
+close_lock = QPixmapWrapper(["24 24 24 1",
+                             " 	c None",
+                             ".	c #838383",
+                             "+	c #6D6D6D",
+                             "@	c #A7A7A7",
+                             "#	c #F8F8F8",
+                             "$	c #EBEBEB",
+                             "%	c #A5A5A5",
+                             "&	c #565656",
+                             "*	c #B8B7AD",
+                             "=	c #EFEFEF",
+                             "-	c #808080",
+                             ";	c #A1A1A1",
+                             ">	c #E9E9E9",
+                             ",	c #656565",
+                             "'	c #B5B5B5",
+                             ")	c #E3E3E3",
+                             "!	c #B1B1B1",
+                             "~	c #DDDDDD",
+                             "{	c #ACACAC",
+                             "]	c #D7D7D7",
+                             "^	c #A8A8A8",
+                             "/	c #D2D2D2",
+                             "(	c #777777",
+                             "_	c #A4A4A4",
+                             "                        ",
+                             "                        ",
+                             "                        ",
+                             "       .++++++++.       ",
+                             "      .@########@.      ",
+                             "     .@$$$$$$$$$$@.     ",
+                             "     +$$.++++++%$$+     ",
+                             "     +$$&******&$$+     ",
+                             "     +=$+      +$$+     ",
+                             "     +$$-@@@@@@-$$+     ",
+                             "    +;>>>,,,,,,>>>;+    ",
+                             "    +'++''''''''++'+    ",
+                             "    +))))))))))))))+    ",
+                             "    +!!!!!!!!!!!!!!+    ",
+                             "    +~~~~~~~~~~~~~~+    ",
+                             "    +{{{{{{{{{{{{{{+    ",
+                             "    +]]]]]]]]]]]]]]+    ",
+                             "    +^^^^^^^^^^^^^^+    ",
+                             "    +//////////////+    ",
+                             "    +(____________(+    ",
+                             "    *++++++++++++++*    ",
+                             "     **************     ",
+                             "                        ",
+                             "                        "])
+
+import os
+import os.path
+
+__icons_loaded = False
+
+
+def load_icons(appname, package=""):
+    """
+    load all icons found in path, subdirs '<package>/icons/<appname>'.
+    Package is optional.
+    """
+    # loop over system path
+    global __icons_loaded
+    if __icons_loaded:
+        return
+    icon_paths = ['/usr/local/share/meqtrees'] + sys.path
+    for path in icon_paths:
+        path = path or '.'
+        # for each entry, try <entry>/icons/<appname>'
+        trydir = os.path.join(path, package, 'icons', appname)
+        _dprint(3, 'trying icon path', trydir)
+        try:
+            files = os.listdir(trydir)
+        except:
+            continue
+        _dprint(3, len(files), 'entries in', trydir)
+        # loop over all files
+        nicons = 0
+        for f in files:
+            (name, ext) = os.path.splitext(f);  # check extension
+            if ext in ('.png', '.xpm', '.gif'):
+                f = os.path.join(trydir, f)
+                try:
+                    pm = QPixmap(f)
+                except:
+                    _dprint(3, 'error loading icon', name, sys.exc_value())
+                    continue
+                # register pixmap as global symbol using the supplied name
+                if name in globals():
+                    globals()[name].assign(pm)
+                else:
+                    globals()[name] = QPixmapWrapper(pm)
+                nicons += 1
+                _dprint(4, 'loaded icon', f)
+            else:
+                _dprint(4, 'ignoring entry', f)
+        _dprint(1, nicons, 'icons loaded from ', trydir)
+        __icons_loaded = True
+
+
+# define a pixmap access hook
+# if name is undefined, it will be inserted into globals 
+# as a default QPixmapWrapper containing the missing icon xpm. This may be overridden
+# later by load_icons() above. This allows apps to refer to icons before they're loaded.
+class __PixmapHook:
+    def __getattr__(self, name):
+        _dprint(4, 'returning icon', name)
+        return globals().setdefault(name, QPixmapWrapper())
+
+
+pixmaps = __PixmapHook()
+
+
+# define a Pixmap cache
+class PixmapCache:
+    def __init__(self, appname):
+        self._appname = appname
+        self._loaded = None
+        self._pixmaps = {}
+        self._pixmaps['_default'] = QPixmapWrapper()
+
+    def __getattr__(self, name):
+        # try to access attribute anyway, to see if we have one
+        try:
+            return dict.__getattr__(self, name)
+        except AttributeError:
+            pass
+        # try to load pixmaps
+        self._load()
+        # try to access pixmap
+        pm = self._pixmaps.get(name, None)
+        if pm:
+            return pm
+        else:
+            return QPixmapWrapper()
+
+    def _load(self):
+        """load all icons found in path, subdirs 'icons/appname'"""
+        # loop over system path
+        if self._loaded:
+            return
+        icon_paths = ['/usr/local/share/meqtrees'] + sys.path
+        for path in icon_paths:
+            path = path or '.'
+            # for each entry, try <entry>/icons/<appname>'
+            for a, b in [('icons', self._appname), (self._appname, 'icons')]:
+                trydir = os.path.join(path, a, b)
+                _dprint(3, 'trying icon path', trydir)
+                try:
+                    files = os.listdir(trydir)
+                except:
+                    continue
+                _dprint(3, len(files), 'entries in', trydir)
+                # loop over all files
+                nicons = 0
+                for f in files:
+                    (name, ext) = os.path.splitext(f)  # check extension
+                    if ext in ('.png', '.xpm', '.gif'):
+                        f = os.path.join(trydir, f)
+                        try:
+                            pm = QPixmap(f)
+                        except:
+                            _dprint(3, 'error loading icon', name, sys.exc_value())
+                            continue
+                        # register pixmap
+                        self._pixmaps[name] = QPixmapWrapper(pm)
+                        nicons += 1
+                        _dprint(4, 'loaded icon', f)
+                    else:
+                        _dprint(4, 'ignoring entry', f)
+                _dprint(1, nicons, 'icons loaded from ', trydir)
+                self._loaded = True
--- tigger-1.6.0.orig/TigGUI/kitties/utils.py
+++ tigger-1.6.0/TigGUI/kitties/utils.py
@@ -1,402 +1,402 @@
-#!/usr/bin/python
-
-# Copyright (C) 2002-2007
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import os
-import string
-import sys
-import traceback
-import weakref
-
-import os.path
-import re
-import time
-import types
-
-_time0 = time.time()
-
-
-class recdict(dict):
-    """A recdict is basically a dict whose contents may also be
-    accessed via attributes, using the rec.field notation.
-    """
-
-    def __getattr__(self, name):
-        if name.startswith('__'):
-            return dict.__getattr__(self, name)
-        # else try to access attribute anyway, to see if we have one
-        try:
-            return dict.__getattr__(self, name)
-        except AttributeError:
-            pass
-        return dict.__getitem__(self, name)
-
-    # __setattr__: sets entry in dict
-    def __setattr__(self, name, value):
-        if name.startswith('__'):
-            return dict.__setattr__(self, name, value)
-        return dict.__setitem__(self, name, value)
-
-    # __delattr__: deletes key
-    def __delattr__(self, name):
-        if name.startswith('__'):
-            return dict.__delattr__(self, name)
-        return dict.__delitem__(self, name)
-
-
-def collapseuser(path):
-    """If path begins with the home directory, replaces the start of the path with "~/". Essentially the reverse of os.path.expanduser()"""
-    home = os.path.join(os.path.expanduser("~"), "")
-    if path.startswith(home):
-        path = os.path.join("~", path[len(home):])
-    return path
-
-
-def type_maker(objtype, **kwargs):
-    def maker(x):
-        if isinstance(x, objtype):
-            return x
-        return objtype(x)
-
-    return maker
-
-
-def extract_stack(f=None, limit=None):
-    """equivalent to traceback.extract_stack(), but also works with psyco
-    """
-    if f is not None:
-        raise RuntimeError("Timba.utils.extract_stack: f has to be None, don't ask why")
-    # normally we can just use the traceback.extract_stack() function and
-    # cut out the last frame (which is just ourselves). However, under psyco
-    # this seems to return an empty list, so we use sys._getframe() instead
-    lim = limit
-    if lim is not None:
-        lim += 1
-    tb = traceback.extract_stack(None, lim)
-    if tb:
-        return tb[:-1]  # skip current frame
-    # else presumably running under psyco
-    return nonportable_extract_stack(f, limit)
-
-
-def nonportable_extract_stack(f=None, limit=None):
-    if f is not None:
-        raise RuntimeError("Timba.utils.nonportable_extract_stack: f has to be None, don't ask why")
-    tb = []
-    fr = sys._getframe(1)  # caller's frame
-    while fr and (limit is None or len(tb) < limit):
-        tb.insert(0, (fr.f_code.co_filename, fr.f_lineno, fr.f_code.co_name, None))
-        fr = fr.f_back
-    return tb
-
-
-_proc_status = '/proc/%d/status' % os.getpid()
-
-_scale = {'kB': 1024.0, 'mB': 1024.0 * 1024.0,
-          'KB': 1024.0, 'MB': 1024.0 * 1024.0}
-
-
-def _VmB(VmKey):
-    """Private.
-    """
-    global _proc_status, _scale
-    # get pseudo file  /proc/<pid>/status
-    try:
-        t = open(_proc_status)
-        v = t.read()
-        t.close()
-    except:
-        return 0.0  # non-Linux?
-    # get VmKey line e.g. 'VmRSS:  9999  kB\n ...'
-    i = v.index(VmKey)
-    v = v[i:].split(None, 3)  # whitespace
-    if len(v) < 3:
-        return 0.0  # invalid format?
-    # convert Vm value to bytes
-    return float(v[1]) * _scale[v[2]]
-
-
-def _memory(since=0.0):
-    """Return memory usage in bytes.
-    """
-    return _VmB('VmSize:') - since
-
-
-def _resident(since=0.0):
-    """Return resident memory usage in bytes.
-    """
-    return _VmB('VmRSS:') - since
-
-
-def _stacksize(since=0.0):
-    """Return stack size in bytes.
-    """
-    return _VmB('VmStk:') - since
-
-
-#
-# === class verbosity ===
-# Verbosity includes methods for verbosity levels and conditional printing
-#
-class verbosity:
-    _verbosities = {}
-    _levels = {}
-    _parse_argv = True
-
-    _timestamps = False
-    _timestamps_modulo = 0
-
-    _memstamps = True
-
-    @staticmethod
-    def enable_timestamps(enable=True, modulo=60):
-        verbosity._timestamps = enable
-        verbosity._timestamps_modulo = modulo
-
-    @staticmethod
-    def enable_memstamps(enable=True, modulo=60):
-        verbosity._memstamps = enable
-
-    @staticmethod
-    def timestamp():
-        if verbosity._timestamps:
-            hdr = "%5.2f " % ((time.time() - _time0) % verbosity._timestamps_modulo)
-        else:
-            hdr = ""
-        if verbosity._memstamps:
-            mem = _memory()
-            hdr += "%.1fGb " % (float(mem) / (1024 ** 3))
-        return hdr
-
-    @staticmethod
-    def set_verbosity_level(context, level):
-        verbosity._levels[context] = level
-        vv = verbosity._verbosities.get(context, None)
-        if vv:
-            vv.set_verbose(level)
-
-    @staticmethod
-    def disable_argv():
-        verbosity._parse_argv = False
-
-    def __init__(self, verbose=0, stream=None, name=None, tb=2):
-        if not __debug__:
-            verbose = 0
-        (self.verbose, self.stream, self._tb) = (verbose, stream, tb)
-        # setup name
-        if name:
-            self.verbosity_name = name
-        else:
-            if self.__class__ is verbosity:
-                raise RuntimeError("""When creating a verbosity object directly,
-          a name must be specified.""")
-            self.verbosity_name = name = self.__class__.__name__
-        # look for argv to override debug levels (unless they were already set via set_verbosity_level above)
-        if verbosity._levels:
-            self.verbose = verbosity._levels.get(name, 0)
-            print("Registered verbosity context: " + name + " = " + self.verbose)
-        elif verbosity._parse_argv:
-            # NB: sys.argv doesn't always exist -- e.g., when embedding Python
-            # it doesn't seem to be present.  Hence the check.
-            argv = getattr(sys, 'argv', None)
-            have_debug = False
-            if argv:
-                patt = re.compile('-d' + name + '=(.*)$')
-                for arg in argv[1:]:
-                    if arg.startswith('-d'):
-                        have_debug = True
-                    try:
-                        self.verbose = int(patt.match(arg).group(1))
-                    except:
-                        pass
-            if have_debug:
-                print("Registered verbosity context:" + name + "=" + str(self.verbose))
-        # add name to map
-        self._verbosities[name] = self
-
-    def __del__(self):
-        if self.verbosity_name in self._verbosities:
-            del self._verbosities[self.verbosity_name]
-
-    def dheader(self, tblevel=-2):
-        if self._tb:
-            tb = extract_stack()
-            try:
-                (filename, line, funcname, text) = tb[tblevel]
-            except:
-                return "%s%s (no traceback): " % (self.timestamp(), self.get_verbosity_name())
-            filename = filename.split('/')[-1]
-            if self._tb > 1:
-                return "%s%s(%s:%d:%s): " % (self.timestamp(), self.get_verbosity_name(), filename, line, funcname)
-            else:
-                return "%s%s(%s): " % (self.timestamp(), self.get_verbosity_name(), funcname)
-        else:
-            return "%s%s: " % (self.timestamp(), self.get_verbosity_name())
-
-    def dprint(self, level, *args):
-        if level <= self.verbose:
-            stream = self.stream or sys.stderr
-            stream.write(self.dheader(-3))
-            stream.write(string.join(list(map(str, args)), ' ') + '\n')
-
-    def dprintf(self, _level, _format, *args):
-        if _level <= self.verbose:
-            stream = self.stream or sys.stderr
-            try:
-                s = _format % args
-            except:
-                stream.write('dprintf format exception: ' + str(_format) + '\n')
-            else:
-                stream.write(self.dheader(-3))
-                stream.write(s)
-
-    def get_verbose(self):
-        return self.verbose
-
-    def set_verbose(self, verbose):
-        self.verbose = verbose
-
-    def set_stream(self, stream):
-        self.stream = stream
-
-    def set_verbosity_name(self, name):
-        self.verbosity_name = name
-
-    def get_verbosity_name(self):
-        return self.verbosity_name
-
-
-def _print_curry_exception():
-    (et, ev, etb) = sys.exc_info()
-    print("%s: %s" % (getattr(ev, '_classname', ev.__class__.__name__), getattr(ev, '__doc__', '')))
-    if hasattr(ev, 'args'):
-        print("  " + ' '.join(map(str, ev.args)))
-    print('======== exception traceback follows:')
-    traceback.print_tb(etb)
-
-
-# curry() composes callbacks and such
-# See The Python Cookbook recipe 15.7
-def curry(func, *args, **kwds):
-    def callit(*args1, **kwds1):
-        kw = kwds.copy()
-        kw.update(kwds1)
-        a = args + args1
-        # print(f"curry args {args}")
-        # print(f"curry args1 {args1}")
-        # print(f"curry args a {a}")
-        # print(f"curry kw {kw}")
-        try:
-            return func(*a, **kw)
-        except Exception as e:
-            print("======== curry: exception while calling a curried function")
-            print(f"  function:{func}")
-            print(f"  args: {a}")
-            print(f"  kwargs: {kw}")
-            print(f"  exception: {e}")
-            _print_curry_exception()
-            raise
-
-    return callit
-
-
-# Extended curry() version
-# The _argslice argument is applied to the *args of the
-# curry when it is subsequently called; this allows only a subset of the
-# *args to be passed to the curried function.
-def xcurry(func, _args=(), _argslice=slice(0), _kwds={}, **kwds):
-    kwds0 = _kwds.copy()
-    kwds0.update(kwds)
-    if not isinstance(_args, tuple):
-        _args = (_args,)
-
-    def callit(*args1, **kwds1):
-        a = _args + args1[_argslice]
-        kw = kwds0.copy()
-        kw.update(kwds1)
-        try:
-            return func(*a, **kw)
-        except:
-            print("======== xcurry: exception while calling a curried function")
-            print("  function:" + func)
-            print("  args:" + a)
-            print("  kwargs:" + kw)
-            _print_curry_exception()
-            raise
-
-    return callit
-
-
-class PersistentCurrier:
-    """This class provides curry() and xcurry() instance methods that
-    internally store the curries in a list. This is handy for currying
-    callbacks to be passed to, e.g., PyQt slots: since PyQt holds the callbacks
-    via weakrefs, using the normal curry() method to compose a callback
-    on-the-fly would cause it to disappear immediately.
-    """
-
-    def _add_curry(self, cr):
-        try:
-            self._curries.append(cr)
-        except AttributeError:
-            self._curries = [cr]
-        return cr
-
-    def curry(self, func, *args, **kwds):
-        # curry debug output
-        # print(f"curry: func {func} args {args} kwds {kwds}")
-        return self._add_curry(curry(func, *args, **kwds))
-
-    def xcurry(self, func, *args, **kwds):
-        return self._add_curry(xcurry(func, *args, **kwds))
-
-    def clear(self):
-        self._curries = []
-
-
-class WeakInstanceMethod:
-    # return value indicating call of a weakinstancemethod whose object
-    # has gone
-    DeadRef = object()
-
-    def __init__(self, method):
-        if type(method) != types.MethodType:
-            raise TypeError("weakinstancemethod must be constructed from an instancemethod")
-        (self.__func__, self.__self__) = (method.__func__, weakref.ref(method.__self__))
-
-    def __bool__(self):
-        return self.__self__() is not None
-
-    def __call__(self, *args, **kwargs):
-        obj = self.__self__()
-        if obj is None:
-            return self.DeadRef
-        return self.__func__(obj, *args, **kwargs)
-
-
-def weakref_proxy(obj):
-    """returns either a weakref.proxy for the object, or if object is already a proxy,
-    returns itself."""
-    if type(obj) in weakref.ProxyTypes:
-        return obj
-    else:
-        return weakref.proxy(obj)
+#!/usr/bin/python
+
+# Copyright (C) 2002-2007
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import os
+import string
+import sys
+import traceback
+import weakref
+
+import os.path
+import re
+import time
+import types
+
+_time0 = time.time()
+
+
+class recdict(dict):
+    """A recdict is basically a dict whose contents may also be
+    accessed via attributes, using the rec.field notation.
+    """
+
+    def __getattr__(self, name):
+        if name.startswith('__'):
+            return dict.__getattr__(self, name)
+        # else try to access attribute anyway, to see if we have one
+        try:
+            return dict.__getattr__(self, name)
+        except AttributeError:
+            pass
+        return dict.__getitem__(self, name)
+
+    # __setattr__: sets entry in dict
+    def __setattr__(self, name, value):
+        if name.startswith('__'):
+            return dict.__setattr__(self, name, value)
+        return dict.__setitem__(self, name, value)
+
+    # __delattr__: deletes key
+    def __delattr__(self, name):
+        if name.startswith('__'):
+            return dict.__delattr__(self, name)
+        return dict.__delitem__(self, name)
+
+
+def collapseuser(path):
+    """If path begins with the home directory, replaces the start of the path with "~/". Essentially the reverse of os.path.expanduser()"""
+    home = os.path.join(os.path.expanduser("~"), "")
+    if path.startswith(home):
+        path = os.path.join("~", path[len(home):])
+    return path
+
+
+def type_maker(objtype, **kwargs):
+    def maker(x):
+        if isinstance(x, objtype):
+            return x
+        return objtype(x)
+
+    return maker
+
+
+def extract_stack(f=None, limit=None):
+    """equivalent to traceback.extract_stack(), but also works with psyco
+    """
+    if f is not None:
+        raise RuntimeError("Timba.utils.extract_stack: f has to be None, don't ask why")
+    # normally we can just use the traceback.extract_stack() function and
+    # cut out the last frame (which is just ourselves). However, under psyco
+    # this seems to return an empty list, so we use sys._getframe() instead
+    lim = limit
+    if lim is not None:
+        lim += 1
+    tb = traceback.extract_stack(None, lim)
+    if tb:
+        return tb[:-1]  # skip current frame
+    # else presumably running under psyco
+    return nonportable_extract_stack(f, limit)
+
+
+def nonportable_extract_stack(f=None, limit=None):
+    if f is not None:
+        raise RuntimeError("Timba.utils.nonportable_extract_stack: f has to be None, don't ask why")
+    tb = []
+    fr = sys._getframe(1)  # caller's frame
+    while fr and (limit is None or len(tb) < limit):
+        tb.insert(0, (fr.f_code.co_filename, fr.f_lineno, fr.f_code.co_name, None))
+        fr = fr.f_back
+    return tb
+
+
+_proc_status = '/proc/%d/status' % os.getpid()
+
+_scale = {'kB': 1024.0, 'mB': 1024.0 * 1024.0,
+          'KB': 1024.0, 'MB': 1024.0 * 1024.0}
+
+
+def _VmB(VmKey):
+    """Private.
+    """
+    global _proc_status, _scale
+    # get pseudo file  /proc/<pid>/status
+    try:
+        t = open(_proc_status)
+        v = t.read()
+        t.close()
+    except:
+        return 0.0  # non-Linux?
+    # get VmKey line e.g. 'VmRSS:  9999  kB\n ...'
+    i = v.index(VmKey)
+    v = v[i:].split(None, 3)  # whitespace
+    if len(v) < 3:
+        return 0.0  # invalid format?
+    # convert Vm value to bytes
+    return float(v[1]) * _scale[v[2]]
+
+
+def _memory(since=0.0):
+    """Return memory usage in bytes.
+    """
+    return _VmB('VmSize:') - since
+
+
+def _resident(since=0.0):
+    """Return resident memory usage in bytes.
+    """
+    return _VmB('VmRSS:') - since
+
+
+def _stacksize(since=0.0):
+    """Return stack size in bytes.
+    """
+    return _VmB('VmStk:') - since
+
+
+#
+# === class verbosity ===
+# Verbosity includes methods for verbosity levels and conditional printing
+#
+class verbosity:
+    _verbosities = {}
+    _levels = {}
+    _parse_argv = True
+
+    _timestamps = False
+    _timestamps_modulo = 0
+
+    _memstamps = True
+
+    @staticmethod
+    def enable_timestamps(enable=True, modulo=60):
+        verbosity._timestamps = enable
+        verbosity._timestamps_modulo = modulo
+
+    @staticmethod
+    def enable_memstamps(enable=True, modulo=60):
+        verbosity._memstamps = enable
+
+    @staticmethod
+    def timestamp():
+        if verbosity._timestamps:
+            hdr = "%5.2f " % ((time.time() - _time0) % verbosity._timestamps_modulo)
+        else:
+            hdr = ""
+        if verbosity._memstamps:
+            mem = _memory()
+            hdr += "%.1fGb " % (float(mem) / (1024 ** 3))
+        return hdr
+
+    @staticmethod
+    def set_verbosity_level(context, level):
+        verbosity._levels[context] = level
+        vv = verbosity._verbosities.get(context, None)
+        if vv:
+            vv.set_verbose(level)
+
+    @staticmethod
+    def disable_argv():
+        verbosity._parse_argv = False
+
+    def __init__(self, verbose=0, stream=None, name=None, tb=2):
+        if not __debug__:
+            verbose = 0
+        (self.verbose, self.stream, self._tb) = (verbose, stream, tb)
+        # setup name
+        if name:
+            self.verbosity_name = name
+        else:
+            if self.__class__ is verbosity:
+                raise RuntimeError("""When creating a verbosity object directly,
+          a name must be specified.""")
+            self.verbosity_name = name = self.__class__.__name__
+        # look for argv to override debug levels (unless they were already set via set_verbosity_level above)
+        if verbosity._levels:
+            self.verbose = verbosity._levels.get(name, 0)
+            print("Registered verbosity context: " + name + " = " + self.verbose)
+        elif verbosity._parse_argv:
+            # NB: sys.argv doesn't always exist -- e.g., when embedding Python
+            # it doesn't seem to be present.  Hence the check.
+            argv = getattr(sys, 'argv', None)
+            have_debug = False
+            if argv:
+                patt = re.compile('-d' + name + '=(.*)$')
+                for arg in argv[1:]:
+                    if arg.startswith('-d'):
+                        have_debug = True
+                    try:
+                        self.verbose = int(patt.match(arg).group(1))
+                    except:
+                        pass
+            if have_debug:
+                print("Registered verbosity context:" + name + "=" + str(self.verbose))
+        # add name to map
+        self._verbosities[name] = self
+
+    def __del__(self):
+        if self.verbosity_name in self._verbosities:
+            del self._verbosities[self.verbosity_name]
+
+    def dheader(self, tblevel=-2):
+        if self._tb:
+            tb = extract_stack()
+            try:
+                (filename, line, funcname, text) = tb[tblevel]
+            except:
+                return "%s%s (no traceback): " % (self.timestamp(), self.get_verbosity_name())
+            filename = filename.split('/')[-1]
+            if self._tb > 1:
+                return "%s%s(%s:%d:%s): " % (self.timestamp(), self.get_verbosity_name(), filename, line, funcname)
+            else:
+                return "%s%s(%s): " % (self.timestamp(), self.get_verbosity_name(), funcname)
+        else:
+            return "%s%s: " % (self.timestamp(), self.get_verbosity_name())
+
+    def dprint(self, level, *args):
+        if level <= self.verbose:
+            stream = self.stream or sys.stderr
+            stream.write(self.dheader(-3))
+            stream.write(string.join(list(map(str, args)), ' ') + '\n')
+
+    def dprintf(self, _level, _format, *args):
+        if _level <= self.verbose:
+            stream = self.stream or sys.stderr
+            try:
+                s = _format % args
+            except:
+                stream.write('dprintf format exception: ' + str(_format) + '\n')
+            else:
+                stream.write(self.dheader(-3))
+                stream.write(s)
+
+    def get_verbose(self):
+        return self.verbose
+
+    def set_verbose(self, verbose):
+        self.verbose = verbose
+
+    def set_stream(self, stream):
+        self.stream = stream
+
+    def set_verbosity_name(self, name):
+        self.verbosity_name = name
+
+    def get_verbosity_name(self):
+        return self.verbosity_name
+
+
+def _print_curry_exception():
+    (et, ev, etb) = sys.exc_info()
+    print("%s: %s" % (getattr(ev, '_classname', ev.__class__.__name__), getattr(ev, '__doc__', '')))
+    if hasattr(ev, 'args'):
+        print("  " + ' '.join(map(str, ev.args)))
+    print('======== exception traceback follows:')
+    traceback.print_tb(etb)
+
+
+# curry() composes callbacks and such
+# See The Python Cookbook recipe 15.7
+def curry(func, *args, **kwds):
+    def callit(*args1, **kwds1):
+        kw = kwds.copy()
+        kw.update(kwds1)
+        a = args + args1
+        # print(f"curry args {args}")
+        # print(f"curry args1 {args1}")
+        # print(f"curry args a {a}")
+        # print(f"curry kw {kw}")
+        try:
+            return func(*a, **kw)
+        except Exception as e:
+            print("======== curry: exception while calling a curried function")
+            print(f"  function:{func}")
+            print(f"  args: {a}")
+            print(f"  kwargs: {kw}")
+            print(f"  exception: {e}")
+            _print_curry_exception()
+            raise
+
+    return callit
+
+
+# Extended curry() version
+# The _argslice argument is applied to the *args of the
+# curry when it is subsequently called; this allows only a subset of the
+# *args to be passed to the curried function.
+def xcurry(func, _args=(), _argslice=slice(0), _kwds={}, **kwds):
+    kwds0 = _kwds.copy()
+    kwds0.update(kwds)
+    if not isinstance(_args, tuple):
+        _args = (_args,)
+
+    def callit(*args1, **kwds1):
+        a = _args + args1[_argslice]
+        kw = kwds0.copy()
+        kw.update(kwds1)
+        try:
+            return func(*a, **kw)
+        except:
+            print("======== xcurry: exception while calling a curried function")
+            print("  function:" + func)
+            print("  args:" + a)
+            print("  kwargs:" + kw)
+            _print_curry_exception()
+            raise
+
+    return callit
+
+
+class PersistentCurrier:
+    """This class provides curry() and xcurry() instance methods that
+    internally store the curries in a list. This is handy for currying
+    callbacks to be passed to, e.g., PyQt slots: since PyQt holds the callbacks
+    via weakrefs, using the normal curry() method to compose a callback
+    on-the-fly would cause it to disappear immediately.
+    """
+
+    def _add_curry(self, cr):
+        try:
+            self._curries.append(cr)
+        except AttributeError:
+            self._curries = [cr]
+        return cr
+
+    def curry(self, func, *args, **kwds):
+        # curry debug output
+        # print(f"curry: func {func} args {args} kwds {kwds}")
+        return self._add_curry(curry(func, *args, **kwds))
+
+    def xcurry(self, func, *args, **kwds):
+        return self._add_curry(xcurry(func, *args, **kwds))
+
+    def clear(self):
+        self._curries = []
+
+
+class WeakInstanceMethod:
+    # return value indicating call of a weakinstancemethod whose object
+    # has gone
+    DeadRef = object()
+
+    def __init__(self, method):
+        if type(method) != types.MethodType:
+            raise TypeError("weakinstancemethod must be constructed from an instancemethod")
+        (self.__func__, self.__self__) = (method.__func__, weakref.ref(method.__self__))
+
+    def __bool__(self):
+        return self.__self__() is not None
+
+    def __call__(self, *args, **kwargs):
+        obj = self.__self__()
+        if obj is None:
+            return self.DeadRef
+        return self.__func__(obj, *args, **kwargs)
+
+
+def weakref_proxy(obj):
+    """returns either a weakref.proxy for the object, or if object is already a proxy,
+    returns itself."""
+    if type(obj) in weakref.ProxyTypes:
+        return obj
+    else:
+        return weakref.proxy(obj)
--- tigger-1.6.0.orig/TigGUI/kitties/widgets.py
+++ tigger-1.6.0/TigGUI/kitties/widgets.py
@@ -1,137 +1,137 @@
-# -*- coding: utf-8 -*-
-from PyQt5 import QtWidgets
-from PyQt5.Qt import QCursor, Qt, QWidgetAction, QLabel, QFrame, QTreeWidget, QObject, QApplication, \
-    QTreeWidgetItemIterator, QListWidget
-from PyQt5.QtWidgets import *
-from PyQt5 import *
-from PyQt5.QtCore import *
-
-
-class BusyIndicator:
-    """A BusyIndicator object is created to set the cursor to a hourglass.
-    When the object is destroyed (i.e. when local variable goes out of scope), the cursor is reset."""
-
-    def __init__(self):
-        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
-
-    def __del__(self):
-        QApplication.restoreOverrideCursor()
-
-    def reset_cursor(self):
-        QApplication.restoreOverrideCursor()
-
-
-def addMenuLabel(menu, text):
-    """Adds a QLabel contaning text to the given menu"""
-    qaw = QWidgetAction(menu)
-    lab = QLabel(text, menu)
-    qaw.setDefaultWidget(lab)
-    lab.setAlignment(Qt.AlignCenter)
-    lab.setFrameShape(QFrame.StyledPanel)
-    lab.setFrameShadow(QFrame.Sunken)
-    menu.addAction(qaw)
-    return lab
-
-
-class ClickableTreeWidget(QTreeWidget):
-
-    def __init__(self, *args):
-        QTreeWidget.__init__(self, *args)
-        self._expanded_item = None
-        self._mouse_press_pos = None
-        self.setContextMenuPolicy(Qt.CustomContextMenu)
-        self.customContextMenuRequested[QPoint].connect(self._request_context_menu)
-        self.itemExpanded[QTreeWidgetItem].connect(self._item_expanded_collapsed)
-        self.itemCollapsed[QTreeWidgetItem].connect(self._item_expanded_collapsed)
-
-    def mousePressEvent(self, ev):
-        self._expanded_item = None
-        self._mouse_press_pos = ev.pos()
-        QTreeWidget.mousePressEvent(self, ev)
-
-    def mouseReleaseEvent(self, ev):
-        item = self.itemAt(self._mouse_press_pos)
-        col = None
-        if item:
-            col = self.header().logicalIndexAt(self._mouse_press_pos)
-        # pass event to parent
-        QTreeWidget.mouseReleaseEvent(self, ev)
-        # now see if the item was expanded or collapsed because of the event. Only emit signal if this was
-        # not the case (i.e. swallow the clicks that have to do with expansion/collapse of items)
-        if item and item is not self._expanded_item and col is not None:
-            self.itemClicked.emit(item, col)
-
-    def _item_expanded_collapsed(self, item):
-        self._expanded_item = item
-
-    def _request_context_menu(self, pos):
-        index = self.indexAt(pos)
-        if not index.isValid():
-            return
-
-        item = self.itemAt(pos)
-        if item:
-            name = item.text(0)
-            col = self.header().logicalIndexAt(pos)
-
-            menu = QtWidgets.QMenu()
-            menu.addSection("Menu")
-            action = menu.addAction(name)
-            action.setEnabled(False)
-            menu.exec_(self.mapToGlobal(pos))
-
-            # old line below fails
-            # self.itemContextMenuRequested.emit(item, pos, col)
-
-    class Iterator(QTreeWidgetItemIterator):
-        def __init__(self, *args, **kw):
-            QTreeWidgetItemIterator.__init__(self, *args)
-            self._include_children = kw.get('children', False)
-            parent = args[0]
-            if isinstance(parent, QTreeWidget):
-                if hasattr(QTreeWidget, 'invisibleRootItem'):
-                    self._parent = parent.invisibleRootItem()
-                else:
-                    self._parent = None  # Qt 4.1 item.parent() returns None for top-level items
-            else:
-                self._parent = parent
-
-        def __iter__(self):
-            return self
-
-        def __next__(self):
-            while True:
-                value = self.value()
-                self.__iadd__(1)
-                if not value:
-                    raise StopIteration
-                if self._include_children or value.parent() is None or value.parent() is self._parent:
-                    return value
-
-        def next(self):
-            return self.__next__()
-
-    def iterator(self, *args):
-        """Returns a child item iterator.
-        iterator([flags]) returns an iterator for the tree widget itself
-        iterator(item,[flags]) returns an iterator for a tree widget item
-        """
-        if len(args) > 1:
-            return ClickableTreeWidget.Iterator(*args)
-        else:
-            return ClickableTreeWidget.Iterator(self, *args)
-
-
-TreeWidgetItemIterator = ClickableTreeWidget.Iterator
-
-
-class ClickableListWidget(QListWidget):
-    def __init__(self, *args):
-        QListWidget.__init__(self, *args)
-        self.setContextMenuPolicy(Qt.CustomContextMenu)
-        self.customContextMenuRequested[QPoint].connect(self._request_context_menu)
-
-    def _request_context_menu(self, pos):
-        item = self.itemAt(pos)
-        if item:
-            self.itemContextMenuRequested.emit(item, pos)
+# -*- coding: utf-8 -*-
+from PyQt5 import QtWidgets
+from PyQt5.Qt import QCursor, Qt, QWidgetAction, QLabel, QFrame, QTreeWidget, QObject, QApplication, \
+    QTreeWidgetItemIterator, QListWidget
+from PyQt5.QtWidgets import *
+from PyQt5 import *
+from PyQt5.QtCore import *
+
+
+class BusyIndicator:
+    """A BusyIndicator object is created to set the cursor to a hourglass.
+    When the object is destroyed (i.e. when local variable goes out of scope), the cursor is reset."""
+
+    def __init__(self):
+        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
+
+    def __del__(self):
+        QApplication.restoreOverrideCursor()
+
+    def reset_cursor(self):
+        QApplication.restoreOverrideCursor()
+
+
+def addMenuLabel(menu, text):
+    """Adds a QLabel contaning text to the given menu"""
+    qaw = QWidgetAction(menu)
+    lab = QLabel(text, menu)
+    qaw.setDefaultWidget(lab)
+    lab.setAlignment(Qt.AlignCenter)
+    lab.setFrameShape(QFrame.StyledPanel)
+    lab.setFrameShadow(QFrame.Sunken)
+    menu.addAction(qaw)
+    return lab
+
+
+class ClickableTreeWidget(QTreeWidget):
+
+    def __init__(self, *args):
+        QTreeWidget.__init__(self, *args)
+        self._expanded_item = None
+        self._mouse_press_pos = None
+        self.setContextMenuPolicy(Qt.CustomContextMenu)
+        self.customContextMenuRequested[QPoint].connect(self._request_context_menu)
+        self.itemExpanded[QTreeWidgetItem].connect(self._item_expanded_collapsed)
+        self.itemCollapsed[QTreeWidgetItem].connect(self._item_expanded_collapsed)
+
+    def mousePressEvent(self, ev):
+        self._expanded_item = None
+        self._mouse_press_pos = ev.pos()
+        QTreeWidget.mousePressEvent(self, ev)
+
+    def mouseReleaseEvent(self, ev):
+        item = self.itemAt(self._mouse_press_pos)
+        col = None
+        if item:
+            col = self.header().logicalIndexAt(self._mouse_press_pos)
+        # pass event to parent
+        QTreeWidget.mouseReleaseEvent(self, ev)
+        # now see if the item was expanded or collapsed because of the event. Only emit signal if this was
+        # not the case (i.e. swallow the clicks that have to do with expansion/collapse of items)
+        if item and item is not self._expanded_item and col is not None:
+            self.itemClicked.emit(item, col)
+
+    def _item_expanded_collapsed(self, item):
+        self._expanded_item = item
+
+    def _request_context_menu(self, pos):
+        index = self.indexAt(pos)
+        if not index.isValid():
+            return
+
+        item = self.itemAt(pos)
+        if item:
+            name = item.text(0)
+            col = self.header().logicalIndexAt(pos)
+
+            menu = QtWidgets.QMenu()
+            menu.addSection("Menu")
+            action = menu.addAction(name)
+            action.setEnabled(False)
+            menu.exec_(self.mapToGlobal(pos))
+
+            # old line below fails
+            # self.itemContextMenuRequested.emit(item, pos, col)
+
+    class Iterator(QTreeWidgetItemIterator):
+        def __init__(self, *args, **kw):
+            QTreeWidgetItemIterator.__init__(self, *args)
+            self._include_children = kw.get('children', False)
+            parent = args[0]
+            if isinstance(parent, QTreeWidget):
+                if hasattr(QTreeWidget, 'invisibleRootItem'):
+                    self._parent = parent.invisibleRootItem()
+                else:
+                    self._parent = None  # Qt 4.1 item.parent() returns None for top-level items
+            else:
+                self._parent = parent
+
+        def __iter__(self):
+            return self
+
+        def __next__(self):
+            while True:
+                value = self.value()
+                self.__iadd__(1)
+                if not value:
+                    raise StopIteration
+                if self._include_children or value.parent() is None or value.parent() is self._parent:
+                    return value
+
+        def next(self):
+            return self.__next__()
+
+    def iterator(self, *args):
+        """Returns a child item iterator.
+        iterator([flags]) returns an iterator for the tree widget itself
+        iterator(item,[flags]) returns an iterator for a tree widget item
+        """
+        if len(args) > 1:
+            return ClickableTreeWidget.Iterator(*args)
+        else:
+            return ClickableTreeWidget.Iterator(self, *args)
+
+
+TreeWidgetItemIterator = ClickableTreeWidget.Iterator
+
+
+class ClickableListWidget(QListWidget):
+    def __init__(self, *args):
+        QListWidget.__init__(self, *args)
+        self.setContextMenuPolicy(Qt.CustomContextMenu)
+        self.customContextMenuRequested[QPoint].connect(self._request_context_menu)
+
+    def _request_context_menu(self, pos):
+        item = self.itemAt(pos)
+        if item:
+            self.itemContextMenuRequested.emit(item, pos)
--- tigger-1.6.0.orig/TigGUI/tigger
+++ tigger-1.6.0/TigGUI/tigger
@@ -1,204 +1,204 @@
-#!/usr/bin/env python
-
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-import faulthandler
-from TigGUI.Tools import dependency_check  # checks dependencies are available
-
-from PyQt5.QtCore import Qt
-from PyQt5.QtGui import QPalette
-from PyQt5.QtWidgets import QStyleFactory, QSizePolicy, QStyle
-
-faulthandler.enable()
-import sys
-import os
-import traceback
-from optparse import OptionParser
-
-from PyQt5.Qt import QApplication, QColor
-
-from TigGUI.kitties import utils
-
-
-def main():
-    import TigGUI.init
-
-    _verbosity = utils.verbosity(name="startup")
-    dprint = _verbosity.dprint
-    dprintf = _verbosity.dprintf
-
-    # parse options is the first thing we should do
-
-    usage = "usage: %prog [options] <sky models or FITS files>"
-    parser = OptionParser(usage=usage)
-    parser.add_option("-d", "--debug", dest="verbose", type="string", action="append", metavar="Context=Level",
-                      help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
-    parser.add_option("-T", "--timestamps", action="store_true",
-                      help="(for debugging Python code) enable timestamps in debug output")
-    (options, rem_args) = parser.parse_args()
-
-    if options.timestamps:
-        try:
-            TigGUI.kitties.utils.verbosity.enable_timestamps()
-        except:
-            pass
-    dprint(1, "starting up")
-
-    import TigGUI
-
-    print("Welcome to Tigger " + TigGUI.release_string)
-    print("Please wait a second while the GUI starts up.")
-
-    dprint(1, "imported TigGUI")
-    TigGUI.startup_dprint = dprint
-    TigGUI.startup_dprintf = dprintf
-
-    dprint(1, "imported Qt5")
-    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"  # enable auto scaling based on monitor's pixel density
-    os.environ["QT_SCALE_FACTOR"] = "1"  # set global scale factor for entire application
-    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)  # enable highdpi scaling
-    # QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)  # only for PyQt 5.15
-    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)  # enable highdpi icons
-    QApplication.setAttribute(Qt.AA_UseDesktopOpenGL, True)  # force the use of OpenGL
-    QApplication.setDesktopSettingsAware(True)  # App will use System fonts, colours etc...
-    app = QApplication(sys.argv)
-    # Even after setting style to Fusion, it still causes a style warning from Qt
-    app.setStyle(QStyleFactory.create("Fusion"))
-    # get screen size
-    screen = app.primaryScreen()
-    size = screen.size()
-    usable_screen = screen.availableGeometry()
-    print(f"Detected screen size {size.width()}x{size.height()}, usable area {usable_screen.width()}x{usable_screen.height()}")
-
-    # setup Dark Mode QPalette - initial setup
-    palette = QPalette()
-    palette.setColor(QPalette.Window, QColor(53, 53, 53))
-    palette.setColor(QPalette.WindowText, Qt.white)
-    palette.setColor(QPalette.Light, QColor(68, 68, 68))
-    palette.setColor(QPalette.Base, QColor(25, 25, 25))
-    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
-    palette.setColor(QPalette.ToolTipBase, Qt.white)
-    palette.setColor(QPalette.ToolTipText, Qt.black)
-    palette.setColor(QPalette.Text, Qt.white)
-    palette.setColor(QPalette.Button, QColor(53, 53, 53))
-    palette.setColor(QPalette.ButtonText, Qt.white)
-    palette.setColor(QPalette.BrightText, Qt.red)
-    palette.setColor(QPalette.Link, QColor(42, 130, 218))
-    palette.setColor(QPalette.Highlight, QColor(42, 130, 218, 192))
-    palette.setColor(QPalette.HighlightedText, Qt.white)
-
-    # setup Dark Mode disabled QPalette
-    palette.setColor(QPalette.Disabled, QPalette.Window, Qt.black)
-    palette.setColor(QPalette.Disabled, QPalette.WindowText, QColor(255, 255, 255, 128))
-    palette.setColor(QPalette.Disabled, QPalette.Base, QColor(68, 68, 68))
-    palette.setColor(QPalette.Disabled, QPalette.Text, QColor(255, 255, 255, 128))
-    palette.setColor(QPalette.Disabled, QPalette.Button, QColor(53, 53, 53, 128))
-    palette.setColor(QPalette.Disabled, QPalette.ButtonText, QColor(255, 255, 255, 128))
-    palette.setColor(QPalette.Disabled, QPalette.BrightText, Qt.black)
-    palette.setColor(QPalette.Disabled, QPalette.Link, Qt.black)
-    palette.setColor(QPalette.Disabled, QPalette.Highlight, Qt.black)
-    palette.setColor(QPalette.Disabled, QPalette.HighlightedText, Qt.black)
-
-    # add Dark Mode to Tigger
-    app.setPalette(palette)
-    from TigGUI.init import pixmaps
-    app.setWindowIcon(pixmaps.tigger_starface.icon())
-    # Need for PlotStyles colors -- ignore error on non-X11 platforms like the Mac
-    try:
-        QColor.setAllowX11ColorNames(True)  # TODO - this seems to be a Qt4 call and needs updating.
-    except AttributeError:
-        pass
-
-    dprint(1, "created QApplication")
-    # splash = QSplashScreen(TigGUI.pixmaps.tigger_splash.pm())
-    # splash.showMessage("Welcome to TigGUI!",Qt.AlignHCenter|Qt.AlignBottom)
-    # splash.show()
-
-    import TigGUI.Images
-    import TigGUI.MainWindow
-    dprint(1, "imported TigGUI.MainWindow")
-    import TigGUI.Tools
-
-    # although this seems unused, it is actually registering these plugins
-    dprint(1, "imported TigGUI.Tools")
-
-    # max width and height for main window
-    max_w, max_h = int(usable_screen.width()*0.9), int(usable_screen.height()*0.88)
-    mainwin = TigGUI.MainWindow.MainWindow(None, max_width=max_w, max_height=max_h)
-    # centre on screen
-    centre = QStyle.alignedRect(Qt.LeftToRight, Qt.AlignHCenter, mainwin.size(), QApplication.desktop().availableGeometry())
-    mainwin.setGeometry(centre)
-    # set main window size constraints and policy
-    dprint(1, "created main window")
-
-    # add optional tools
-    for name, callback in TigGUI.Tools.getRegisteredTools():
-        mainwin.addTool(name, callback)
-    dprint(1, "added optional tools")
-
-    # parse remaining args
-    images = [arg for arg in rem_args if TigGUI.Images.isFITS(arg)]
-    models = [arg for arg in rem_args if arg not in images]
-
-    if len(models) > 1:
-        parser.error("Only one model should be specified at the command line.")
-
-    # load images first
-    for img in images:
-        # splash.showMessage("Loading image %s"%img,Qt.AlignHCenter|Qt.AlignBottom)
-        mainwin.loadImage(img)
-        dprint(1, "loaded image", img)
-
-    # load model, if specified
-    for mod in models:
-        dprint(2, "Loading model" + mod)
-        try:
-            mainwin.openFile(mod, _show=False)
-        except:
-            traceback.print_exc()
-            print("Error loading model %s" % mod)
-            exit(1)
-
-        # splash.showMessage("Loading model %s"%mod,Qt.AlignHCenter|Qt.AlignBottom)
-        dprint(1, "loaded model", mod)
-
-    # start updating the plot
-    mainwin.enableUpdates()
-    dprint(1, "started plot updates")
-
-    # flush app event queue, so windows get resized , etc.
-    app.processEvents()
-
-    # handle SIGINT
-    def sigint_handler(sig, stackframe):
-        print("Caught Ctrl+C, exiting...")
-        mainwin.close()
-
-    import signal
-    signal.signal(signal.SIGINT, sigint_handler)  # TODO -check this is still valid/used
-    dprint(1, "added signal handler")
-
-    # splash.finish(mainwin)
-
-    app.exec_()
-
-
-if __name__ == "__main__":
-    main()
+#!/usr/bin/env python
+
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+import faulthandler
+from TigGUI.Tools import dependency_check  # checks dependencies are available
+
+from PyQt5.QtCore import Qt
+from PyQt5.QtGui import QPalette
+from PyQt5.QtWidgets import QStyleFactory, QSizePolicy, QStyle
+
+faulthandler.enable()
+import sys
+import os
+import traceback
+from optparse import OptionParser
+
+from PyQt5.Qt import QApplication, QColor
+
+from TigGUI.kitties import utils
+
+
+def main():
+    import TigGUI.init
+
+    _verbosity = utils.verbosity(name="startup")
+    dprint = _verbosity.dprint
+    dprintf = _verbosity.dprintf
+
+    # parse options is the first thing we should do
+
+    usage = "usage: %prog [options] <sky models or FITS files>"
+    parser = OptionParser(usage=usage)
+    parser.add_option("-d", "--debug", dest="verbose", type="string", action="append", metavar="Context=Level",
+                      help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
+    parser.add_option("-T", "--timestamps", action="store_true",
+                      help="(for debugging Python code) enable timestamps in debug output")
+    (options, rem_args) = parser.parse_args()
+
+    if options.timestamps:
+        try:
+            TigGUI.kitties.utils.verbosity.enable_timestamps()
+        except:
+            pass
+    dprint(1, "starting up")
+
+    import TigGUI
+
+    print("Welcome to Tigger " + TigGUI.release_string)
+    print("Please wait a second while the GUI starts up.")
+
+    dprint(1, "imported TigGUI")
+    TigGUI.startup_dprint = dprint
+    TigGUI.startup_dprintf = dprintf
+
+    dprint(1, "imported Qt5")
+    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"  # enable auto scaling based on monitor's pixel density
+    os.environ["QT_SCALE_FACTOR"] = "1"  # set global scale factor for entire application
+    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)  # enable highdpi scaling
+    # QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)  # only for PyQt 5.15
+    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)  # enable highdpi icons
+    QApplication.setAttribute(Qt.AA_UseDesktopOpenGL, True)  # force the use of OpenGL
+    QApplication.setDesktopSettingsAware(True)  # App will use System fonts, colours etc...
+    app = QApplication(sys.argv)
+    # Even after setting style to Fusion, it still causes a style warning from Qt
+    app.setStyle(QStyleFactory.create("Fusion"))
+    # get screen size
+    screen = app.primaryScreen()
+    size = screen.size()
+    usable_screen = screen.availableGeometry()
+    print(f"Detected screen size {size.width()}x{size.height()}, usable area {usable_screen.width()}x{usable_screen.height()}")
+
+    # setup Dark Mode QPalette - initial setup
+    palette = QPalette()
+    palette.setColor(QPalette.Window, QColor(53, 53, 53))
+    palette.setColor(QPalette.WindowText, Qt.white)
+    palette.setColor(QPalette.Light, QColor(68, 68, 68))
+    palette.setColor(QPalette.Base, QColor(25, 25, 25))
+    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
+    palette.setColor(QPalette.ToolTipBase, Qt.white)
+    palette.setColor(QPalette.ToolTipText, Qt.black)
+    palette.setColor(QPalette.Text, Qt.white)
+    palette.setColor(QPalette.Button, QColor(53, 53, 53))
+    palette.setColor(QPalette.ButtonText, Qt.white)
+    palette.setColor(QPalette.BrightText, Qt.red)
+    palette.setColor(QPalette.Link, QColor(42, 130, 218))
+    palette.setColor(QPalette.Highlight, QColor(42, 130, 218, 192))
+    palette.setColor(QPalette.HighlightedText, Qt.white)
+
+    # setup Dark Mode disabled QPalette
+    palette.setColor(QPalette.Disabled, QPalette.Window, Qt.black)
+    palette.setColor(QPalette.Disabled, QPalette.WindowText, QColor(255, 255, 255, 128))
+    palette.setColor(QPalette.Disabled, QPalette.Base, QColor(68, 68, 68))
+    palette.setColor(QPalette.Disabled, QPalette.Text, QColor(255, 255, 255, 128))
+    palette.setColor(QPalette.Disabled, QPalette.Button, QColor(53, 53, 53, 128))
+    palette.setColor(QPalette.Disabled, QPalette.ButtonText, QColor(255, 255, 255, 128))
+    palette.setColor(QPalette.Disabled, QPalette.BrightText, Qt.black)
+    palette.setColor(QPalette.Disabled, QPalette.Link, Qt.black)
+    palette.setColor(QPalette.Disabled, QPalette.Highlight, Qt.black)
+    palette.setColor(QPalette.Disabled, QPalette.HighlightedText, Qt.black)
+
+    # add Dark Mode to Tigger
+    app.setPalette(palette)
+    from TigGUI.init import pixmaps
+    app.setWindowIcon(pixmaps.tigger_starface.icon())
+    # Need for PlotStyles colors -- ignore error on non-X11 platforms like the Mac
+    try:
+        QColor.setAllowX11ColorNames(True)  # TODO - this seems to be a Qt4 call and needs updating.
+    except AttributeError:
+        pass
+
+    dprint(1, "created QApplication")
+    # splash = QSplashScreen(TigGUI.pixmaps.tigger_splash.pm())
+    # splash.showMessage("Welcome to TigGUI!",Qt.AlignHCenter|Qt.AlignBottom)
+    # splash.show()
+
+    import TigGUI.Images
+    import TigGUI.MainWindow
+    dprint(1, "imported TigGUI.MainWindow")
+    import TigGUI.Tools
+
+    # although this seems unused, it is actually registering these plugins
+    dprint(1, "imported TigGUI.Tools")
+
+    # max width and height for main window
+    max_w, max_h = int(usable_screen.width()*0.9), int(usable_screen.height()*0.88)
+    mainwin = TigGUI.MainWindow.MainWindow(None, max_width=max_w, max_height=max_h)
+    # centre on screen
+    centre = QStyle.alignedRect(Qt.LeftToRight, Qt.AlignHCenter, mainwin.size(), QApplication.desktop().availableGeometry())
+    mainwin.setGeometry(centre)
+    # set main window size constraints and policy
+    dprint(1, "created main window")
+
+    # add optional tools
+    for name, callback in TigGUI.Tools.getRegisteredTools():
+        mainwin.addTool(name, callback)
+    dprint(1, "added optional tools")
+
+    # parse remaining args
+    images = [arg for arg in rem_args if TigGUI.Images.isFITS(arg)]
+    models = [arg for arg in rem_args if arg not in images]
+
+    if len(models) > 1:
+        parser.error("Only one model should be specified at the command line.")
+
+    # load images first
+    for img in images:
+        # splash.showMessage("Loading image %s"%img,Qt.AlignHCenter|Qt.AlignBottom)
+        mainwin.loadImage(img)
+        dprint(1, "loaded image", img)
+
+    # load model, if specified
+    for mod in models:
+        dprint(2, "Loading model" + mod)
+        try:
+            mainwin.openFile(mod, _show=False)
+        except:
+            traceback.print_exc()
+            print("Error loading model %s" % mod)
+            exit(1)
+
+        # splash.showMessage("Loading model %s"%mod,Qt.AlignHCenter|Qt.AlignBottom)
+        dprint(1, "loaded model", mod)
+
+    # start updating the plot
+    mainwin.enableUpdates()
+    dprint(1, "started plot updates")
+
+    # flush app event queue, so windows get resized , etc.
+    app.processEvents()
+
+    # handle SIGINT
+    def sigint_handler(sig, stackframe):
+        print("Caught Ctrl+C, exiting...")
+        mainwin.close()
+
+    import signal
+    signal.signal(signal.SIGINT, sigint_handler)  # TODO -check this is still valid/used
+    dprint(1, "added signal handler")
+
+    # splash.finish(mainwin)
+
+    app.exec_()
+
+
+if __name__ == "__main__":
+    main()
--- tigger-1.6.0.orig/TigGUI/tigger.conf
+++ tigger-1.6.0/TigGUI/tigger.conf
@@ -1,107 +1,107 @@
-[Tigger]
-mouse-modes = Mouse3,Mouse3a,Mouse2,Mouse1
-current-mouse-mode = Mouse3
-
-# available keyboard modifiers: SHIFT, CTRL, ALT, META
-[Mouse3]
-name = Three-button mouse: zoom/unzoom/measure
-icon =
-contexts =
-submodes =
-zoom-window = LeftButton
-zoom-undo = MidButton
-zoom-redo = SHIFT+MidButton
-unzoom = CTRL+MidButton
-measure = SHIFT+RightButton
-stats = RightButton
-select-source = CTRL+LeftButton
-select-window = SHIFT+LeftButton
-select-window-plus = SHIFT+CTRL+LeftButton
-deselect-window = SHIFT+ALT+LeftButton
-
-[Mouse3a]
-name = Three-button mouse: zoom/measure/unzoom
-icon =
-contexts =
-submodes =
-zoom-window = LeftButton
-zoom-undo = RightButton
-zoom-redo = SHIFT+RightButton
-unzoom = CTRL+RightButton
-measure = SHIFT+MidButton
-stats = MidButton
-select-source = CTRL+LeftButton
-select-window = SHIFT+LeftButton
-select-window-plus = SHIFT+CTRL+LeftButton
-deselect-window = ALT+LeftButton
-
-[Mouse2]
-name = Two-button mouse
-icon =
-contexts =
-submodes =
-zoom-window = LeftButton
-zoom-undo = RightButton
-zoom-redo = SHIFT+RightButton
-unzoom = CTRL+RightButton
-measure = META+LeftButton
-stats = META+RightButton
-select-source = CTRL+LeftButton
-select-window = SHIFT+LeftButton
-select-window-plus = SHIFT+CTRL+LeftButton
-deselect-window = SHIFT+ALT+LeftButton
-
-[Mouse1]
-name = Single-button mouse
-icon =
-contexts =
-submodes = Mouse1_zoom,Mouse1_measure,Mouse1_select
-
-[Mouse1_zoom]
-name = Zoom
-icon = zoom_in
-contexts =
-submodes =
-zoom-window = LeftButton
-zoom-undo = CTRL+LeftButton
-zoom-redo = SHIFT+LeftButton
-unzoom = SHIFT+CTRL+LeftButton
-measure =
-stats =
-select-source =
-select-window =
-select-window-plus =
-deselect-window =
-
-[Mouse1_measure]
-name = Measure
-icon = ruler
-contexts =
-submodes =
-zoom-window =
-zoom-undo =
-zoom-redo =
-unzoom =
-measure = SHIFT+LeftButton
-stats = LeftButton
-select-source =
-select-window =
-select-window-plus =
-deselect-window =
-
-[Mouse1_select]
-name = Select
-icon = big_plus
-contexts = model
-submodes =
-zoom-window = LeftButton
-zoom-undo =
-zoom-redo =
-unzoom =
-measure =
-stats =
-select-source = CTRL+LeftButton
-select-window = SHIFT+LeftButton
-select-window-plus = SHIFT+CTRL+LeftButton
-deselect-window = ALT+CTRL+LeftButton
-
+[Tigger]
+mouse-modes = Mouse3,Mouse3a,Mouse2,Mouse1
+current-mouse-mode = Mouse3
+
+# available keyboard modifiers: SHIFT, CTRL, ALT, META
+[Mouse3]
+name = Three-button mouse: zoom/unzoom/measure
+icon =
+contexts =
+submodes =
+zoom-window = LeftButton
+zoom-undo = MidButton
+zoom-redo = SHIFT+MidButton
+unzoom = CTRL+MidButton
+measure = SHIFT+RightButton
+stats = RightButton
+select-source = CTRL+LeftButton
+select-window = SHIFT+LeftButton
+select-window-plus = SHIFT+CTRL+LeftButton
+deselect-window = SHIFT+ALT+LeftButton
+
+[Mouse3a]
+name = Three-button mouse: zoom/measure/unzoom
+icon =
+contexts =
+submodes =
+zoom-window = LeftButton
+zoom-undo = RightButton
+zoom-redo = SHIFT+RightButton
+unzoom = CTRL+RightButton
+measure = SHIFT+MidButton
+stats = MidButton
+select-source = CTRL+LeftButton
+select-window = SHIFT+LeftButton
+select-window-plus = SHIFT+CTRL+LeftButton
+deselect-window = ALT+LeftButton
+
+[Mouse2]
+name = Two-button mouse
+icon =
+contexts =
+submodes =
+zoom-window = LeftButton
+zoom-undo = RightButton
+zoom-redo = SHIFT+RightButton
+unzoom = CTRL+RightButton
+measure = META+LeftButton
+stats = META+RightButton
+select-source = CTRL+LeftButton
+select-window = SHIFT+LeftButton
+select-window-plus = SHIFT+CTRL+LeftButton
+deselect-window = SHIFT+ALT+LeftButton
+
+[Mouse1]
+name = Single-button mouse
+icon =
+contexts =
+submodes = Mouse1_zoom,Mouse1_measure,Mouse1_select
+
+[Mouse1_zoom]
+name = Zoom
+icon = zoom_in
+contexts =
+submodes =
+zoom-window = LeftButton
+zoom-undo = CTRL+LeftButton
+zoom-redo = SHIFT+LeftButton
+unzoom = SHIFT+CTRL+LeftButton
+measure =
+stats =
+select-source =
+select-window =
+select-window-plus =
+deselect-window =
+
+[Mouse1_measure]
+name = Measure
+icon = ruler
+contexts =
+submodes =
+zoom-window =
+zoom-undo =
+zoom-redo =
+unzoom =
+measure = SHIFT+LeftButton
+stats = LeftButton
+select-source =
+select-window =
+select-window-plus =
+deselect-window =
+
+[Mouse1_select]
+name = Select
+icon = big_plus
+contexts = model
+submodes =
+zoom-window = LeftButton
+zoom-undo =
+zoom-redo =
+unzoom =
+measure =
+stats =
+select-source = CTRL+LeftButton
+select-window = SHIFT+LeftButton
+select-window-plus = SHIFT+CTRL+LeftButton
+deselect-window = ALT+CTRL+LeftButton
+
--- tigger-1.6.0.orig/desktop/tigger.desktop
+++ tigger-1.6.0/desktop/tigger.desktop
@@ -1,7 +1,7 @@
-[Desktop Entry]
-Type=Application
-Terminal=false
-Name=Tigger
-Exec=tigger
-Icon=tigger_logo.png
-StartupWMClass=tigger
+[Desktop Entry]
+Type=Application
+Terminal=false
+Name=Tigger
+Exec=tigger
+Icon=tigger_logo.png
+StartupWMClass=tigger
--- tigger-1.6.0.orig/install_tigger_ubuntu.sh
+++ tigger-1.6.0/install_tigger_ubuntu.sh
@@ -1,308 +1,308 @@
-#!/bin/bash
-
-log_file=tigger_installer.log
-error_file=tigger_installer.err
-
-# custom redirection
-exec 3>&1
-
-# redirect stdout/stderr to a file
-exec >$log_file 2> $error_file
-
-# function echo to show echo output on terminal
-echo() {
-   # call actual echo command and redirect output to custom redirect
-   command echo "$@" >&3
-}
-
-echo "==== Tigger v1.6.0 - Ubuntu install script ===="
-echo "==== Log file: $log_file ===="
-echo "==== Error log: $error_file ===="
-printf "==== Tigger v1.6.0 - Ubuntu install script ====\n"
-
-# sudo runner by default
-sudo_runner="sudo"
-
-# sudo runner by default
-apt_runner="apt -y install"
-
-# install via packages by default
-build_type="package"
-
-# install only Tigger GUI by default
-install_type="normal"
-
-# store the location of this dir
-tigger_pwd="${PWD}"
-
-# exception handling
-exception() {
-  echo ""
-  echo "********************************* ERROR ****************************************"
-	echo "**** Tigger installation script encountered an error"
-	echo "**** Please check the log files $log_file and $error_file"
-	echo "**** Ending Tigger installation script ¯\_(ツ)_/¯"
-  echo "********************************************************************************"
-  echo ""
-	exit 1
-	}
-
-# display help
-display_usage() {
-	echo -e "\nUsage: $0 [OPTION]\n"
-	echo -e "-s, --source     install PyQt-Qwt from source\n"
-	echo -e "-ns, --no-sudo     install without sudo. You should be su\n"
-  echo -e "-dai, --docker-apt-installer     specify docker apt installer"
-	}
-
-# check whether user had supplied -h or --help.
-if [[ ( $1 == "--help") ||  $1 == "-h" ]]
-then
-	display_usage
-	exit 0
-fi
-
-# if source build selected then set build type
-if [[ ( $1 == "--source") ||  $1 == "-s" ]]
-then
-	build_type="source"
-fi
-
-# if no-sudo is specified then remove sudo - assume user is su
-if [[ ( $1 == "--no-sudo") ||  $1 == "-ns" ]]
-then
-	sudo_runner=""
-fi
-
-# if source build selected then set build type
-if [[ ( $1 == "--docker-apt-installer") ||  $1 == "-dai" ]]
-then
-	apt_runner="docker-apt-install"
-fi
-
-# identify if running on Ubuntu and which version
-if [[ -n "$(command -v lsb_release)" ]]
-then
-	distro_name=$(lsb_release -s -d|awk '{print $1}')
-
-	if [[ $distro_name == "Ubuntu" ]]
-	then
-		distro_version=$(lsb_release -rs|sed -e 's/\.//g')
-	else
-		echo "==== Error: Ubuntu Linux not detected, stopping installation ===="
-		printf "==== Error: Ubuntu Linux not detected, stopping installation ====\n"
-		exception
-	fi
-else
-	echo "==== Error: Unable to detect Linux distribution, stopping installation ===="
-	printf "==== Error: Unable to detect Linux distribution, stopping installation ====\n"
-	exception
-fi
-
-echo "==== Installer has detected Linux distribution as $distro_name $distro_version ===="
-printf "==== Installer has detected Linux distribution as $distro_name $distro_version ====\n"
-
-# check for pip3 and install if need be
-if command -v pip3 > /dev/null 
-then
-  if [[ $VIRTUAL_ENV == "" ]]
-  then
-    echo "==== Installer found pip3... ===="
-    printf "==== Installer found pip3... ====\n"
-  else
-    echo "==== Installer did not find pip3... ===="
-    printf "==== Installer did not find pip3... ====\n"
-    $sudo_runner $apt_runner python3-setuptools python3-pip 2>>$error_file || exception
-  fi
-else
-	echo "==== Installer did not find pip3... ===="
-	printf "==== Installer did not find pip3... ====\n"
-	install_type="fullstack"
-	$sudo_runner $apt_runner python3-setuptools python3-pip 2>>$error_file || exception
-fi
-
-# check for astro-tigger-lsm
-tigger_lsm=`pip3 list|grep astro-tigger-lsm|awk '{print $1}'`
-if [[ $tigger_lsm == "astro-tigger-lsm" ]]
-then
-	echo "==== Installer found astro-tigger-lsm dependency... ===="
-	printf "==== Installer found astro-tigger-lsm dependency... ====\n"
-	tigger_lsm_version=`pip3 list|grep astro-tigger-lsm|awk '{print $2}'|sed -e 's/\.//g'`
-	
-	if [[ "$tigger_lsm_version" -lt "170" ]]
-	then
-		echo "==== Installer fullstack mode - astro-tigger-lsm version is less than 1.7.0... ===="
-		printf "==== Installer fullstack mode - astro-tigger-lsm version is less than 1.7.0... ====\n"
-		pip3 uninstall -y astro_tigger_lsm 2>>$error_file || exception
-		install_type="fullstack"
-	fi
-else
-	install_type="fullstack"
-	echo "==== Installer fullstack mode - astro-tigger-lsm not found... ===="
-	printf "==== Installer fullstack mode - astro-tigger-lsm not found... ====\n"
-fi	
-
-# install astro-tigger-lsm
-if [[ $install_type == "fullstack" ]]
-then
-  if [[ $build_type == "source" ]] || [[ $distro_version == "1804" ]]
-  then
-    echo "==== Installing Tigger-LSM dependency from source... ===="
-    printf "==== Installing Tigger-LSM dependency from source... ====\n"
-    $sudo_runner $apt_runner git 2>>$error_file || exception
-    cd /tmp || exception
-    rm -rf tigger-lsm
-    git clone https://github.com/ska-sa/tigger-lsm.git 1>>$log_file 2>>$error_file || exception
-    cd tigger-lsm || exception
-
-    if [[ $distro_version == "1804" ]]
-    then
-      $sudo_runner $apt_runner libboost-python-dev casacore* 2>>$error_file || exception
-      pip3 install -q astropy==4.1 || exception
-      pip3 install -q scipy==1.5.2 || exception
-    fi
-
-    python3 setup.py install --user 1>>$log_file 2>>$error_file || exception
-    cd /tmp || exception
-    cd "${tigger_pwd}" || exception
-  elif [[ $build_type == "package" ]]
-  then
-    echo "==== Installing Tigger-LSM dependency from pip3... ===="
-    printf "==== Installing Tigger-LSM dependency from pip3... ====\n"
-    pip3 install -q astro_tigger_lsm==1.7.0 || exception
-  fi
-fi
-
-echo "==== Installing package dependencies... ===="
-printf "==== Installing package dependencies... ====\n"
-
-# install Tigger deps
-$sudo_runner $apt_runner python3-pyqt5.qtsvg python3-pyqt5.qtopengl libqwt-qt5-6 2>>$error_file || exception
-
-# compile PyQt-Qwt
-if [[ $build_type == "source" ]]
-then
-    # install PyQt-Qwt deps
-    $sudo_runner $apt_runner pyqt5-dev pyqt5-dev-tools python3-pyqt5 libqwt-qt5-dev libqwt-headers libqt5opengl5-dev libqt5svg5-dev g++ dpkg-dev git 2>>$error_file || exception
-	if [[ $distro_version == "2104" ]]
-  then
-		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
-		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
-        $sudo_runner $apt_runner sip5-tools 2>>$error_file || exception
-		cd /tmp || exception
-		rm -rf PyQt-Qwt
-		git clone https://github.com/razman786/PyQt-Qwt.git || exception
-		cd PyQt-Qwt || exception
-		QT_SELECT=qt5 python3 configure.py --qwt-incdir=/usr/include/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
-		make -j4 || exception
-		$sudo_runner make install || exception
-		cd /tmp || exception
-		cd "${tigger_pwd}" || exception
-	elif [[ $distro_version == "2004" ]]
-	then
-		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
-		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
-		cd /tmp || exception
-		rm -rf PyQt-Qwt
-		git clone https://github.com/razman786/PyQt-Qwt.git || exception
-		cd PyQt-Qwt || exception
-		QT_SELECT=qt5 python3 configure.py --qwt-incdir=/usr/include/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
-		make -j4 || exception
-		$sudo_runner make install || exception
-		cd /tmp || exception
-		cd "${tigger_pwd}" || exception
-	elif [[ $distro_version == "1804" ]]
-	then
-		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
-		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
-		cd /tmp || exception
-		rm -rf PyQt-Qwt
-		git clone https://github.com/razman786/PyQt-Qwt.git || exception
-		cd PyQt-Qwt || exception
-		git checkout ubuntu_18_04 || exception
-		cp -a /usr/include/qwt header || exception
-		cp header/qwt*.h header/qwt/ || exception
-		QT_SELECT=qt5 python3 configure.py --qwt-incdir=header/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
-		make -j4 || exception
-		$sudo_runner make install || exception
-		cd /tmp || exception
-		cd "${tigger_pwd}" || exception
-    else
-		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
-		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
-		cd /tmp || exception
-		rm -rf PyQt-Qwt
-		git clone https://github.com/razman786/PyQt-Qwt.git || exception
-		cd PyQt-Qwt || exception
-		QT_SELECT=qt5 python3 configure.py --qwt-incdir=/usr/include/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
-		make -j4 || exception
-		$sudo_runner make install || exception
-		cd /tmp || exception
-		cd "${tigger_pwd}" || exception
-	fi
-fi
-
-# install PyQt-Qwt package
-if [[ $build_type == "package" ]]
-then
-	if [[ $distro_version == "2104" ]]
-	then
-		echo "==== Installing PyQwt for $distro_name $distro_version... ===="
-		printf "==== Installing PyQwt for $distro_name $distro_version... ====\n"
-		$sudo_runner dpkg -i debian_pkgs/ubuntu_21_04_deb_pkg/python3-pyqt5.qwt_2.00.00-1_amd64.deb || exception
-	elif [[ $distro_version == "2004" ]]
-	then
-		echo "==== Installing PyQwt for $distro_name $distro_version... ===="
-		printf "==== Installing PyQwt for $distro_name $distro_version... ====\n"
-		$sudo_runner dpkg -i debian_pkgs/ubuntu_20_04_deb_pkg/python3-pyqt5.qwt_2.00.00-1build1_amd64.deb || exception
-	elif [[ $distro_version == "1804" ]]
-	then
-		echo "==== Installing PyQwt for $distro_name $distro_version... ===="
-		printf "==== Installing PyQwt for $distro_name $distro_version... ====\n"
-		$sudo_runner dpkg -i debian_pkgs/ubuntu_18_04_deb_pkg/python3-pyqt5.qwt_2.00.00_amd64.deb || exception
-	else
-		echo "==== Error: No PyQt-Qwt package available for $distro_name $distro_version, please try: $0 --source ===="
-		printf "==== Error: No PyQt-Qwt package available for $distro_name $distro_version, please try: $0 --source ====\n"
-		exception
-	fi
-fi
-
-# Astropy =< 4.1 and scipy =< 1.5.2 are needed for Tigger on Ubuntu 18.04 and Python 3.6
-if [[ $distro_version == "1804" ]]
-then
-  # check if Python 3.6 in use
-  python_version=`python3 -c "import sys; print(''.join(map(str, sys.version_info[:2])))"`
-  if [[ $python_version == "36" ]]
-  then
-    echo "==== Ubuntu 18.04 and Python 3.6 detected, adjusting package versions... ===="
-    printf "==== Ubuntu 18.04 and Python 3.6 detected, adjusting package versions... ====\n"
-
-    # check if Astropy version is already 4.1
-    # shellcheck disable=SC2006
-    # shellcheck disable=SC2034
-    astropy_version=`pip3 list|grep astropy|awk '{print $2}'|sed -e 's/\.//g'`
-    if [[ "$astropy_version" -ne "41" ]]
-    then
-      pip3 uninstall -y astropy || exception
-      pip3 install -q astropy==4.1 || exception
-    fi
-
-    # check if scipy version is already 1.5.2
-    # shellcheck disable=SC2034
-    scipy_version=`pip3 list|grep scipy|awk '{print $2}'|sed -e 's/\.//g'`
-    if [[ "$scipy_version" -ne "152" ]]
-    then
-      pip3 uninstall -y scipy || exception
-      pip3 install -q scipy==1.5.2 || exception
-    fi
-  fi
-fi
-
-# install Tigger
-if [[ $VIRTUAL_ENV == "" ]]
-then
-  python3 setup.py install --user 1>>$log_file 2>>$error_file && echo "==== Tigger installation complete! \o/ ====" || exception
-else
-  pip3 install -q vext.pyqt5 || exception
-  pip3 install . 1>>$log_file 2>>$error_file && echo "==== Tigger installation complete! \o/ ====" || exception
-fi
+#!/bin/bash
+
+log_file=tigger_installer.log
+error_file=tigger_installer.err
+
+# custom redirection
+exec 3>&1
+
+# redirect stdout/stderr to a file
+exec >$log_file 2> $error_file
+
+# function echo to show echo output on terminal
+echo() {
+   # call actual echo command and redirect output to custom redirect
+   command echo "$@" >&3
+}
+
+echo "==== Tigger v1.6.0 - Ubuntu install script ===="
+echo "==== Log file: $log_file ===="
+echo "==== Error log: $error_file ===="
+printf "==== Tigger v1.6.0 - Ubuntu install script ====\n"
+
+# sudo runner by default
+sudo_runner="sudo"
+
+# sudo runner by default
+apt_runner="apt -y install"
+
+# install via packages by default
+build_type="package"
+
+# install only Tigger GUI by default
+install_type="normal"
+
+# store the location of this dir
+tigger_pwd="${PWD}"
+
+# exception handling
+exception() {
+  echo ""
+  echo "********************************* ERROR ****************************************"
+	echo "**** Tigger installation script encountered an error"
+	echo "**** Please check the log files $log_file and $error_file"
+	echo "**** Ending Tigger installation script ¯\_(ツ)_/¯"
+  echo "********************************************************************************"
+  echo ""
+	exit 1
+	}
+
+# display help
+display_usage() {
+	echo -e "\nUsage: $0 [OPTION]\n"
+	echo -e "-s, --source     install PyQt-Qwt from source\n"
+	echo -e "-ns, --no-sudo     install without sudo. You should be su\n"
+  echo -e "-dai, --docker-apt-installer     specify docker apt installer"
+	}
+
+# check whether user had supplied -h or --help.
+if [[ ( $1 == "--help") ||  $1 == "-h" ]]
+then
+	display_usage
+	exit 0
+fi
+
+# if source build selected then set build type
+if [[ ( $1 == "--source") ||  $1 == "-s" ]]
+then
+	build_type="source"
+fi
+
+# if no-sudo is specified then remove sudo - assume user is su
+if [[ ( $1 == "--no-sudo") ||  $1 == "-ns" ]]
+then
+	sudo_runner=""
+fi
+
+# if source build selected then set build type
+if [[ ( $1 == "--docker-apt-installer") ||  $1 == "-dai" ]]
+then
+	apt_runner="docker-apt-install"
+fi
+
+# identify if running on Ubuntu and which version
+if [[ -n "$(command -v lsb_release)" ]]
+then
+	distro_name=$(lsb_release -s -d|awk '{print $1}')
+
+	if [[ $distro_name == "Ubuntu" ]]
+	then
+		distro_version=$(lsb_release -rs|sed -e 's/\.//g')
+	else
+		echo "==== Error: Ubuntu Linux not detected, stopping installation ===="
+		printf "==== Error: Ubuntu Linux not detected, stopping installation ====\n"
+		exception
+	fi
+else
+	echo "==== Error: Unable to detect Linux distribution, stopping installation ===="
+	printf "==== Error: Unable to detect Linux distribution, stopping installation ====\n"
+	exception
+fi
+
+echo "==== Installer has detected Linux distribution as $distro_name $distro_version ===="
+printf "==== Installer has detected Linux distribution as $distro_name $distro_version ====\n"
+
+# check for pip3 and install if need be
+if command -v pip3 > /dev/null 
+then
+  if [[ $VIRTUAL_ENV == "" ]]
+  then
+    echo "==== Installer found pip3... ===="
+    printf "==== Installer found pip3... ====\n"
+  else
+    echo "==== Installer did not find pip3... ===="
+    printf "==== Installer did not find pip3... ====\n"
+    $sudo_runner $apt_runner python3-setuptools python3-pip 2>>$error_file || exception
+  fi
+else
+	echo "==== Installer did not find pip3... ===="
+	printf "==== Installer did not find pip3... ====\n"
+	install_type="fullstack"
+	$sudo_runner $apt_runner python3-setuptools python3-pip 2>>$error_file || exception
+fi
+
+# check for astro-tigger-lsm
+tigger_lsm=`pip3 list|grep astro-tigger-lsm|awk '{print $1}'`
+if [[ $tigger_lsm == "astro-tigger-lsm" ]]
+then
+	echo "==== Installer found astro-tigger-lsm dependency... ===="
+	printf "==== Installer found astro-tigger-lsm dependency... ====\n"
+	tigger_lsm_version=`pip3 list|grep astro-tigger-lsm|awk '{print $2}'|sed -e 's/\.//g'`
+	
+	if [[ "$tigger_lsm_version" -lt "170" ]]
+	then
+		echo "==== Installer fullstack mode - astro-tigger-lsm version is less than 1.7.0... ===="
+		printf "==== Installer fullstack mode - astro-tigger-lsm version is less than 1.7.0... ====\n"
+		pip3 uninstall -y astro_tigger_lsm 2>>$error_file || exception
+		install_type="fullstack"
+	fi
+else
+	install_type="fullstack"
+	echo "==== Installer fullstack mode - astro-tigger-lsm not found... ===="
+	printf "==== Installer fullstack mode - astro-tigger-lsm not found... ====\n"
+fi	
+
+# install astro-tigger-lsm
+if [[ $install_type == "fullstack" ]]
+then
+  if [[ $build_type == "source" ]] || [[ $distro_version == "1804" ]]
+  then
+    echo "==== Installing Tigger-LSM dependency from source... ===="
+    printf "==== Installing Tigger-LSM dependency from source... ====\n"
+    $sudo_runner $apt_runner git 2>>$error_file || exception
+    cd /tmp || exception
+    rm -rf tigger-lsm
+    git clone https://github.com/ska-sa/tigger-lsm.git 1>>$log_file 2>>$error_file || exception
+    cd tigger-lsm || exception
+
+    if [[ $distro_version == "1804" ]]
+    then
+      $sudo_runner $apt_runner libboost-python-dev casacore* 2>>$error_file || exception
+      pip3 install -q astropy==4.1 || exception
+      pip3 install -q scipy==1.5.2 || exception
+    fi
+
+    python3 setup.py install --user 1>>$log_file 2>>$error_file || exception
+    cd /tmp || exception
+    cd "${tigger_pwd}" || exception
+  elif [[ $build_type == "package" ]]
+  then
+    echo "==== Installing Tigger-LSM dependency from pip3... ===="
+    printf "==== Installing Tigger-LSM dependency from pip3... ====\n"
+    pip3 install -q astro_tigger_lsm==1.7.0 || exception
+  fi
+fi
+
+echo "==== Installing package dependencies... ===="
+printf "==== Installing package dependencies... ====\n"
+
+# install Tigger deps
+$sudo_runner $apt_runner python3-pyqt5.qtsvg python3-pyqt5.qtopengl libqwt-qt5-6 2>>$error_file || exception
+
+# compile PyQt-Qwt
+if [[ $build_type == "source" ]]
+then
+    # install PyQt-Qwt deps
+    $sudo_runner $apt_runner pyqt5-dev pyqt5-dev-tools python3-pyqt5 libqwt-qt5-dev libqwt-headers libqt5opengl5-dev libqt5svg5-dev g++ dpkg-dev git 2>>$error_file || exception
+	if [[ $distro_version == "2104" ]]
+  then
+		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
+		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
+        $sudo_runner $apt_runner sip5-tools 2>>$error_file || exception
+		cd /tmp || exception
+		rm -rf PyQt-Qwt
+		git clone https://github.com/razman786/PyQt-Qwt.git || exception
+		cd PyQt-Qwt || exception
+		QT_SELECT=qt5 python3 configure.py --qwt-incdir=/usr/include/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
+		make -j4 || exception
+		$sudo_runner make install || exception
+		cd /tmp || exception
+		cd "${tigger_pwd}" || exception
+	elif [[ $distro_version == "2004" ]]
+	then
+		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
+		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
+		cd /tmp || exception
+		rm -rf PyQt-Qwt
+		git clone https://github.com/razman786/PyQt-Qwt.git || exception
+		cd PyQt-Qwt || exception
+		QT_SELECT=qt5 python3 configure.py --qwt-incdir=/usr/include/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
+		make -j4 || exception
+		$sudo_runner make install || exception
+		cd /tmp || exception
+		cd "${tigger_pwd}" || exception
+	elif [[ $distro_version == "1804" ]]
+	then
+		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
+		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
+		cd /tmp || exception
+		rm -rf PyQt-Qwt
+		git clone https://github.com/razman786/PyQt-Qwt.git || exception
+		cd PyQt-Qwt || exception
+		git checkout ubuntu_18_04 || exception
+		cp -a /usr/include/qwt header || exception
+		cp header/qwt*.h header/qwt/ || exception
+		QT_SELECT=qt5 python3 configure.py --qwt-incdir=header/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
+		make -j4 || exception
+		$sudo_runner make install || exception
+		cd /tmp || exception
+		cd "${tigger_pwd}" || exception
+    else
+		echo "==== Compiling PyQt-Qwt for $distro_name $distro_version... ===="
+		printf "==== Compiling PyQt-Qwt for $distro_name $distro_version... ====\n"
+		cd /tmp || exception
+		rm -rf PyQt-Qwt
+		git clone https://github.com/razman786/PyQt-Qwt.git || exception
+		cd PyQt-Qwt || exception
+		QT_SELECT=qt5 python3 configure.py --qwt-incdir=/usr/include/qwt --qwt-libdir=/usr/lib --qwt-lib=qwt-qt5 || exception
+		make -j4 || exception
+		$sudo_runner make install || exception
+		cd /tmp || exception
+		cd "${tigger_pwd}" || exception
+	fi
+fi
+
+# install PyQt-Qwt package
+if [[ $build_type == "package" ]]
+then
+	if [[ $distro_version == "2104" ]]
+	then
+		echo "==== Installing PyQwt for $distro_name $distro_version... ===="
+		printf "==== Installing PyQwt for $distro_name $distro_version... ====\n"
+		$sudo_runner dpkg -i debian_pkgs/ubuntu_21_04_deb_pkg/python3-pyqt5.qwt_2.00.00-1_amd64.deb || exception
+	elif [[ $distro_version == "2004" ]]
+	then
+		echo "==== Installing PyQwt for $distro_name $distro_version... ===="
+		printf "==== Installing PyQwt for $distro_name $distro_version... ====\n"
+		$sudo_runner dpkg -i debian_pkgs/ubuntu_20_04_deb_pkg/python3-pyqt5.qwt_2.00.00-1build1_amd64.deb || exception
+	elif [[ $distro_version == "1804" ]]
+	then
+		echo "==== Installing PyQwt for $distro_name $distro_version... ===="
+		printf "==== Installing PyQwt for $distro_name $distro_version... ====\n"
+		$sudo_runner dpkg -i debian_pkgs/ubuntu_18_04_deb_pkg/python3-pyqt5.qwt_2.00.00_amd64.deb || exception
+	else
+		echo "==== Error: No PyQt-Qwt package available for $distro_name $distro_version, please try: $0 --source ===="
+		printf "==== Error: No PyQt-Qwt package available for $distro_name $distro_version, please try: $0 --source ====\n"
+		exception
+	fi
+fi
+
+# Astropy =< 4.1 and scipy =< 1.5.2 are needed for Tigger on Ubuntu 18.04 and Python 3.6
+if [[ $distro_version == "1804" ]]
+then
+  # check if Python 3.6 in use
+  python_version=`python3 -c "import sys; print(''.join(map(str, sys.version_info[:2])))"`
+  if [[ $python_version == "36" ]]
+  then
+    echo "==== Ubuntu 18.04 and Python 3.6 detected, adjusting package versions... ===="
+    printf "==== Ubuntu 18.04 and Python 3.6 detected, adjusting package versions... ====\n"
+
+    # check if Astropy version is already 4.1
+    # shellcheck disable=SC2006
+    # shellcheck disable=SC2034
+    astropy_version=`pip3 list|grep astropy|awk '{print $2}'|sed -e 's/\.//g'`
+    if [[ "$astropy_version" -ne "41" ]]
+    then
+      pip3 uninstall -y astropy || exception
+      pip3 install -q astropy==4.1 || exception
+    fi
+
+    # check if scipy version is already 1.5.2
+    # shellcheck disable=SC2034
+    scipy_version=`pip3 list|grep scipy|awk '{print $2}'|sed -e 's/\.//g'`
+    if [[ "$scipy_version" -ne "152" ]]
+    then
+      pip3 uninstall -y scipy || exception
+      pip3 install -q scipy==1.5.2 || exception
+    fi
+  fi
+fi
+
+# install Tigger
+if [[ $VIRTUAL_ENV == "" ]]
+then
+  python3 setup.py install --user 1>>$log_file 2>>$error_file && echo "==== Tigger installation complete! \o/ ====" || exception
+else
+  pip3 install -q vext.pyqt5 || exception
+  pip3 install . 1>>$log_file 2>>$error_file && echo "==== Tigger installation complete! \o/ ====" || exception
+fi
--- tigger-1.6.0.orig/setup.py
+++ tigger-1.6.0/setup.py
@@ -1,48 +1,48 @@
-#!/usr/bin/env python
-
-from __future__ import print_function
-from setuptools import setup, find_packages
-from pathlib import Path
-
-__version__ = "1.6.0"
-
-# PyQt (5.15.x) has not been added here are it needs to be installed via apt-get instead to support Qwt.
-# requirements below do not have versions for upstream packaging processes, but tested and compatible versions are given
-requirements = [
-    'numpy',  # tested with version >=1.19.4
-    'scipy',  # tested with versions 1.5.2 for Python 3.6 and >=1.6.2
-    'astlib',  # tested with version 0.11.6
-    'astropy',  # tested with 4.1 and 4.2
-    'astro_tigger_lsm==1.7.0',  # PyQt5 version of astro-tigger-lsm
-    'configparser',  # tested with version 5.0.1
-]
-
-scripts = [
-    'TigGUI/tigger',
-]
-
-package_data = {'TigGUI': [
-        'icons/*.png',
-        'tigger.conf',
-    ]
-}
-
-
-setup(
-    name="astro-tigger",
-    version=__version__,
-    packages=find_packages(),
-    scripts=scripts,
-    package_data=package_data,
-    description="yet another FITS image viewer",
-    author="Oleg Smirnov",
-    author_email="osmirnov@gmail.com",
-    url="https://github.com/ska-sa/tigger",
-    python_requires='>=3.6',
-    install_requires=requirements,
-    data_files=[
-        (f"{Path.home()}/.local/share/applications", ['desktop/tigger.desktop']),
-        (f"{Path.home()}/.local/share/icons", ['TigGUI/icons/tigger_logo.png']),
-    ],
-)
-
+#!/usr/bin/env python
+
+from __future__ import print_function
+from setuptools import setup, find_packages
+from pathlib import Path
+
+__version__ = "1.6.0"
+
+# PyQt (5.15.x) has not been added here are it needs to be installed via apt-get instead to support Qwt.
+# requirements below do not have versions for upstream packaging processes, but tested and compatible versions are given
+requirements = [
+    'numpy',  # tested with version >=1.19.4
+    'scipy',  # tested with versions 1.5.2 for Python 3.6 and >=1.6.2
+    'astlib',  # tested with version 0.11.6
+    'astropy',  # tested with 4.1 and 4.2
+    'astro_tigger_lsm==1.7.0',  # PyQt5 version of astro-tigger-lsm
+    'configparser',  # tested with version 5.0.1
+]
+
+scripts = [
+    'TigGUI/tigger',
+]
+
+package_data = {'TigGUI': [
+        'icons/*.png',
+        'tigger.conf',
+    ]
+}
+
+
+setup(
+    name="astro-tigger",
+    version=__version__,
+    packages=find_packages(),
+    scripts=scripts,
+    package_data=package_data,
+    description="yet another FITS image viewer",
+    author="Oleg Smirnov",
+    author_email="osmirnov@gmail.com",
+    url="https://github.com/ska-sa/tigger",
+    python_requires='>=3.6',
+    install_requires=requirements,
+    data_files=[
+        (f"{Path.home()}/.local/share/applications", ['desktop/tigger.desktop']),
+        (f"{Path.home()}/.local/share/icons", ['TigGUI/icons/tigger_logo.png']),
+    ],
+)
+
--- tigger-1.6.0.orig/test-files/cat.gaul
+++ tigger-1.6.0/test-files/cat.gaul
@@ -1,23 +1,23 @@
-# Gaussian list for star_model_image.fits
-# Generated by PyBDSM version 1.8.15
-# Reference frequency of the detection ("ch0") image: 7.00069e+08 Hz
-# Equinox : 2000.0 
-
-# Gaus_id Isl_id Source_id Wave_id RA E_RA DEC E_DEC Total_flux E_Total_flux Peak_flux E_Peak_flux Xposn E_Xposn Yposn E_Yposn Maj E_Maj Min E_Min PA E_PA Maj_img_plane E_Maj_img_plane Min_img_plane E_Min_img_plane PA_img_plane E_PA_img_plane DC_Maj E_DC_Maj DC_Min E_DC_Min DC_PA E_DC_PA DC_Maj_img_plane E_DC_Maj_img_plane DC_Min_img_plane E_DC_Min_img_plane DC_PA_img_plane E_DC_PA_img_plane Isl_Total_flux E_Isl_Total_flux Isl_rms Isl_mean Resid_Isl_rms Resid_Isl_mean S_Code
-   0    0    0    0 0.03847457767840 0.00002589677416 -29.99998767854469 0.00003389458358 0.00985300829194 0.00039778292423 0.00942525689549 0.00022224018456 153.64107273548893 0.07955487349968 256.02066779889475 0.10412416319887 0.00317122925722 0.00008013490064 0.00275255657104 0.00006056210696 7.80723369130559 7.20984600298621 0.00317122924691 0.00008013490043 0.00275255611393 0.00006056209686 7.82647087375732 7.22908318543794 0.00084042020377 0.00008013490064 0.00000000000000 0.00006056210696 120.26207505369030 7.20984600298621 0.00084042009776 0.00008013490043 0.00000000000000 0.00006056209686 120.28131223614201 7.22908318543794 0.00944208736913 0.00030808432495 0.00022069596162 -0.00000024356586 0.00015068057110 0.00000295370364    S
-   1    1    1    0 0.03854742998365 0.00002274956090 -30.03336020549165 0.00003188721810 0.00993450956039 0.00037757585324 0.01005905869897 0.00021804093622 153.48175848881215 0.06988663547057 153.50021147472950 0.09795752005239 0.00320371353623 0.00007752541211 0.00257409000436 0.00004997982279 18.97029097408818 4.41957811726725 0.00320371265821 0.00007752539694 0.00257408983619 0.00004997981563 18.98958402998144 4.43887117316051 0.00000000000000 0.00007752541211 0.00000000000000 0.00004997982279 0.00000000000000 4.41957811726725 0.00000000000000 0.00007752539694 0.00000000000000 0.00004997981563 0.00000000000000 4.43887117316051 0.00939704536239 0.00028700101336 0.00022069594706 -0.00000024356586 0.00012890939252 -0.00000696587767    S
-   2    2    2    0 0.03849209931602 0.00002241366657 -29.96668446084593 0.00003240501749 0.00986018496807 0.00037886652190 0.00994854402555 0.00021865185062 153.56010917190144 0.06885476778896 358.32812537858973 0.09954819982501 0.00317012609792 0.00007681169113 0.00261058184090 0.00005204437361 8.92411693713667 4.99970791430446 0.00317012572648 0.00007681168042 0.00261058126292 0.00005204436325 8.94334350921228 5.01893448638007 0.00000000000000 0.00007681169113 0.00000000000000 0.00005204437361 0.00000000000000 4.99970791430446 0.00000000000000 0.00007681168042 0.00000000000000 0.00005204436325 0.00000000000000 5.01893448638007 0.00949665926424 0.00027831661180 0.00022069594706 -0.00000024356586 0.00008429589798 -0.00000681090933    S
-   3    3    3    0 0.01923486303710 0.00002417734300 -30.01667953989281 0.00003549950552 0.01004605240219 0.00039921535306 0.00956356067365 0.00022149645195 204.83559653936476 0.07427279333042 204.75616005085953 0.10905447714721 0.00328913427659 0.00008438430707 0.00266675072804 0.00005575664714 10.46489472129456 4.93474482213837 0.00328913408698 0.00008438430289 0.00266675065546 0.00005575664519 10.47451695673713 4.94436705758095 0.00090888450284 0.00008438430707 0.00035359836669 0.00005575664714 179.82083478027585 4.93474482213837 0.00090888446453 0.00008438430289 0.00035359835165 0.00005575664519 179.83045701571842 4.94436705758095 0.00963717104654 0.00027137000382 0.00022069594706 -0.00000024356586 0.00011170587095 -0.00000261234027    S
-   4    4    4    0 0.01923147505605 0.00002214264204 -29.98335901262042 0.00003134842636 0.00973005865215 0.00037184774705 0.01002112422791 0.00021769696054 204.82742969189295 0.06802219251236 307.11681846024845 0.09630236238227 0.00311747119229 0.00007424644269 0.00260066712262 0.00005153276022 8.54097224758141 5.27071272808418 0.00311747109914 0.00007424644013 0.00260066698020 0.00005153275764 8.55058310121255 5.28032358171532 0.00000000000000 0.00007424644269 0.00000000000000 0.00005153276022 0.00000000000000 5.27071272808418 0.00000000000000 0.00007424644013 0.00000000000000 0.00005153275764 0.00000000000000 5.28032358171532 0.00942907556021 0.00028413570686 0.00022069594706 -0.00000024356586 0.00008104441804 -0.00000375436798    S
-   5    5    5    0 0.01929494191101 0.00002137158784 -30.00001711887410 0.00003319122338 0.00988268125078 0.00037707499706 0.01001989373947 0.00021770607757 204.66716673692898 0.06565351374098 255.94308910402751 0.10196343908580 0.00322440151452 0.00007877764993 0.00255417554101 0.00004935279031 9.22199901254411 4.19330631809749 0.00322440151051 0.00007877764991 0.00255417543499 0.00004935278820 9.23164644318571 4.20295374873909 0.00000000000000 0.00007877764993 0.00000000000000 0.00004935279031 0.00000000000000 4.19330631809749 0.00000000000000 0.00007877764991 0.00000000000000 0.00004935278820 0.00000000000000 4.20295374873909 0.00951648872167 0.00027634969124 0.00022069596162 -0.00000024356586 0.00014376675244 0.00000818041008    S
-   6    6    6    0 0.00002309713595 0.00002524759775 -29.98335259509523 0.00003231251795 0.00986007185214 0.00038886405310 0.00967007262122 0.00022069155373 255.93854138029783 0.07756062027480 307.14082714165448 0.09926405095894 0.00316141342432 0.00007811084694 0.00269312949832 0.00005677264608 19.20984513113720 6.22700398407559 0.00316141330504 0.00007811084367 0.00269312948565 0.00005677264605 19.20985667383975 6.22701552677814 0.00000000000000 0.00007811084694 0.00000000000000 0.00005677264608 0.00000000000000 6.22700398407559 0.00000000000000 0.00007811084367 0.00000000000000 0.00005677264605 0.00000000000000 6.22701552677814 0.00958833671030 0.00028983798287 0.00022069594706 -0.00000024356586 0.00011148610065 0.00000571017790    S
-   7    7    7    0 359.99996600685455 0.00002737467021 -29.96670389265736 0.00003281298129 0.01019990571724 0.00040586202791 0.00954199174020 0.00022348548831 256.09046671270903 0.08409498682626 358.28563598596730 0.10080146142085 0.00319189319864 0.00007969450637 0.00279638530063 0.00006143806945 22.60789201123372 7.65806496667908 0.00319189273855 0.00007969449315 0.00279638523083 0.00006143806927 22.60787503774696 7.65804799319232 0.00000000000000 0.00007969450637 0.00000000000000 0.00006143806945 0.00000000000000 7.65806496667908 0.00000000000000 0.00007969449315 0.00000000000000 0.00006143806927 0.00000000000000 7.65804799319232 0.00993011297951 0.00026007931569 0.00022069596162 -0.00000024356586 0.00012532362598 0.00000832801561    S
-   8    8    8    0 0.00000096613245 0.00002073990132 -30.03329371107666 0.00003217776354 0.00977951853090 0.00036958855456 0.01013656883677 0.00021661975960 255.99743053494615 0.06371297674080 153.72172532831235 0.09885007290003 0.00317563813887 0.00007608209308 0.00253678541238 0.00004835556700 6.69975417138157 4.26816741724891 0.00317563760962 0.00007608208031 0.00253678540638 0.00004835556694 6.69975465493825 4.26816790080559 0.00000000000000 0.00007608209308 0.00000000000000 0.00004835556700 0.00000000000000 4.26816741724891 0.00000000000000 0.00007608208031 0.00000000000000 0.00004835556694 0.00000000000000 4.26816790080559 0.00952418419331 0.00026007931919 0.00022069596162 -0.00000024356589 0.00007195254875 -0.00000471087651    S
-   9    9    9    0 359.99997373773095 0.00002107439323 -30.01664448577498 0.00003260316376 0.00975520829130 0.00037158802609 0.01005159717418 0.00021689414958 256.06985720813179 0.06474053599796 204.86814041037101 0.10015691481041 0.00319051045071 0.00007729048315 0.00253997525416 0.00004881903144 8.55647213827233 4.25262234329905 0.00319051031871 0.00007729047988 0.00253997525154 0.00004881903146 8.55645900909244 4.25260921411916 0.00000000000000 0.00007729048315 0.00000000000000 0.00004881903144 0.00000000000000 4.25262234329905 0.00000000000000 0.00007729047988 0.00000000000000 0.00004881903146 0.00000000000000 4.25260921411916 0.00947125646428 0.00026216834326 0.00022069596162 -0.00000024356589 0.00007420581824 -0.00000423506663    S
-  10   10   10    0 0.00001065010151 0.00002307728397 -29.99999028100222 0.00003189292923 0.00978400739114 0.00037822521718 0.00989142677926 0.00021881394592 255.97166614728530 0.07089341637185 256.02985675976828 0.09797507861228 0.00313855145398 0.00007585948460 0.00263158102421 0.00005328049192 11.42111764287324 5.52431944913821 0.00313855145358 0.00007585948462 0.00263158102397 0.00005328049194 11.42112297007699 5.52432477634196 0.00000000000000 0.00007585948460 0.00000000000000 0.00005328049192 0.00000000000000 5.52431944913821 0.00000000000000 0.00007585948462 0.00000000000000 0.00005328049194 0.00000000000000 5.52432477634196 0.00940430959924 0.00024606873445 0.00022069594706 -0.00000024356586 0.00008554248052 -0.00000378870368    S
-  11   11   11    0 359.98074644763534 0.00002341077198 -30.01670054639063 0.00003083280805 0.00985950776580 0.00037811636560 0.00997300615913 0.00021920875308 307.21410589927893 0.07191788771428 204.69161974443892 0.09471838285382 0.00308739054116 0.00007295158090 0.00267378068190 0.00005466964474 8.45650106675780 6.63697556048279 0.00308739044768 0.00007295157850 0.00267378053551 0.00005466964187 8.44686946935185 6.62734396307685 0.00000000000000 0.00007295158090 0.00000000000000 0.00005466964474 0.00000000000000 6.63697556048279 0.00000000000000 0.00007295157850 0.00000000000000 0.00005466964187 0.00000000000000 6.62734396307685 0.00952309008522 0.00028124121944 0.00022069596162 -0.00000024356586 0.00010962496890 0.00000104021501    S
-  12   12   12    0 359.98073938687276 0.00002382290140 -30.00001202726550 0.00003190743144 0.00981520001162 0.00038272176127 0.00979729467770 0.00021991322510 307.24150658549945 0.07318394908337 255.95874588982679 0.09801962997823 0.00311176010032 0.00007514288560 0.00268828346767 0.00005608976935 1.15309105013193 6.67459144466642 0.00311176009988 0.00007514288556 0.00268828335356 0.00005608976703 1.14346078726355 6.66496118179804 0.00000000000000 0.00007514288560 0.00000000000000 0.00005608976935 0.00000000000000 6.67459144466642 0.00000000000000 0.00007514288556 0.00000000000000 0.00005608976703 0.00000000000000 6.66496118179804 0.00953457187845 0.00025585010532 0.00022069596162 -0.00000024356589 0.00011925012950 0.00000260595493    S
-  13   13   13    0 359.98073119548098 0.00002461546802 -29.98332343238613 0.00003206814689 0.00968628932146 0.00038263402853 0.00967040594770 0.00021978651826 307.27191774636265 0.07561871381206 307.22610424758545 0.09851334364432 0.00312610544578 0.00007679543862 0.00267545291813 0.00005625721106 15.50596645442413 6.37816220117345 0.00312610524474 0.00007679543465 0.00267545286277 0.00005625720916 15.49633695024626 6.36853269699557 0.00000000000000 0.00007679543862 0.00000000000000 0.00005625721106 0.00000000000000 6.37816220117345 0.00000000000000 0.00007679543465 0.00000000000000 0.00005625720916 0.00000000000000 6.36853269699557 0.00935563347144 0.00026424085420 0.00022069596162 -0.00000024356586 0.00012317138317 -0.00000164424603    S
-  14   14   14    0 359.96149440473954 0.00002339070473 -29.99998510478488 0.00003105447374 0.00976311970721 0.00037687550867 0.00991086992710 0.00021897509206 358.44145001997691 0.07185622964167 256.02854667094039 0.09539934562926 0.00308628120408 0.00007341929506 0.00266519865245 0.00005469161540 7.68870509505959 6.55887277703077 0.00308628119435 0.00007341929490 0.00266519820890 0.00005469160625 7.66945239973197 6.53962008170315 0.00000000000000 0.00007341929506 0.00000000000000 0.00005469161540 0.00000000000000 6.55887277703077 0.00000000000000 0.00007341929490 0.00000000000000 0.00005469160625 0.00000000000000 6.53962008170315 0.00964793322505 0.00027733490168 0.00022069596162 -0.00000024356586 0.00014686933719 0.00000915143301    S
-  15   15   15    0 359.96149646671063 0.00002452072726 -30.03334291553130 0.00003038956795 0.00997489085640 0.00038275986902 0.00995662855251 0.00022009306344 358.40151459624161 0.07532765910864 153.55336547031487 0.09335673876386 0.00308737392769 0.00007284580738 0.00270953602268 0.00005611354419 17.06420478169193 7.32201811939025 0.00308737369739 0.00007284579816 0.00270953530671 0.00005611353230 17.04493370756256 7.30274704526088 0.00000000000000 0.00007284580738 0.00000000000000 0.00005611354419 0.00000000000000 7.32201811939025 0.00000000000000 0.00007284579816 0.00000000000000 0.00005611353230 0.00000000000000 7.30274704526088 0.00974966525073 0.00025263173847 0.00022069596162 -0.00000024356586 0.00013337386190 0.00000222492667    S
-  16   16   16    0 359.96160627560647 0.00002365770243 -29.96668228595248 0.00003329457154 0.01002425186577 0.00038817671847 0.00984491742194 0.00021980556016 358.17808570680921 0.07267644583717 358.33489448029889 0.10228090930626 0.00324361347992 0.00008048308414 0.00262119366595 0.00005265950695 17.39917608815528 4.71094666791971 0.00324361261930 0.00008048306833 0.00262119347614 0.00005265949955 17.37999865169724 4.69176923146167 0.00077504212351 0.00008048308414 0.00000000000000 0.00005265950695 36.22974381136271 4.71094666791971 0.00077504186797 0.00008048306833 0.00000000000000 0.00005265949955 36.21056637490467 4.69176923146167 0.00961198453152 0.00026112592027 0.00022069596162 -0.00000024356589 0.00009084700287 -0.00000473210730    S
+# Gaussian list for star_model_image.fits
+# Generated by PyBDSM version 1.8.15
+# Reference frequency of the detection ("ch0") image: 7.00069e+08 Hz
+# Equinox : 2000.0 
+
+# Gaus_id Isl_id Source_id Wave_id RA E_RA DEC E_DEC Total_flux E_Total_flux Peak_flux E_Peak_flux Xposn E_Xposn Yposn E_Yposn Maj E_Maj Min E_Min PA E_PA Maj_img_plane E_Maj_img_plane Min_img_plane E_Min_img_plane PA_img_plane E_PA_img_plane DC_Maj E_DC_Maj DC_Min E_DC_Min DC_PA E_DC_PA DC_Maj_img_plane E_DC_Maj_img_plane DC_Min_img_plane E_DC_Min_img_plane DC_PA_img_plane E_DC_PA_img_plane Isl_Total_flux E_Isl_Total_flux Isl_rms Isl_mean Resid_Isl_rms Resid_Isl_mean S_Code
+   0    0    0    0 0.03847457767840 0.00002589677416 -29.99998767854469 0.00003389458358 0.00985300829194 0.00039778292423 0.00942525689549 0.00022224018456 153.64107273548893 0.07955487349968 256.02066779889475 0.10412416319887 0.00317122925722 0.00008013490064 0.00275255657104 0.00006056210696 7.80723369130559 7.20984600298621 0.00317122924691 0.00008013490043 0.00275255611393 0.00006056209686 7.82647087375732 7.22908318543794 0.00084042020377 0.00008013490064 0.00000000000000 0.00006056210696 120.26207505369030 7.20984600298621 0.00084042009776 0.00008013490043 0.00000000000000 0.00006056209686 120.28131223614201 7.22908318543794 0.00944208736913 0.00030808432495 0.00022069596162 -0.00000024356586 0.00015068057110 0.00000295370364    S
+   1    1    1    0 0.03854742998365 0.00002274956090 -30.03336020549165 0.00003188721810 0.00993450956039 0.00037757585324 0.01005905869897 0.00021804093622 153.48175848881215 0.06988663547057 153.50021147472950 0.09795752005239 0.00320371353623 0.00007752541211 0.00257409000436 0.00004997982279 18.97029097408818 4.41957811726725 0.00320371265821 0.00007752539694 0.00257408983619 0.00004997981563 18.98958402998144 4.43887117316051 0.00000000000000 0.00007752541211 0.00000000000000 0.00004997982279 0.00000000000000 4.41957811726725 0.00000000000000 0.00007752539694 0.00000000000000 0.00004997981563 0.00000000000000 4.43887117316051 0.00939704536239 0.00028700101336 0.00022069594706 -0.00000024356586 0.00012890939252 -0.00000696587767    S
+   2    2    2    0 0.03849209931602 0.00002241366657 -29.96668446084593 0.00003240501749 0.00986018496807 0.00037886652190 0.00994854402555 0.00021865185062 153.56010917190144 0.06885476778896 358.32812537858973 0.09954819982501 0.00317012609792 0.00007681169113 0.00261058184090 0.00005204437361 8.92411693713667 4.99970791430446 0.00317012572648 0.00007681168042 0.00261058126292 0.00005204436325 8.94334350921228 5.01893448638007 0.00000000000000 0.00007681169113 0.00000000000000 0.00005204437361 0.00000000000000 4.99970791430446 0.00000000000000 0.00007681168042 0.00000000000000 0.00005204436325 0.00000000000000 5.01893448638007 0.00949665926424 0.00027831661180 0.00022069594706 -0.00000024356586 0.00008429589798 -0.00000681090933    S
+   3    3    3    0 0.01923486303710 0.00002417734300 -30.01667953989281 0.00003549950552 0.01004605240219 0.00039921535306 0.00956356067365 0.00022149645195 204.83559653936476 0.07427279333042 204.75616005085953 0.10905447714721 0.00328913427659 0.00008438430707 0.00266675072804 0.00005575664714 10.46489472129456 4.93474482213837 0.00328913408698 0.00008438430289 0.00266675065546 0.00005575664519 10.47451695673713 4.94436705758095 0.00090888450284 0.00008438430707 0.00035359836669 0.00005575664714 179.82083478027585 4.93474482213837 0.00090888446453 0.00008438430289 0.00035359835165 0.00005575664519 179.83045701571842 4.94436705758095 0.00963717104654 0.00027137000382 0.00022069594706 -0.00000024356586 0.00011170587095 -0.00000261234027    S
+   4    4    4    0 0.01923147505605 0.00002214264204 -29.98335901262042 0.00003134842636 0.00973005865215 0.00037184774705 0.01002112422791 0.00021769696054 204.82742969189295 0.06802219251236 307.11681846024845 0.09630236238227 0.00311747119229 0.00007424644269 0.00260066712262 0.00005153276022 8.54097224758141 5.27071272808418 0.00311747109914 0.00007424644013 0.00260066698020 0.00005153275764 8.55058310121255 5.28032358171532 0.00000000000000 0.00007424644269 0.00000000000000 0.00005153276022 0.00000000000000 5.27071272808418 0.00000000000000 0.00007424644013 0.00000000000000 0.00005153275764 0.00000000000000 5.28032358171532 0.00942907556021 0.00028413570686 0.00022069594706 -0.00000024356586 0.00008104441804 -0.00000375436798    S
+   5    5    5    0 0.01929494191101 0.00002137158784 -30.00001711887410 0.00003319122338 0.00988268125078 0.00037707499706 0.01001989373947 0.00021770607757 204.66716673692898 0.06565351374098 255.94308910402751 0.10196343908580 0.00322440151452 0.00007877764993 0.00255417554101 0.00004935279031 9.22199901254411 4.19330631809749 0.00322440151051 0.00007877764991 0.00255417543499 0.00004935278820 9.23164644318571 4.20295374873909 0.00000000000000 0.00007877764993 0.00000000000000 0.00004935279031 0.00000000000000 4.19330631809749 0.00000000000000 0.00007877764991 0.00000000000000 0.00004935278820 0.00000000000000 4.20295374873909 0.00951648872167 0.00027634969124 0.00022069596162 -0.00000024356586 0.00014376675244 0.00000818041008    S
+   6    6    6    0 0.00002309713595 0.00002524759775 -29.98335259509523 0.00003231251795 0.00986007185214 0.00038886405310 0.00967007262122 0.00022069155373 255.93854138029783 0.07756062027480 307.14082714165448 0.09926405095894 0.00316141342432 0.00007811084694 0.00269312949832 0.00005677264608 19.20984513113720 6.22700398407559 0.00316141330504 0.00007811084367 0.00269312948565 0.00005677264605 19.20985667383975 6.22701552677814 0.00000000000000 0.00007811084694 0.00000000000000 0.00005677264608 0.00000000000000 6.22700398407559 0.00000000000000 0.00007811084367 0.00000000000000 0.00005677264605 0.00000000000000 6.22701552677814 0.00958833671030 0.00028983798287 0.00022069594706 -0.00000024356586 0.00011148610065 0.00000571017790    S
+   7    7    7    0 359.99996600685455 0.00002737467021 -29.96670389265736 0.00003281298129 0.01019990571724 0.00040586202791 0.00954199174020 0.00022348548831 256.09046671270903 0.08409498682626 358.28563598596730 0.10080146142085 0.00319189319864 0.00007969450637 0.00279638530063 0.00006143806945 22.60789201123372 7.65806496667908 0.00319189273855 0.00007969449315 0.00279638523083 0.00006143806927 22.60787503774696 7.65804799319232 0.00000000000000 0.00007969450637 0.00000000000000 0.00006143806945 0.00000000000000 7.65806496667908 0.00000000000000 0.00007969449315 0.00000000000000 0.00006143806927 0.00000000000000 7.65804799319232 0.00993011297951 0.00026007931569 0.00022069596162 -0.00000024356586 0.00012532362598 0.00000832801561    S
+   8    8    8    0 0.00000096613245 0.00002073990132 -30.03329371107666 0.00003217776354 0.00977951853090 0.00036958855456 0.01013656883677 0.00021661975960 255.99743053494615 0.06371297674080 153.72172532831235 0.09885007290003 0.00317563813887 0.00007608209308 0.00253678541238 0.00004835556700 6.69975417138157 4.26816741724891 0.00317563760962 0.00007608208031 0.00253678540638 0.00004835556694 6.69975465493825 4.26816790080559 0.00000000000000 0.00007608209308 0.00000000000000 0.00004835556700 0.00000000000000 4.26816741724891 0.00000000000000 0.00007608208031 0.00000000000000 0.00004835556694 0.00000000000000 4.26816790080559 0.00952418419331 0.00026007931919 0.00022069596162 -0.00000024356589 0.00007195254875 -0.00000471087651    S
+   9    9    9    0 359.99997373773095 0.00002107439323 -30.01664448577498 0.00003260316376 0.00975520829130 0.00037158802609 0.01005159717418 0.00021689414958 256.06985720813179 0.06474053599796 204.86814041037101 0.10015691481041 0.00319051045071 0.00007729048315 0.00253997525416 0.00004881903144 8.55647213827233 4.25262234329905 0.00319051031871 0.00007729047988 0.00253997525154 0.00004881903146 8.55645900909244 4.25260921411916 0.00000000000000 0.00007729048315 0.00000000000000 0.00004881903144 0.00000000000000 4.25262234329905 0.00000000000000 0.00007729047988 0.00000000000000 0.00004881903146 0.00000000000000 4.25260921411916 0.00947125646428 0.00026216834326 0.00022069596162 -0.00000024356589 0.00007420581824 -0.00000423506663    S
+  10   10   10    0 0.00001065010151 0.00002307728397 -29.99999028100222 0.00003189292923 0.00978400739114 0.00037822521718 0.00989142677926 0.00021881394592 255.97166614728530 0.07089341637185 256.02985675976828 0.09797507861228 0.00313855145398 0.00007585948460 0.00263158102421 0.00005328049192 11.42111764287324 5.52431944913821 0.00313855145358 0.00007585948462 0.00263158102397 0.00005328049194 11.42112297007699 5.52432477634196 0.00000000000000 0.00007585948460 0.00000000000000 0.00005328049192 0.00000000000000 5.52431944913821 0.00000000000000 0.00007585948462 0.00000000000000 0.00005328049194 0.00000000000000 5.52432477634196 0.00940430959924 0.00024606873445 0.00022069594706 -0.00000024356586 0.00008554248052 -0.00000378870368    S
+  11   11   11    0 359.98074644763534 0.00002341077198 -30.01670054639063 0.00003083280805 0.00985950776580 0.00037811636560 0.00997300615913 0.00021920875308 307.21410589927893 0.07191788771428 204.69161974443892 0.09471838285382 0.00308739054116 0.00007295158090 0.00267378068190 0.00005466964474 8.45650106675780 6.63697556048279 0.00308739044768 0.00007295157850 0.00267378053551 0.00005466964187 8.44686946935185 6.62734396307685 0.00000000000000 0.00007295158090 0.00000000000000 0.00005466964474 0.00000000000000 6.63697556048279 0.00000000000000 0.00007295157850 0.00000000000000 0.00005466964187 0.00000000000000 6.62734396307685 0.00952309008522 0.00028124121944 0.00022069596162 -0.00000024356586 0.00010962496890 0.00000104021501    S
+  12   12   12    0 359.98073938687276 0.00002382290140 -30.00001202726550 0.00003190743144 0.00981520001162 0.00038272176127 0.00979729467770 0.00021991322510 307.24150658549945 0.07318394908337 255.95874588982679 0.09801962997823 0.00311176010032 0.00007514288560 0.00268828346767 0.00005608976935 1.15309105013193 6.67459144466642 0.00311176009988 0.00007514288556 0.00268828335356 0.00005608976703 1.14346078726355 6.66496118179804 0.00000000000000 0.00007514288560 0.00000000000000 0.00005608976935 0.00000000000000 6.67459144466642 0.00000000000000 0.00007514288556 0.00000000000000 0.00005608976703 0.00000000000000 6.66496118179804 0.00953457187845 0.00025585010532 0.00022069596162 -0.00000024356589 0.00011925012950 0.00000260595493    S
+  13   13   13    0 359.98073119548098 0.00002461546802 -29.98332343238613 0.00003206814689 0.00968628932146 0.00038263402853 0.00967040594770 0.00021978651826 307.27191774636265 0.07561871381206 307.22610424758545 0.09851334364432 0.00312610544578 0.00007679543862 0.00267545291813 0.00005625721106 15.50596645442413 6.37816220117345 0.00312610524474 0.00007679543465 0.00267545286277 0.00005625720916 15.49633695024626 6.36853269699557 0.00000000000000 0.00007679543862 0.00000000000000 0.00005625721106 0.00000000000000 6.37816220117345 0.00000000000000 0.00007679543465 0.00000000000000 0.00005625720916 0.00000000000000 6.36853269699557 0.00935563347144 0.00026424085420 0.00022069596162 -0.00000024356586 0.00012317138317 -0.00000164424603    S
+  14   14   14    0 359.96149440473954 0.00002339070473 -29.99998510478488 0.00003105447374 0.00976311970721 0.00037687550867 0.00991086992710 0.00021897509206 358.44145001997691 0.07185622964167 256.02854667094039 0.09539934562926 0.00308628120408 0.00007341929506 0.00266519865245 0.00005469161540 7.68870509505959 6.55887277703077 0.00308628119435 0.00007341929490 0.00266519820890 0.00005469160625 7.66945239973197 6.53962008170315 0.00000000000000 0.00007341929506 0.00000000000000 0.00005469161540 0.00000000000000 6.55887277703077 0.00000000000000 0.00007341929490 0.00000000000000 0.00005469160625 0.00000000000000 6.53962008170315 0.00964793322505 0.00027733490168 0.00022069596162 -0.00000024356586 0.00014686933719 0.00000915143301    S
+  15   15   15    0 359.96149646671063 0.00002452072726 -30.03334291553130 0.00003038956795 0.00997489085640 0.00038275986902 0.00995662855251 0.00022009306344 358.40151459624161 0.07532765910864 153.55336547031487 0.09335673876386 0.00308737392769 0.00007284580738 0.00270953602268 0.00005611354419 17.06420478169193 7.32201811939025 0.00308737369739 0.00007284579816 0.00270953530671 0.00005611353230 17.04493370756256 7.30274704526088 0.00000000000000 0.00007284580738 0.00000000000000 0.00005611354419 0.00000000000000 7.32201811939025 0.00000000000000 0.00007284579816 0.00000000000000 0.00005611353230 0.00000000000000 7.30274704526088 0.00974966525073 0.00025263173847 0.00022069596162 -0.00000024356586 0.00013337386190 0.00000222492667    S
+  16   16   16    0 359.96160627560647 0.00002365770243 -29.96668228595248 0.00003329457154 0.01002425186577 0.00038817671847 0.00984491742194 0.00021980556016 358.17808570680921 0.07267644583717 358.33489448029889 0.10228090930626 0.00324361347992 0.00008048308414 0.00262119366595 0.00005265950695 17.39917608815528 4.71094666791971 0.00324361261930 0.00008048306833 0.00262119347614 0.00005265949955 17.37999865169724 4.69176923146167 0.00077504212351 0.00008048308414 0.00000000000000 0.00005265950695 36.22974381136271 4.71094666791971 0.00077504186797 0.00008048306833 0.00000000000000 0.00005265949955 36.21056637490467 4.69176923146167 0.00961198453152 0.00026112592027 0.00022069596162 -0.00000024356589 0.00009084700287 -0.00000473210730    S
